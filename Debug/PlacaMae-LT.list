
PlacaMae-LT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022574  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001688  080227b0  080227b0  000327b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023e38  08023e38  00033e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023e40  08023e40  00033e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023e44  08023e44  00033e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  20000000  08023e48  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d148  20000248  08024090  00040248  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  2000d390  08024090  0004d390  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0004027e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000537b0  00000000  00000000  000402c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000087e1  00000000  00000000  00093a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bc0  00000000  00000000  0009c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000020f2  00000000  00000000  0009ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fcce  00000000  00000000  000a0f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004c4c4  00000000  00000000  000e0bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00164bf4  00000000  00000000  0012d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c5d8  00000000  00000000  00291c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  0029e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000248 	.word	0x20000248
 8000254:	00000000 	.word	0x00000000
 8000258:	08022794 	.word	0x08022794

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000024c 	.word	0x2000024c
 8000274:	08022794 	.word	0x08022794

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_ldivmod>:
 8000c90:	b97b      	cbnz	r3, 8000cb2 <__aeabi_ldivmod+0x22>
 8000c92:	b972      	cbnz	r2, 8000cb2 <__aeabi_ldivmod+0x22>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bfbe      	ittt	lt
 8000c98:	2000      	movlt	r0, #0
 8000c9a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c9e:	e006      	blt.n	8000cae <__aeabi_ldivmod+0x1e>
 8000ca0:	bf08      	it	eq
 8000ca2:	2800      	cmpeq	r0, #0
 8000ca4:	bf1c      	itt	ne
 8000ca6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000caa:	f04f 30ff 	movne.w	r0, #4294967295
 8000cae:	f000 ba03 	b.w	80010b8 <__aeabi_idiv0>
 8000cb2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	db09      	blt.n	8000cd2 <__aeabi_ldivmod+0x42>
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db1a      	blt.n	8000cf8 <__aeabi_ldivmod+0x68>
 8000cc2:	f000 f883 	bl	8000dcc <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4770      	bx	lr
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db1b      	blt.n	8000d14 <__aeabi_ldivmod+0x84>
 8000cdc:	f000 f876 	bl	8000dcc <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	f000 f865 	bl	8000dcc <__udivmoddi4>
 8000d02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0a:	b004      	add	sp, #16
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d12:	4770      	bx	lr
 8000d14:	4252      	negs	r2, r2
 8000d16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1a:	f000 f857 	bl	8000dcc <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_uldivmod>:
 8000d30:	b953      	cbnz	r3, 8000d48 <__aeabi_uldivmod+0x18>
 8000d32:	b94a      	cbnz	r2, 8000d48 <__aeabi_uldivmod+0x18>
 8000d34:	2900      	cmp	r1, #0
 8000d36:	bf08      	it	eq
 8000d38:	2800      	cmpeq	r0, #0
 8000d3a:	bf1c      	itt	ne
 8000d3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d40:	f04f 30ff 	movne.w	r0, #4294967295
 8000d44:	f000 b9b8 	b.w	80010b8 <__aeabi_idiv0>
 8000d48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d50:	f000 f83c 	bl	8000dcc <__udivmoddi4>
 8000d54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5c:	b004      	add	sp, #16
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_d2lz>:
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	2200      	movs	r2, #0
 8000d64:	2300      	movs	r3, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	460d      	mov	r5, r1
 8000d6a:	f7ff febb 	bl	8000ae4 <__aeabi_dcmplt>
 8000d6e:	b928      	cbnz	r0, 8000d7c <__aeabi_d2lz+0x1c>
 8000d70:	4620      	mov	r0, r4
 8000d72:	4629      	mov	r1, r5
 8000d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d78:	f000 b80a 	b.w	8000d90 <__aeabi_d2ulz>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d82:	f000 f805 	bl	8000d90 <__aeabi_d2ulz>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	bd38      	pop	{r3, r4, r5, pc}
 8000d8e:	bf00      	nop

08000d90 <__aeabi_d2ulz>:
 8000d90:	b5d0      	push	{r4, r6, r7, lr}
 8000d92:	2200      	movs	r2, #0
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <__aeabi_d2ulz+0x34>)
 8000d96:	4606      	mov	r6, r0
 8000d98:	460f      	mov	r7, r1
 8000d9a:	f7ff fc31 	bl	8000600 <__aeabi_dmul>
 8000d9e:	f7ff ff07 	bl	8000bb0 <__aeabi_d2uiz>
 8000da2:	4604      	mov	r4, r0
 8000da4:	f7ff fbb2 	bl	800050c <__aeabi_ui2d>
 8000da8:	2200      	movs	r2, #0
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <__aeabi_d2ulz+0x38>)
 8000dac:	f7ff fc28 	bl	8000600 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4630      	mov	r0, r6
 8000db6:	4639      	mov	r1, r7
 8000db8:	f7ff fa6a 	bl	8000290 <__aeabi_dsub>
 8000dbc:	f7ff fef8 	bl	8000bb0 <__aeabi_d2uiz>
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000dc4:	3df00000 	.word	0x3df00000
 8000dc8:	41f00000 	.word	0x41f00000

08000dcc <__udivmoddi4>:
 8000dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000dd2:	460d      	mov	r5, r1
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	460f      	mov	r7, r1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d146      	bne.n	8000e6a <__udivmoddi4+0x9e>
 8000ddc:	428a      	cmp	r2, r1
 8000dde:	4694      	mov	ip, r2
 8000de0:	d95e      	bls.n	8000ea0 <__udivmoddi4+0xd4>
 8000de2:	fab2 f382 	clz	r3, r2
 8000de6:	b143      	cbz	r3, 8000dfa <__udivmoddi4+0x2e>
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	f1c3 0220 	rsb	r2, r3, #32
 8000df0:	409f      	lsls	r7, r3
 8000df2:	409c      	lsls	r4, r3
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	4317      	orrs	r7, r2
 8000dfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dfe:	fa1f f58c 	uxth.w	r5, ip
 8000e02:	0c22      	lsrs	r2, r4, #16
 8000e04:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e0c:	fb01 f005 	mul.w	r0, r1, r5
 8000e10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x5e>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x5c>
 8000e22:	4290      	cmp	r0, r2
 8000e24:	f200 8134 	bhi.w	8001090 <__udivmoddi4+0x2c4>
 8000e28:	4639      	mov	r1, r7
 8000e2a:	1a12      	subs	r2, r2, r0
 8000e2c:	b2a4      	uxth	r4, r4
 8000e2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e36:	fb00 f505 	mul.w	r5, r0, r5
 8000e3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3e:	42a5      	cmp	r5, r4
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x88>
 8000e42:	eb1c 0404 	adds.w	r4, ip, r4
 8000e46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x86>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f200 8119 	bhi.w	8001084 <__udivmoddi4+0x2b8>
 8000e52:	4610      	mov	r0, r2
 8000e54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11e      	cbz	r6, 8000e66 <__udivmoddi4+0x9a>
 8000e5e:	40dc      	lsrs	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e9c6 4300 	strd	r4, r3, [r6]
 8000e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0xb4>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	f000 80fc 	beq.w	800106c <__udivmoddi4+0x2a0>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e80:	fab3 f183 	clz	r1, r3
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d14c      	bne.n	8000f22 <__udivmoddi4+0x156>
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	f0c0 80f2 	bcc.w	8001072 <__udivmoddi4+0x2a6>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f240 80ef 	bls.w	8001072 <__udivmoddi4+0x2a6>
 8000e94:	4608      	mov	r0, r1
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d0e5      	beq.n	8000e66 <__udivmoddi4+0x9a>
 8000e9a:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9e:	e7e2      	b.n	8000e66 <__udivmoddi4+0x9a>
 8000ea0:	b902      	cbnz	r2, 8000ea4 <__udivmoddi4+0xd8>
 8000ea2:	deff      	udf	#255	; 0xff
 8000ea4:	fab2 f382 	clz	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f040 809f 	bne.w	8000fec <__udivmoddi4+0x220>
 8000eae:	1a8a      	subs	r2, r1, r2
 8000eb0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eb4:	fa1f f78c 	uxth.w	r7, ip
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fbb2 f5fe 	udiv	r5, r2, lr
 8000ebe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000ec2:	0c22      	lsrs	r2, r4, #16
 8000ec4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec8:	fb07 f005 	mul.w	r0, r7, r5
 8000ecc:	4290      	cmp	r0, r2
 8000ece:	d90f      	bls.n	8000ef0 <__udivmoddi4+0x124>
 8000ed0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed8:	bf2c      	ite	cs
 8000eda:	f04f 0901 	movcs.w	r9, #1
 8000ede:	f04f 0900 	movcc.w	r9, #0
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d903      	bls.n	8000eee <__udivmoddi4+0x122>
 8000ee6:	f1b9 0f00 	cmp.w	r9, #0
 8000eea:	f000 80ce 	beq.w	800108a <__udivmoddi4+0x2be>
 8000eee:	4645      	mov	r5, r8
 8000ef0:	1a12      	subs	r2, r2, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ef8:	fb0e 2210 	mls	r2, lr, r0, r2
 8000efc:	fb00 f707 	mul.w	r7, r0, r7
 8000f00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f04:	42a7      	cmp	r7, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x14e>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x14c>
 8000f12:	42a7      	cmp	r7, r4
 8000f14:	f200 80b3 	bhi.w	800107e <__udivmoddi4+0x2b2>
 8000f18:	4610      	mov	r0, r2
 8000f1a:	1be4      	subs	r4, r4, r7
 8000f1c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f20:	e79c      	b.n	8000e5c <__udivmoddi4+0x90>
 8000f22:	f1c1 0420 	rsb	r4, r1, #32
 8000f26:	408b      	lsls	r3, r1
 8000f28:	fa05 fc01 	lsl.w	ip, r5, r1
 8000f2c:	fa22 f704 	lsr.w	r7, r2, r4
 8000f30:	40e5      	lsrs	r5, r4
 8000f32:	408a      	lsls	r2, r1
 8000f34:	431f      	orrs	r7, r3
 8000f36:	fa20 f304 	lsr.w	r3, r0, r4
 8000f3a:	4088      	lsls	r0, r1
 8000f3c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f40:	ea43 030c 	orr.w	r3, r3, ip
 8000f44:	fa1f fc87 	uxth.w	ip, r7
 8000f48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f4c:	fbb5 fef8 	udiv	lr, r5, r8
 8000f50:	fb08 551e 	mls	r5, r8, lr, r5
 8000f54:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000f58:	fb0e f90c 	mul.w	r9, lr, ip
 8000f5c:	45a9      	cmp	r9, r5
 8000f5e:	d90e      	bls.n	8000f7e <__udivmoddi4+0x1b2>
 8000f60:	197d      	adds	r5, r7, r5
 8000f62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f66:	bf2c      	ite	cs
 8000f68:	f04f 0b01 	movcs.w	fp, #1
 8000f6c:	f04f 0b00 	movcc.w	fp, #0
 8000f70:	45a9      	cmp	r9, r5
 8000f72:	d903      	bls.n	8000f7c <__udivmoddi4+0x1b0>
 8000f74:	f1bb 0f00 	cmp.w	fp, #0
 8000f78:	f000 808d 	beq.w	8001096 <__udivmoddi4+0x2ca>
 8000f7c:	46d6      	mov	lr, sl
 8000f7e:	eba5 0509 	sub.w	r5, r5, r9
 8000f82:	fa1f f983 	uxth.w	r9, r3
 8000f86:	fbb5 f3f8 	udiv	r3, r5, r8
 8000f8a:	fb08 5513 	mls	r5, r8, r3, r5
 8000f8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f92:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000f96:	45ac      	cmp	ip, r5
 8000f98:	d906      	bls.n	8000fa8 <__udivmoddi4+0x1dc>
 8000f9a:	197d      	adds	r5, r7, r5
 8000f9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fa0:	d201      	bcs.n	8000fa6 <__udivmoddi4+0x1da>
 8000fa2:	45ac      	cmp	ip, r5
 8000fa4:	d87e      	bhi.n	80010a4 <__udivmoddi4+0x2d8>
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000fac:	eba5 050c 	sub.w	r5, r5, ip
 8000fb0:	fba3 9802 	umull	r9, r8, r3, r2
 8000fb4:	4545      	cmp	r5, r8
 8000fb6:	46ce      	mov	lr, r9
 8000fb8:	46c4      	mov	ip, r8
 8000fba:	d302      	bcc.n	8000fc2 <__udivmoddi4+0x1f6>
 8000fbc:	d106      	bne.n	8000fcc <__udivmoddi4+0x200>
 8000fbe:	4548      	cmp	r0, r9
 8000fc0:	d204      	bcs.n	8000fcc <__udivmoddi4+0x200>
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000fcc:	2e00      	cmp	r6, #0
 8000fce:	d06f      	beq.n	80010b0 <__udivmoddi4+0x2e4>
 8000fd0:	ebb0 020e 	subs.w	r2, r0, lr
 8000fd4:	eb65 050c 	sbc.w	r5, r5, ip
 8000fd8:	40ca      	lsrs	r2, r1
 8000fda:	fa05 f404 	lsl.w	r4, r5, r4
 8000fde:	40cd      	lsrs	r5, r1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4314      	orrs	r4, r2
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	e9c6 4500 	strd	r4, r5, [r6]
 8000fea:	e73c      	b.n	8000e66 <__udivmoddi4+0x9a>
 8000fec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ff0:	f1c3 0220 	rsb	r2, r3, #32
 8000ff4:	4099      	lsls	r1, r3
 8000ff6:	409c      	lsls	r4, r3
 8000ff8:	40d5      	lsrs	r5, r2
 8000ffa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ffe:	fa20 f202 	lsr.w	r2, r0, r2
 8001002:	fa1f f78c 	uxth.w	r7, ip
 8001006:	fbb5 f0fe 	udiv	r0, r5, lr
 800100a:	430a      	orrs	r2, r1
 800100c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001010:	0c11      	lsrs	r1, r2, #16
 8001012:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001016:	fb00 f507 	mul.w	r5, r0, r7
 800101a:	428d      	cmp	r5, r1
 800101c:	d90e      	bls.n	800103c <__udivmoddi4+0x270>
 800101e:	eb1c 0101 	adds.w	r1, ip, r1
 8001022:	f100 38ff 	add.w	r8, r0, #4294967295
 8001026:	bf2c      	ite	cs
 8001028:	f04f 0901 	movcs.w	r9, #1
 800102c:	f04f 0900 	movcc.w	r9, #0
 8001030:	428d      	cmp	r5, r1
 8001032:	d902      	bls.n	800103a <__udivmoddi4+0x26e>
 8001034:	f1b9 0f00 	cmp.w	r9, #0
 8001038:	d031      	beq.n	800109e <__udivmoddi4+0x2d2>
 800103a:	4640      	mov	r0, r8
 800103c:	1b49      	subs	r1, r1, r5
 800103e:	b292      	uxth	r2, r2
 8001040:	fbb1 f5fe 	udiv	r5, r1, lr
 8001044:	fb0e 1115 	mls	r1, lr, r5, r1
 8001048:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800104c:	fb05 f107 	mul.w	r1, r5, r7
 8001050:	4291      	cmp	r1, r2
 8001052:	d907      	bls.n	8001064 <__udivmoddi4+0x298>
 8001054:	eb1c 0202 	adds.w	r2, ip, r2
 8001058:	f105 38ff 	add.w	r8, r5, #4294967295
 800105c:	d201      	bcs.n	8001062 <__udivmoddi4+0x296>
 800105e:	4291      	cmp	r1, r2
 8001060:	d823      	bhi.n	80010aa <__udivmoddi4+0x2de>
 8001062:	4645      	mov	r5, r8
 8001064:	1a52      	subs	r2, r2, r1
 8001066:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800106a:	e726      	b.n	8000eba <__udivmoddi4+0xee>
 800106c:	4631      	mov	r1, r6
 800106e:	4630      	mov	r0, r6
 8001070:	e6f9      	b.n	8000e66 <__udivmoddi4+0x9a>
 8001072:	1a84      	subs	r4, r0, r2
 8001074:	eb65 0203 	sbc.w	r2, r5, r3
 8001078:	2001      	movs	r0, #1
 800107a:	4617      	mov	r7, r2
 800107c:	e70b      	b.n	8000e96 <__udivmoddi4+0xca>
 800107e:	4464      	add	r4, ip
 8001080:	3802      	subs	r0, #2
 8001082:	e74a      	b.n	8000f1a <__udivmoddi4+0x14e>
 8001084:	4464      	add	r4, ip
 8001086:	3802      	subs	r0, #2
 8001088:	e6e4      	b.n	8000e54 <__udivmoddi4+0x88>
 800108a:	3d02      	subs	r5, #2
 800108c:	4462      	add	r2, ip
 800108e:	e72f      	b.n	8000ef0 <__udivmoddi4+0x124>
 8001090:	3902      	subs	r1, #2
 8001092:	4462      	add	r2, ip
 8001094:	e6c9      	b.n	8000e2a <__udivmoddi4+0x5e>
 8001096:	f1ae 0e02 	sub.w	lr, lr, #2
 800109a:	443d      	add	r5, r7
 800109c:	e76f      	b.n	8000f7e <__udivmoddi4+0x1b2>
 800109e:	3802      	subs	r0, #2
 80010a0:	4461      	add	r1, ip
 80010a2:	e7cb      	b.n	800103c <__udivmoddi4+0x270>
 80010a4:	3b02      	subs	r3, #2
 80010a6:	443d      	add	r5, r7
 80010a8:	e77e      	b.n	8000fa8 <__udivmoddi4+0x1dc>
 80010aa:	3d02      	subs	r5, #2
 80010ac:	4462      	add	r2, ip
 80010ae:	e7d9      	b.n	8001064 <__udivmoddi4+0x298>
 80010b0:	4618      	mov	r0, r3
 80010b2:	4631      	mov	r1, r6
 80010b4:	e6d7      	b.n	8000e66 <__udivmoddi4+0x9a>
 80010b6:	bf00      	nop

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <MX_YourQueueName_Config>:
  * @brief  DMA Linked-list YourQueueName configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_YourQueueName_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09c      	sub	sp, #112	; 0x70
 80010c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80010c8:	2321      	movs	r3, #33	; 0x21
 80010ca:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_USART2_RX;
 80010cc:	231a      	movs	r3, #26
 80010ce:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80010dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010e0:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001102:	2300      	movs	r3, #0
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build YourNodeName Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &YourNodeName);
 8001112:	463b      	mov	r3, r7
 8001114:	4912      	ldr	r1, [pc, #72]	; (8001160 <MX_YourQueueName_Config+0xa4>)
 8001116:	4618      	mov	r0, r3
 8001118:	f005 fbc8 	bl	80068ac <HAL_DMAEx_List_BuildNode>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001124:	4313      	orrs	r3, r2
 8001126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert YourNodeName to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&YourQueueName, &YourNodeName);
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <MX_YourQueueName_Config+0xa4>)
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_YourQueueName_Config+0xa8>)
 800112e:	f005 fc9c 	bl	8006a6a <HAL_DMAEx_List_InsertNode_Tail>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	4313      	orrs	r3, r2
 800113c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&YourQueueName);
 8001140:	4808      	ldr	r0, [pc, #32]	; (8001164 <MX_YourQueueName_Config+0xa8>)
 8001142:	f005 fd0a 	bl	8006b5a <HAL_DMAEx_List_SetCircularMode>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	4313      	orrs	r3, r2
 8001150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8001154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001158:	4618      	mov	r0, r3
 800115a:	3770      	adds	r7, #112	; 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000264 	.word	0x20000264
 8001164:	20000288 	.word	0x20000288

08001168 <__NVIC_SystemReset>:
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	bf00      	nop
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <__NVIC_SystemReset+0x24>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800117a:	4904      	ldr	r1, [pc, #16]	; (800118c <__NVIC_SystemReset+0x24>)
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_SystemReset+0x28>)
 800117e:	4313      	orrs	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <__NVIC_SystemReset+0x20>
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0004 	.word	0x05fa0004

08001194 <main>:
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
 800119a:	f004 fd21 	bl	8005be0 <HAL_Init>
 800119e:	f000 f8cf 	bl	8001340 <SystemClock_Config>
 80011a2:	f000 fde1 	bl	8001d68 <MX_GPIO_Init>
 80011a6:	f000 f93f 	bl	8001428 <MX_GPDMA1_Init>
 80011aa:	f000 fa93 	bl	80016d4 <MX_MEMORYMAP_Init>
 80011ae:	f000 fa5b 	bl	8001668 <MX_ICACHE_Init>
 80011b2:	f000 f959 	bl	8001468 <MX_I2C1_Init>
 80011b6:	f000 f997 	bl	80014e8 <MX_I2C2_Init>
 80011ba:	f000 f9d5 	bl	8001568 <MX_I2C3_Init>
 80011be:	f000 fa13 	bl	80015e8 <MX_I2C4_Init>
 80011c2:	f000 fadd 	bl	8001780 <MX_SDMMC1_SD_Init>
 80011c6:	f000 faff 	bl	80017c8 <MX_SPI1_Init>
 80011ca:	f000 fb6b 	bl	80018a4 <MX_SPI2_Init>
 80011ce:	f000 fc97 	bl	8001b00 <MX_UART4_Init>
 80011d2:	f000 fce1 	bl	8001b98 <MX_USART1_UART_Init>
 80011d6:	f000 fd2b 	bl	8001c30 <MX_USART2_UART_Init>
 80011da:	f000 fd79 	bl	8001cd0 <MX_USART3_UART_Init>
 80011de:	f00f ffc3 	bl	8011168 <MX_FileX_Init>
 80011e2:	f000 fa7f 	bl	80016e4 <MX_RTC_Init>
 80011e6:	f000 fbcb 	bl	8001980 <MX_TIM6_Init>
 80011ea:	f000 fc01 	bl	80019f0 <MX_TIM7_Init>
 80011ee:	f000 fc37 	bl	8001a60 <MX_TIM16_Init>
 80011f2:	f000 fc5d 	bl	8001ab0 <MX_TIM17_Init>
 80011f6:	f000 fa4b 	bl	8001690 <MX_IWDG_Init>
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4841      	ldr	r0, [pc, #260]	; (8001308 <main+0x174>)
 8001202:	f006 fb5f 	bl	80078c4 <HAL_GPIO_WritePin>
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <main+0x178>)
 8001208:	2253      	movs	r2, #83	; 0x53
 800120a:	761a      	strb	r2, [r3, #24]
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <main+0x178>)
 800120e:	2257      	movs	r2, #87	; 0x57
 8001210:	765a      	strb	r2, [r3, #25]
 8001212:	483f      	ldr	r0, [pc, #252]	; (8001310 <main+0x17c>)
 8001214:	f007 fa25 	bl	8008662 <HAL_IWDG_Refresh>
 8001218:	2200      	movs	r2, #0
 800121a:	493e      	ldr	r1, [pc, #248]	; (8001314 <main+0x180>)
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <main+0x184>)
 800121e:	f00b fadf 	bl	800c7e0 <HAL_RTC_GetTime>
 8001222:	2200      	movs	r2, #0
 8001224:	493d      	ldr	r1, [pc, #244]	; (800131c <main+0x188>)
 8001226:	483c      	ldr	r0, [pc, #240]	; (8001318 <main+0x184>)
 8001228:	f00b fb4c 	bl	800c8c4 <HAL_RTC_GetDate>
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <main+0x180>)
 800122e:	789a      	ldrb	r2, [r3, #2]
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <main+0x18c>)
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <main+0x180>)
 8001236:	785a      	ldrb	r2, [r3, #1]
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <main+0x190>)
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <main+0x180>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b39      	ldr	r3, [pc, #228]	; (8001328 <main+0x194>)
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	f000 fe40 	bl	8001ec8 <SD_LOG_BOOT>
 8001248:	200a      	movs	r0, #10
 800124a:	f004 fd4d 	bl	8005ce8 <HAL_Delay>
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <main+0x17c>)
 8001250:	f007 fa07 	bl	8008662 <HAL_IWDG_Refresh>
 8001254:	f001 faa6 	bl	80027a4 <IMU_Init>
 8001258:	200a      	movs	r0, #10
 800125a:	f004 fd45 	bl	8005ce8 <HAL_Delay>
 800125e:	482c      	ldr	r0, [pc, #176]	; (8001310 <main+0x17c>)
 8001260:	f007 f9ff 	bl	8008662 <HAL_IWDG_Refresh>
 8001264:	2304      	movs	r3, #4
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2303      	movs	r3, #3
 800126e:	2201      	movs	r2, #1
 8001270:	2105      	movs	r1, #5
 8001272:	2002      	movs	r0, #2
 8001274:	f001 fafe 	bl	8002874 <BPS_Init>
 8001278:	200a      	movs	r0, #10
 800127a:	f004 fd35 	bl	8005ce8 <HAL_Delay>
 800127e:	4824      	ldr	r0, [pc, #144]	; (8001310 <main+0x17c>)
 8001280:	f007 f9ef 	bl	8008662 <HAL_IWDG_Refresh>
 8001284:	f002 f828 	bl	80032d8 <INA219_Reset>
 8001288:	f002 f842 	bl	8003310 <INA219_Calibracao>
 800128c:	200a      	movs	r0, #10
 800128e:	f004 fd2b 	bl	8005ce8 <HAL_Delay>
 8001292:	f7ff ff13 	bl	80010bc <MX_YourQueueName_Config>
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <main+0x198>)
 8001298:	4a25      	ldr	r2, [pc, #148]	; (8001330 <main+0x19c>)
 800129a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <main+0x19c>)
 80012a0:	4a22      	ldr	r2, [pc, #136]	; (800132c <main+0x198>)
 80012a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80012a4:	4923      	ldr	r1, [pc, #140]	; (8001334 <main+0x1a0>)
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <main+0x19c>)
 80012a8:	f005 fcb8 	bl	8006c1c <HAL_DMAEx_List_LinkQ>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <main+0x122>
 80012b2:	f003 fc89 	bl	8004bc8 <Error_Handler>
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <main+0x17c>)
 80012b8:	f007 f9d3 	bl	8008662 <HAL_IWDG_Refresh>
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <main+0x1a4>)
 80012be:	f00d fa1d 	bl	800e6fc <HAL_TIM_Base_Start_IT>
 80012c2:	481e      	ldr	r0, [pc, #120]	; (800133c <main+0x1a8>)
 80012c4:	f00d fa1a 	bl	800e6fc <HAL_TIM_Base_Start_IT>
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <main+0x174>)
 80012d0:	f006 faf8 	bl	80078c4 <HAL_GPIO_WritePin>
 80012d4:	480e      	ldr	r0, [pc, #56]	; (8001310 <main+0x17c>)
 80012d6:	f007 f9c4 	bl	8008662 <HAL_IWDG_Refresh>
 80012da:	2200      	movs	r2, #0
 80012dc:	490d      	ldr	r1, [pc, #52]	; (8001314 <main+0x180>)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <main+0x184>)
 80012e0:	f00b fa7e 	bl	800c7e0 <HAL_RTC_GetTime>
 80012e4:	2200      	movs	r2, #0
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <main+0x188>)
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <main+0x184>)
 80012ea:	f00b faeb 	bl	800c8c4 <HAL_RTC_GetDate>
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <main+0x180>)
 80012f0:	789a      	ldrb	r2, [r3, #2]
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <main+0x18c>)
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <main+0x180>)
 80012f8:	785a      	ldrb	r2, [r3, #1]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <main+0x190>)
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <main+0x180>)
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <main+0x194>)
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e7e5      	b.n	80012d4 <main+0x140>
 8001308:	42020800 	.word	0x42020800
 800130c:	20000a1c 	.word	0x20000a1c
 8001310:	200003f0 	.word	0x200003f0
 8001314:	20000a08 	.word	0x20000a08
 8001318:	20000404 	.word	0x20000404
 800131c:	20000a04 	.word	0x20000a04
 8001320:	20002a20 	.word	0x20002a20
 8001324:	20002a21 	.word	0x20002a21
 8001328:	20002a22 	.word	0x20002a22
 800132c:	20000828 	.word	0x20000828
 8001330:	2000098c 	.word	0x2000098c
 8001334:	20000974 	.word	0x20000974
 8001338:	200005d0 	.word	0x200005d0
 800133c:	200006b4 	.word	0x200006b4

08001340 <SystemClock_Config>:
 8001340:	b580      	push	{r7, lr}
 8001342:	b09e      	sub	sp, #120	; 0x78
 8001344:	af00      	add	r7, sp, #0
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2260      	movs	r2, #96	; 0x60
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f01c fb29 	bl	801d9a6 <memset>
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001368:	f007 f99c 	bl	80086a4 <HAL_PWREx_ControlVoltageScaling>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x36>
 8001372:	f003 fc29 	bl	8004bc8 <Error_Handler>
 8001376:	f007 f985 	bl	8008684 <HAL_PWR_EnableBkUpAccess>
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <SystemClock_Config+0xe4>)
 800137c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <SystemClock_Config+0xe4>)
 8001382:	f023 0318 	bic.w	r3, r3, #24
 8001386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800138a:	232d      	movs	r3, #45	; 0x2d
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	2381      	movs	r3, #129	; 0x81
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
 800139e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
 80013a8:	2302      	movs	r3, #2
 80013aa:	653b      	str	r3, [r7, #80]	; 0x50
 80013ac:	2303      	movs	r3, #3
 80013ae:	657b      	str	r3, [r7, #84]	; 0x54
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013b6:	2304      	movs	r3, #4
 80013b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80013ba:	2320      	movs	r3, #32
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
 80013be:	2302      	movs	r3, #2
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
 80013c2:	2302      	movs	r3, #2
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013c6:	2302      	movs	r3, #2
 80013c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013ca:	230c      	movs	r3, #12
 80013cc:	673b      	str	r3, [r7, #112]	; 0x70
 80013ce:	2300      	movs	r3, #0
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f007 f9f0 	bl	80087bc <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xa6>
 80013e2:	f003 fbf1 	bl	8004bc8 <Error_Handler>
 80013e6:	231f      	movs	r3, #31
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	2303      	movs	r3, #3
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	463b      	mov	r3, r7
 8001400:	2104      	movs	r1, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f008 f8b6 	bl	8009574 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xd2>
 800140e:	f003 fbdb 	bl	8004bc8 <Error_Handler>
 8001412:	f008 fbfd 	bl	8009c10 <HAL_RCC_EnableCSS>
 8001416:	f00b f81f 	bl	800c458 <HAL_RCCEx_EnableLSECSS>
 800141a:	bf00      	nop
 800141c:	3778      	adds	r7, #120	; 0x78
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	46020c00 	.word	0x46020c00

08001428 <MX_GPDMA1_Init>:
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_GPDMA1_Init+0x3c>)
 8001430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <MX_GPDMA1_Init+0x3c>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_GPDMA1_Init+0x3c>)
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
 8001450:	2052      	movs	r0, #82	; 0x52
 8001452:	f004 fd48 	bl	8005ee6 <HAL_NVIC_SetPriority>
 8001456:	2052      	movs	r0, #82	; 0x52
 8001458:	f004 fd5f 	bl	8005f1a <HAL_NVIC_EnableIRQ>
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	46020c00 	.word	0x46020c00

08001468 <MX_I2C1_Init>:
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_I2C1_Init+0x74>)
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <MX_I2C1_Init+0x78>)
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_I2C1_Init+0x74>)
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <MX_I2C1_Init+0x7c>)
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_I2C1_Init+0x74>)
 8001480:	2201      	movs	r2, #1
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_I2C1_Init+0x74>)
 80014a4:	f006 fa26 	bl	80078f4 <HAL_I2C_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C1_Init+0x4a>
 80014ae:	f003 fb8b 	bl	8004bc8 <Error_Handler>
 80014b2:	2100      	movs	r1, #0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <MX_I2C1_Init+0x74>)
 80014b6:	f006 ff9f 	bl	80083f8 <HAL_I2CEx_ConfigAnalogFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C1_Init+0x5c>
 80014c0:	f003 fb82 	bl	8004bc8 <Error_Handler>
 80014c4:	2100      	movs	r1, #0
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_I2C1_Init+0x74>)
 80014c8:	f006 ffe1 	bl	800848e <HAL_I2CEx_ConfigDigitalFilter>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C1_Init+0x6e>
 80014d2:	f003 fb79 	bl	8004bc8 <Error_Handler>
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002a0 	.word	0x200002a0
 80014e0:	40005400 	.word	0x40005400
 80014e4:	00f07bff 	.word	0x00f07bff

080014e8 <MX_I2C2_Init>:
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_I2C2_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_I2C2_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_I2C2_Init+0x74>)
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <MX_I2C2_Init+0x7c>)
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_I2C2_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_I2C2_Init+0x74>)
 8001500:	2201      	movs	r2, #1
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_I2C2_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_I2C2_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C2_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_I2C2_Init+0x74>)
 8001524:	f006 f9e6 	bl	80078f4 <HAL_I2C_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C2_Init+0x4a>
 800152e:	f003 fb4b 	bl	8004bc8 <Error_Handler>
 8001532:	2100      	movs	r1, #0
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <MX_I2C2_Init+0x74>)
 8001536:	f006 ff5f 	bl	80083f8 <HAL_I2CEx_ConfigAnalogFilter>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C2_Init+0x5c>
 8001540:	f003 fb42 	bl	8004bc8 <Error_Handler>
 8001544:	2100      	movs	r1, #0
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_I2C2_Init+0x74>)
 8001548:	f006 ffa1 	bl	800848e <HAL_I2CEx_ConfigDigitalFilter>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C2_Init+0x6e>
 8001552:	f003 fb39 	bl	8004bc8 <Error_Handler>
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002f4 	.word	0x200002f4
 8001560:	40005800 	.word	0x40005800
 8001564:	00f07bff 	.word	0x00f07bff

08001568 <MX_I2C3_Init>:
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_I2C3_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_I2C3_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_I2C3_Init+0x74>)
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <MX_I2C3_Init+0x7c>)
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_I2C3_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_I2C3_Init+0x74>)
 8001580:	2201      	movs	r2, #1
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_I2C3_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_I2C3_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C3_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C3_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C3_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <MX_I2C3_Init+0x74>)
 80015a4:	f006 f9a6 	bl	80078f4 <HAL_I2C_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C3_Init+0x4a>
 80015ae:	f003 fb0b 	bl	8004bc8 <Error_Handler>
 80015b2:	2100      	movs	r1, #0
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <MX_I2C3_Init+0x74>)
 80015b6:	f006 ff1f 	bl	80083f8 <HAL_I2CEx_ConfigAnalogFilter>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C3_Init+0x5c>
 80015c0:	f003 fb02 	bl	8004bc8 <Error_Handler>
 80015c4:	2100      	movs	r1, #0
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_I2C3_Init+0x74>)
 80015c8:	f006 ff61 	bl	800848e <HAL_I2CEx_ConfigDigitalFilter>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C3_Init+0x6e>
 80015d2:	f003 faf9 	bl	8004bc8 <Error_Handler>
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000348 	.word	0x20000348
 80015e0:	46002800 	.word	0x46002800
 80015e4:	00f07bff 	.word	0x00f07bff

080015e8 <MX_I2C4_Init>:
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_I2C4_Init+0x74>)
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <MX_I2C4_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_I2C4_Init+0x74>)
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <MX_I2C4_Init+0x7c>)
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_I2C4_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_I2C4_Init+0x74>)
 8001600:	2201      	movs	r2, #1
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_I2C4_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_I2C4_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_I2C4_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_I2C4_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_I2C4_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <MX_I2C4_Init+0x74>)
 8001624:	f006 f966 	bl	80078f4 <HAL_I2C_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_I2C4_Init+0x4a>
 800162e:	f003 facb 	bl	8004bc8 <Error_Handler>
 8001632:	2100      	movs	r1, #0
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <MX_I2C4_Init+0x74>)
 8001636:	f006 fedf 	bl	80083f8 <HAL_I2CEx_ConfigAnalogFilter>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C4_Init+0x5c>
 8001640:	f003 fac2 	bl	8004bc8 <Error_Handler>
 8001644:	2100      	movs	r1, #0
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_I2C4_Init+0x74>)
 8001648:	f006 ff21 	bl	800848e <HAL_I2CEx_ConfigDigitalFilter>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C4_Init+0x6e>
 8001652:	f003 fab9 	bl	8004bc8 <Error_Handler>
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000039c 	.word	0x2000039c
 8001660:	40008400 	.word	0x40008400
 8001664:	00f07bff 	.word	0x00f07bff

08001668 <MX_ICACHE_Init>:
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
 800166c:	2000      	movs	r0, #0
 800166e:	f006 ff5b 	bl	8008528 <HAL_ICACHE_ConfigAssociativityMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ICACHE_Init+0x14>
 8001678:	f003 faa6 	bl	8004bc8 <Error_Handler>
 800167c:	f006 ff74 	bl	8008568 <HAL_ICACHE_Enable>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ICACHE_Init+0x22>
 8001686:	f003 fa9f 	bl	8004bc8 <Error_Handler>
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <MX_IWDG_Init>:
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_IWDG_Init+0x3c>)
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <MX_IWDG_Init+0x40>)
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_IWDG_Init+0x3c>)
 800169c:	2202      	movs	r2, #2
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_IWDG_Init+0x3c>)
 80016a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_IWDG_Init+0x3c>)
 80016aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_IWDG_Init+0x3c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_IWDG_Init+0x3c>)
 80016b8:	f006 ff66 	bl	8008588 <HAL_IWDG_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_IWDG_Init+0x36>
 80016c2:	f003 fa81 	bl	8004bc8 <Error_Handler>
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200003f0 	.word	0x200003f0
 80016d0:	40003000 	.word	0x40003000

080016d4 <MX_MEMORYMAP_Init>:
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <MX_RTC_Init>:
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_RTC_Init+0x94>)
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <MX_RTC_Init+0x98>)
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_RTC_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_RTC_Init+0x94>)
 800170a:	227f      	movs	r2, #127	; 0x7f
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_RTC_Init+0x94>)
 8001710:	22ff      	movs	r2, #255	; 0xff
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_RTC_Init+0x94>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_RTC_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_RTC_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_RTC_Init+0x94>)
 8001728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172c:	61da      	str	r2, [r3, #28]
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_RTC_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_RTC_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_RTC_Init+0x94>)
 800173c:	f00a ffce 	bl	800c6dc <HAL_RTC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0x66>
 8001746:	f003 fa3f 	bl	8004bc8 <Error_Handler>
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_RTC_Init+0x94>)
 8001760:	f00b f9c6 	bl	800caf0 <HAL_RTCEx_PrivilegeModeSet>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_RTC_Init+0x8a>
 800176a:	f003 fa2d 	bl	8004bc8 <Error_Handler>
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000404 	.word	0x20000404
 800177c:	46007800 	.word	0x46007800

08001780 <MX_SDMMC1_SD_Init>:
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_SDMMC1_SD_Init+0x44>)
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 8001798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_SDMMC1_SD_Init+0x40>)
 80017ac:	f00b f9ce 	bl	800cb4c <HAL_SD_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_SDMMC1_SD_Init+0x3a>
 80017b6:	f003 fa07 	bl	8004bc8 <Error_Handler>
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000434 	.word	0x20000434
 80017c4:	420c8000 	.word	0x420c8000

080017c8 <MX_SPI1_Init>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <MX_SPI1_Init+0xd4>)
 80017da:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <MX_SPI1_Init+0xd8>)
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <MX_SPI1_Init+0xd4>)
 80017e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_SPI1_Init+0xd4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <MX_SPI1_Init+0xd4>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_SPI1_Init+0xd4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <MX_SPI1_Init+0xd4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_SPI1_Init+0xd4>)
 8001800:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <MX_SPI1_Init+0xd4>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <MX_SPI1_Init+0xd4>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_SPI1_Init+0xd4>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <MX_SPI1_Init+0xd4>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_SPI1_Init+0xd4>)
 8001820:	2207      	movs	r2, #7
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_SPI1_Init+0xd4>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_SPI1_Init+0xd4>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_SPI1_Init+0xd4>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_SPI1_Init+0xd4>)
 800183a:	2200      	movs	r2, #0
 800183c:	649a      	str	r2, [r3, #72]	; 0x48
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_SPI1_Init+0xd4>)
 8001840:	2200      	movs	r2, #0
 8001842:	64da      	str	r2, [r3, #76]	; 0x4c
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_SPI1_Init+0xd4>)
 8001846:	2200      	movs	r2, #0
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_SPI1_Init+0xd4>)
 800184c:	2200      	movs	r2, #0
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_SPI1_Init+0xd4>)
 8001852:	2200      	movs	r2, #0
 8001854:	659a      	str	r2, [r3, #88]	; 0x58
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_SPI1_Init+0xd4>)
 8001858:	2200      	movs	r2, #0
 800185a:	65da      	str	r2, [r3, #92]	; 0x5c
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_SPI1_Init+0xd4>)
 800185e:	2200      	movs	r2, #0
 8001860:	661a      	str	r2, [r3, #96]	; 0x60
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <MX_SPI1_Init+0xd4>)
 8001864:	f00c fd80 	bl	800e368 <HAL_SPI_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SPI1_Init+0xaa>
 800186e:	f003 f9ab 	bl	8004bc8 <Error_Handler>
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_SPI1_Init+0xd4>)
 8001886:	f00c fea0 	bl	800e5ca <HAL_SPIEx_SetConfigAutonomousMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SPI1_Init+0xcc>
 8001890:	f003 f99a 	bl	8004bc8 <Error_Handler>
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004b0 	.word	0x200004b0
 80018a0:	40013000 	.word	0x40013000

080018a4 <MX_SPI2_Init>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018b6:	4a31      	ldr	r2, [pc, #196]	; (800197c <MX_SPI2_Init+0xd8>)
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018ca:	2203      	movs	r2, #3
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	4b28      	ldr	r3, [pc, #160]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_SPI2_Init+0xd4>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_SPI2_Init+0xd4>)
 800190a:	2200      	movs	r2, #0
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001916:	2200      	movs	r2, #0
 8001918:	649a      	str	r2, [r3, #72]	; 0x48
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_SPI2_Init+0xd4>)
 800191c:	2200      	movs	r2, #0
 800191e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001922:	2200      	movs	r2, #0
 8001924:	651a      	str	r2, [r3, #80]	; 0x50
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001928:	2200      	movs	r2, #0
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_SPI2_Init+0xd4>)
 800192e:	2200      	movs	r2, #0
 8001930:	659a      	str	r2, [r3, #88]	; 0x58
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001934:	2200      	movs	r2, #0
 8001936:	65da      	str	r2, [r3, #92]	; 0x5c
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_SPI2_Init+0xd4>)
 800193a:	2200      	movs	r2, #0
 800193c:	661a      	str	r2, [r3, #96]	; 0x60
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001940:	f00c fd12 	bl	800e368 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI2_Init+0xaa>
 800194a:	f003 f93d 	bl	8004bc8 <Error_Handler>
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_SPI2_Init+0xd4>)
 8001962:	f00c fe32 	bl	800e5ca <HAL_SPIEx_SetConfigAutonomousMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_SPI2_Init+0xcc>
 800196c:	f003 f92c 	bl	8004bc8 <Error_Handler>
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000540 	.word	0x20000540
 800197c:	40003800 	.word	0x40003800

08001980 <MX_TIM6_Init>:
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM6_Init+0x68>)
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <MX_TIM6_Init+0x6c>)
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_TIM6_Init+0x68>)
 8001998:	f640 12c5 	movw	r2, #2501	; 0x9c5
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_TIM6_Init+0x68>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_TIM6_Init+0x68>)
 80019a6:	f640 4281 	movw	r2, #3201	; 0xc81
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_TIM6_Init+0x68>)
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM6_Init+0x68>)
 80019b4:	f00c fe4a 	bl	800e64c <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM6_Init+0x42>
 80019be:	f003 f903 	bl	8004bc8 <Error_Handler>
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM6_Init+0x68>)
 80019d0:	f00d f9b0 	bl	800ed34 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM6_Init+0x5e>
 80019da:	f003 f8f5 	bl	8004bc8 <Error_Handler>
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200005d0 	.word	0x200005d0
 80019ec:	40001000 	.word	0x40001000

080019f0 <MX_TIM7_Init>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <MX_TIM7_Init+0x6c>)
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a16:	f641 02fd 	movw	r2, #6397	; 0x18fd
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a24:	f00c fe12 	bl	800e64c <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM7_Init+0x42>
 8001a2e:	f003 f8cb 	bl	8004bc8 <Error_Handler>
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM7_Init+0x68>)
 8001a40:	f00d f978 	bl	800ed34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM7_Init+0x5e>
 8001a4a:	f003 f8bd 	bl	8004bc8 <Error_Handler>
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000061c 	.word	0x2000061c
 8001a5c:	40001400 	.word	0x40001400

08001a60 <MX_TIM16_Init>:
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a66:	4a11      	ldr	r2, [pc, #68]	; (8001aac <MX_TIM16_Init+0x4c>)
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a7a:	f641 02fd 	movw	r2, #6397	; 0x18fd
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_TIM16_Init+0x48>)
 8001a94:	f00c fdda 	bl	800e64c <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM16_Init+0x42>
 8001a9e:	f003 f893 	bl	8004bc8 <Error_Handler>
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000668 	.word	0x20000668
 8001aac:	40014400 	.word	0x40014400

08001ab0 <MX_TIM17_Init>:
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <MX_TIM17_Init+0x4c>)
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001abc:	f240 3221 	movw	r2, #801	; 0x321
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001aca:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM17_Init+0x48>)
 8001ae4:	f00c fdb2 	bl	800e64c <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM17_Init+0x42>
 8001aee:	f003 f86b 	bl	8004bc8 <Error_Handler>
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200006b4 	.word	0x200006b4
 8001afc:	40014800 	.word	0x40014800

08001b00 <MX_UART4_Init>:
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b06:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <MX_UART4_Init+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b4a:	f00d f9fb 	bl	800ef44 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_UART4_Init+0x58>
 8001b54:	f003 f838 	bl	8004bc8 <Error_Handler>
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b5c:	f00e fc1b 	bl	8010396 <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_UART4_Init+0x6a>
 8001b66:	f003 f82f 	bl	8004bc8 <Error_Handler>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b6e:	f00e fc50 	bl	8010412 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_UART4_Init+0x7c>
 8001b78:	f003 f826 	bl	8004bc8 <Error_Handler>
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_UART4_Init+0x90>)
 8001b7e:	f00e fbd1 	bl	8010324 <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_UART4_Init+0x8c>
 8001b88:	f003 f81e 	bl	8004bc8 <Error_Handler>
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000700 	.word	0x20000700
 8001b94:	40004c00 	.word	0x40004c00

08001b98 <MX_USART1_UART_Init>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001b9e:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <MX_USART1_UART_Init+0x94>)
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
 8001be0:	4811      	ldr	r0, [pc, #68]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001be2:	f00d f9af 	bl	800ef44 <HAL_UART_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART1_UART_Init+0x58>
 8001bec:	f002 ffec 	bl	8004bc8 <Error_Handler>
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001bf4:	f00e fbcf 	bl	8010396 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART1_UART_Init+0x6a>
 8001bfe:	f002 ffe3 	bl	8004bc8 <Error_Handler>
 8001c02:	2100      	movs	r1, #0
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001c06:	f00e fc04 	bl	8010412 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x7c>
 8001c10:	f002 ffda 	bl	8004bc8 <Error_Handler>
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_USART1_UART_Init+0x90>)
 8001c16:	f00e fb85 	bl	8010324 <HAL_UARTEx_DisableFifoMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART1_UART_Init+0x8c>
 8001c20:	f002 ffd2 	bl	8004bc8 <Error_Handler>
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000794 	.word	0x20000794
 8001c2c:	40013800 	.word	0x40013800

08001c30 <MX_USART2_UART_Init>:
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <MX_USART2_UART_Init+0x9c>)
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c74:	2210      	movs	r2, #16
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c82:	f00d f95f 	bl	800ef44 <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART2_UART_Init+0x60>
 8001c8c:	f002 ff9c 	bl	8004bc8 <Error_Handler>
 8001c90:	2100      	movs	r1, #0
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001c94:	f00e fb7f 	bl	8010396 <HAL_UARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_UART_Init+0x72>
 8001c9e:	f002 ff93 	bl	8004bc8 <Error_Handler>
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001ca6:	f00e fbb4 	bl	8010412 <HAL_UARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART2_UART_Init+0x84>
 8001cb0:	f002 ff8a 	bl	8004bc8 <Error_Handler>
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_USART2_UART_Init+0x98>)
 8001cb6:	f00e fb35 	bl	8010324 <HAL_UARTEx_DisableFifoMode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART2_UART_Init+0x94>
 8001cc0:	f002 ff82 	bl	8004bc8 <Error_Handler>
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000828 	.word	0x20000828
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <MX_USART3_UART_Init>:
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <MX_USART3_UART_Init+0x94>)
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d1a:	f00d f913 	bl	800ef44 <HAL_UART_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART3_UART_Init+0x58>
 8001d24:	f002 ff50 	bl	8004bc8 <Error_Handler>
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d2c:	f00e fb33 	bl	8010396 <HAL_UARTEx_SetTxFifoThreshold>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART3_UART_Init+0x6a>
 8001d36:	f002 ff47 	bl	8004bc8 <Error_Handler>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d3e:	f00e fb68 	bl	8010412 <HAL_UARTEx_SetRxFifoThreshold>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_USART3_UART_Init+0x7c>
 8001d48:	f002 ff3e 	bl	8004bc8 <Error_Handler>
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d4e:	f00e fae9 	bl	8010324 <HAL_UARTEx_DisableFifoMode>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_USART3_UART_Init+0x8c>
 8001d58:	f002 ff36 	bl	8004bc8 <Error_Handler>
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200008bc 	.word	0x200008bc
 8001d64:	40004800 	.word	0x40004800

08001d68 <MX_GPIO_Init>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da2:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc0:	4a3d      	ldr	r2, [pc, #244]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dde:	4a36      	ldr	r2, [pc, #216]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <MX_GPIO_Init+0x150>)
 8001e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001e1a:	4828      	ldr	r0, [pc, #160]	; (8001ebc <MX_GPIO_Init+0x154>)
 8001e1c:	f005 fd52 	bl	80078c4 <HAL_GPIO_WritePin>
 8001e20:	2200      	movs	r2, #0
 8001e22:	f641 1110 	movw	r1, #6416	; 0x1910
 8001e26:	4826      	ldr	r0, [pc, #152]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001e28:	f005 fd4c 	bl	80078c4 <HAL_GPIO_WritePin>
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f249 0127 	movw	r1, #36903	; 0x9027
 8001e32:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001e34:	f005 fd46 	bl	80078c4 <HAL_GPIO_WritePin>
 8001e38:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481a      	ldr	r0, [pc, #104]	; (8001ebc <MX_GPIO_Init+0x154>)
 8001e52:	f005 fb5f 	bl	8007514 <HAL_GPIO_Init>
 8001e56:	f641 1310 	movw	r3, #6416	; 0x1910
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4814      	ldr	r0, [pc, #80]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001e70:	f005 fb50 	bl	8007514 <HAL_GPIO_Init>
 8001e74:	f249 0307 	movw	r3, #36871	; 0x9007
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001e8e:	f005 fb41 	bl	8007514 <HAL_GPIO_Init>
 8001e92:	2320      	movs	r3, #32
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	2311      	movs	r3, #17
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001eaa:	f005 fb33 	bl	8007514 <HAL_GPIO_Init>
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	46020c00 	.word	0x46020c00
 8001ebc:	42020800 	.word	0x42020800
 8001ec0:	42020000 	.word	0x42020000
 8001ec4:	42020400 	.word	0x42020400

08001ec8 <SD_LOG_BOOT>:
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	; 0x30
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <SD_LOG_BOOT+0x168>)
 8001ed0:	f006 fbc7 	bl	8008662 <HAL_IWDG_Refresh>
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eda:	4856      	ldr	r0, [pc, #344]	; (8002034 <SD_LOG_BOOT+0x16c>)
 8001edc:	f005 fcf2 	bl	80078c4 <HAL_GPIO_WritePin>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	821a      	strh	r2, [r3, #16]
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <SD_LOG_BOOT+0x170>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <SD_LOG_BOOT+0x174>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <SD_LOG_BOOT+0x178>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	1d38      	adds	r0, r7, #4
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	494c      	ldr	r1, [pc, #304]	; (8002044 <SD_LOG_BOOT+0x17c>)
 8001f12:	f01b fcb7 	bl	801d884 <siprintf>
 8001f16:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <SD_LOG_BOOT+0x180>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f01b fbed 	bl	801d6fc <fflush>
 8001f22:	f24a 13c0 	movw	r3, #41408	; 0xa1c0
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <SD_LOG_BOOT+0x184>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	4a46      	ldr	r2, [pc, #280]	; (8002050 <SD_LOG_BOOT+0x188>)
 8001f36:	4947      	ldr	r1, [pc, #284]	; (8002054 <SD_LOG_BOOT+0x18c>)
 8001f38:	4847      	ldr	r0, [pc, #284]	; (8002058 <SD_LOG_BOOT+0x190>)
 8001f3a:	f01a fc51 	bl	801c7e0 <_fxe_media_open>
 8001f3e:	61f8      	str	r0, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SD_LOG_BOOT+0x82>
 8001f46:	f002 fe13 	bl	8004b70 <SD_Error_Handler>
 8001f4a:	4944      	ldr	r1, [pc, #272]	; (800205c <SD_LOG_BOOT+0x194>)
 8001f4c:	4842      	ldr	r0, [pc, #264]	; (8002058 <SD_LOG_BOOT+0x190>)
 8001f4e:	f01a fbad 	bl	801c6ac <_fxe_file_create>
 8001f52:	61f8      	str	r0, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <SD_LOG_BOOT+0x9c>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b0b      	cmp	r3, #11
 8001f5e:	d001      	beq.n	8001f64 <SD_LOG_BOOT+0x9c>
 8001f60:	f002 fe06 	bl	8004b70 <SD_Error_Handler>
 8001f64:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	; (800205c <SD_LOG_BOOT+0x194>)
 8001f6e:	493c      	ldr	r1, [pc, #240]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001f70:	4839      	ldr	r0, [pc, #228]	; (8002058 <SD_LOG_BOOT+0x190>)
 8001f72:	f01a fbaf 	bl	801c6d4 <_fxe_file_open>
 8001f76:	61f8      	str	r0, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SD_LOG_BOOT+0xba>
 8001f7e:	f002 fdf7 	bl	8004b70 <SD_Error_Handler>
 8001f82:	2212      	movs	r2, #18
 8001f84:	4937      	ldr	r1, [pc, #220]	; (8002064 <SD_LOG_BOOT+0x19c>)
 8001f86:	4836      	ldr	r0, [pc, #216]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001f88:	f01a fbec 	bl	801c764 <_fxe_file_write>
 8001f8c:	61f8      	str	r0, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SD_LOG_BOOT+0xd0>
 8001f94:	f002 fdec 	bl	8004b70 <SD_Error_Handler>
 8001f98:	4831      	ldr	r0, [pc, #196]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001f9a:	f01a fb75 	bl	801c688 <_fxe_file_close>
 8001f9e:	61f8      	str	r0, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SD_LOG_BOOT+0xe2>
 8001fa6:	f002 fde3 	bl	8004b70 <SD_Error_Handler>
 8001faa:	482b      	ldr	r0, [pc, #172]	; (8002058 <SD_LOG_BOOT+0x190>)
 8001fac:	f01a fc05 	bl	801c7ba <_fxe_media_flush>
 8001fb0:	61f8      	str	r0, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <SD_LOG_BOOT+0xf4>
 8001fb8:	f002 fdda 	bl	8004b70 <SD_Error_Handler>
 8001fbc:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <SD_LOG_BOOT+0x194>)
 8001fc6:	4926      	ldr	r1, [pc, #152]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001fc8:	4823      	ldr	r0, [pc, #140]	; (8002058 <SD_LOG_BOOT+0x190>)
 8001fca:	f01a fb83 	bl	801c6d4 <_fxe_file_open>
 8001fce:	61f8      	str	r0, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SD_LOG_BOOT+0x112>
 8001fd6:	f002 fdcb 	bl	8004b70 <SD_Error_Handler>
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2216      	movs	r2, #22
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001fe2:	f01a fbbf 	bl	801c764 <_fxe_file_write>
 8001fe6:	61f8      	str	r0, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SD_LOG_BOOT+0x12a>
 8001fee:	f002 fdbf 	bl	8004b70 <SD_Error_Handler>
 8001ff2:	481b      	ldr	r0, [pc, #108]	; (8002060 <SD_LOG_BOOT+0x198>)
 8001ff4:	f01a fb48 	bl	801c688 <_fxe_file_close>
 8001ff8:	61f8      	str	r0, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SD_LOG_BOOT+0x13c>
 8002000:	f002 fdb6 	bl	8004b70 <SD_Error_Handler>
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <SD_LOG_BOOT+0x190>)
 8002006:	f01a fbd8 	bl	801c7ba <_fxe_media_flush>
 800200a:	61f8      	str	r0, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SD_LOG_BOOT+0x14e>
 8002012:	f002 fdad 	bl	8004b70 <SD_Error_Handler>
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <SD_LOG_BOOT+0x1a0>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <SD_LOG_BOOT+0x16c>)
 8002024:	f005 fc4e 	bl	80078c4 <HAL_GPIO_WritePin>
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003f0 	.word	0x200003f0
 8002034:	42020800 	.word	0x42020800
 8002038:	20002a22 	.word	0x20002a22
 800203c:	20002a21 	.word	0x20002a21
 8002040:	20002a20 	.word	0x20002a20
 8002044:	080227b0 	.word	0x080227b0
 8002048:	200000c4 	.word	0x200000c4
 800204c:	2000cde0 	.word	0x2000cde0
 8002050:	080112a9 	.word	0x080112a9
 8002054:	080227c8 	.word	0x080227c8
 8002058:	20002a28 	.word	0x20002a28
 800205c:	080229cc 	.word	0x080229cc
 8002060:	2000cbe8 	.word	0x2000cbe8
 8002064:	080229d8 	.word	0x080229d8
 8002068:	20000001 	.word	0x20000001

0800206c <SD_LOG_rotina>:
 800206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002070:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002074:	af10      	add	r7, sp, #64	; 0x40
 8002076:	4bb6      	ldr	r3, [pc, #728]	; (8002350 <SD_LOG_rotina+0x2e4>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	48b5      	ldr	r0, [pc, #724]	; (8002354 <SD_LOG_rotina+0x2e8>)
 800207e:	f006 faf0 	bl	8008662 <HAL_IWDG_Refresh>
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	48b3      	ldr	r0, [pc, #716]	; (8002358 <SD_LOG_rotina+0x2ec>)
 800208a:	f005 fc1b 	bl	80078c4 <HAL_GPIO_WritePin>
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8002094:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	821a      	strh	r2, [r3, #16]
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80020aa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80020ae:	225c      	movs	r2, #92	; 0x5c
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f01b fc77 	bl	801d9a6 <memset>
 80020b8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80020bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	3304      	adds	r3, #4
 80020c6:	229c      	movs	r2, #156	; 0x9c
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f01b fc6b 	bl	801d9a6 <memset>
 80020d0:	4ba2      	ldr	r3, [pc, #648]	; (800235c <SD_LOG_rotina+0x2f0>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	4ba1      	ldr	r3, [pc, #644]	; (8002360 <SD_LOG_rotina+0x2f4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <SD_LOG_rotina+0x2f8>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f507 7039 	add.w	r0, r7, #740	; 0x2e4
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	460b      	mov	r3, r1
 80020ee:	499e      	ldr	r1, [pc, #632]	; (8002368 <SD_LOG_rotina+0x2fc>)
 80020f0:	f01b fbc8 	bl	801d884 <siprintf>
 80020f4:	4b9d      	ldr	r3, [pc, #628]	; (800236c <SD_LOG_rotina+0x300>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f01b fafe 	bl	801d6fc <fflush>
 8002100:	4b9b      	ldr	r3, [pc, #620]	; (8002370 <SD_LOG_rotina+0x304>)
 8002102:	681e      	ldr	r6, [r3, #0]
 8002104:	4b9b      	ldr	r3, [pc, #620]	; (8002374 <SD_LOG_rotina+0x308>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <SD_LOG_rotina+0x30c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a9b      	ldr	r2, [pc, #620]	; (800237c <SD_LOG_rotina+0x310>)
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	499b      	ldr	r1, [pc, #620]	; (8002380 <SD_LOG_rotina+0x314>)
 8002114:	6809      	ldr	r1, [r1, #0]
 8002116:	489b      	ldr	r0, [pc, #620]	; (8002384 <SD_LOG_rotina+0x318>)
 8002118:	6800      	ldr	r0, [r0, #0]
 800211a:	4c9b      	ldr	r4, [pc, #620]	; (8002388 <SD_LOG_rotina+0x31c>)
 800211c:	6824      	ldr	r4, [r4, #0]
 800211e:	f507 7521 	add.w	r5, r7, #644	; 0x284
 8002122:	9404      	str	r4, [sp, #16]
 8002124:	9003      	str	r0, [sp, #12]
 8002126:	9102      	str	r1, [sp, #8]
 8002128:	9201      	str	r2, [sp, #4]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4632      	mov	r2, r6
 8002130:	4996      	ldr	r1, [pc, #600]	; (800238c <SD_LOG_rotina+0x320>)
 8002132:	4628      	mov	r0, r5
 8002134:	f01b fba6 	bl	801d884 <siprintf>
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <SD_LOG_rotina+0x300>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f01b fadc 	bl	801d6fc <fflush>
 8002144:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2301      	movs	r3, #1
 800214c:	4a90      	ldr	r2, [pc, #576]	; (8002390 <SD_LOG_rotina+0x324>)
 800214e:	4991      	ldr	r1, [pc, #580]	; (8002394 <SD_LOG_rotina+0x328>)
 8002150:	4891      	ldr	r0, [pc, #580]	; (8002398 <SD_LOG_rotina+0x32c>)
 8002152:	f01a fabf 	bl	801c6d4 <_fxe_file_open>
 8002156:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800215a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SD_LOG_rotina+0xfa>
 8002162:	f002 fd05 	bl	8004b70 <SD_Error_Handler>
 8002166:	2221      	movs	r2, #33	; 0x21
 8002168:	498c      	ldr	r1, [pc, #560]	; (800239c <SD_LOG_rotina+0x330>)
 800216a:	488a      	ldr	r0, [pc, #552]	; (8002394 <SD_LOG_rotina+0x328>)
 800216c:	f01a fafa 	bl	801c764 <_fxe_file_write>
 8002170:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002174:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SD_LOG_rotina+0x114>
 800217c:	f002 fcf8 	bl	8004b70 <SD_Error_Handler>
 8002180:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002184:	2216      	movs	r2, #22
 8002186:	4619      	mov	r1, r3
 8002188:	4882      	ldr	r0, [pc, #520]	; (8002394 <SD_LOG_rotina+0x328>)
 800218a:	f01a faeb 	bl	801c764 <_fxe_file_write>
 800218e:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002192:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SD_LOG_rotina+0x132>
 800219a:	f002 fce9 	bl	8004b70 <SD_Error_Handler>
 800219e:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80021a2:	2260      	movs	r2, #96	; 0x60
 80021a4:	4619      	mov	r1, r3
 80021a6:	487b      	ldr	r0, [pc, #492]	; (8002394 <SD_LOG_rotina+0x328>)
 80021a8:	f01a fadc 	bl	801c764 <_fxe_file_write>
 80021ac:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80021b0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SD_LOG_rotina+0x150>
 80021b8:	f002 fcda 	bl	8004b70 <SD_Error_Handler>
 80021bc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80021c0:	22a0      	movs	r2, #160	; 0xa0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4873      	ldr	r0, [pc, #460]	; (8002394 <SD_LOG_rotina+0x328>)
 80021c6:	f01a facd 	bl	801c764 <_fxe_file_write>
 80021ca:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80021ce:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SD_LOG_rotina+0x16e>
 80021d6:	f002 fccb 	bl	8004b70 <SD_Error_Handler>
 80021da:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80021de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	3304      	adds	r3, #4
 80021e8:	227c      	movs	r2, #124	; 0x7c
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f01b fbda 	bl	801d9a6 <memset>
 80021f2:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <SD_LOG_rotina+0x334>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f9aa 	bl	8000550 <__aeabi_f2d>
 80021fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <SD_LOG_rotina+0x338>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f9a3 	bl	8000550 <__aeabi_f2d>
 800220a:	4680      	mov	r8, r0
 800220c:	4689      	mov	r9, r1
 800220e:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <SD_LOG_rotina+0x33c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f99c 	bl	8000550 <__aeabi_f2d>
 8002218:	4682      	mov	sl, r0
 800221a:	468b      	mov	fp, r1
 800221c:	4b63      	ldr	r3, [pc, #396]	; (80023ac <SD_LOG_rotina+0x340>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f995 	bl	8000550 <__aeabi_f2d>
 8002226:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800222a:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <SD_LOG_rotina+0x344>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f98e 	bl	8000550 <__aeabi_f2d>
 8002234:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002238:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <SD_LOG_rotina+0x348>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f987 	bl	8000550 <__aeabi_f2d>
 8002242:	4604      	mov	r4, r0
 8002244:	460d      	mov	r5, r1
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <SD_LOG_rotina+0x34c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f980 	bl	8000550 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8002258:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800225c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002260:	ed97 7b02 	vldr	d7, [r7, #8]
 8002264:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002268:	ed97 7b04 	vldr	d7, [r7, #16]
 800226c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002270:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002274:	e9cd 8900 	strd	r8, r9, [sp]
 8002278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227c:	494f      	ldr	r1, [pc, #316]	; (80023bc <SD_LOG_rotina+0x350>)
 800227e:	f01b fb01 	bl	801d884 <siprintf>
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <SD_LOG_rotina+0x300>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f01b fa37 	bl	801d6fc <fflush>
 800228e:	2218      	movs	r2, #24
 8002290:	494b      	ldr	r1, [pc, #300]	; (80023c0 <SD_LOG_rotina+0x354>)
 8002292:	4840      	ldr	r0, [pc, #256]	; (8002394 <SD_LOG_rotina+0x328>)
 8002294:	f01a fa66 	bl	801c764 <_fxe_file_write>
 8002298:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800229c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SD_LOG_rotina+0x23c>
 80022a4:	f002 fc64 	bl	8004b70 <SD_Error_Handler>
 80022a8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	4619      	mov	r1, r3
 80022b0:	4838      	ldr	r0, [pc, #224]	; (8002394 <SD_LOG_rotina+0x328>)
 80022b2:	f01a fa57 	bl	801c764 <_fxe_file_write>
 80022b6:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80022ba:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SD_LOG_rotina+0x25a>
 80022c2:	f002 fc55 	bl	8004b70 <SD_Error_Handler>
 80022c6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80022ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	223c      	movs	r2, #60	; 0x3c
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f01b fb64 	bl	801d9a6 <memset>
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <SD_LOG_rotina+0x358>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f934 	bl	8000550 <__aeabi_f2d>
 80022e8:	4682      	mov	sl, r0
 80022ea:	468b      	mov	fp, r1
 80022ec:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <SD_LOG_rotina+0x35c>)
 80022ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022f2:	4b36      	ldr	r3, [pc, #216]	; (80023cc <SD_LOG_rotina+0x360>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f92a 	bl	8000550 <__aeabi_f2d>
 80022fc:	4680      	mov	r8, r0
 80022fe:	4689      	mov	r9, r1
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <SD_LOG_rotina+0x364>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f923 	bl	8000550 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002316:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800231a:	e9cd 4500 	strd	r4, r5, [sp]
 800231e:	4652      	mov	r2, sl
 8002320:	465b      	mov	r3, fp
 8002322:	492c      	ldr	r1, [pc, #176]	; (80023d4 <SD_LOG_rotina+0x368>)
 8002324:	f01b faae 	bl	801d884 <siprintf>
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <SD_LOG_rotina+0x300>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f01b f9e4 	bl	801d6fc <fflush>
 8002334:	2218      	movs	r2, #24
 8002336:	4928      	ldr	r1, [pc, #160]	; (80023d8 <SD_LOG_rotina+0x36c>)
 8002338:	4816      	ldr	r0, [pc, #88]	; (8002394 <SD_LOG_rotina+0x328>)
 800233a:	f01a fa13 	bl	801c764 <_fxe_file_write>
 800233e:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002342:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002346:	2b00      	cmp	r3, #0
 8002348:	d048      	beq.n	80023dc <SD_LOG_rotina+0x370>
 800234a:	f002 fc11 	bl	8004b70 <SD_Error_Handler>
 800234e:	e045      	b.n	80023dc <SD_LOG_rotina+0x370>
 8002350:	2000cfec 	.word	0x2000cfec
 8002354:	200003f0 	.word	0x200003f0
 8002358:	42020000 	.word	0x42020000
 800235c:	20002a22 	.word	0x20002a22
 8002360:	20002a21 	.word	0x20002a21
 8002364:	20002a20 	.word	0x20002a20
 8002368:	080227b0 	.word	0x080227b0
 800236c:	200000c4 	.word	0x200000c4
 8002370:	2000cfe8 	.word	0x2000cfe8
 8002374:	2000cfe4 	.word	0x2000cfe4
 8002378:	2000d004 	.word	0x2000d004
 800237c:	2000cff0 	.word	0x2000cff0
 8002380:	2000cff4 	.word	0x2000cff4
 8002384:	2000cff8 	.word	0x2000cff8
 8002388:	2000cffc 	.word	0x2000cffc
 800238c:	080227d0 	.word	0x080227d0
 8002390:	080229cc 	.word	0x080229cc
 8002394:	2000cbe8 	.word	0x2000cbe8
 8002398:	20002a28 	.word	0x20002a28
 800239c:	080229ec 	.word	0x080229ec
 80023a0:	2000217c 	.word	0x2000217c
 80023a4:	20002180 	.word	0x20002180
 80023a8:	20002184 	.word	0x20002184
 80023ac:	20002188 	.word	0x20002188
 80023b0:	2000218c 	.word	0x2000218c
 80023b4:	20002190 	.word	0x20002190
 80023b8:	20002194 	.word	0x20002194
 80023bc:	08022828 	.word	0x08022828
 80023c0:	08022a48 	.word	0x08022a48
 80023c4:	20002564 	.word	0x20002564
 80023c8:	20002870 	.word	0x20002870
 80023cc:	20002568 	.word	0x20002568
 80023d0:	20002560 	.word	0x20002560
 80023d4:	0802286c 	.word	0x0802286c
 80023d8:	08022a60 	.word	0x08022a60
 80023dc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	4619      	mov	r1, r3
 80023e4:	48b6      	ldr	r0, [pc, #728]	; (80026c0 <SD_LOG_rotina+0x654>)
 80023e6:	f01a f9bd 	bl	801c764 <_fxe_file_write>
 80023ea:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80023ee:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SD_LOG_rotina+0x38e>
 80023f6:	f002 fbbb 	bl	8004b70 <SD_Error_Handler>
 80023fa:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80023fe:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	3304      	adds	r3, #4
 8002408:	223c      	movs	r2, #60	; 0x3c
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f01b faca 	bl	801d9a6 <memset>
 8002412:	4bac      	ldr	r3, [pc, #688]	; (80026c4 <SD_LOG_rotina+0x658>)
 8002414:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002418:	4bab      	ldr	r3, [pc, #684]	; (80026c8 <SD_LOG_rotina+0x65c>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	49ab      	ldr	r1, [pc, #684]	; (80026cc <SD_LOG_rotina+0x660>)
 8002420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002424:	f107 06e4 	add.w	r6, r7, #228	; 0xe4
 8002428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800242c:	e9cd 2300 	strd	r2, r3, [sp]
 8002430:	4622      	mov	r2, r4
 8002432:	462b      	mov	r3, r5
 8002434:	49a6      	ldr	r1, [pc, #664]	; (80026d0 <SD_LOG_rotina+0x664>)
 8002436:	4630      	mov	r0, r6
 8002438:	f01b fa24 	bl	801d884 <siprintf>
 800243c:	4ba5      	ldr	r3, [pc, #660]	; (80026d4 <SD_LOG_rotina+0x668>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f01b f95a 	bl	801d6fc <fflush>
 8002448:	2218      	movs	r2, #24
 800244a:	49a3      	ldr	r1, [pc, #652]	; (80026d8 <SD_LOG_rotina+0x66c>)
 800244c:	489c      	ldr	r0, [pc, #624]	; (80026c0 <SD_LOG_rotina+0x654>)
 800244e:	f01a f989 	bl	801c764 <_fxe_file_write>
 8002452:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002456:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SD_LOG_rotina+0x3f6>
 800245e:	f002 fb87 	bl	8004b70 <SD_Error_Handler>
 8002462:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	4619      	mov	r1, r3
 800246a:	4895      	ldr	r0, [pc, #596]	; (80026c0 <SD_LOG_rotina+0x654>)
 800246c:	f01a f97a 	bl	801c764 <_fxe_file_write>
 8002470:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002474:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SD_LOG_rotina+0x414>
 800247c:	f002 fb78 	bl	8004b70 <SD_Error_Handler>
 8002480:	488f      	ldr	r0, [pc, #572]	; (80026c0 <SD_LOG_rotina+0x654>)
 8002482:	f01a f901 	bl	801c688 <_fxe_file_close>
 8002486:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800248a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SD_LOG_rotina+0x42a>
 8002492:	f002 fb6d 	bl	8004b70 <SD_Error_Handler>
 8002496:	4891      	ldr	r0, [pc, #580]	; (80026dc <SD_LOG_rotina+0x670>)
 8002498:	f01a f98f 	bl	801c7ba <_fxe_media_flush>
 800249c:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80024a0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SD_LOG_rotina+0x440>
 80024a8:	f002 fb62 	bl	8004b70 <SD_Error_Handler>
 80024ac:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80024b0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	3304      	adds	r3, #4
 80024ba:	22bc      	movs	r2, #188	; 0xbc
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f01b fa71 	bl	801d9a6 <memset>
 80024c4:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f841 	bl	8000550 <__aeabi_f2d>
 80024ce:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80024d2:	4b83      	ldr	r3, [pc, #524]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024d4:	7e1b      	ldrb	r3, [r3, #24]
 80024d6:	461e      	mov	r6, r3
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f837 	bl	8000550 <__aeabi_f2d>
 80024e2:	4682      	mov	sl, r0
 80024e4:	468b      	mov	fp, r1
 80024e6:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024e8:	7e5b      	ldrb	r3, [r3, #25]
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f82d 	bl	8000550 <__aeabi_f2d>
 80024f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024fa:	4b79      	ldr	r3, [pc, #484]	; (80026e0 <SD_LOG_rotina+0x674>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f826 	bl	8000550 <__aeabi_f2d>
 8002504:	e9c7 0100 	strd	r0, r1, [r7]
 8002508:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <SD_LOG_rotina+0x674>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f81f 	bl	8000550 <__aeabi_f2d>
 8002512:	4680      	mov	r8, r0
 8002514:	4689      	mov	r9, r1
 8002516:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <SD_LOG_rotina+0x674>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f818 	bl	8000550 <__aeabi_f2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <SD_LOG_rotina+0x674>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800252c:	930e      	str	r3, [sp, #56]	; 0x38
 800252e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8002532:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002536:	ed97 7b00 	vldr	d7, [r7]
 800253a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800253e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002542:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	9304      	str	r3, [sp, #16]
 800254a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800254e:	9600      	str	r6, [sp, #0]
 8002550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002554:	4963      	ldr	r1, [pc, #396]	; (80026e4 <SD_LOG_rotina+0x678>)
 8002556:	f01b f995 	bl	801d884 <siprintf>
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <SD_LOG_rotina+0x668>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4618      	mov	r0, r3
 8002562:	f01b f8cb 	bl	801d6fc <fflush>
 8002566:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <SD_LOG_rotina+0x67c>)
 8002570:	4953      	ldr	r1, [pc, #332]	; (80026c0 <SD_LOG_rotina+0x654>)
 8002572:	485a      	ldr	r0, [pc, #360]	; (80026dc <SD_LOG_rotina+0x670>)
 8002574:	f01a f8ae 	bl	801c6d4 <_fxe_file_open>
 8002578:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800257c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SD_LOG_rotina+0x51c>
 8002584:	f002 faf4 	bl	8004b70 <SD_Error_Handler>
 8002588:	2218      	movs	r2, #24
 800258a:	4958      	ldr	r1, [pc, #352]	; (80026ec <SD_LOG_rotina+0x680>)
 800258c:	484c      	ldr	r0, [pc, #304]	; (80026c0 <SD_LOG_rotina+0x654>)
 800258e:	f01a f8e9 	bl	801c764 <_fxe_file_write>
 8002592:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002596:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <SD_LOG_rotina+0x536>
 800259e:	f002 fae7 	bl	8004b70 <SD_Error_Handler>
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	22c0      	movs	r2, #192	; 0xc0
 80025a8:	4619      	mov	r1, r3
 80025aa:	4845      	ldr	r0, [pc, #276]	; (80026c0 <SD_LOG_rotina+0x654>)
 80025ac:	f01a f8da 	bl	801c764 <_fxe_file_write>
 80025b0:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80025b4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SD_LOG_rotina+0x554>
 80025bc:	f002 fad8 	bl	8004b70 <SD_Error_Handler>
 80025c0:	2202      	movs	r2, #2
 80025c2:	494b      	ldr	r1, [pc, #300]	; (80026f0 <SD_LOG_rotina+0x684>)
 80025c4:	483e      	ldr	r0, [pc, #248]	; (80026c0 <SD_LOG_rotina+0x654>)
 80025c6:	f01a f8cd 	bl	801c764 <_fxe_file_write>
 80025ca:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80025ce:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SD_LOG_rotina+0x56e>
 80025d6:	f002 facb 	bl	8004b70 <SD_Error_Handler>
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <SD_LOG_rotina+0x688>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 80b1 	bne.w	8002748 <SD_LOG_rotina+0x6dc>
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <SD_LOG_rotina+0x688>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	4834      	ldr	r0, [pc, #208]	; (80026c0 <SD_LOG_rotina+0x654>)
 80025ee:	f01a f84b 	bl	801c688 <_fxe_file_close>
 80025f2:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80025f6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <SD_LOG_rotina+0x596>
 80025fe:	f002 fab7 	bl	8004b70 <SD_Error_Handler>
 8002602:	4836      	ldr	r0, [pc, #216]	; (80026dc <SD_LOG_rotina+0x670>)
 8002604:	f01a f8d9 	bl	801c7ba <_fxe_media_flush>
 8002608:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800260c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SD_LOG_rotina+0x5ac>
 8002614:	f002 faac 	bl	8004b70 <SD_Error_Handler>
 8002618:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <SD_LOG_rotina+0x67c>)
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <SD_LOG_rotina+0x654>)
 8002624:	482d      	ldr	r0, [pc, #180]	; (80026dc <SD_LOG_rotina+0x670>)
 8002626:	f01a f855 	bl	801c6d4 <_fxe_file_open>
 800262a:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800262e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SD_LOG_rotina+0x5ce>
 8002636:	f002 fa9b 	bl	8004b70 <SD_Error_Handler>
 800263a:	221e      	movs	r2, #30
 800263c:	492e      	ldr	r1, [pc, #184]	; (80026f8 <SD_LOG_rotina+0x68c>)
 800263e:	4820      	ldr	r0, [pc, #128]	; (80026c0 <SD_LOG_rotina+0x654>)
 8002640:	f01a f890 	bl	801c764 <_fxe_file_write>
 8002644:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002648:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <SD_LOG_rotina+0x5e8>
 8002650:	f002 fa8e 	bl	8004b70 <SD_Error_Handler>
 8002654:	2202      	movs	r2, #2
 8002656:	4926      	ldr	r1, [pc, #152]	; (80026f0 <SD_LOG_rotina+0x684>)
 8002658:	4819      	ldr	r0, [pc, #100]	; (80026c0 <SD_LOG_rotina+0x654>)
 800265a:	f01a f883 	bl	801c764 <_fxe_file_write>
 800265e:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002662:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <SD_LOG_rotina+0x602>
 800266a:	f002 fa81 	bl	8004b70 <SD_Error_Handler>
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <SD_LOG_rotina+0x690>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10e      	bne.n	8002696 <SD_LOG_rotina+0x62a>
 8002678:	f44f 7240 	mov.w	r2, #768	; 0x300
 800267c:	4920      	ldr	r1, [pc, #128]	; (8002700 <SD_LOG_rotina+0x694>)
 800267e:	4810      	ldr	r0, [pc, #64]	; (80026c0 <SD_LOG_rotina+0x654>)
 8002680:	f01a f870 	bl	801c764 <_fxe_file_write>
 8002684:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002688:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800268c:	2b00      	cmp	r3, #0
 800268e:	d04e      	beq.n	800272e <SD_LOG_rotina+0x6c2>
 8002690:	f002 fa6e 	bl	8004b70 <SD_Error_Handler>
 8002694:	e04b      	b.n	800272e <SD_LOG_rotina+0x6c2>
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <SD_LOG_rotina+0x690>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d133      	bne.n	8002708 <SD_LOG_rotina+0x69c>
 80026a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026a4:	4917      	ldr	r1, [pc, #92]	; (8002704 <SD_LOG_rotina+0x698>)
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <SD_LOG_rotina+0x654>)
 80026a8:	f01a f85c 	bl	801c764 <_fxe_file_write>
 80026ac:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80026b0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03a      	beq.n	800272e <SD_LOG_rotina+0x6c2>
 80026b8:	f002 fa5a 	bl	8004b70 <SD_Error_Handler>
 80026bc:	e037      	b.n	800272e <SD_LOG_rotina+0x6c2>
 80026be:	bf00      	nop
 80026c0:	2000cbe8 	.word	0x2000cbe8
 80026c4:	20002a08 	.word	0x20002a08
 80026c8:	20002a10 	.word	0x20002a10
 80026cc:	20002a18 	.word	0x20002a18
 80026d0:	08022890 	.word	0x08022890
 80026d4:	200000c4 	.word	0x200000c4
 80026d8:	08022a78 	.word	0x08022a78
 80026dc:	20002a28 	.word	0x20002a28
 80026e0:	20000a1c 	.word	0x20000a1c
 80026e4:	080228b0 	.word	0x080228b0
 80026e8:	080229cc 	.word	0x080229cc
 80026ec:	08022a10 	.word	0x08022a10
 80026f0:	08022910 	.word	0x08022910
 80026f4:	2000cfe0 	.word	0x2000cfe0
 80026f8:	08022a28 	.word	0x08022a28
 80026fc:	20002154 	.word	0x20002154
 8002700:	20001e54 	.word	0x20001e54
 8002704:	20001854 	.word	0x20001854
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <SD_LOG_rotina+0x720>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d10d      	bne.n	800272e <SD_LOG_rotina+0x6c2>
 8002712:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002716:	491e      	ldr	r1, [pc, #120]	; (8002790 <SD_LOG_rotina+0x724>)
 8002718:	481e      	ldr	r0, [pc, #120]	; (8002794 <SD_LOG_rotina+0x728>)
 800271a:	f01a f823 	bl	801c764 <_fxe_file_write>
 800271e:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002722:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SD_LOG_rotina+0x6c2>
 800272a:	f002 fa21 	bl	8004b70 <SD_Error_Handler>
 800272e:	2202      	movs	r2, #2
 8002730:	4919      	ldr	r1, [pc, #100]	; (8002798 <SD_LOG_rotina+0x72c>)
 8002732:	4818      	ldr	r0, [pc, #96]	; (8002794 <SD_LOG_rotina+0x728>)
 8002734:	f01a f816 	bl	801c764 <_fxe_file_write>
 8002738:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 800273c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SD_LOG_rotina+0x6dc>
 8002744:	f002 fa14 	bl	8004b70 <SD_Error_Handler>
 8002748:	4812      	ldr	r0, [pc, #72]	; (8002794 <SD_LOG_rotina+0x728>)
 800274a:	f019 ff9d 	bl	801c688 <_fxe_file_close>
 800274e:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002752:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <SD_LOG_rotina+0x6f2>
 800275a:	f002 fa09 	bl	8004b70 <SD_Error_Handler>
 800275e:	480f      	ldr	r0, [pc, #60]	; (800279c <SD_LOG_rotina+0x730>)
 8002760:	f01a f82b 	bl	801c7ba <_fxe_media_flush>
 8002764:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 8002768:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SD_LOG_rotina+0x708>
 8002770:	f002 f9fe 	bl	8004b70 <SD_Error_Handler>
 8002774:	2200      	movs	r2, #0
 8002776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277a:	4809      	ldr	r0, [pc, #36]	; (80027a0 <SD_LOG_rotina+0x734>)
 800277c:	f005 f8a2 	bl	80078c4 <HAL_GPIO_WritePin>
 8002780:	bf00      	nop
 8002782:	f507 7741 	add.w	r7, r7, #772	; 0x304
 8002786:	46bd      	mov	sp, r7
 8002788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278c:	20002154 	.word	0x20002154
 8002790:	20001b54 	.word	0x20001b54
 8002794:	2000cbe8 	.word	0x2000cbe8
 8002798:	08022910 	.word	0x08022910
 800279c:	20002a28 	.word	0x20002a28
 80027a0:	42020000 	.word	0x42020000

080027a4 <IMU_Init>:
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	23c8      	movs	r3, #200	; 0xc8
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	1dbb      	adds	r3, r7, #6
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2275      	movs	r2, #117	; 0x75
 80027ba:	21d0      	movs	r1, #208	; 0xd0
 80027bc:	482c      	ldr	r0, [pc, #176]	; (8002870 <IMU_Init+0xcc>)
 80027be:	f005 fa49 	bl	8007c54 <HAL_I2C_Mem_Read>
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	2b68      	cmp	r3, #104	; 0x68
 80027c6:	d14c      	bne.n	8002862 <IMU_Init+0xbe>
 80027c8:	2300      	movs	r3, #0
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	23c8      	movs	r3, #200	; 0xc8
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2301      	movs	r3, #1
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	226b      	movs	r2, #107	; 0x6b
 80027dc:	21d0      	movs	r1, #208	; 0xd0
 80027de:	4824      	ldr	r0, [pc, #144]	; (8002870 <IMU_Init+0xcc>)
 80027e0:	f005 f924 	bl	8007a2c <HAL_I2C_Mem_Write>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <IMU_Init+0x4a>
 80027ea:	f002 f9d5 	bl	8004b98 <IMU_Error_Handler>
 80027ee:	2307      	movs	r3, #7
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	23c8      	movs	r3, #200	; 0xc8
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	2301      	movs	r3, #1
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	2219      	movs	r2, #25
 8002802:	21d0      	movs	r1, #208	; 0xd0
 8002804:	481a      	ldr	r0, [pc, #104]	; (8002870 <IMU_Init+0xcc>)
 8002806:	f005 f911 	bl	8007a2c <HAL_I2C_Mem_Write>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <IMU_Init+0x70>
 8002810:	f002 f9c2 	bl	8004b98 <IMU_Error_Handler>
 8002814:	2301      	movs	r3, #1
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	23c8      	movs	r3, #200	; 0xc8
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2301      	movs	r3, #1
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2301      	movs	r3, #1
 8002826:	221b      	movs	r2, #27
 8002828:	21d0      	movs	r1, #208	; 0xd0
 800282a:	4811      	ldr	r0, [pc, #68]	; (8002870 <IMU_Init+0xcc>)
 800282c:	f005 f8fe 	bl	8007a2c <HAL_I2C_Mem_Write>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <IMU_Init+0x96>
 8002836:	f002 f9af 	bl	8004b98 <IMU_Error_Handler>
 800283a:	2303      	movs	r3, #3
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	23c8      	movs	r3, #200	; 0xc8
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	221c      	movs	r2, #28
 800284e:	21d0      	movs	r1, #208	; 0xd0
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <IMU_Init+0xcc>)
 8002852:	f005 f8eb 	bl	8007a2c <HAL_I2C_Mem_Write>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <IMU_Init+0xc2>
 800285c:	f002 f99c 	bl	8004b98 <IMU_Error_Handler>
 8002860:	e001      	b.n	8002866 <IMU_Init+0xc2>
 8002862:	f002 f999 	bl	8004b98 <IMU_Error_Handler>
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200002a0 	.word	0x200002a0

08002874 <BPS_Init>:
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af04      	add	r7, sp, #16
 800287a:	4604      	mov	r4, r0
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4623      	mov	r3, r4
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	4603      	mov	r3, r0
 8002888:	71bb      	strb	r3, [r7, #6]
 800288a:	460b      	mov	r3, r1
 800288c:	717b      	strb	r3, [r7, #5]
 800288e:	4613      	mov	r3, r2
 8002890:	713b      	strb	r3, [r7, #4]
 8002892:	23c8      	movs	r3, #200	; 0xc8
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	2301      	movs	r3, #1
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	f107 030f 	add.w	r3, r7, #15
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	22d0      	movs	r2, #208	; 0xd0
 80028a4:	21ec      	movs	r1, #236	; 0xec
 80028a6:	485d      	ldr	r0, [pc, #372]	; (8002a1c <BPS_Init+0x1a8>)
 80028a8:	f005 f9d4 	bl	8007c54 <HAL_I2C_Mem_Read>
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b60      	cmp	r3, #96	; 0x60
 80028b0:	f040 80ad 	bne.w	8002a0e <BPS_Init+0x19a>
 80028b4:	f000 fc2e 	bl	8003114 <BPS_Calibracao>
 80028b8:	2300      	movs	r3, #0
 80028ba:	73bb      	strb	r3, [r7, #14]
 80028bc:	2300      	movs	r3, #0
 80028be:	737b      	strb	r3, [r7, #13]
 80028c0:	23b6      	movs	r3, #182	; 0xb6
 80028c2:	73bb      	strb	r3, [r7, #14]
 80028c4:	23c8      	movs	r3, #200	; 0xc8
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	2301      	movs	r3, #1
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	f107 030e 	add.w	r3, r7, #14
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	22e0      	movs	r2, #224	; 0xe0
 80028d6:	21ec      	movs	r1, #236	; 0xec
 80028d8:	4850      	ldr	r0, [pc, #320]	; (8002a1c <BPS_Init+0x1a8>)
 80028da:	f005 f8a7 	bl	8007a2c <HAL_I2C_Mem_Write>
 80028de:	20c8      	movs	r0, #200	; 0xc8
 80028e0:	f003 fa02 	bl	8005ce8 <HAL_Delay>
 80028e4:	797b      	ldrb	r3, [r7, #5]
 80028e6:	73bb      	strb	r3, [r7, #14]
 80028e8:	23c8      	movs	r3, #200	; 0xc8
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f107 030e 	add.w	r3, r7, #14
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	22f2      	movs	r2, #242	; 0xf2
 80028fa:	21ec      	movs	r1, #236	; 0xec
 80028fc:	4847      	ldr	r0, [pc, #284]	; (8002a1c <BPS_Init+0x1a8>)
 80028fe:	f005 f895 	bl	8007a2c <HAL_I2C_Mem_Write>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <BPS_Init+0x98>
 8002908:	f002 f952 	bl	8004bb0 <BPS_Error_Handler>
 800290c:	20c8      	movs	r0, #200	; 0xc8
 800290e:	f003 f9eb 	bl	8005ce8 <HAL_Delay>
 8002912:	23c8      	movs	r3, #200	; 0xc8
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	2301      	movs	r3, #1
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	f107 030d 	add.w	r3, r7, #13
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	22f2      	movs	r2, #242	; 0xf2
 8002924:	21ec      	movs	r1, #236	; 0xec
 8002926:	483d      	ldr	r0, [pc, #244]	; (8002a1c <BPS_Init+0x1a8>)
 8002928:	f005 f994 	bl	8007c54 <HAL_I2C_Mem_Read>
 800292c:	7b7a      	ldrb	r2, [r7, #13]
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <BPS_Init+0xc4>
 8002934:	f002 f93c 	bl	8004bb0 <BPS_Error_Handler>
 8002938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800293c:	015b      	lsls	r3, r3, #5
 800293e:	b25a      	sxtb	r2, r3
 8002940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	b25b      	sxtb	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b25b      	sxtb	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	73bb      	strb	r3, [r7, #14]
 8002950:	23c8      	movs	r3, #200	; 0xc8
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2301      	movs	r3, #1
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	f107 030e 	add.w	r3, r7, #14
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	22f5      	movs	r2, #245	; 0xf5
 8002962:	21ec      	movs	r1, #236	; 0xec
 8002964:	482d      	ldr	r0, [pc, #180]	; (8002a1c <BPS_Init+0x1a8>)
 8002966:	f005 f861 	bl	8007a2c <HAL_I2C_Mem_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <BPS_Init+0x100>
 8002970:	f002 f91e 	bl	8004bb0 <BPS_Error_Handler>
 8002974:	20c8      	movs	r0, #200	; 0xc8
 8002976:	f003 f9b7 	bl	8005ce8 <HAL_Delay>
 800297a:	23c8      	movs	r3, #200	; 0xc8
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	2301      	movs	r3, #1
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	f107 030d 	add.w	r3, r7, #13
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	22f5      	movs	r2, #245	; 0xf5
 800298c:	21ec      	movs	r1, #236	; 0xec
 800298e:	4823      	ldr	r0, [pc, #140]	; (8002a1c <BPS_Init+0x1a8>)
 8002990:	f005 f960 	bl	8007c54 <HAL_I2C_Mem_Read>
 8002994:	7b7a      	ldrb	r2, [r7, #13]
 8002996:	7bbb      	ldrb	r3, [r7, #14]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <BPS_Init+0x12c>
 800299c:	f002 f908 	bl	8004bb0 <BPS_Error_Handler>
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	015b      	lsls	r3, r3, #5
 80029a4:	b25a      	sxtb	r2, r3
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	73bb      	strb	r3, [r7, #14]
 80029bc:	23c8      	movs	r3, #200	; 0xc8
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	2301      	movs	r3, #1
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	f107 030e 	add.w	r3, r7, #14
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2301      	movs	r3, #1
 80029cc:	22f4      	movs	r2, #244	; 0xf4
 80029ce:	21ec      	movs	r1, #236	; 0xec
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <BPS_Init+0x1a8>)
 80029d2:	f005 f82b 	bl	8007a2c <HAL_I2C_Mem_Write>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <BPS_Init+0x16c>
 80029dc:	f002 f8e8 	bl	8004bb0 <BPS_Error_Handler>
 80029e0:	20c8      	movs	r0, #200	; 0xc8
 80029e2:	f003 f981 	bl	8005ce8 <HAL_Delay>
 80029e6:	23c8      	movs	r3, #200	; 0xc8
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f107 030d 	add.w	r3, r7, #13
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2301      	movs	r3, #1
 80029f6:	22f4      	movs	r2, #244	; 0xf4
 80029f8:	21ec      	movs	r1, #236	; 0xec
 80029fa:	4808      	ldr	r0, [pc, #32]	; (8002a1c <BPS_Init+0x1a8>)
 80029fc:	f005 f92a 	bl	8007c54 <HAL_I2C_Mem_Read>
 8002a00:	7b7a      	ldrb	r2, [r7, #13]
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d004      	beq.n	8002a12 <BPS_Init+0x19e>
 8002a08:	f002 f8d2 	bl	8004bb0 <BPS_Error_Handler>
 8002a0c:	e001      	b.n	8002a12 <BPS_Init+0x19e>
 8002a0e:	f002 f8cf 	bl	8004bb0 <BPS_Error_Handler>
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200002a0 	.word	0x200002a0

08002a20 <BPS_Pressao_Comp>:
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b0ca      	sub	sp, #296	; 0x128
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002a2c:	4bb0      	ldr	r3, [pc, #704]	; (8002cf0 <BPS_Pressao_Comp+0x2d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	17da      	asrs	r2, r3, #31
 8002a32:	461c      	mov	r4, r3
 8002a34:	4615      	mov	r5, r2
 8002a36:	f5b4 38fa 	subs.w	r8, r4, #128000	; 0x1f400
 8002a3a:	f145 39ff 	adc.w	r9, r5, #4294967295
 8002a3e:	e9c7 8948 	strd	r8, r9, [r7, #288]	; 0x120
 8002a42:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a4a:	fb03 f102 	mul.w	r1, r3, r2
 8002a4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	18ca      	adds	r2, r1, r3
 8002a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a60:	fba3 ab03 	umull	sl, fp, r3, r3
 8002a64:	eb02 030b 	add.w	r3, r2, fp
 8002a68:	469b      	mov	fp, r3
 8002a6a:	4ba2      	ldr	r3, [pc, #648]	; (8002cf4 <BPS_Pressao_Comp+0x2d4>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	17da      	asrs	r2, r3, #31
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002a80:	4603      	mov	r3, r0
 8002a82:	fb03 f20b 	mul.w	r2, r3, fp
 8002a86:	460b      	mov	r3, r1
 8002a88:	fb0a f303 	mul.w	r3, sl, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4602      	mov	r2, r0
 8002a90:	fbaa 1202 	umull	r1, r2, sl, r2
 8002a94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a98:	460a      	mov	r2, r1
 8002a9a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aa8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002aac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002ab0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <BPS_Pressao_Comp+0x2d8>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	17da      	asrs	r2, r3, #31
 8002abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002aca:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002ace:	462a      	mov	r2, r5
 8002ad0:	fb02 f203 	mul.w	r2, r2, r3
 8002ad4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ad8:	4621      	mov	r1, r4
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	441a      	add	r2, r3
 8002ae0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	fba3 1301 	umull	r1, r3, r3, r1
 8002aea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002aee:	460b      	mov	r3, r1
 8002af0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af8:	18d3      	adds	r3, r2, r3
 8002afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002b0a:	462b      	mov	r3, r5
 8002b0c:	0459      	lsls	r1, r3, #17
 8002b0e:	4623      	mov	r3, r4
 8002b10:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002b14:	4623      	mov	r3, r4
 8002b16:	0458      	lsls	r0, r3, #17
 8002b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002b1c:	1814      	adds	r4, r2, r0
 8002b1e:	643c      	str	r4, [r7, #64]	; 0x40
 8002b20:	414b      	adcs	r3, r1
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
 8002b24:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002b28:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002b2c:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <BPS_Pressao_Comp+0x2dc>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	17da      	asrs	r2, r3, #31
 8002b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b3a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b4a:	00d9      	lsls	r1, r3, #3
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002b52:	1814      	adds	r4, r2, r0
 8002b54:	63bc      	str	r4, [r7, #56]	; 0x38
 8002b56:	414b      	adcs	r3, r1
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002b5e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002b62:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b6a:	fb03 f102 	mul.w	r1, r3, r2
 8002b6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	18ca      	adds	r2, r1, r3
 8002b7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b80:	fba3 1303 	umull	r1, r3, r3, r3
 8002b84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b88:	460b      	mov	r3, r1
 8002b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <BPS_Pressao_Comp+0x2e0>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	17da      	asrs	r2, r3, #31
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002baa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002bae:	462b      	mov	r3, r5
 8002bb0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	fb02 f203 	mul.w	r2, r2, r3
 8002bba:	464b      	mov	r3, r9
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	fba2 1201 	umull	r1, r2, r2, r1
 8002bcc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002bd6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002bda:	4413      	add	r3, r2
 8002bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002bec:	4623      	mov	r3, r4
 8002bee:	0a18      	lsrs	r0, r3, #8
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	1219      	asrs	r1, r3, #8
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <BPS_Pressao_Comp+0x2e4>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	17da      	asrs	r2, r3, #31
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c08:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c10:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8002c14:	464a      	mov	r2, r9
 8002c16:	fb02 f203 	mul.w	r2, r2, r3
 8002c1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c1e:	4644      	mov	r4, r8
 8002c20:	fb04 f303 	mul.w	r3, r4, r3
 8002c24:	441a      	add	r2, r3
 8002c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c2a:	4644      	mov	r4, r8
 8002c2c:	fba3 4304 	umull	r4, r3, r3, r4
 8002c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c34:	4623      	mov	r3, r4
 8002c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c3e:	18d3      	adds	r3, r2, r3
 8002c40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c50:	464c      	mov	r4, r9
 8002c52:	0323      	lsls	r3, r4, #12
 8002c54:	4644      	mov	r4, r8
 8002c56:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002c5a:	4644      	mov	r4, r8
 8002c5c:	0322      	lsls	r2, r4, #12
 8002c5e:	1884      	adds	r4, r0, r2
 8002c60:	633c      	str	r4, [r7, #48]	; 0x30
 8002c62:	eb41 0303 	adc.w	r3, r1, r3
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
 8002c68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002c6c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8002c70:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002c74:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002c78:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <BPS_Pressao_Comp+0x2e8>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c8e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c96:	462b      	mov	r3, r5
 8002c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	4622      	mov	r2, r4
 8002cae:	4641      	mov	r1, r8
 8002cb0:	fba2 1201 	umull	r1, r2, r2, r1
 8002cb4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002cb8:	460a      	mov	r2, r1
 8002cba:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002cbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	104a      	asrs	r2, r1, #1
 8002cd8:	4629      	mov	r1, r5
 8002cda:	17cb      	asrs	r3, r1, #31
 8002cdc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8002ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <BPS_Pressao_Comp+0x2ec>
 8002ce8:	f001 ff62 	bl	8004bb0 <BPS_Error_Handler>
 8002cec:	e00e      	b.n	8002d0c <BPS_Pressao_Comp+0x2ec>
 8002cee:	bf00      	nop
 8002cf0:	2000255c 	.word	0x2000255c
 8002cf4:	2000254c 	.word	0x2000254c
 8002cf8:	2000254a 	.word	0x2000254a
 8002cfc:	20002548 	.word	0x20002548
 8002d00:	20002546 	.word	0x20002546
 8002d04:	20002544 	.word	0x20002544
 8002d08:	2000253a 	.word	0x2000253a
 8002d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d10:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002d14:	17da      	asrs	r2, r3, #31
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002d1e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8002d22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d26:	105b      	asrs	r3, r3, #1
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d30:	07db      	lsls	r3, r3, #31
 8002d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d36:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002d3a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a89      	subs	r1, r1, r2
 8002d42:	67b9      	str	r1, [r7, #120]	; 0x78
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb61 0303 	sbc.w	r3, r1, r3
 8002d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d4c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	6239      	str	r1, [r7, #32]
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d60:	4621      	mov	r1, r4
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	61b9      	str	r1, [r7, #24]
 8002d66:	4629      	mov	r1, r5
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002d78:	4649      	mov	r1, r9
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d82:	4641      	mov	r1, r8
 8002d84:	018a      	lsls	r2, r1, #6
 8002d86:	4641      	mov	r1, r8
 8002d88:	1889      	adds	r1, r1, r2
 8002d8a:	6139      	str	r1, [r7, #16]
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	eb43 0101 	adc.w	r1, r3, r1
 8002d92:	6179      	str	r1, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002da0:	4649      	mov	r1, r9
 8002da2:	008b      	lsls	r3, r1, #2
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002daa:	4641      	mov	r1, r8
 8002dac:	008a      	lsls	r2, r1, #2
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4622      	mov	r2, r4
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	462a      	mov	r2, r5
 8002dbe:	eb42 0303 	adc.w	r3, r2, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	008b      	lsls	r3, r1, #2
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dda:	4641      	mov	r1, r8
 8002ddc:	008a      	lsls	r2, r1, #2
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	4622      	mov	r2, r4
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	673b      	str	r3, [r7, #112]	; 0x70
 8002dea:	462b      	mov	r3, r5
 8002dec:	460a      	mov	r2, r1
 8002dee:	eb42 0303 	adc.w	r3, r2, r3
 8002df2:	677b      	str	r3, [r7, #116]	; 0x74
 8002df4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002df8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002dfc:	f7fd ff48 	bl	8000c90 <__aeabi_ldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <BPS_Pressao_Comp+0x584>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	17da      	asrs	r2, r3, #31
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e16:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0b50      	lsrs	r0, r2, #13
 8002e24:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002e28:	1359      	asrs	r1, r3, #13
 8002e2a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002e2e:	462b      	mov	r3, r5
 8002e30:	fb00 f203 	mul.w	r2, r0, r3
 8002e34:	4623      	mov	r3, r4
 8002e36:	fb03 f301 	mul.w	r3, r3, r1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	fba2 1200 	umull	r1, r2, r2, r0
 8002e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e46:	460a      	mov	r2, r1
 8002e48:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002e4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e50:	4413      	add	r3, r2
 8002e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e56:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	0b50      	lsrs	r0, r2, #13
 8002e64:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002e68:	1359      	asrs	r1, r3, #13
 8002e6a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002e6e:	462b      	mov	r3, r5
 8002e70:	fb00 f203 	mul.w	r2, r0, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	fb03 f301 	mul.w	r3, r3, r1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	fba2 1200 	umull	r1, r2, r2, r0
 8002e82:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e86:	460a      	mov	r2, r1
 8002e88:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002e8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e90:	4413      	add	r3, r2
 8002e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	0e4a      	lsrs	r2, r1, #25
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002eac:	4629      	mov	r1, r5
 8002eae:	164b      	asrs	r3, r1, #25
 8002eb0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <BPS_Pressao_Comp+0x588>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	17da      	asrs	r2, r3, #31
 8002ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8002ec2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ec6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002eca:	462a      	mov	r2, r5
 8002ecc:	fb02 f203 	mul.w	r2, r2, r3
 8002ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	fba2 1201 	umull	r1, r2, r2, r1
 8002ee6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002eea:	460a      	mov	r2, r1
 8002eec:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002ef0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002f06:	4621      	mov	r1, r4
 8002f08:	0cca      	lsrs	r2, r1, #19
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002f10:	4629      	mov	r1, r5
 8002f12:	14cb      	asrs	r3, r1, #19
 8002f14:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8002f18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002f1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002f20:	1884      	adds	r4, r0, r2
 8002f22:	65bc      	str	r4, [r7, #88]	; 0x58
 8002f24:	eb41 0303 	adc.w	r3, r1, r3
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f2a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002f2e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002f32:	4621      	mov	r1, r4
 8002f34:	1889      	adds	r1, r1, r2
 8002f36:	6539      	str	r1, [r7, #80]	; 0x50
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb43 0101 	adc.w	r1, r3, r1
 8002f3e:	6579      	str	r1, [r7, #84]	; 0x54
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	0a18      	lsrs	r0, r3, #8
 8002f50:	462b      	mov	r3, r5
 8002f52:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002f56:	462b      	mov	r3, r5
 8002f58:	1219      	asrs	r1, r3, #8
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <BPS_Pressao_Comp+0x58c>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	17da      	asrs	r2, r3, #31
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002f74:	464c      	mov	r4, r9
 8002f76:	0123      	lsls	r3, r4, #4
 8002f78:	4644      	mov	r4, r8
 8002f7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002f7e:	4644      	mov	r4, r8
 8002f80:	0122      	lsls	r2, r4, #4
 8002f82:	1884      	adds	r4, r0, r2
 8002f84:	603c      	str	r4, [r7, #0]
 8002f86:	eb41 0303 	adc.w	r3, r1, r3
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f90:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8002f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa4:	20002552 	.word	0x20002552
 8002fa8:	20002550 	.word	0x20002550
 8002fac:	2000254e 	.word	0x2000254e

08002fb0 <BPS_Umidade_Comp>:
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <BPS_Umidade_Comp+0xc0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	039a      	lsls	r2, r3, #14
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <BPS_Umidade_Comp+0xc4>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	051b      	lsls	r3, r3, #20
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <BPS_Umidade_Comp+0xc8>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fe4:	13db      	asrs	r3, r3, #15
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <BPS_Umidade_Comp+0xcc>)
 8002fe8:	8812      	ldrh	r2, [r2, #0]
 8002fea:	b212      	sxth	r2, r2
 8002fec:	4611      	mov	r1, r2
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	fb01 f202 	mul.w	r2, r1, r2
 8002ff4:	1292      	asrs	r2, r2, #10
 8002ff6:	4922      	ldr	r1, [pc, #136]	; (8003080 <BPS_Umidade_Comp+0xd0>)
 8002ff8:	8809      	ldrh	r1, [r1, #0]
 8002ffa:	b289      	uxth	r1, r1
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	fb00 f101 	mul.w	r1, r0, r1
 8003004:	12c9      	asrs	r1, r1, #11
 8003006:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800300a:	fb01 f202 	mul.w	r2, r1, r2
 800300e:	1292      	asrs	r2, r2, #10
 8003010:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003014:	491b      	ldr	r1, [pc, #108]	; (8003084 <BPS_Umidade_Comp+0xd4>)
 8003016:	8809      	ldrh	r1, [r1, #0]
 8003018:	b209      	sxth	r1, r1
 800301a:	fb01 f202 	mul.w	r2, r1, r2
 800301e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003022:	1392      	asrs	r2, r2, #14
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	13db      	asrs	r3, r3, #15
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	13d2      	asrs	r2, r2, #15
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	11db      	asrs	r3, r3, #7
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <BPS_Umidade_Comp+0xd8>)
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	b292      	uxth	r2, r2
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	111b      	asrs	r3, r3, #4
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8003058:	bfa8      	it	ge
 800305a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	131b      	asrs	r3, r3, #12
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	2000255c 	.word	0x2000255c
 8003074:	20002556 	.word	0x20002556
 8003078:	20002558 	.word	0x20002558
 800307c:	2000255a 	.word	0x2000255a
 8003080:	2000253e 	.word	0x2000253e
 8003084:	20002554 	.word	0x20002554
 8003088:	2000253c 	.word	0x2000253c

0800308c <BPS_Temperatura_Comp>:
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	10da      	asrs	r2, r3, #3
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <BPS_Temperatura_Comp+0x78>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	4a19      	ldr	r2, [pc, #100]	; (8003108 <BPS_Temperatura_Comp+0x7c>)
 80030a4:	8812      	ldrh	r2, [r2, #0]
 80030a6:	b212      	sxth	r2, r2
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	12db      	asrs	r3, r3, #11
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	111b      	asrs	r3, r3, #4
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <BPS_Temperatura_Comp+0x78>)
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	b292      	uxth	r2, r2
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	1112      	asrs	r2, r2, #4
 80030c0:	4910      	ldr	r1, [pc, #64]	; (8003104 <BPS_Temperatura_Comp+0x78>)
 80030c2:	8809      	ldrh	r1, [r1, #0]
 80030c4:	b289      	uxth	r1, r1
 80030c6:	1a52      	subs	r2, r2, r1
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	131b      	asrs	r3, r3, #12
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <BPS_Temperatura_Comp+0x80>)
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	b212      	sxth	r2, r2
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	139b      	asrs	r3, r3, #14
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <BPS_Temperatura_Comp+0x84>)
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <BPS_Temperatura_Comp+0x84>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3380      	adds	r3, #128	; 0x80
 80030f2:	121b      	asrs	r3, r3, #8
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20002538 	.word	0x20002538
 8003108:	20002540 	.word	0x20002540
 800310c:	20002542 	.word	0x20002542
 8003110:	2000255c 	.word	0x2000255c

08003114 <BPS_Calibracao>:
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af04      	add	r7, sp, #16
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	9302      	str	r3, [sp, #8]
 8003120:	2319      	movs	r3, #25
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	463b      	mov	r3, r7
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	2288      	movs	r2, #136	; 0x88
 800312c:	21ec      	movs	r1, #236	; 0xec
 800312e:	4857      	ldr	r0, [pc, #348]	; (800328c <BPS_Calibracao+0x178>)
 8003130:	f004 fd90 	bl	8007c54 <HAL_I2C_Mem_Read>
 8003134:	463b      	mov	r3, r7
 8003136:	3319      	adds	r3, #25
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	9202      	str	r2, [sp, #8]
 800313e:	2207      	movs	r2, #7
 8003140:	9201      	str	r2, [sp, #4]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2301      	movs	r3, #1
 8003146:	22e1      	movs	r2, #225	; 0xe1
 8003148:	21ec      	movs	r1, #236	; 0xec
 800314a:	4850      	ldr	r0, [pc, #320]	; (800328c <BPS_Calibracao+0x178>)
 800314c:	f004 fd82 	bl	8007c54 <HAL_I2C_Mem_Read>
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	b21a      	sxth	r2, r3
 8003156:	783b      	ldrb	r3, [r7, #0]
 8003158:	b21b      	sxth	r3, r3
 800315a:	4313      	orrs	r3, r2
 800315c:	b21b      	sxth	r3, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <BPS_Calibracao+0x17c>)
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	b21a      	sxth	r2, r3
 800316a:	78bb      	ldrb	r3, [r7, #2]
 800316c:	b21b      	sxth	r3, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	b21a      	sxth	r2, r3
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <BPS_Calibracao+0x180>)
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	797b      	ldrb	r3, [r7, #5]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b21a      	sxth	r2, r3
 800317c:	793b      	ldrb	r3, [r7, #4]
 800317e:	b21b      	sxth	r3, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	b21a      	sxth	r2, r3
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <BPS_Calibracao+0x184>)
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	797b      	ldrb	r3, [r7, #5]
 8003190:	b21b      	sxth	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	b21b      	sxth	r3, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b40      	ldr	r3, [pc, #256]	; (800329c <BPS_Calibracao+0x188>)
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	7a7b      	ldrb	r3, [r7, #9]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	79bb      	ldrb	r3, [r7, #6]
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <BPS_Calibracao+0x18c>)
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	7abb      	ldrb	r3, [r7, #10]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b21a      	sxth	r2, r3
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <BPS_Calibracao+0x190>)
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	7b7b      	ldrb	r3, [r7, #13]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	7b3b      	ldrb	r3, [r7, #12]
 80031c8:	b21b      	sxth	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <BPS_Calibracao+0x194>)
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	b21b      	sxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b21a      	sxth	r2, r3
 80031e0:	4b32      	ldr	r3, [pc, #200]	; (80032ac <BPS_Calibracao+0x198>)
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	7c7b      	ldrb	r3, [r7, #17]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	7c3b      	ldrb	r3, [r7, #16]
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <BPS_Calibracao+0x19c>)
 80031f4:	801a      	strh	r2, [r3, #0]
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	7cbb      	ldrb	r3, [r7, #18]
 80031fe:	b21b      	sxth	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b21a      	sxth	r2, r3
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <BPS_Calibracao+0x1a0>)
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	7d7b      	ldrb	r3, [r7, #21]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	b21a      	sxth	r2, r3
 800320e:	7d3b      	ldrb	r3, [r7, #20]
 8003210:	b21b      	sxth	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b21a      	sxth	r2, r3
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <BPS_Calibracao+0x1a4>)
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	b21a      	sxth	r2, r3
 8003220:	7dbb      	ldrb	r3, [r7, #22]
 8003222:	b21b      	sxth	r3, r3
 8003224:	4313      	orrs	r3, r2
 8003226:	b21a      	sxth	r2, r3
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <BPS_Calibracao+0x1a8>)
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	7e3b      	ldrb	r3, [r7, #24]
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <BPS_Calibracao+0x1ac>)
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	7ebb      	ldrb	r3, [r7, #26]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b21a      	sxth	r2, r3
 800323a:	7e7b      	ldrb	r3, [r7, #25]
 800323c:	b21b      	sxth	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b21a      	sxth	r2, r3
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <BPS_Calibracao+0x1b0>)
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	7efb      	ldrb	r3, [r7, #27]
 8003248:	b29a      	uxth	r2, r3
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <BPS_Calibracao+0x1b4>)
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	7f3b      	ldrb	r3, [r7, #28]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	b21a      	sxth	r2, r3
 8003254:	7f7b      	ldrb	r3, [r7, #29]
 8003256:	b21b      	sxth	r3, r3
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	b21b      	sxth	r3, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	b21a      	sxth	r2, r3
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <BPS_Calibracao+0x1b8>)
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	7fbb      	ldrb	r3, [r7, #30]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	b21a      	sxth	r2, r3
 800326c:	7f7b      	ldrb	r3, [r7, #29]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	b2db      	uxtb	r3, r3
 8003272:	b21b      	sxth	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b21a      	sxth	r2, r3
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <BPS_Calibracao+0x1bc>)
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	b21a      	sxth	r2, r3
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <BPS_Calibracao+0x1c0>)
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	bf00      	nop
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200002a0 	.word	0x200002a0
 8003290:	20002538 	.word	0x20002538
 8003294:	20002540 	.word	0x20002540
 8003298:	20002542 	.word	0x20002542
 800329c:	2000253a 	.word	0x2000253a
 80032a0:	20002544 	.word	0x20002544
 80032a4:	20002546 	.word	0x20002546
 80032a8:	20002548 	.word	0x20002548
 80032ac:	2000254a 	.word	0x2000254a
 80032b0:	2000254c 	.word	0x2000254c
 80032b4:	2000254e 	.word	0x2000254e
 80032b8:	20002550 	.word	0x20002550
 80032bc:	20002552 	.word	0x20002552
 80032c0:	2000253c 	.word	0x2000253c
 80032c4:	20002554 	.word	0x20002554
 80032c8:	2000253e 	.word	0x2000253e
 80032cc:	20002556 	.word	0x20002556
 80032d0:	20002558 	.word	0x20002558
 80032d4:	2000255a 	.word	0x2000255a

080032d8 <INA219_Reset>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af04      	add	r7, sp, #16
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	713b      	strb	r3, [r7, #4]
 80032e2:	2300      	movs	r3, #0
 80032e4:	717b      	strb	r3, [r7, #5]
 80032e6:	23c8      	movs	r3, #200	; 0xc8
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	2302      	movs	r3, #2
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2301      	movs	r3, #1
 80032f4:	2200      	movs	r2, #0
 80032f6:	2182      	movs	r1, #130	; 0x82
 80032f8:	4804      	ldr	r0, [pc, #16]	; (800330c <INA219_Reset+0x34>)
 80032fa:	f004 fb97 	bl	8007a2c <HAL_I2C_Mem_Write>
 80032fe:	2064      	movs	r0, #100	; 0x64
 8003300:	f002 fcf2 	bl	8005ce8 <HAL_Delay>
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200002a0 	.word	0x200002a0

08003310 <INA219_Calibracao>:
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af04      	add	r7, sp, #16
 8003316:	f240 139f 	movw	r3, #415	; 0x19f
 800331a:	80fb      	strh	r3, [r7, #6]
 800331c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	b29b      	uxth	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	713b      	strb	r3, [r7, #4]
 8003328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800332c:	b2db      	uxtb	r3, r3
 800332e:	717b      	strb	r3, [r7, #5]
 8003330:	23c8      	movs	r3, #200	; 0xc8
 8003332:	9302      	str	r3, [sp, #8]
 8003334:	2302      	movs	r3, #2
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2301      	movs	r3, #1
 800333e:	2205      	movs	r2, #5
 8003340:	2182      	movs	r1, #130	; 0x82
 8003342:	480d      	ldr	r0, [pc, #52]	; (8003378 <INA219_Calibracao+0x68>)
 8003344:	f004 fb72 	bl	8007a2c <HAL_I2C_Mem_Write>
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	703b      	strb	r3, [r7, #0]
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	707b      	strb	r3, [r7, #1]
 8003358:	23c8      	movs	r3, #200	; 0xc8
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	2302      	movs	r3, #2
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	463b      	mov	r3, r7
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2301      	movs	r3, #1
 8003366:	2200      	movs	r2, #0
 8003368:	2182      	movs	r1, #130	; 0x82
 800336a:	4803      	ldr	r0, [pc, #12]	; (8003378 <INA219_Calibracao+0x68>)
 800336c:	f004 fb5e 	bl	8007a2c <HAL_I2C_Mem_Write>
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200002a0 	.word	0x200002a0

0800337c <IMU_Accel_Read_RAW>:
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af04      	add	r7, sp, #16
 8003382:	23c8      	movs	r3, #200	; 0xc8
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	2306      	movs	r3, #6
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2301      	movs	r3, #1
 8003390:	223b      	movs	r2, #59	; 0x3b
 8003392:	21d0      	movs	r1, #208	; 0xd0
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <IMU_Accel_Read_RAW+0x80>)
 8003396:	f004 fc5d 	bl	8007c54 <HAL_I2C_Mem_Read>
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <IMU_Accel_Read_RAW+0x84>)
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033b6:	789b      	ldrb	r3, [r3, #2]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	b21a      	sxth	r2, r3
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033c0:	78db      	ldrb	r3, [r3, #3]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b21a      	sxth	r2, r3
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <IMU_Accel_Read_RAW+0x88>)
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033d0:	791b      	ldrb	r3, [r3, #4]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033da:	795b      	ldrb	r3, [r3, #5]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <IMU_Accel_Read_RAW+0x8c>)
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	2209      	movs	r2, #9
 80033ea:	2100      	movs	r1, #0
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <IMU_Accel_Read_RAW+0x7c>)
 80033ee:	f01a fada 	bl	801d9a6 <memset>
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20002158 	.word	0x20002158
 80033fc:	200002a0 	.word	0x200002a0
 8003400:	20002198 	.word	0x20002198
 8003404:	20002218 	.word	0x20002218
 8003408:	20002298 	.word	0x20002298

0800340c <IMU_Temp_Read_RAW>:
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af04      	add	r7, sp, #16
 8003412:	23c8      	movs	r3, #200	; 0xc8
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	2302      	movs	r3, #2
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <IMU_Temp_Read_RAW+0x50>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2301      	movs	r3, #1
 8003420:	2241      	movs	r2, #65	; 0x41
 8003422:	21d0      	movs	r1, #208	; 0xd0
 8003424:	480e      	ldr	r0, [pc, #56]	; (8003460 <IMU_Temp_Read_RAW+0x54>)
 8003426:	f004 fc15 	bl	8007c54 <HAL_I2C_Mem_Read>
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <IMU_Temp_Read_RAW+0x50>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	b21a      	sxth	r2, r3
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <IMU_Temp_Read_RAW+0x50>)
 8003436:	785b      	ldrb	r3, [r3, #1]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	b21b      	sxth	r3, r3
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <IMU_Temp_Read_RAW+0x58>)
 800343e:	7809      	ldrb	r1, [r1, #0]
 8003440:	b2c9      	uxtb	r1, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	b21a      	sxth	r2, r3
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <IMU_Temp_Read_RAW+0x5c>)
 8003448:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800344c:	2209      	movs	r2, #9
 800344e:	2100      	movs	r1, #0
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <IMU_Temp_Read_RAW+0x50>)
 8003452:	f01a faa8 	bl	801d9a6 <memset>
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20002158 	.word	0x20002158
 8003460:	200002a0 	.word	0x200002a0
 8003464:	20002518 	.word	0x20002518
 8003468:	20002318 	.word	0x20002318

0800346c <IMU_Gyro_Read_RAW>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af04      	add	r7, sp, #16
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	9302      	str	r3, [sp, #8]
 8003478:	2306      	movs	r3, #6
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2301      	movs	r3, #1
 8003482:	2243      	movs	r2, #67	; 0x43
 8003484:	21d0      	movs	r1, #208	; 0xd0
 8003486:	481a      	ldr	r0, [pc, #104]	; (80034f0 <IMU_Gyro_Read_RAW+0x84>)
 8003488:	f004 fbe4 	bl	8007c54 <HAL_I2C_Mem_Read>
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b21a      	sxth	r2, r3
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	b21b      	sxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <IMU_Gyro_Read_RAW+0x88>)
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 80034a8:	789b      	ldrb	r3, [r3, #2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	b21a      	sxth	r2, r3
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21a      	sxth	r2, r3
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <IMU_Gyro_Read_RAW+0x8c>)
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 80034c2:	791b      	ldrb	r3, [r3, #4]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 80034cc:	795b      	ldrb	r3, [r3, #5]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <IMU_Gyro_Read_RAW+0x90>)
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	2209      	movs	r2, #9
 80034dc:	2100      	movs	r1, #0
 80034de:	4803      	ldr	r0, [pc, #12]	; (80034ec <IMU_Gyro_Read_RAW+0x80>)
 80034e0:	f01a fa61 	bl	801d9a6 <memset>
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20002158 	.word	0x20002158
 80034f0:	200002a0 	.word	0x200002a0
 80034f4:	20002398 	.word	0x20002398
 80034f8:	20002418 	.word	0x20002418
 80034fc:	20002498 	.word	0x20002498

08003500 <BPS_Read_RAW>:
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af04      	add	r7, sp, #16
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	9302      	str	r3, [sp, #8]
 800350c:	2308      	movs	r3, #8
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <BPS_Read_RAW+0xac>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2301      	movs	r3, #1
 8003516:	22f7      	movs	r2, #247	; 0xf7
 8003518:	21ec      	movs	r1, #236	; 0xec
 800351a:	4825      	ldr	r0, [pc, #148]	; (80035b0 <BPS_Read_RAW+0xb0>)
 800351c:	f004 fb9a 	bl	8007c54 <HAL_I2C_Mem_Read>
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <BPS_Read_RAW+0xac>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	031a      	lsls	r2, r3, #12
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <BPS_Read_RAW+0xac>)
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4313      	orrs	r3, r2
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <BPS_Read_RAW+0xac>)
 8003534:	7892      	ldrb	r2, [r2, #2]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	0912      	lsrs	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	4610      	mov	r0, r2
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <BPS_Read_RAW+0xb4>)
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4303      	orrs	r3, r0
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <BPS_Read_RAW+0xb8>)
 800354a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <BPS_Read_RAW+0xac>)
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	031a      	lsls	r2, r3, #12
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <BPS_Read_RAW+0xac>)
 8003558:	791b      	ldrb	r3, [r3, #4]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4313      	orrs	r3, r2
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <BPS_Read_RAW+0xac>)
 8003562:	7952      	ldrb	r2, [r2, #5]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	0912      	lsrs	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	4610      	mov	r0, r2
 800356c:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <BPS_Read_RAW+0xb4>)
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4303      	orrs	r3, r0
 8003576:	4a11      	ldr	r2, [pc, #68]	; (80035bc <BPS_Read_RAW+0xbc>)
 8003578:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <BPS_Read_RAW+0xac>)
 800357e:	799b      	ldrb	r3, [r3, #6]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <BPS_Read_RAW+0xac>)
 8003586:	79d2      	ldrb	r2, [r2, #7]
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	4610      	mov	r0, r2
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <BPS_Read_RAW+0xb4>)
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	4611      	mov	r1, r2
 8003594:	4303      	orrs	r3, r0
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <BPS_Read_RAW+0xc0>)
 8003598:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800359c:	2209      	movs	r2, #9
 800359e:	2100      	movs	r1, #0
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <BPS_Read_RAW+0xac>)
 80035a2:	f01a fa00 	bl	801d9a6 <memset>
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20002158 	.word	0x20002158
 80035b0:	200002a0 	.word	0x200002a0
 80035b4:	20002518 	.word	0x20002518
 80035b8:	2000266c 	.word	0x2000266c
 80035bc:	2000256c 	.word	0x2000256c
 80035c0:	2000276c 	.word	0x2000276c

080035c4 <INA219_Read_RAW>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af04      	add	r7, sp, #16
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	2302      	movs	r3, #2
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <INA219_Read_RAW+0xec>)
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2301      	movs	r3, #1
 80035da:	2202      	movs	r2, #2
 80035dc:	2182      	movs	r1, #130	; 0x82
 80035de:	4835      	ldr	r0, [pc, #212]	; (80036b4 <INA219_Read_RAW+0xf0>)
 80035e0:	f004 fb38 	bl	8007c54 <HAL_I2C_Mem_Read>
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <INA219_Read_RAW+0xec>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <INA219_Read_RAW+0xec>)
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <INA219_Read_RAW+0xf4>)
 80035fe:	7812      	ldrb	r2, [r2, #0]
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	b299      	uxth	r1, r3
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <INA219_Read_RAW+0xf8>)
 8003608:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800360c:	2209      	movs	r2, #9
 800360e:	2100      	movs	r1, #0
 8003610:	4827      	ldr	r0, [pc, #156]	; (80036b0 <INA219_Read_RAW+0xec>)
 8003612:	f01a f9c8 	bl	801d9a6 <memset>
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	2302      	movs	r3, #2
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <INA219_Read_RAW+0xec>)
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	2201      	movs	r2, #1
 8003628:	2182      	movs	r1, #130	; 0x82
 800362a:	4822      	ldr	r0, [pc, #136]	; (80036b4 <INA219_Read_RAW+0xf0>)
 800362c:	f004 fb12 	bl	8007c54 <HAL_I2C_Mem_Read>
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <INA219_Read_RAW+0xec>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	b21a      	sxth	r2, r3
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <INA219_Read_RAW+0xec>)
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b21b      	sxth	r3, r3
 8003642:	4313      	orrs	r3, r2
 8003644:	b219      	sxth	r1, r3
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <INA219_Read_RAW+0xf4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	b289      	uxth	r1, r1
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <INA219_Read_RAW+0xfc>)
 8003652:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003656:	2209      	movs	r2, #9
 8003658:	2100      	movs	r1, #0
 800365a:	4815      	ldr	r0, [pc, #84]	; (80036b0 <INA219_Read_RAW+0xec>)
 800365c:	f01a f9a3 	bl	801d9a6 <memset>
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	2302      	movs	r3, #2
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <INA219_Read_RAW+0xec>)
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2301      	movs	r3, #1
 8003670:	2204      	movs	r2, #4
 8003672:	2182      	movs	r1, #130	; 0x82
 8003674:	480f      	ldr	r0, [pc, #60]	; (80036b4 <INA219_Read_RAW+0xf0>)
 8003676:	f004 faed 	bl	8007c54 <HAL_I2C_Mem_Read>
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <INA219_Read_RAW+0xec>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <INA219_Read_RAW+0xec>)
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b219      	sxth	r1, r3
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <INA219_Read_RAW+0xf4>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	b289      	uxth	r1, r1
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <INA219_Read_RAW+0x100>)
 800369c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80036a0:	2209      	movs	r2, #9
 80036a2:	2100      	movs	r1, #0
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <INA219_Read_RAW+0xec>)
 80036a6:	f01a f97e 	bl	801d9a6 <memset>
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20002158 	.word	0x20002158
 80036b4:	200002a0 	.word	0x200002a0
 80036b8:	20002518 	.word	0x20002518
 80036bc:	20002878 	.word	0x20002878
 80036c0:	200028f8 	.word	0x200028f8
 80036c4:	20002978 	.word	0x20002978

080036c8 <IniciaEscuta_USART2>:
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <IniciaEscuta_USART2+0x54>)
 80036ce:	f993 3000 	ldrsb.w	r3, [r3]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d004      	beq.n	80036e0 <IniciaEscuta_USART2+0x18>
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <IniciaEscuta_USART2+0x58>)
 80036d8:	f993 3000 	ldrsb.w	r3, [r3]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d11b      	bne.n	8003718 <IniciaEscuta_USART2+0x50>
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <IniciaEscuta_USART2+0x54>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <IniciaEscuta_USART2+0x58>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <IniciaEscuta_USART2+0x5c>)
 80036f2:	480d      	ldr	r0, [pc, #52]	; (8003728 <IniciaEscuta_USART2+0x60>)
 80036f4:	f00c fecb 	bl	801048e <HAL_UARTEx_ReceiveToIdle_DMA>
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <IniciaEscuta_USART2+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <IniciaEscuta_USART2+0x64>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003706:	615a      	str	r2, [r3, #20]
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <IniciaEscuta_USART2+0x64>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <IniciaEscuta_USART2+0x64>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003716:	615a      	str	r2, [r3, #20]
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20002155 	.word	0x20002155
 8003720:	20000000 	.word	0x20000000
 8003724:	20000c54 	.word	0x20000c54
 8003728:	20000828 	.word	0x20000828
 800372c:	2000098c 	.word	0x2000098c

08003730 <GPS_Index>:
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
 8003734:	4b34      	ldr	r3, [pc, #208]	; (8003808 <GPS_Index+0xd8>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11b      	bne.n	8003776 <GPS_Index+0x46>
 800373e:	f240 3201 	movw	r2, #769	; 0x301
 8003742:	4932      	ldr	r1, [pc, #200]	; (800380c <GPS_Index+0xdc>)
 8003744:	4832      	ldr	r0, [pc, #200]	; (8003810 <GPS_Index+0xe0>)
 8003746:	f01a f9cd 	bl	801dae4 <memcpy>
 800374a:	f240 3201 	movw	r2, #769	; 0x301
 800374e:	492f      	ldr	r1, [pc, #188]	; (800380c <GPS_Index+0xdc>)
 8003750:	4830      	ldr	r0, [pc, #192]	; (8003814 <GPS_Index+0xe4>)
 8003752:	f01a f9c7 	bl	801dae4 <memcpy>
 8003756:	f240 3201 	movw	r2, #769	; 0x301
 800375a:	2100      	movs	r1, #0
 800375c:	482e      	ldr	r0, [pc, #184]	; (8003818 <GPS_Index+0xe8>)
 800375e:	f01a f922 	bl	801d9a6 <memset>
 8003762:	f240 3201 	movw	r2, #769	; 0x301
 8003766:	2100      	movs	r1, #0
 8003768:	482c      	ldr	r0, [pc, #176]	; (800381c <GPS_Index+0xec>)
 800376a:	f01a f91c 	bl	801d9a6 <memset>
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <GPS_Index+0xd8>)
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e040      	b.n	80037f8 <GPS_Index+0xc8>
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <GPS_Index+0xd8>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11b      	bne.n	80037b8 <GPS_Index+0x88>
 8003780:	f240 3201 	movw	r2, #769	; 0x301
 8003784:	4921      	ldr	r1, [pc, #132]	; (800380c <GPS_Index+0xdc>)
 8003786:	4824      	ldr	r0, [pc, #144]	; (8003818 <GPS_Index+0xe8>)
 8003788:	f01a f9ac 	bl	801dae4 <memcpy>
 800378c:	f240 3201 	movw	r2, #769	; 0x301
 8003790:	491e      	ldr	r1, [pc, #120]	; (800380c <GPS_Index+0xdc>)
 8003792:	4822      	ldr	r0, [pc, #136]	; (800381c <GPS_Index+0xec>)
 8003794:	f01a f9a6 	bl	801dae4 <memcpy>
 8003798:	f240 3201 	movw	r2, #769	; 0x301
 800379c:	2100      	movs	r1, #0
 800379e:	4820      	ldr	r0, [pc, #128]	; (8003820 <GPS_Index+0xf0>)
 80037a0:	f01a f901 	bl	801d9a6 <memset>
 80037a4:	f240 3201 	movw	r2, #769	; 0x301
 80037a8:	2100      	movs	r1, #0
 80037aa:	481e      	ldr	r0, [pc, #120]	; (8003824 <GPS_Index+0xf4>)
 80037ac:	f01a f8fb 	bl	801d9a6 <memset>
 80037b0:	4b15      	ldr	r3, [pc, #84]	; (8003808 <GPS_Index+0xd8>)
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e01f      	b.n	80037f8 <GPS_Index+0xc8>
 80037b8:	4b13      	ldr	r3, [pc, #76]	; (8003808 <GPS_Index+0xd8>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d11a      	bne.n	80037f8 <GPS_Index+0xc8>
 80037c2:	f240 3201 	movw	r2, #769	; 0x301
 80037c6:	4911      	ldr	r1, [pc, #68]	; (800380c <GPS_Index+0xdc>)
 80037c8:	4815      	ldr	r0, [pc, #84]	; (8003820 <GPS_Index+0xf0>)
 80037ca:	f01a f98b 	bl	801dae4 <memcpy>
 80037ce:	f240 3201 	movw	r2, #769	; 0x301
 80037d2:	490e      	ldr	r1, [pc, #56]	; (800380c <GPS_Index+0xdc>)
 80037d4:	4813      	ldr	r0, [pc, #76]	; (8003824 <GPS_Index+0xf4>)
 80037d6:	f01a f985 	bl	801dae4 <memcpy>
 80037da:	f240 3201 	movw	r2, #769	; 0x301
 80037de:	2100      	movs	r1, #0
 80037e0:	480b      	ldr	r0, [pc, #44]	; (8003810 <GPS_Index+0xe0>)
 80037e2:	f01a f8e0 	bl	801d9a6 <memset>
 80037e6:	f240 3201 	movw	r2, #769	; 0x301
 80037ea:	2100      	movs	r1, #0
 80037ec:	4809      	ldr	r0, [pc, #36]	; (8003814 <GPS_Index+0xe4>)
 80037ee:	f01a f8da 	bl	801d9a6 <memset>
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <GPS_Index+0xd8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	f240 3201 	movw	r2, #769	; 0x301
 80037fc:	2100      	movs	r1, #0
 80037fe:	4803      	ldr	r0, [pc, #12]	; (800380c <GPS_Index+0xdc>)
 8003800:	f01a f8d1 	bl	801d9a6 <memset>
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20002154 	.word	0x20002154
 800380c:	20000c54 	.word	0x20000c54
 8003810:	20000f54 	.word	0x20000f54
 8003814:	20001854 	.word	0x20001854
 8003818:	20001254 	.word	0x20001254
 800381c:	20001b54 	.word	0x20001b54
 8003820:	20001554 	.word	0x20001554
 8003824:	20001e54 	.word	0x20001e54

08003828 <GPS_VALIDANDO_PARSE_XNMEA>:
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	82fb      	strh	r3, [r7, #22]
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	823b      	strh	r3, [r7, #16]
 800383c:	2300      	movs	r3, #0
 800383e:	757b      	strb	r3, [r7, #21]
 8003840:	2300      	movs	r3, #0
 8003842:	753b      	strb	r3, [r7, #20]
 8003844:	2300      	movs	r3, #0
 8003846:	827b      	strh	r3, [r7, #18]
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	82fb      	strh	r3, [r7, #22]
 800384c:	e002      	b.n	8003854 <GPS_VALIDANDO_PARSE_XNMEA+0x2c>
 800384e:	8afb      	ldrh	r3, [r7, #22]
 8003850:	3301      	adds	r3, #1
 8003852:	82fb      	strh	r3, [r7, #22]
 8003854:	8afb      	ldrh	r3, [r7, #22]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b24      	cmp	r3, #36	; 0x24
 800385e:	d004      	beq.n	800386a <GPS_VALIDANDO_PARSE_XNMEA+0x42>
 8003860:	8afb      	ldrh	r3, [r7, #22]
 8003862:	f240 22f1 	movw	r2, #753	; 0x2f1
 8003866:	4293      	cmp	r3, r2
 8003868:	d9f1      	bls.n	800384e <GPS_VALIDANDO_PARSE_XNMEA+0x26>
 800386a:	8afb      	ldrh	r3, [r7, #22]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b24      	cmp	r3, #36	; 0x24
 8003874:	d125      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 8003876:	8afb      	ldrh	r3, [r7, #22]
 8003878:	3301      	adds	r3, #1
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b47      	cmp	r3, #71	; 0x47
 8003882:	d11e      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	3302      	adds	r3, #2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b4e      	cmp	r3, #78	; 0x4e
 8003890:	d117      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 8003892:	8afb      	ldrh	r3, [r7, #22]
 8003894:	3303      	adds	r3, #3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b52      	cmp	r3, #82	; 0x52
 800389e:	d110      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	3304      	adds	r3, #4
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b4d      	cmp	r3, #77	; 0x4d
 80038ac:	d109      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	3305      	adds	r3, #5
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b43      	cmp	r3, #67	; 0x43
 80038ba:	d102      	bne.n	80038c2 <GPS_VALIDANDO_PARSE_XNMEA+0x9a>
 80038bc:	2301      	movs	r3, #1
 80038be:	753b      	strb	r3, [r7, #20]
 80038c0:	e0e9      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 80038c2:	8afb      	ldrh	r3, [r7, #22]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b24      	cmp	r3, #36	; 0x24
 80038cc:	d125      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	3301      	adds	r3, #1
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b47      	cmp	r3, #71	; 0x47
 80038da:	d11e      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 80038dc:	8afb      	ldrh	r3, [r7, #22]
 80038de:	3302      	adds	r3, #2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b4e      	cmp	r3, #78	; 0x4e
 80038e8:	d117      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	3303      	adds	r3, #3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b56      	cmp	r3, #86	; 0x56
 80038f6:	d110      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 80038f8:	8afb      	ldrh	r3, [r7, #22]
 80038fa:	3304      	adds	r3, #4
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b54      	cmp	r3, #84	; 0x54
 8003904:	d109      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	3305      	adds	r3, #5
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b47      	cmp	r3, #71	; 0x47
 8003912:	d102      	bne.n	800391a <GPS_VALIDANDO_PARSE_XNMEA+0xf2>
 8003914:	2302      	movs	r3, #2
 8003916:	753b      	strb	r3, [r7, #20]
 8003918:	e0bd      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b24      	cmp	r3, #36	; 0x24
 8003924:	d125      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	3301      	adds	r3, #1
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b47      	cmp	r3, #71	; 0x47
 8003932:	d11e      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	3302      	adds	r3, #2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b4e      	cmp	r3, #78	; 0x4e
 8003940:	d117      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 8003942:	8afb      	ldrh	r3, [r7, #22]
 8003944:	3303      	adds	r3, #3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b47      	cmp	r3, #71	; 0x47
 800394e:	d110      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	3304      	adds	r3, #4
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b47      	cmp	r3, #71	; 0x47
 800395c:	d109      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	3305      	adds	r3, #5
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b41      	cmp	r3, #65	; 0x41
 800396a:	d102      	bne.n	8003972 <GPS_VALIDANDO_PARSE_XNMEA+0x14a>
 800396c:	2303      	movs	r3, #3
 800396e:	753b      	strb	r3, [r7, #20]
 8003970:	e091      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 8003972:	8afb      	ldrh	r3, [r7, #22]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b24      	cmp	r3, #36	; 0x24
 800397c:	d125      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 800397e:	8afb      	ldrh	r3, [r7, #22]
 8003980:	3301      	adds	r3, #1
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b47      	cmp	r3, #71	; 0x47
 800398a:	d11e      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	3302      	adds	r3, #2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b4e      	cmp	r3, #78	; 0x4e
 8003998:	d117      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	3303      	adds	r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b47      	cmp	r3, #71	; 0x47
 80039a6:	d110      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 80039a8:	8afb      	ldrh	r3, [r7, #22]
 80039aa:	3304      	adds	r3, #4
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b53      	cmp	r3, #83	; 0x53
 80039b4:	d109      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 80039b6:	8afb      	ldrh	r3, [r7, #22]
 80039b8:	3305      	adds	r3, #5
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b41      	cmp	r3, #65	; 0x41
 80039c2:	d102      	bne.n	80039ca <GPS_VALIDANDO_PARSE_XNMEA+0x1a2>
 80039c4:	2304      	movs	r3, #4
 80039c6:	753b      	strb	r3, [r7, #20]
 80039c8:	e065      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b24      	cmp	r3, #36	; 0x24
 80039d4:	d125      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	3301      	adds	r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b47      	cmp	r3, #71	; 0x47
 80039e2:	d11e      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 80039e4:	8afb      	ldrh	r3, [r7, #22]
 80039e6:	3302      	adds	r3, #2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b50      	cmp	r3, #80	; 0x50
 80039f0:	d117      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	3303      	adds	r3, #3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b47      	cmp	r3, #71	; 0x47
 80039fe:	d110      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 8003a00:	8afb      	ldrh	r3, [r7, #22]
 8003a02:	3304      	adds	r3, #4
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b53      	cmp	r3, #83	; 0x53
 8003a0c:	d109      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	3305      	adds	r3, #5
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b56      	cmp	r3, #86	; 0x56
 8003a1a:	d102      	bne.n	8003a22 <GPS_VALIDANDO_PARSE_XNMEA+0x1fa>
 8003a1c:	2305      	movs	r3, #5
 8003a1e:	753b      	strb	r3, [r7, #20]
 8003a20:	e039      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b24      	cmp	r3, #36	; 0x24
 8003a2c:	d125      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	3301      	adds	r3, #1
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b47      	cmp	r3, #71	; 0x47
 8003a3a:	d11e      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	3302      	adds	r3, #2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b4e      	cmp	r3, #78	; 0x4e
 8003a48:	d117      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	3303      	adds	r3, #3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b47      	cmp	r3, #71	; 0x47
 8003a56:	d110      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a58:	8afb      	ldrh	r3, [r7, #22]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b4c      	cmp	r3, #76	; 0x4c
 8003a64:	d109      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a66:	8afb      	ldrh	r3, [r7, #22]
 8003a68:	3305      	adds	r3, #5
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b4c      	cmp	r3, #76	; 0x4c
 8003a72:	d102      	bne.n	8003a7a <GPS_VALIDANDO_PARSE_XNMEA+0x252>
 8003a74:	2306      	movs	r3, #6
 8003a76:	753b      	strb	r3, [r7, #20]
 8003a78:	e00d      	b.n	8003a96 <GPS_VALIDANDO_PARSE_XNMEA+0x26e>
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
 8003a80:	d904      	bls.n	8003a8c <GPS_VALIDANDO_PARSE_XNMEA+0x264>
 8003a82:	4b73      	ldr	r3, [pc, #460]	; (8003c50 <GPS_VALIDANDO_PARSE_XNMEA+0x428>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e0dc      	b.n	8003c46 <GPS_VALIDANDO_PARSE_XNMEA+0x41e>
 8003a8c:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <GPS_VALIDANDO_PARSE_XNMEA+0x428>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	e0d7      	b.n	8003c46 <GPS_VALIDANDO_PARSE_XNMEA+0x41e>
 8003a96:	e053      	b.n	8003b40 <GPS_VALIDANDO_PARSE_XNMEA+0x318>
 8003a98:	7d3b      	ldrb	r3, [r7, #20]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <GPS_VALIDANDO_PARSE_XNMEA+0x286>
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	8a7b      	ldrh	r3, [r7, #18]
 8003aa6:	7811      	ldrb	r1, [r2, #0]
 8003aa8:	4a6a      	ldr	r2, [pc, #424]	; (8003c54 <GPS_VALIDANDO_PARSE_XNMEA+0x42c>)
 8003aaa:	54d1      	strb	r1, [r2, r3]
 8003aac:	e035      	b.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003aae:	7d3b      	ldrb	r3, [r7, #20]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d107      	bne.n	8003ac4 <GPS_VALIDANDO_PARSE_XNMEA+0x29c>
 8003ab4:	8afb      	ldrh	r3, [r7, #22]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	441a      	add	r2, r3
 8003aba:	8a7b      	ldrh	r3, [r7, #18]
 8003abc:	7811      	ldrb	r1, [r2, #0]
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <GPS_VALIDANDO_PARSE_XNMEA+0x430>)
 8003ac0:	54d1      	strb	r1, [r2, r3]
 8003ac2:	e02a      	b.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003ac4:	7d3b      	ldrb	r3, [r7, #20]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d107      	bne.n	8003ada <GPS_VALIDANDO_PARSE_XNMEA+0x2b2>
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	441a      	add	r2, r3
 8003ad0:	8a7b      	ldrh	r3, [r7, #18]
 8003ad2:	7811      	ldrb	r1, [r2, #0]
 8003ad4:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <GPS_VALIDANDO_PARSE_XNMEA+0x434>)
 8003ad6:	54d1      	strb	r1, [r2, r3]
 8003ad8:	e01f      	b.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003ada:	7d3b      	ldrb	r3, [r7, #20]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <GPS_VALIDANDO_PARSE_XNMEA+0x2c8>
 8003ae0:	8afb      	ldrh	r3, [r7, #22]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	441a      	add	r2, r3
 8003ae6:	8a7b      	ldrh	r3, [r7, #18]
 8003ae8:	7811      	ldrb	r1, [r2, #0]
 8003aea:	4a5d      	ldr	r2, [pc, #372]	; (8003c60 <GPS_VALIDANDO_PARSE_XNMEA+0x438>)
 8003aec:	54d1      	strb	r1, [r2, r3]
 8003aee:	e014      	b.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003af0:	7d3b      	ldrb	r3, [r7, #20]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d107      	bne.n	8003b06 <GPS_VALIDANDO_PARSE_XNMEA+0x2de>
 8003af6:	8afb      	ldrh	r3, [r7, #22]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	441a      	add	r2, r3
 8003afc:	8a7b      	ldrh	r3, [r7, #18]
 8003afe:	7811      	ldrb	r1, [r2, #0]
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <GPS_VALIDANDO_PARSE_XNMEA+0x43c>)
 8003b02:	54d1      	strb	r1, [r2, r3]
 8003b04:	e009      	b.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003b06:	7d3b      	ldrb	r3, [r7, #20]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d106      	bne.n	8003b1a <GPS_VALIDANDO_PARSE_XNMEA+0x2f2>
 8003b0c:	8afb      	ldrh	r3, [r7, #22]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	441a      	add	r2, r3
 8003b12:	8a7b      	ldrh	r3, [r7, #18]
 8003b14:	7811      	ldrb	r1, [r2, #0]
 8003b16:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <GPS_VALIDANDO_PARSE_XNMEA+0x440>)
 8003b18:	54d1      	strb	r1, [r2, r3]
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b24      	cmp	r3, #36	; 0x24
 8003b24:	d006      	beq.n	8003b34 <GPS_VALIDANDO_PARSE_XNMEA+0x30c>
 8003b26:	8afb      	ldrh	r3, [r7, #22]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	7d7b      	ldrb	r3, [r7, #21]
 8003b30:	4053      	eors	r3, r2
 8003b32:	757b      	strb	r3, [r7, #21]
 8003b34:	8afb      	ldrh	r3, [r7, #22]
 8003b36:	3301      	adds	r3, #1
 8003b38:	82fb      	strh	r3, [r7, #22]
 8003b3a:	8a7b      	ldrh	r3, [r7, #18]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	827b      	strh	r3, [r7, #18]
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <GPS_VALIDANDO_PARSE_XNMEA+0x33a>
 8003b4c:	8afb      	ldrh	r3, [r7, #22]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b2a      	cmp	r3, #42	; 0x2a
 8003b56:	d004      	beq.n	8003b62 <GPS_VALIDANDO_PARSE_XNMEA+0x33a>
 8003b58:	8afa      	ldrh	r2, [r7, #22]
 8003b5a:	8a3b      	ldrh	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b4d      	cmp	r3, #77	; 0x4d
 8003b60:	dd9a      	ble.n	8003a98 <GPS_VALIDANDO_PARSE_XNMEA+0x270>
 8003b62:	8afb      	ldrh	r3, [r7, #22]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6c:	d11e      	bne.n	8003bac <GPS_VALIDANDO_PARSE_XNMEA+0x384>
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	f240 22fe 	movw	r2, #766	; 0x2fe
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d819      	bhi.n	8003bac <GPS_VALIDANDO_PARSE_XNMEA+0x384>
 8003b78:	8afb      	ldrh	r3, [r7, #22]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	733b      	strb	r3, [r7, #12]
 8003b84:	8afb      	ldrh	r3, [r7, #22]
 8003b86:	3302      	adds	r3, #2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	737b      	strb	r3, [r7, #13]
 8003b90:	2300      	movs	r3, #0
 8003b92:	73bb      	strb	r3, [r7, #14]
 8003b94:	7d7a      	ldrb	r2, [r7, #21]
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	4934      	ldr	r1, [pc, #208]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f019 fe71 	bl	801d884 <siprintf>
 8003ba2:	7a3a      	ldrb	r2, [r7, #8]
 8003ba4:	7b3b      	ldrb	r3, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d005      	beq.n	8003bb6 <GPS_VALIDANDO_PARSE_XNMEA+0x38e>
 8003baa:	e048      	b.n	8003c3e <GPS_VALIDANDO_PARSE_XNMEA+0x416>
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <GPS_VALIDANDO_PARSE_XNMEA+0x428>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e047      	b.n	8003c46 <GPS_VALIDANDO_PARSE_XNMEA+0x41e>
 8003bb6:	7a7a      	ldrb	r2, [r7, #9]
 8003bb8:	7b7b      	ldrb	r3, [r7, #13]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d13f      	bne.n	8003c3e <GPS_VALIDANDO_PARSE_XNMEA+0x416>
 8003bbe:	7d3b      	ldrb	r3, [r7, #20]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <GPS_VALIDANDO_PARSE_XNMEA+0x3aa>
 8003bc4:	7d7b      	ldrb	r3, [r7, #21]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4928      	ldr	r1, [pc, #160]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003bca:	4829      	ldr	r0, [pc, #164]	; (8003c70 <GPS_VALIDANDO_PARSE_XNMEA+0x448>)
 8003bcc:	f019 fe5a 	bl	801d884 <siprintf>
 8003bd0:	e033      	b.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003bd2:	7d3b      	ldrb	r3, [r7, #20]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d106      	bne.n	8003be6 <GPS_VALIDANDO_PARSE_XNMEA+0x3be>
 8003bd8:	7d7b      	ldrb	r3, [r7, #21]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4923      	ldr	r1, [pc, #140]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003bde:	4825      	ldr	r0, [pc, #148]	; (8003c74 <GPS_VALIDANDO_PARSE_XNMEA+0x44c>)
 8003be0:	f019 fe50 	bl	801d884 <siprintf>
 8003be4:	e029      	b.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003be6:	7d3b      	ldrb	r3, [r7, #20]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d106      	bne.n	8003bfa <GPS_VALIDANDO_PARSE_XNMEA+0x3d2>
 8003bec:	7d7b      	ldrb	r3, [r7, #21]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	491e      	ldr	r1, [pc, #120]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003bf2:	4821      	ldr	r0, [pc, #132]	; (8003c78 <GPS_VALIDANDO_PARSE_XNMEA+0x450>)
 8003bf4:	f019 fe46 	bl	801d884 <siprintf>
 8003bf8:	e01f      	b.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003bfa:	7d3b      	ldrb	r3, [r7, #20]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d106      	bne.n	8003c0e <GPS_VALIDANDO_PARSE_XNMEA+0x3e6>
 8003c00:	7d7b      	ldrb	r3, [r7, #21]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4919      	ldr	r1, [pc, #100]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003c06:	481d      	ldr	r0, [pc, #116]	; (8003c7c <GPS_VALIDANDO_PARSE_XNMEA+0x454>)
 8003c08:	f019 fe3c 	bl	801d884 <siprintf>
 8003c0c:	e015      	b.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003c0e:	7d3b      	ldrb	r3, [r7, #20]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d106      	bne.n	8003c22 <GPS_VALIDANDO_PARSE_XNMEA+0x3fa>
 8003c14:	7d7b      	ldrb	r3, [r7, #21]
 8003c16:	461a      	mov	r2, r3
 8003c18:	4914      	ldr	r1, [pc, #80]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003c1a:	4819      	ldr	r0, [pc, #100]	; (8003c80 <GPS_VALIDANDO_PARSE_XNMEA+0x458>)
 8003c1c:	f019 fe32 	bl	801d884 <siprintf>
 8003c20:	e00b      	b.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003c22:	7d3b      	ldrb	r3, [r7, #20]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d108      	bne.n	8003c3a <GPS_VALIDANDO_PARSE_XNMEA+0x412>
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <GPS_VALIDANDO_PARSE_XNMEA+0x428>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	7d7b      	ldrb	r3, [r7, #21]
 8003c30:	461a      	mov	r2, r3
 8003c32:	490e      	ldr	r1, [pc, #56]	; (8003c6c <GPS_VALIDANDO_PARSE_XNMEA+0x444>)
 8003c34:	4813      	ldr	r0, [pc, #76]	; (8003c84 <GPS_VALIDANDO_PARSE_XNMEA+0x45c>)
 8003c36:	f019 fe25 	bl	801d884 <siprintf>
 8003c3a:	8afb      	ldrh	r3, [r7, #22]
 8003c3c:	e003      	b.n	8003c46 <GPS_VALIDANDO_PARSE_XNMEA+0x41e>
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <GPS_VALIDANDO_PARSE_XNMEA+0x428>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000c53 	.word	0x20000c53
 8003c54:	20000a74 	.word	0x20000a74
 8003c58:	20000ac4 	.word	0x20000ac4
 8003c5c:	20000b14 	.word	0x20000b14
 8003c60:	20000b64 	.word	0x20000b64
 8003c64:	20000bb4 	.word	0x20000bb4
 8003c68:	20000c04 	.word	0x20000c04
 8003c6c:	08022914 	.word	0x08022914
 8003c70:	20000ac0 	.word	0x20000ac0
 8003c74:	20000b10 	.word	0x20000b10
 8003c78:	20000b60 	.word	0x20000b60
 8003c7c:	20000bb0 	.word	0x20000bb0
 8003c80:	20000c00 	.word	0x20000c00
 8003c84:	20000c50 	.word	0x20000c50

08003c88 <GPS_parse>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af08      	add	r7, sp, #32
 8003c8e:	2206      	movs	r2, #6
 8003c90:	4945      	ldr	r1, [pc, #276]	; (8003da8 <GPS_parse+0x120>)
 8003c92:	4846      	ldr	r0, [pc, #280]	; (8003dac <GPS_parse+0x124>)
 8003c94:	f019 fe8f 	bl	801d9b6 <strncmp>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d136      	bne.n	8003d0c <GPS_parse+0x84>
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <GPS_parse+0x128>)
 8003ca0:	9307      	str	r3, [sp, #28]
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <GPS_parse+0x12c>)
 8003ca4:	9306      	str	r3, [sp, #24]
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <GPS_parse+0x130>)
 8003ca8:	9305      	str	r3, [sp, #20]
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <GPS_parse+0x134>)
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <GPS_parse+0x138>)
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <GPS_parse+0x13c>)
 8003cb4:	9302      	str	r3, [sp, #8]
 8003cb6:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <GPS_parse+0x140>)
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <GPS_parse+0x144>)
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <GPS_parse+0x148>)
 8003cc0:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <GPS_parse+0x14c>)
 8003cc2:	4945      	ldr	r1, [pc, #276]	; (8003dd8 <GPS_parse+0x150>)
 8003cc4:	4839      	ldr	r0, [pc, #228]	; (8003dac <GPS_parse+0x124>)
 8003cc6:	f019 fdfd 	bl	801d8c4 <siscanf>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dd1d      	ble.n	8003d0c <GPS_parse+0x84>
 8003cd0:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <GPS_parse+0x154>)
 8003cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <GPS_parse+0x154>)
 8003cd8:	7e1b      	ldrb	r3, [r3, #24]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce0:	f000 f96c 	bl	8003fbc <GPS_nmea_to_dec>
 8003ce4:	eef0 7a40 	vmov.f32	s15, s0
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	; (8003ddc <GPS_parse+0x154>)
 8003cea:	edc3 7a01 	vstr	s15, [r3, #4]
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <GPS_parse+0x154>)
 8003cf0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <GPS_parse+0x154>)
 8003cf6:	7e5b      	ldrb	r3, [r3, #25]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfe:	f000 f95d 	bl	8003fbc <GPS_nmea_to_dec>
 8003d02:	eef0 7a40 	vmov.f32	s15, s0
 8003d06:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <GPS_parse+0x154>)
 8003d08:	edc3 7a00 	vstr	s15, [r3]
 8003d0c:	2206      	movs	r2, #6
 8003d0e:	4934      	ldr	r1, [pc, #208]	; (8003de0 <GPS_parse+0x158>)
 8003d10:	4834      	ldr	r0, [pc, #208]	; (8003de4 <GPS_parse+0x15c>)
 8003d12:	f019 fe50 	bl	801d9b6 <strncmp>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d111      	bne.n	8003d40 <GPS_parse+0xb8>
 8003d1c:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <GPS_parse+0x160>)
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <GPS_parse+0x164>)
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <GPS_parse+0x168>)
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <GPS_parse+0x13c>)
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <GPS_parse+0x140>)
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <GPS_parse+0x144>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <GPS_parse+0x148>)
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <GPS_parse+0x14c>)
 8003d38:	492e      	ldr	r1, [pc, #184]	; (8003df4 <GPS_parse+0x16c>)
 8003d3a:	482a      	ldr	r0, [pc, #168]	; (8003de4 <GPS_parse+0x15c>)
 8003d3c:	f019 fdc2 	bl	801d8c4 <siscanf>
 8003d40:	2206      	movs	r2, #6
 8003d42:	492d      	ldr	r1, [pc, #180]	; (8003df8 <GPS_parse+0x170>)
 8003d44:	482d      	ldr	r0, [pc, #180]	; (8003dfc <GPS_parse+0x174>)
 8003d46:	f019 fe36 	bl	801d9b6 <strncmp>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <GPS_parse+0xe4>
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <GPS_parse+0x178>)
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <GPS_parse+0x14c>)
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <GPS_parse+0x13c>)
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <GPS_parse+0x140>)
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <GPS_parse+0x144>)
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <GPS_parse+0x148>)
 8003d64:	4927      	ldr	r1, [pc, #156]	; (8003e04 <GPS_parse+0x17c>)
 8003d66:	4825      	ldr	r0, [pc, #148]	; (8003dfc <GPS_parse+0x174>)
 8003d68:	f019 fdac 	bl	801d8c4 <siscanf>
 8003d6c:	2206      	movs	r2, #6
 8003d6e:	4926      	ldr	r1, [pc, #152]	; (8003e08 <GPS_parse+0x180>)
 8003d70:	4826      	ldr	r0, [pc, #152]	; (8003e0c <GPS_parse+0x184>)
 8003d72:	f019 fe20 	bl	801d9b6 <strncmp>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d111      	bne.n	8003da0 <GPS_parse+0x118>
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <GPS_parse+0x188>)
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <GPS_parse+0x18c>)
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <GPS_parse+0x190>)
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <GPS_parse+0x168>)
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <GPS_parse+0x194>)
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <GPS_parse+0x198>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <GPS_parse+0x19c>)
 8003d96:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <GPS_parse+0x1a0>)
 8003d98:	4924      	ldr	r1, [pc, #144]	; (8003e2c <GPS_parse+0x1a4>)
 8003d9a:	481c      	ldr	r0, [pc, #112]	; (8003e0c <GPS_parse+0x184>)
 8003d9c:	f019 fd92 	bl	801d8c4 <siscanf>
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0802291c 	.word	0x0802291c
 8003dac:	20000b14 	.word	0x20000b14
 8003db0:	20000a48 	.word	0x20000a48
 8003db4:	20000a44 	.word	0x20000a44
 8003db8:	20000a40 	.word	0x20000a40
 8003dbc:	20000a3c 	.word	0x20000a3c
 8003dc0:	20000a38 	.word	0x20000a38
 8003dc4:	20000a35 	.word	0x20000a35
 8003dc8:	20000a28 	.word	0x20000a28
 8003dcc:	20000a34 	.word	0x20000a34
 8003dd0:	20000a2c 	.word	0x20000a2c
 8003dd4:	20000a30 	.word	0x20000a30
 8003dd8:	08022924 	.word	0x08022924
 8003ddc:	20000a1c 	.word	0x20000a1c
 8003de0:	0802294c 	.word	0x0802294c
 8003de4:	20000a74 	.word	0x20000a74
 8003de8:	20000a54 	.word	0x20000a54
 8003dec:	20000a50 	.word	0x20000a50
 8003df0:	20000a4c 	.word	0x20000a4c
 8003df4:	08022954 	.word	0x08022954
 8003df8:	08022974 	.word	0x08022974
 8003dfc:	20000c04 	.word	0x20000c04
 8003e00:	20000a58 	.word	0x20000a58
 8003e04:	0802297c 	.word	0x0802297c
 8003e08:	08022998 	.word	0x08022998
 8003e0c:	20000ac4 	.word	0x20000ac4
 8003e10:	20000a70 	.word	0x20000a70
 8003e14:	20000a6c 	.word	0x20000a6c
 8003e18:	20000a69 	.word	0x20000a69
 8003e1c:	20000a68 	.word	0x20000a68
 8003e20:	20000a64 	.word	0x20000a64
 8003e24:	20000a60 	.word	0x20000a60
 8003e28:	20000a5c 	.word	0x20000a5c
 8003e2c:	080229a0 	.word	0x080229a0

08003e30 <memset0_Buff_GPS>:
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	224d      	movs	r2, #77	; 0x4d
 8003e36:	2100      	movs	r1, #0
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <memset0_Buff_GPS+0x8c>)
 8003e3a:	f019 fdb4 	bl	801d9a6 <memset>
 8003e3e:	2204      	movs	r2, #4
 8003e40:	2100      	movs	r1, #0
 8003e42:	481f      	ldr	r0, [pc, #124]	; (8003ec0 <memset0_Buff_GPS+0x90>)
 8003e44:	f019 fdaf 	bl	801d9a6 <memset>
 8003e48:	224d      	movs	r2, #77	; 0x4d
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	481d      	ldr	r0, [pc, #116]	; (8003ec4 <memset0_Buff_GPS+0x94>)
 8003e4e:	f019 fdaa 	bl	801d9a6 <memset>
 8003e52:	2204      	movs	r2, #4
 8003e54:	2100      	movs	r1, #0
 8003e56:	481c      	ldr	r0, [pc, #112]	; (8003ec8 <memset0_Buff_GPS+0x98>)
 8003e58:	f019 fda5 	bl	801d9a6 <memset>
 8003e5c:	224d      	movs	r2, #77	; 0x4d
 8003e5e:	2100      	movs	r1, #0
 8003e60:	481a      	ldr	r0, [pc, #104]	; (8003ecc <memset0_Buff_GPS+0x9c>)
 8003e62:	f019 fda0 	bl	801d9a6 <memset>
 8003e66:	2204      	movs	r2, #4
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4819      	ldr	r0, [pc, #100]	; (8003ed0 <memset0_Buff_GPS+0xa0>)
 8003e6c:	f019 fd9b 	bl	801d9a6 <memset>
 8003e70:	224d      	movs	r2, #77	; 0x4d
 8003e72:	2100      	movs	r1, #0
 8003e74:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <memset0_Buff_GPS+0xa4>)
 8003e76:	f019 fd96 	bl	801d9a6 <memset>
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <memset0_Buff_GPS+0xa8>)
 8003e80:	f019 fd91 	bl	801d9a6 <memset>
 8003e84:	224d      	movs	r2, #77	; 0x4d
 8003e86:	2100      	movs	r1, #0
 8003e88:	4814      	ldr	r0, [pc, #80]	; (8003edc <memset0_Buff_GPS+0xac>)
 8003e8a:	f019 fd8c 	bl	801d9a6 <memset>
 8003e8e:	2204      	movs	r2, #4
 8003e90:	2100      	movs	r1, #0
 8003e92:	4813      	ldr	r0, [pc, #76]	; (8003ee0 <memset0_Buff_GPS+0xb0>)
 8003e94:	f019 fd87 	bl	801d9a6 <memset>
 8003e98:	224d      	movs	r2, #77	; 0x4d
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4811      	ldr	r0, [pc, #68]	; (8003ee4 <memset0_Buff_GPS+0xb4>)
 8003e9e:	f019 fd82 	bl	801d9a6 <memset>
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4810      	ldr	r0, [pc, #64]	; (8003ee8 <memset0_Buff_GPS+0xb8>)
 8003ea8:	f019 fd7d 	bl	801d9a6 <memset>
 8003eac:	224d      	movs	r2, #77	; 0x4d
 8003eae:	2100      	movs	r1, #0
 8003eb0:	480c      	ldr	r0, [pc, #48]	; (8003ee4 <memset0_Buff_GPS+0xb4>)
 8003eb2:	f019 fd78 	bl	801d9a6 <memset>
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000a74 	.word	0x20000a74
 8003ec0:	20000ac0 	.word	0x20000ac0
 8003ec4:	20000ac4 	.word	0x20000ac4
 8003ec8:	20000b10 	.word	0x20000b10
 8003ecc:	20000b14 	.word	0x20000b14
 8003ed0:	20000b60 	.word	0x20000b60
 8003ed4:	20000b64 	.word	0x20000b64
 8003ed8:	20000bb0 	.word	0x20000bb0
 8003edc:	20000bb4 	.word	0x20000bb4
 8003ee0:	20000c00 	.word	0x20000c00
 8003ee4:	20000c04 	.word	0x20000c04
 8003ee8:	20000c50 	.word	0x20000c50

08003eec <memset0_Buff_Sensores>:
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <memset0_Buff_Sensores+0x98>)
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <memset0_Buff_Sensores+0x9c>)
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <memset0_Buff_Sensores+0xa0>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <memset0_Buff_Sensores+0xa4>)
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <memset0_Buff_Sensores+0xa8>)
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <memset0_Buff_Sensores+0xac>)
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <memset0_Buff_Sensores+0xb0>)
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <memset0_Buff_Sensores+0xb4>)
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <memset0_Buff_Sensores+0xb8>)
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <memset0_Buff_Sensores+0xbc>)
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	491a      	ldr	r1, [pc, #104]	; (8003fac <memset0_Buff_Sensores+0xc0>)
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9c1 2300 	strd	r2, r3, [r1]
 8003f4e:	4918      	ldr	r1, [pc, #96]	; (8003fb0 <memset0_Buff_Sensores+0xc4>)
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9c1 2300 	strd	r2, r3, [r1]
 8003f5c:	4915      	ldr	r1, [pc, #84]	; (8003fb4 <memset0_Buff_Sensores+0xc8>)
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9c1 2300 	strd	r2, r3, [r1]
 8003f6a:	4913      	ldr	r1, [pc, #76]	; (8003fb8 <memset0_Buff_Sensores+0xcc>)
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2000217c 	.word	0x2000217c
 8003f88:	20002180 	.word	0x20002180
 8003f8c:	20002184 	.word	0x20002184
 8003f90:	20002188 	.word	0x20002188
 8003f94:	2000218c 	.word	0x2000218c
 8003f98:	20002190 	.word	0x20002190
 8003f9c:	20002194 	.word	0x20002194
 8003fa0:	20002560 	.word	0x20002560
 8003fa4:	20002564 	.word	0x20002564
 8003fa8:	20002568 	.word	0x20002568
 8003fac:	20002870 	.word	0x20002870
 8003fb0:	20002a08 	.word	0x20002a08
 8003fb4:	20002a10 	.word	0x20002a10
 8003fb8:	20002a18 	.word	0x20002a18

08003fbc <GPS_nmea_to_dec>:
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	70fb      	strb	r3, [r7, #3]
 8003fca:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fce:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004050 <GPS_nmea_to_dec+0x94>
 8003fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fda:	ee17 3a90 	vmov	r3, s15
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2264      	movs	r2, #100	; 0x64
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff8:	edc7 7a03 	vstr	s15, [r7, #12]
 8003ffc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004000:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004054 <GPS_nmea_to_dec+0x98>
 8004004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004008:	edc7 7a02 	vstr	s15, [r7, #8]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004016:	ed97 7a02 	vldr	s14, [r7, #8]
 800401a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401e:	edc7 7a05 	vstr	s15, [r7, #20]
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	2b53      	cmp	r3, #83	; 0x53
 8004026:	d002      	beq.n	800402e <GPS_nmea_to_dec+0x72>
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	2b57      	cmp	r3, #87	; 0x57
 800402c:	d105      	bne.n	800403a <GPS_nmea_to_dec+0x7e>
 800402e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004032:	eef1 7a67 	vneg.f32	s15, s15
 8004036:	edc7 7a05 	vstr	s15, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eeb0 0a67 	vmov.f32	s0, s15
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	42c80000 	.word	0x42c80000
 8004054:	42700000 	.word	0x42700000

08004058 <HAL_UARTEx_RxEventCallback>:
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <HAL_UARTEx_RxEventCallback+0x34>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10a      	bne.n	8004084 <HAL_UARTEx_RxEventCallback+0x2c>
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_UARTEx_RxEventCallback+0x38>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004076:	f00a ffb5 	bl	800efe4 <HAL_UART_DMAStop>
 800407a:	f7ff fb59 	bl	8003730 <GPS_Index>
 800407e:	4b04      	ldr	r3, [pc, #16]	; (8004090 <HAL_UARTEx_RxEventCallback+0x38>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40004400 	.word	0x40004400
 8004090:	20002155 	.word	0x20002155
 8004094:	20000828 	.word	0x20000828

08004098 <IT_TIM6_CALLBACK>:
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b094      	sub	sp, #80	; 0x50
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <IT_TIM6_CALLBACK+0x70>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <IT_TIM6_CALLBACK+0x70>)
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <IT_TIM6_CALLBACK+0x74>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <IT_TIM6_CALLBACK+0x74>)
 80040b6:	8013      	strh	r3, [r2, #0]
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <IT_TIM6_CALLBACK+0x78>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 8497 	bne.w	80049f2 <IT_TIM6_CALLBACK+0x95a>
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <IT_TIM6_CALLBACK+0x7c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <IT_TIM6_CALLBACK+0x7c>)
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f7ff f955 	bl	800337c <IMU_Accel_Read_RAW>
 80040d2:	f7ff f99b 	bl	800340c <IMU_Temp_Read_RAW>
 80040d6:	f7ff f9c9 	bl	800346c <IMU_Gyro_Read_RAW>
 80040da:	f7ff fa11 	bl	8003500 <BPS_Read_RAW>
 80040de:	f7ff fa71 	bl	80035c4 <INA219_Read_RAW>
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <IT_TIM6_CALLBACK+0x80>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <IT_TIM6_CALLBACK+0x80>)
 80040ee:	7013      	strb	r3, [r2, #0]
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <IT_TIM6_CALLBACK+0x74>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 847b 	bne.w	80049f2 <IT_TIM6_CALLBACK+0x95a>
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <IT_TIM6_CALLBACK+0x78>)
 80040fe:	2301      	movs	r3, #1
 8004100:	7013      	strb	r3, [r2, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004106:	e0b6      	b.n	8004276 <IT_TIM6_CALLBACK+0x1de>
 8004108:	2000cff0 	.word	0x2000cff0
 800410c:	2000d000 	.word	0x2000d000
 8004110:	2000cfec 	.word	0x2000cfec
 8004114:	2000d004 	.word	0x2000d004
 8004118:	20002518 	.word	0x20002518
 800411c:	4ab4      	ldr	r2, [pc, #720]	; (80043f0 <IT_TIM6_CALLBACK+0x358>)
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004124:	b21b      	sxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	4bb2      	ldr	r3, [pc, #712]	; (80043f4 <IT_TIM6_CALLBACK+0x35c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	441a      	add	r2, r3
 800412e:	4bb1      	ldr	r3, [pc, #708]	; (80043f4 <IT_TIM6_CALLBACK+0x35c>)
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4ab1      	ldr	r2, [pc, #708]	; (80043f8 <IT_TIM6_CALLBACK+0x360>)
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800413a:	b21b      	sxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	4baf      	ldr	r3, [pc, #700]	; (80043fc <IT_TIM6_CALLBACK+0x364>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	441a      	add	r2, r3
 8004144:	4bad      	ldr	r3, [pc, #692]	; (80043fc <IT_TIM6_CALLBACK+0x364>)
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	4aad      	ldr	r2, [pc, #692]	; (8004400 <IT_TIM6_CALLBACK+0x368>)
 800414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004150:	b21b      	sxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	4bab      	ldr	r3, [pc, #684]	; (8004404 <IT_TIM6_CALLBACK+0x36c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	441a      	add	r2, r3
 800415a:	4baa      	ldr	r3, [pc, #680]	; (8004404 <IT_TIM6_CALLBACK+0x36c>)
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	4aaa      	ldr	r2, [pc, #680]	; (8004408 <IT_TIM6_CALLBACK+0x370>)
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004166:	b21b      	sxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	4ba8      	ldr	r3, [pc, #672]	; (800440c <IT_TIM6_CALLBACK+0x374>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	441a      	add	r2, r3
 8004170:	4ba6      	ldr	r3, [pc, #664]	; (800440c <IT_TIM6_CALLBACK+0x374>)
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	4aa6      	ldr	r2, [pc, #664]	; (8004410 <IT_TIM6_CALLBACK+0x378>)
 8004176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800417c:	b21b      	sxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	4ba4      	ldr	r3, [pc, #656]	; (8004414 <IT_TIM6_CALLBACK+0x37c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	441a      	add	r2, r3
 8004186:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <IT_TIM6_CALLBACK+0x37c>)
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4aa3      	ldr	r2, [pc, #652]	; (8004418 <IT_TIM6_CALLBACK+0x380>)
 800418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004192:	b21b      	sxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	4ba1      	ldr	r3, [pc, #644]	; (800441c <IT_TIM6_CALLBACK+0x384>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	441a      	add	r2, r3
 800419c:	4b9f      	ldr	r3, [pc, #636]	; (800441c <IT_TIM6_CALLBACK+0x384>)
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4a9f      	ldr	r2, [pc, #636]	; (8004420 <IT_TIM6_CALLBACK+0x388>)
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b9d      	ldr	r3, [pc, #628]	; (8004424 <IT_TIM6_CALLBACK+0x38c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	441a      	add	r2, r3
 80041b2:	4b9c      	ldr	r3, [pc, #624]	; (8004424 <IT_TIM6_CALLBACK+0x38c>)
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4a9c      	ldr	r2, [pc, #624]	; (8004428 <IT_TIM6_CALLBACK+0x390>)
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	17da      	asrs	r2, r3, #31
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	4b99      	ldr	r3, [pc, #612]	; (800442c <IT_TIM6_CALLBACK+0x394>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041cc:	1889      	adds	r1, r1, r2
 80041ce:	6239      	str	r1, [r7, #32]
 80041d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d2:	eb41 0303 	adc.w	r3, r1, r3
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	4b94      	ldr	r3, [pc, #592]	; (800442c <IT_TIM6_CALLBACK+0x394>)
 80041da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041de:	e9c3 1200 	strd	r1, r2, [r3]
 80041e2:	4a93      	ldr	r2, [pc, #588]	; (8004430 <IT_TIM6_CALLBACK+0x398>)
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ea:	17da      	asrs	r2, r3, #31
 80041ec:	4698      	mov	r8, r3
 80041ee:	4691      	mov	r9, r2
 80041f0:	4b90      	ldr	r3, [pc, #576]	; (8004434 <IT_TIM6_CALLBACK+0x39c>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	eb18 0102 	adds.w	r1, r8, r2
 80041fa:	61b9      	str	r1, [r7, #24]
 80041fc:	eb49 0303 	adc.w	r3, r9, r3
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <IT_TIM6_CALLBACK+0x39c>)
 8004204:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004208:	e9c3 1200 	strd	r1, r2, [r3]
 800420c:	4a8a      	ldr	r2, [pc, #552]	; (8004438 <IT_TIM6_CALLBACK+0x3a0>)
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004214:	17da      	asrs	r2, r3, #31
 8004216:	461c      	mov	r4, r3
 8004218:	4615      	mov	r5, r2
 800421a:	4b88      	ldr	r3, [pc, #544]	; (800443c <IT_TIM6_CALLBACK+0x3a4>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	eb14 0a02 	adds.w	sl, r4, r2
 8004224:	eb45 0b03 	adc.w	fp, r5, r3
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <IT_TIM6_CALLBACK+0x3a4>)
 800422a:	e9c3 ab00 	strd	sl, fp, [r3]
 800422e:	4a84      	ldr	r2, [pc, #528]	; (8004440 <IT_TIM6_CALLBACK+0x3a8>)
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4b82      	ldr	r3, [pc, #520]	; (8004444 <IT_TIM6_CALLBACK+0x3ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	441a      	add	r2, r3
 8004240:	4b80      	ldr	r3, [pc, #512]	; (8004444 <IT_TIM6_CALLBACK+0x3ac>)
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	4a80      	ldr	r2, [pc, #512]	; (8004448 <IT_TIM6_CALLBACK+0x3b0>)
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <IT_TIM6_CALLBACK+0x3b4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	441a      	add	r2, r3
 8004256:	4b7d      	ldr	r3, [pc, #500]	; (800444c <IT_TIM6_CALLBACK+0x3b4>)
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4a7d      	ldr	r2, [pc, #500]	; (8004450 <IT_TIM6_CALLBACK+0x3b8>)
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <IT_TIM6_CALLBACK+0x3bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	441a      	add	r2, r3
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <IT_TIM6_CALLBACK+0x3bc>)
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	3301      	adds	r3, #1
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004276:	4b78      	ldr	r3, [pc, #480]	; (8004458 <IT_TIM6_CALLBACK+0x3c0>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	4293      	cmp	r3, r2
 8004282:	f77f af4b 	ble.w	800411c <IT_TIM6_CALLBACK+0x84>
 8004286:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <IT_TIM6_CALLBACK+0x358>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b21b      	sxth	r3, r3
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004294:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800429c:	ee17 0a90 	vmov	r0, s15
 80042a0:	f7fc f956 	bl	8000550 <__aeabi_f2d>
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <IT_TIM6_CALLBACK+0x3c4>)
 80042aa:	f7fc fad3 	bl	8000854 <__aeabi_ddiv>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fc fc9b 	bl	8000bf0 <__aeabi_d2f>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a68      	ldr	r2, [pc, #416]	; (8004460 <IT_TIM6_CALLBACK+0x3c8>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <IT_TIM6_CALLBACK+0x360>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d6:	ee17 0a90 	vmov	r0, s15
 80042da:	f7fc f939 	bl	8000550 <__aeabi_f2d>
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	4b5e      	ldr	r3, [pc, #376]	; (800445c <IT_TIM6_CALLBACK+0x3c4>)
 80042e4:	f7fc fab6 	bl	8000854 <__aeabi_ddiv>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7fc fc7e 	bl	8000bf0 <__aeabi_d2f>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <IT_TIM6_CALLBACK+0x3cc>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <IT_TIM6_CALLBACK+0x368>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b21b      	sxth	r3, r3
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004308:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800430c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004310:	ee17 0a90 	vmov	r0, s15
 8004314:	f7fc f91c 	bl	8000550 <__aeabi_f2d>
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <IT_TIM6_CALLBACK+0x3c4>)
 800431e:	f7fc fa99 	bl	8000854 <__aeabi_ddiv>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc61 	bl	8000bf0 <__aeabi_d2f>
 800432e:	4603      	mov	r3, r0
 8004330:	4a4d      	ldr	r2, [pc, #308]	; (8004468 <IT_TIM6_CALLBACK+0x3d0>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	2241      	movs	r2, #65	; 0x41
 8004336:	2100      	movs	r1, #0
 8004338:	482d      	ldr	r0, [pc, #180]	; (80043f0 <IT_TIM6_CALLBACK+0x358>)
 800433a:	f019 fb34 	bl	801d9a6 <memset>
 800433e:	2241      	movs	r2, #65	; 0x41
 8004340:	2100      	movs	r1, #0
 8004342:	482d      	ldr	r0, [pc, #180]	; (80043f8 <IT_TIM6_CALLBACK+0x360>)
 8004344:	f019 fb2f 	bl	801d9a6 <memset>
 8004348:	2241      	movs	r2, #65	; 0x41
 800434a:	2100      	movs	r1, #0
 800434c:	482c      	ldr	r0, [pc, #176]	; (8004400 <IT_TIM6_CALLBACK+0x368>)
 800434e:	f019 fb2a 	bl	801d9a6 <memset>
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <IT_TIM6_CALLBACK+0x35c>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <IT_TIM6_CALLBACK+0x364>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <IT_TIM6_CALLBACK+0x36c>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <IT_TIM6_CALLBACK+0x374>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3b      	ldr	r2, [pc, #236]	; (8004458 <IT_TIM6_CALLBACK+0x3c0>)
 800436a:	7812      	ldrb	r2, [r2, #0]
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004372:	4a3e      	ldr	r2, [pc, #248]	; (800446c <IT_TIM6_CALLBACK+0x3d4>)
 8004374:	fb82 1203 	smull	r1, r2, r2, r3
 8004378:	11d2      	asrs	r2, r2, #7
 800437a:	17db      	asrs	r3, r3, #31
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8d4 	bl	800052c <__aeabi_i2d>
 8004384:	a318      	add	r3, pc, #96	; (adr r3, 80043e8 <IT_TIM6_CALLBACK+0x350>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fb ff83 	bl	8000294 <__adddf3>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	f7fc fc2b 	bl	8000bf0 <__aeabi_d2f>
 800439a:	4603      	mov	r3, r0
 800439c:	4a34      	ldr	r2, [pc, #208]	; (8004470 <IT_TIM6_CALLBACK+0x3d8>)
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	2241      	movs	r2, #65	; 0x41
 80043a2:	2100      	movs	r1, #0
 80043a4:	4818      	ldr	r0, [pc, #96]	; (8004408 <IT_TIM6_CALLBACK+0x370>)
 80043a6:	f019 fafe 	bl	801d9a6 <memset>
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <IT_TIM6_CALLBACK+0x374>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <IT_TIM6_CALLBACK+0x378>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043be:	ee17 0a90 	vmov	r0, s15
 80043c2:	f7fc f8c5 	bl	8000550 <__aeabi_f2d>
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <IT_TIM6_CALLBACK+0x3dc>)
 80043cc:	f7fc fa42 	bl	8000854 <__aeabi_ddiv>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fc fc0a 	bl	8000bf0 <__aeabi_d2f>
 80043dc:	4603      	mov	r3, r0
 80043de:	4a26      	ldr	r2, [pc, #152]	; (8004478 <IT_TIM6_CALLBACK+0x3e0>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e04b      	b.n	800447c <IT_TIM6_CALLBACK+0x3e4>
 80043e4:	f3af 8000 	nop.w
 80043e8:	0a3d70a4 	.word	0x0a3d70a4
 80043ec:	404243d7 	.word	0x404243d7
 80043f0:	20002198 	.word	0x20002198
 80043f4:	20002160 	.word	0x20002160
 80043f8:	20002218 	.word	0x20002218
 80043fc:	20002164 	.word	0x20002164
 8004400:	20002298 	.word	0x20002298
 8004404:	20002168 	.word	0x20002168
 8004408:	20002318 	.word	0x20002318
 800440c:	2000216c 	.word	0x2000216c
 8004410:	20002398 	.word	0x20002398
 8004414:	20002170 	.word	0x20002170
 8004418:	20002418 	.word	0x20002418
 800441c:	20002174 	.word	0x20002174
 8004420:	20002498 	.word	0x20002498
 8004424:	20002178 	.word	0x20002178
 8004428:	2000266c 	.word	0x2000266c
 800442c:	20002528 	.word	0x20002528
 8004430:	2000256c 	.word	0x2000256c
 8004434:	20002520 	.word	0x20002520
 8004438:	2000276c 	.word	0x2000276c
 800443c:	20002530 	.word	0x20002530
 8004440:	20002878 	.word	0x20002878
 8004444:	200029f8 	.word	0x200029f8
 8004448:	200028f8 	.word	0x200028f8
 800444c:	200029fc 	.word	0x200029fc
 8004450:	20002978 	.word	0x20002978
 8004454:	20002a00 	.word	0x20002a00
 8004458:	20002518 	.word	0x20002518
 800445c:	40d00000 	.word	0x40d00000
 8004460:	2000217c 	.word	0x2000217c
 8004464:	20002180 	.word	0x20002180
 8004468:	20002184 	.word	0x20002184
 800446c:	60606061 	.word	0x60606061
 8004470:	20002188 	.word	0x20002188
 8004474:	407f4000 	.word	0x407f4000
 8004478:	2000218c 	.word	0x2000218c
 800447c:	4bc4      	ldr	r3, [pc, #784]	; (8004790 <IT_TIM6_CALLBACK+0x6f8>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b21b      	sxth	r3, r3
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448a:	ee17 0a90 	vmov	r0, s15
 800448e:	f7fc f85f 	bl	8000550 <__aeabi_f2d>
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4bbf      	ldr	r3, [pc, #764]	; (8004794 <IT_TIM6_CALLBACK+0x6fc>)
 8004498:	f7fc f9dc 	bl	8000854 <__aeabi_ddiv>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fba4 	bl	8000bf0 <__aeabi_d2f>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4abb      	ldr	r2, [pc, #748]	; (8004798 <IT_TIM6_CALLBACK+0x700>)
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4bbb      	ldr	r3, [pc, #748]	; (800479c <IT_TIM6_CALLBACK+0x704>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b21b      	sxth	r3, r3
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044bc:	ee17 0a90 	vmov	r0, s15
 80044c0:	f7fc f846 	bl	8000550 <__aeabi_f2d>
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	4bb2      	ldr	r3, [pc, #712]	; (8004794 <IT_TIM6_CALLBACK+0x6fc>)
 80044ca:	f7fc f9c3 	bl	8000854 <__aeabi_ddiv>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	f7fc fb8b 	bl	8000bf0 <__aeabi_d2f>
 80044da:	4603      	mov	r3, r0
 80044dc:	4ab0      	ldr	r2, [pc, #704]	; (80047a0 <IT_TIM6_CALLBACK+0x708>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	2241      	movs	r2, #65	; 0x41
 80044e2:	2100      	movs	r1, #0
 80044e4:	48af      	ldr	r0, [pc, #700]	; (80047a4 <IT_TIM6_CALLBACK+0x70c>)
 80044e6:	f019 fa5e 	bl	801d9a6 <memset>
 80044ea:	2241      	movs	r2, #65	; 0x41
 80044ec:	2100      	movs	r1, #0
 80044ee:	48a8      	ldr	r0, [pc, #672]	; (8004790 <IT_TIM6_CALLBACK+0x6f8>)
 80044f0:	f019 fa59 	bl	801d9a6 <memset>
 80044f4:	2241      	movs	r2, #65	; 0x41
 80044f6:	2100      	movs	r1, #0
 80044f8:	48a8      	ldr	r0, [pc, #672]	; (800479c <IT_TIM6_CALLBACK+0x704>)
 80044fa:	f019 fa54 	bl	801d9a6 <memset>
 80044fe:	4baa      	ldr	r3, [pc, #680]	; (80047a8 <IT_TIM6_CALLBACK+0x710>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	4ba9      	ldr	r3, [pc, #676]	; (80047ac <IT_TIM6_CALLBACK+0x714>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	4ba9      	ldr	r3, [pc, #676]	; (80047b0 <IT_TIM6_CALLBACK+0x718>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	4ba8      	ldr	r3, [pc, #672]	; (80047b4 <IT_TIM6_CALLBACK+0x71c>)
 8004512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004516:	4ba8      	ldr	r3, [pc, #672]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2200      	movs	r2, #0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	617a      	str	r2, [r7, #20]
 8004524:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004528:	f7fc fbb2 	bl	8000c90 <__aeabi_ldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fa74 	bl	8002a20 <BPS_Pressao_Comp>
 8004538:	4603      	mov	r3, r0
 800453a:	4618      	mov	r0, r3
 800453c:	f7fb ffe6 	bl	800050c <__aeabi_ui2d>
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	4b9d      	ldr	r3, [pc, #628]	; (80047bc <IT_TIM6_CALLBACK+0x724>)
 8004546:	f7fc f985 	bl	8000854 <__aeabi_ddiv>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	f7fc fb4d 	bl	8000bf0 <__aeabi_d2f>
 8004556:	4603      	mov	r3, r0
 8004558:	4a99      	ldr	r2, [pc, #612]	; (80047c0 <IT_TIM6_CALLBACK+0x728>)
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b99      	ldr	r3, [pc, #612]	; (80047c4 <IT_TIM6_CALLBACK+0x72c>)
 800455e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004562:	4b95      	ldr	r3, [pc, #596]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2200      	movs	r2, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	60fa      	str	r2, [r7, #12]
 8004570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004574:	f7fc fb8c 	bl	8000c90 <__aeabi_ldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fd84 	bl	800308c <BPS_Temperatura_Comp>
 8004584:	4603      	mov	r3, r0
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb ffd0 	bl	800052c <__aeabi_i2d>
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	4b8d      	ldr	r3, [pc, #564]	; (80047c8 <IT_TIM6_CALLBACK+0x730>)
 8004592:	f7fc f95f 	bl	8000854 <__aeabi_ddiv>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fb27 	bl	8000bf0 <__aeabi_d2f>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a89      	ldr	r2, [pc, #548]	; (80047cc <IT_TIM6_CALLBACK+0x734>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <IT_TIM6_CALLBACK+0x738>)
 80045aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ae:	4b82      	ldr	r3, [pc, #520]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2200      	movs	r2, #0
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c0:	f7fc fb66 	bl	8000c90 <__aeabi_ldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fcf0 	bl	8002fb0 <BPS_Umidade_Comp>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fb ff9a 	bl	800050c <__aeabi_ui2d>
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b7d      	ldr	r3, [pc, #500]	; (80047d4 <IT_TIM6_CALLBACK+0x73c>)
 80045de:	f7fc f939 	bl	8000854 <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc fb01 	bl	8000bf0 <__aeabi_d2f>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a79      	ldr	r2, [pc, #484]	; (80047d8 <IT_TIM6_CALLBACK+0x740>)
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b75      	ldr	r3, [pc, #468]	; (80047cc <IT_TIM6_CALLBACK+0x734>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ffa9 	bl	8000550 <__aeabi_f2d>
 80045fe:	a35c      	add	r3, pc, #368	; (adr r3, 8004770 <IT_TIM6_CALLBACK+0x6d8>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fb fe46 	bl	8000294 <__adddf3>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004610:	a359      	add	r3, pc, #356	; (adr r3, 8004778 <IT_TIM6_CALLBACK+0x6e0>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800461a:	f7fc f91b 	bl	8000854 <__aeabi_ddiv>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <IT_TIM6_CALLBACK+0x728>)
 8004628:	edd3 7a00 	vldr	s15, [r3]
 800462c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80047dc <IT_TIM6_CALLBACK+0x744>
 8004630:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004634:	ee16 0a90 	vmov	r0, s13
 8004638:	f7fb ff8a 	bl	8000550 <__aeabi_f2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004644:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8004780 <IT_TIM6_CALLBACK+0x6e8>
 8004648:	eeb0 1a47 	vmov.f32	s2, s14
 800464c:	eef0 1a67 	vmov.f32	s3, s15
 8004650:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8004654:	f01d f95a 	bl	802190c <pow>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	4b5f      	ldr	r3, [pc, #380]	; (80047e0 <IT_TIM6_CALLBACK+0x748>)
 8004662:	f7fb fe15 	bl	8000290 <__aeabi_dsub>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004672:	f7fb ffc5 	bl	8000600 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	495a      	ldr	r1, [pc, #360]	; (80047e4 <IT_TIM6_CALLBACK+0x74c>)
 800467c:	e9c1 2300 	strd	r2, r3, [r1]
 8004680:	2241      	movs	r2, #65	; 0x41
 8004682:	2100      	movs	r1, #0
 8004684:	4858      	ldr	r0, [pc, #352]	; (80047e8 <IT_TIM6_CALLBACK+0x750>)
 8004686:	f019 f98e 	bl	801d9a6 <memset>
 800468a:	2241      	movs	r2, #65	; 0x41
 800468c:	2100      	movs	r1, #0
 800468e:	4857      	ldr	r0, [pc, #348]	; (80047ec <IT_TIM6_CALLBACK+0x754>)
 8004690:	f019 f989 	bl	801d9a6 <memset>
 8004694:	2241      	movs	r2, #65	; 0x41
 8004696:	2100      	movs	r1, #0
 8004698:	4855      	ldr	r0, [pc, #340]	; (80047f0 <IT_TIM6_CALLBACK+0x758>)
 800469a:	f019 f984 	bl	801d9a6 <memset>
 800469e:	4945      	ldr	r1, [pc, #276]	; (80047b4 <IT_TIM6_CALLBACK+0x71c>)
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9c1 2300 	strd	r2, r3, [r1]
 80046ac:	4945      	ldr	r1, [pc, #276]	; (80047c4 <IT_TIM6_CALLBACK+0x72c>)
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9c1 2300 	strd	r2, r3, [r1]
 80046ba:	4945      	ldr	r1, [pc, #276]	; (80047d0 <IT_TIM6_CALLBACK+0x738>)
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9c1 2300 	strd	r2, r3, [r1]
 80046c8:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <IT_TIM6_CALLBACK+0x75c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb ff17 	bl	800050c <__aeabi_ui2d>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4945      	ldr	r1, [pc, #276]	; (80047f8 <IT_TIM6_CALLBACK+0x760>)
 80046e4:	e9c1 2300 	strd	r2, r3, [r1]
 80046e8:	4b44      	ldr	r3, [pc, #272]	; (80047fc <IT_TIM6_CALLBACK+0x764>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb ff08 	bl	800050c <__aeabi_ui2d>
 80046fc:	a322      	add	r3, pc, #136	; (adr r3, 8004788 <IT_TIM6_CALLBACK+0x6f0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb ff7d 	bl	8000600 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	493d      	ldr	r1, [pc, #244]	; (8004800 <IT_TIM6_CALLBACK+0x768>)
 800470c:	e9c1 2300 	strd	r2, r3, [r1]
 8004710:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <IT_TIM6_CALLBACK+0x76c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <IT_TIM6_CALLBACK+0x720>)
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	2214      	movs	r2, #20
 8004720:	fbb3 f3f2 	udiv	r3, r3, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fef1 	bl	800050c <__aeabi_ui2d>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4936      	ldr	r1, [pc, #216]	; (8004808 <IT_TIM6_CALLBACK+0x770>)
 8004730:	e9c1 2300 	strd	r2, r3, [r1]
 8004734:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <IT_TIM6_CALLBACK+0x760>)
 8004736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <IT_TIM6_CALLBACK+0x774>)
 8004740:	f7fc f888 	bl	8000854 <__aeabi_ddiv>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	492b      	ldr	r1, [pc, #172]	; (80047f8 <IT_TIM6_CALLBACK+0x760>)
 800474a:	e9c1 2300 	strd	r2, r3, [r1]
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <IT_TIM6_CALLBACK+0x768>)
 8004750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <IT_TIM6_CALLBACK+0x774>)
 800475a:	f7fc f87b 	bl	8000854 <__aeabi_ddiv>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4927      	ldr	r1, [pc, #156]	; (8004800 <IT_TIM6_CALLBACK+0x768>)
 8004764:	e9c1 2300 	strd	r2, r3, [r1]
 8004768:	e052      	b.n	8004810 <IT_TIM6_CALLBACK+0x778>
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
 8004770:	66666666 	.word	0x66666666
 8004774:	40711266 	.word	0x40711266
 8004778:	76c8b439 	.word	0x76c8b439
 800477c:	bf7a9fbe 	.word	0xbf7a9fbe
 8004780:	b53305c4 	.word	0xb53305c4
 8004784:	3fc85a8b 	.word	0x3fc85a8b
 8004788:	47ae147b 	.word	0x47ae147b
 800478c:	3f847ae1 	.word	0x3f847ae1
 8004790:	20002418 	.word	0x20002418
 8004794:	407f4000 	.word	0x407f4000
 8004798:	20002190 	.word	0x20002190
 800479c:	20002498 	.word	0x20002498
 80047a0:	20002194 	.word	0x20002194
 80047a4:	20002398 	.word	0x20002398
 80047a8:	20002170 	.word	0x20002170
 80047ac:	20002174 	.word	0x20002174
 80047b0:	20002178 	.word	0x20002178
 80047b4:	20002528 	.word	0x20002528
 80047b8:	20002518 	.word	0x20002518
 80047bc:	40700000 	.word	0x40700000
 80047c0:	20002564 	.word	0x20002564
 80047c4:	20002520 	.word	0x20002520
 80047c8:	40590000 	.word	0x40590000
 80047cc:	20002560 	.word	0x20002560
 80047d0:	20002530 	.word	0x20002530
 80047d4:	40900000 	.word	0x40900000
 80047d8:	20002568 	.word	0x20002568
 80047dc:	47c5e680 	.word	0x47c5e680
 80047e0:	3ff00000 	.word	0x3ff00000
 80047e4:	20002870 	.word	0x20002870
 80047e8:	2000266c 	.word	0x2000266c
 80047ec:	2000256c 	.word	0x2000256c
 80047f0:	2000276c 	.word	0x2000276c
 80047f4:	200029f8 	.word	0x200029f8
 80047f8:	20002a08 	.word	0x20002a08
 80047fc:	200029fc 	.word	0x200029fc
 8004800:	20002a10 	.word	0x20002a10
 8004804:	20002a00 	.word	0x20002a00
 8004808:	20002a18 	.word	0x20002a18
 800480c:	408f4000 	.word	0x408f4000
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <IT_TIM6_CALLBACK+0x968>)
 8004812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	4b7a      	ldr	r3, [pc, #488]	; (8004a04 <IT_TIM6_CALLBACK+0x96c>)
 800481c:	f7fc f81a 	bl	8000854 <__aeabi_ddiv>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4976      	ldr	r1, [pc, #472]	; (8004a00 <IT_TIM6_CALLBACK+0x968>)
 8004826:	e9c1 2300 	strd	r2, r3, [r1]
 800482a:	2241      	movs	r2, #65	; 0x41
 800482c:	2100      	movs	r1, #0
 800482e:	4876      	ldr	r0, [pc, #472]	; (8004a08 <IT_TIM6_CALLBACK+0x970>)
 8004830:	f019 f8b9 	bl	801d9a6 <memset>
 8004834:	2241      	movs	r2, #65	; 0x41
 8004836:	2100      	movs	r1, #0
 8004838:	4874      	ldr	r0, [pc, #464]	; (8004a0c <IT_TIM6_CALLBACK+0x974>)
 800483a:	f019 f8b4 	bl	801d9a6 <memset>
 800483e:	2241      	movs	r2, #65	; 0x41
 8004840:	2100      	movs	r1, #0
 8004842:	4873      	ldr	r0, [pc, #460]	; (8004a10 <IT_TIM6_CALLBACK+0x978>)
 8004844:	f019 f8af 	bl	801d9a6 <memset>
 8004848:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <IT_TIM6_CALLBACK+0x97c>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	4b72      	ldr	r3, [pc, #456]	; (8004a18 <IT_TIM6_CALLBACK+0x980>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	4b71      	ldr	r3, [pc, #452]	; (8004a1c <IT_TIM6_CALLBACK+0x984>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	4b71      	ldr	r3, [pc, #452]	; (8004a20 <IT_TIM6_CALLBACK+0x988>)
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <IT_TIM6_CALLBACK+0x98c>)
 8004862:	2200      	movs	r2, #0
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800486c:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <IT_TIM6_CALLBACK+0x990>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	4b6e      	ldr	r3, [pc, #440]	; (8004a2c <IT_TIM6_CALLBACK+0x994>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d115      	bne.n	80048a8 <IT_TIM6_CALLBACK+0x810>
 800487c:	e008      	b.n	8004890 <IT_TIM6_CALLBACK+0x7f8>
 800487e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004882:	4619      	mov	r1, r3
 8004884:	486a      	ldr	r0, [pc, #424]	; (8004a30 <IT_TIM6_CALLBACK+0x998>)
 8004886:	f7fe ffcf 	bl	8003828 <GPS_VALIDANDO_PARSE_XNMEA>
 800488a:	4603      	mov	r3, r0
 800488c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004890:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004894:	f240 22f6 	movw	r2, #758	; 0x2f6
 8004898:	4293      	cmp	r3, r2
 800489a:	d83a      	bhi.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 800489c:	4b62      	ldr	r3, [pc, #392]	; (8004a28 <IT_TIM6_CALLBACK+0x990>)
 800489e:	f993 3000 	ldrsb.w	r3, [r3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d0eb      	beq.n	800487e <IT_TIM6_CALLBACK+0x7e6>
 80048a6:	e034      	b.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 80048a8:	4b60      	ldr	r3, [pc, #384]	; (8004a2c <IT_TIM6_CALLBACK+0x994>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d115      	bne.n	80048de <IT_TIM6_CALLBACK+0x846>
 80048b2:	e008      	b.n	80048c6 <IT_TIM6_CALLBACK+0x82e>
 80048b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048b8:	4619      	mov	r1, r3
 80048ba:	485e      	ldr	r0, [pc, #376]	; (8004a34 <IT_TIM6_CALLBACK+0x99c>)
 80048bc:	f7fe ffb4 	bl	8003828 <GPS_VALIDANDO_PARSE_XNMEA>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048ca:	f240 22f6 	movw	r2, #758	; 0x2f6
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d81f      	bhi.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 80048d2:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <IT_TIM6_CALLBACK+0x990>)
 80048d4:	f993 3000 	ldrsb.w	r3, [r3]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d0eb      	beq.n	80048b4 <IT_TIM6_CALLBACK+0x81c>
 80048dc:	e019      	b.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <IT_TIM6_CALLBACK+0x994>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d114      	bne.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 80048e8:	e008      	b.n	80048fc <IT_TIM6_CALLBACK+0x864>
 80048ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048ee:	4619      	mov	r1, r3
 80048f0:	4851      	ldr	r0, [pc, #324]	; (8004a38 <IT_TIM6_CALLBACK+0x9a0>)
 80048f2:	f7fe ff99 	bl	8003828 <GPS_VALIDANDO_PARSE_XNMEA>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004900:	f240 22f6 	movw	r2, #758	; 0x2f6
 8004904:	4293      	cmp	r3, r2
 8004906:	d804      	bhi.n	8004912 <IT_TIM6_CALLBACK+0x87a>
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <IT_TIM6_CALLBACK+0x990>)
 800490a:	f993 3000 	ldrsb.w	r3, [r3]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d0eb      	beq.n	80048ea <IT_TIM6_CALLBACK+0x852>
 8004912:	4b45      	ldr	r3, [pc, #276]	; (8004a28 <IT_TIM6_CALLBACK+0x990>)
 8004914:	f993 3000 	ldrsb.w	r3, [r3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d148      	bne.n	80049ae <IT_TIM6_CALLBACK+0x916>
 800491c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004920:	2b00      	cmp	r3, #0
 8004922:	d044      	beq.n	80049ae <IT_TIM6_CALLBACK+0x916>
 8004924:	f7ff f9b0 	bl	8003c88 <GPS_parse>
 8004928:	f7ff fa82 	bl	8003e30 <memset0_Buff_GPS>
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <IT_TIM6_CALLBACK+0x9a4>)
 800492e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004932:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d014      	beq.n	8004966 <IT_TIM6_CALLBACK+0x8ce>
 800493c:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <IT_TIM6_CALLBACK+0x9a4>)
 800493e:	edd3 7a00 	vldr	s15, [r3]
 8004942:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d00c      	beq.n	8004966 <IT_TIM6_CALLBACK+0x8ce>
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <IT_TIM6_CALLBACK+0x9a8>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <IT_TIM6_CALLBACK+0x8ce>
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <IT_TIM6_CALLBACK+0x9ac>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <IT_TIM6_CALLBACK+0x9ac>)
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e023      	b.n	80049ae <IT_TIM6_CALLBACK+0x916>
 8004966:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <IT_TIM6_CALLBACK+0x9a4>)
 8004968:	edd3 7a04 	vldr	s15, [r3, #16]
 800496c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	d11b      	bne.n	80049ae <IT_TIM6_CALLBACK+0x916>
 8004976:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <IT_TIM6_CALLBACK+0x9a4>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004984:	d113      	bne.n	80049ae <IT_TIM6_CALLBACK+0x916>
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <IT_TIM6_CALLBACK+0x9ac>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <IT_TIM6_CALLBACK+0x906>
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <IT_TIM6_CALLBACK+0x9a8>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	3301      	adds	r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <IT_TIM6_CALLBACK+0x9a8>)
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <IT_TIM6_CALLBACK+0x9b0>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <IT_TIM6_CALLBACK+0x9b4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <IT_TIM6_CALLBACK+0x9b4>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	4927      	ldr	r1, [pc, #156]	; (8004a50 <IT_TIM6_CALLBACK+0x9b8>)
 80049b2:	4828      	ldr	r0, [pc, #160]	; (8004a54 <IT_TIM6_CALLBACK+0x9bc>)
 80049b4:	f007 ff14 	bl	800c7e0 <HAL_RTC_GetTime>
 80049b8:	2200      	movs	r2, #0
 80049ba:	4927      	ldr	r1, [pc, #156]	; (8004a58 <IT_TIM6_CALLBACK+0x9c0>)
 80049bc:	4825      	ldr	r0, [pc, #148]	; (8004a54 <IT_TIM6_CALLBACK+0x9bc>)
 80049be:	f007 ff81 	bl	800c8c4 <HAL_RTC_GetDate>
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <IT_TIM6_CALLBACK+0x9b8>)
 80049c4:	789a      	ldrb	r2, [r3, #2]
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <IT_TIM6_CALLBACK+0x9c4>)
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <IT_TIM6_CALLBACK+0x9b8>)
 80049cc:	785a      	ldrb	r2, [r3, #1]
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <IT_TIM6_CALLBACK+0x9c8>)
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <IT_TIM6_CALLBACK+0x9b8>)
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <IT_TIM6_CALLBACK+0x9cc>)
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	f7fd fb47 	bl	800206c <SD_LOG_rotina>
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <IT_TIM6_CALLBACK+0x9d0>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <IT_TIM6_CALLBACK+0x9d4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <IT_TIM6_CALLBACK+0x9d4>)
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	f7ff fa7d 	bl	8003eec <memset0_Buff_Sensores>
 80049f2:	f7fe fe69 	bl	80036c8 <IniciaEscuta_USART2>
 80049f6:	bf00      	nop
 80049f8:	3750      	adds	r7, #80	; 0x50
 80049fa:	46bd      	mov	sp, r7
 80049fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a00:	20002a18 	.word	0x20002a18
 8004a04:	408f4000 	.word	0x408f4000
 8004a08:	20002878 	.word	0x20002878
 8004a0c:	200028f8 	.word	0x200028f8
 8004a10:	20002978 	.word	0x20002978
 8004a14:	200029f8 	.word	0x200029f8
 8004a18:	200029fc 	.word	0x200029fc
 8004a1c:	20002a00 	.word	0x20002a00
 8004a20:	20002518 	.word	0x20002518
 8004a24:	2000d000 	.word	0x2000d000
 8004a28:	20000c53 	.word	0x20000c53
 8004a2c:	20002154 	.word	0x20002154
 8004a30:	20001554 	.word	0x20001554
 8004a34:	20000f54 	.word	0x20000f54
 8004a38:	20001254 	.word	0x20001254
 8004a3c:	20000a1c 	.word	0x20000a1c
 8004a40:	2000cfee 	.word	0x2000cfee
 8004a44:	2000cfed 	.word	0x2000cfed
 8004a48:	2000cfe0 	.word	0x2000cfe0
 8004a4c:	2000cfe4 	.word	0x2000cfe4
 8004a50:	20000a08 	.word	0x20000a08
 8004a54:	20000404 	.word	0x20000404
 8004a58:	20000a04 	.word	0x20000a04
 8004a5c:	20002a20 	.word	0x20002a20
 8004a60:	20002a21 	.word	0x20002a21
 8004a64:	20002a22 	.word	0x20002a22
 8004a68:	2000cfec 	.word	0x2000cfec
 8004a6c:	2000cfe8 	.word	0x2000cfe8

08004a70 <IT_TIM7_CALLBACK>:
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <IT_TIM7_CALLBACK+0x18>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <IT_TIM7_CALLBACK+0x18>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	2000cff4 	.word	0x2000cff4

08004a8c <IT_TIM16_CALLBACK>:
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <IT_TIM16_CALLBACK+0x18>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <IT_TIM16_CALLBACK+0x18>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	2000cff8 	.word	0x2000cff8

08004aa8 <IT_TIM17_CALLBACK>:
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <IT_TIM17_CALLBACK+0xb0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <IT_TIM17_CALLBACK+0xb0>)
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4b29      	ldr	r3, [pc, #164]	; (8004b5c <IT_TIM17_CALLBACK+0xb4>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d021      	beq.n	8004b04 <IT_TIM17_CALLBACK+0x5c>
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ac6:	4826      	ldr	r0, [pc, #152]	; (8004b60 <IT_TIM17_CALLBACK+0xb8>)
 8004ac8:	f002 fefc 	bl	80078c4 <HAL_GPIO_WritePin>
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <IT_TIM17_CALLBACK+0xbc>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <IT_TIM17_CALLBACK+0xbc>)
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <IT_TIM17_CALLBACK+0xbc>)
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b14      	cmp	r3, #20
 8004ae2:	d90f      	bls.n	8004b04 <IT_TIM17_CALLBACK+0x5c>
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aea:	481d      	ldr	r0, [pc, #116]	; (8004b60 <IT_TIM17_CALLBACK+0xb8>)
 8004aec:	f002 feea 	bl	80078c4 <HAL_GPIO_WritePin>
 8004af0:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <IT_TIM17_CALLBACK+0xbc>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <IT_TIM17_CALLBACK+0xb4>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <IT_TIM17_CALLBACK+0xb4>)
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <IT_TIM17_CALLBACK+0xc0>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d021      	beq.n	8004b52 <IT_TIM17_CALLBACK+0xaa>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b14:	4812      	ldr	r0, [pc, #72]	; (8004b60 <IT_TIM17_CALLBACK+0xb8>)
 8004b16:	f002 fed5 	bl	80078c4 <HAL_GPIO_WritePin>
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <IT_TIM17_CALLBACK+0xc4>)
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <IT_TIM17_CALLBACK+0xc4>)
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <IT_TIM17_CALLBACK+0xc4>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d90f      	bls.n	8004b52 <IT_TIM17_CALLBACK+0xaa>
 8004b32:	2200      	movs	r2, #0
 8004b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b38:	4809      	ldr	r0, [pc, #36]	; (8004b60 <IT_TIM17_CALLBACK+0xb8>)
 8004b3a:	f002 fec3 	bl	80078c4 <HAL_GPIO_WritePin>
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <IT_TIM17_CALLBACK+0xc4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <IT_TIM17_CALLBACK+0xc0>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <IT_TIM17_CALLBACK+0xc0>)
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000cffc 	.word	0x2000cffc
 8004b5c:	2000cfee 	.word	0x2000cfee
 8004b60:	42020800 	.word	0x42020800
 8004b64:	2000d00a 	.word	0x2000d00a
 8004b68:	2000cfed 	.word	0x2000cfed
 8004b6c:	2000d008 	.word	0x2000d008

08004b70 <SD_Error_Handler>:
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	b672      	cpsid	i
 8004b76:	bf00      	nop
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b7e:	4804      	ldr	r0, [pc, #16]	; (8004b90 <SD_Error_Handler+0x20>)
 8004b80:	f002 fea0 	bl	80078c4 <HAL_GPIO_WritePin>
 8004b84:	4803      	ldr	r0, [pc, #12]	; (8004b94 <SD_Error_Handler+0x24>)
 8004b86:	f017 fe06 	bl	801c796 <_fxe_media_close>
 8004b8a:	f7fc faed 	bl	8001168 <__NVIC_SystemReset>
 8004b8e:	bf00      	nop
 8004b90:	42020800 	.word	0x42020800
 8004b94:	20002a28 	.word	0x20002a28

08004b98 <IMU_Error_Handler>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba2:	4802      	ldr	r0, [pc, #8]	; (8004bac <IMU_Error_Handler+0x14>)
 8004ba4:	f002 fe8e 	bl	80078c4 <HAL_GPIO_WritePin>
 8004ba8:	bf00      	nop
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	42020800 	.word	0x42020800

08004bb0 <BPS_Error_Handler>:
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bba:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <BPS_Error_Handler+0x14>)
 8004bbc:	f002 fe82 	bl	80078c4 <HAL_GPIO_WritePin>
 8004bc0:	bf00      	nop
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	42020800 	.word	0x42020800

08004bc8 <Error_Handler>:
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	b672      	cpsid	i
 8004bce:	bf00      	nop
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bd6:	4804      	ldr	r0, [pc, #16]	; (8004be8 <Error_Handler+0x20>)
 8004bd8:	f002 fe74 	bl	80078c4 <HAL_GPIO_WritePin>
 8004bdc:	4803      	ldr	r0, [pc, #12]	; (8004bec <Error_Handler+0x24>)
 8004bde:	f017 fdda 	bl	801c796 <_fxe_media_close>
 8004be2:	f7fc fac1 	bl	8001168 <__NVIC_SystemReset>
 8004be6:	bf00      	nop
 8004be8:	42020800 	.word	0x42020800
 8004bec:	20002a28 	.word	0x20002a28

08004bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_MspInit+0x30>)
 8004bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_MspInit+0x30>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_MspInit+0x30>)
 8004c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	46020c00 	.word	0x46020c00

08004c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0c0      	sub	sp, #256	; 0x100
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c40:	22c0      	movs	r2, #192	; 0xc0
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f018 feae 	bl	801d9a6 <memset>
  if(hi2c->Instance==I2C1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a9a      	ldr	r2, [pc, #616]	; (8004eb8 <HAL_I2C_MspInit+0x294>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d147      	bne.n	8004ce4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c54:	f04f 0240 	mov.w	r2, #64	; 0x40
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f005 f882 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8004c76:	f7ff ffa7 	bl	8004bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7a:	4b90      	ldr	r3, [pc, #576]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	4a8e      	ldr	r2, [pc, #568]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c8a:	4b8c      	ldr	r3, [pc, #560]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca0:	2312      	movs	r3, #18
 8004ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4880      	ldr	r0, [pc, #512]	; (8004ec0 <HAL_I2C_MspInit+0x29c>)
 8004cc0:	f002 fc28 	bl	8007514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cc4:	4b7d      	ldr	r3, [pc, #500]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cca:	4a7c      	ldr	r2, [pc, #496]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004cd4:	4b79      	ldr	r3, [pc, #484]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cde:	623b      	str	r3, [r7, #32]
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004ce2:	e0e3      	b.n	8004eac <HAL_I2C_MspInit+0x288>
  else if(hi2c->Instance==I2C2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a76      	ldr	r2, [pc, #472]	; (8004ec4 <HAL_I2C_MspInit+0x2a0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d147      	bne.n	8004d7e <HAL_I2C_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004cee:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d04:	4618      	mov	r0, r3
 8004d06:	f005 f835 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8004d10:	f7ff ff5a 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d14:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1a:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d24:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8004d32:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8004d36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d3a:	2312      	movs	r3, #18
 8004d3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d56:	4619      	mov	r1, r3
 8004d58:	4859      	ldr	r0, [pc, #356]	; (8004ec0 <HAL_I2C_MspInit+0x29c>)
 8004d5a:	f002 fbdb 	bl	8007514 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d5e:	4b57      	ldr	r3, [pc, #348]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d64:	4a55      	ldr	r2, [pc, #340]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
}
 8004d7c:	e096      	b.n	8004eac <HAL_I2C_MspInit+0x288>
  else if(hi2c->Instance==I2C3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_I2C_MspInit+0x2a4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d146      	bne.n	8004e16 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f004 ffe8 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8004daa:	f7ff ff0d 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dae:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	4a41      	ldr	r2, [pc, #260]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dd2:	2312      	movs	r3, #18
 8004dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004de4:	2304      	movs	r3, #4
 8004de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004dee:	4619      	mov	r1, r3
 8004df0:	4836      	ldr	r0, [pc, #216]	; (8004ecc <HAL_I2C_MspInit+0x2a8>)
 8004df2:	f002 fb8f 	bl	8007514 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004df6:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dfc:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004e06:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
}
 8004e14:	e04a      	b.n	8004eac <HAL_I2C_MspInit+0x288>
  else if(hi2c->Instance==I2C4)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <HAL_I2C_MspInit+0x2ac>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d145      	bne.n	8004eac <HAL_I2C_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004e20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 ff9c 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_MspInit+0x222>
      Error_Handler();
 8004e42:	f7ff fec1 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4c:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e64:	23c0      	movs	r3, #192	; 0xc0
 8004e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e6a:	2312      	movs	r3, #18
 8004e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 8004e7c:	2305      	movs	r3, #5
 8004e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e86:	4619      	mov	r1, r3
 8004e88:	480d      	ldr	r0, [pc, #52]	; (8004ec0 <HAL_I2C_MspInit+0x29c>)
 8004e8a:	f002 fb43 	bl	8007514 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004e96:	f043 0302 	orr.w	r3, r3, #2
 8004e9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_I2C_MspInit+0x298>)
 8004ea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
}
 8004eac:	bf00      	nop
 8004eae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40005400 	.word	0x40005400
 8004ebc:	46020c00 	.word	0x46020c00
 8004ec0:	42020400 	.word	0x42020400
 8004ec4:	40005800 	.word	0x40005800
 8004ec8:	46002800 	.word	0x46002800
 8004ecc:	42020800 	.word	0x42020800
 8004ed0:	40008400 	.word	0x40008400

08004ed4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0b4      	sub	sp, #208	; 0xd0
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004edc:	f107 0310 	add.w	r3, r7, #16
 8004ee0:	22c0      	movs	r2, #192	; 0xc0
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f018 fd5e 	bl	801d9a6 <memset>
  if(hrtc->Instance==RTC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_RTC_MspInit+0x90>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d132      	bne.n	8004f5a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ef4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 ff31 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004f18:	f7ff fe56 	bl	8004bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f32:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f38:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f50:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <HAL_RTC_MspInit+0x94>)
 8004f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004f5a:	bf00      	nop
 8004f5c:	37d0      	adds	r7, #208	; 0xd0
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	46007800 	.word	0x46007800
 8004f68:	46020c00 	.word	0x46020c00

08004f6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0bc      	sub	sp, #240	; 0xf0
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	22c0      	movs	r2, #192	; 0xc0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f018 fd0a 	bl	801d9a6 <memset>
  if(hsd->Instance==SDMMC1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a54      	ldr	r2, [pc, #336]	; (80050e8 <HAL_SD_MspInit+0x17c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	f040 80a1 	bne.w	80050e0 <HAL_SD_MspInit+0x174>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CLK48;
 8004f9e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_CLK48;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fb6:	f107 0318 	add.w	r3, r7, #24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f004 feda 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_SD_MspInit+0x5e>
    {
      Error_Handler();
 8004fc6:	f7ff fdff 	bl	8004bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004fca:	4b48      	ldr	r3, [pc, #288]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	4a46      	ldr	r2, [pc, #280]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fda:	4b44      	ldr	r3, [pc, #272]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe8:	4b40      	ldr	r3, [pc, #256]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	4a3f      	ldr	r2, [pc, #252]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	; (80050ec <HAL_SD_MspInit+0x180>)
 8004ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_SD_MspInit+0x180>)
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500c:	4a37      	ldr	r2, [pc, #220]	; (80050ec <HAL_SD_MspInit+0x180>)
 800500e:	f043 0308 	orr.w	r3, r3, #8
 8005012:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005016:	4b35      	ldr	r3, [pc, #212]	; (80050ec <HAL_SD_MspInit+0x180>)
 8005018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005024:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005028:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005038:	2302      	movs	r3, #2
 800503a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800503e:	230c      	movs	r3, #12
 8005040:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005044:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005048:	4619      	mov	r1, r3
 800504a:	4829      	ldr	r0, [pc, #164]	; (80050f0 <HAL_SD_MspInit+0x184>)
 800504c:	f002 fa62 	bl	8007514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005050:	2304      	movs	r3, #4
 8005052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005062:	2302      	movs	r3, #2
 8005064:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005068:	230c      	movs	r3, #12
 800506a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800506e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005072:	4619      	mov	r1, r3
 8005074:	481f      	ldr	r0, [pc, #124]	; (80050f4 <HAL_SD_MspInit+0x188>)
 8005076:	f002 fa4d 	bl	8007514 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	204e      	movs	r0, #78	; 0x4e
 8005080:	f000 ff31 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005084:	204e      	movs	r0, #78	; 0x4e
 8005086:	f000 ff48 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800508a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800508e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005092:	2302      	movs	r3, #2
 8005094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005098:	2301      	movs	r3, #1
 800509a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800509e:	2302      	movs	r3, #2
 80050a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80050a4:	230c      	movs	r3, #12
 80050a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80050ae:	4619      	mov	r1, r3
 80050b0:	480f      	ldr	r0, [pc, #60]	; (80050f0 <HAL_SD_MspInit+0x184>)
 80050b2:	f002 fa2f 	bl	8007514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050b6:	2304      	movs	r3, #4
 80050b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050bc:	2302      	movs	r3, #2
 80050be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050c8:	2302      	movs	r3, #2
 80050ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80050ce:	230c      	movs	r3, #12
 80050d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80050d8:	4619      	mov	r1, r3
 80050da:	4806      	ldr	r0, [pc, #24]	; (80050f4 <HAL_SD_MspInit+0x188>)
 80050dc:	f002 fa1a 	bl	8007514 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80050e0:	bf00      	nop
 80050e2:	37f0      	adds	r7, #240	; 0xf0
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	420c8000 	.word	0x420c8000
 80050ec:	46020c00 	.word	0x46020c00
 80050f0:	42020800 	.word	0x42020800
 80050f4:	42020c00 	.word	0x42020c00

080050f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b0be      	sub	sp, #248	; 0xf8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005110:	f107 0320 	add.w	r3, r7, #32
 8005114:	22c0      	movs	r2, #192	; 0xc0
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f018 fc44 	bl	801d9a6 <memset>
  if(hspi->Instance==SPI1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a60      	ldr	r2, [pc, #384]	; (80052a4 <HAL_SPI_MspInit+0x1ac>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d147      	bne.n	80051b8 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005128:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8005134:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800513c:	f107 0320 	add.w	r3, r7, #32
 8005140:	4618      	mov	r0, r3
 8005142:	f004 fe17 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800514c:	f7ff fd3c 	bl	8004bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005150:	4b55      	ldr	r3, [pc, #340]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005156:	4a54      	ldr	r2, [pc, #336]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800515c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8005160:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516e:	4b4e      	ldr	r3, [pc, #312]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800517e:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800518c:	23e0      	movs	r3, #224	; 0xe0
 800518e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2300      	movs	r3, #0
 800519a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051a4:	2305      	movs	r3, #5
 80051a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80051ae:	4619      	mov	r1, r3
 80051b0:	483e      	ldr	r0, [pc, #248]	; (80052ac <HAL_SPI_MspInit+0x1b4>)
 80051b2:	f002 f9af 	bl	8007514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051b6:	e070      	b.n	800529a <HAL_SPI_MspInit+0x1a2>
  else if(hspi->Instance==SPI2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	; (80052b0 <HAL_SPI_MspInit+0x1b8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d16b      	bne.n	800529a <HAL_SPI_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80051c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80051ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051d6:	f107 0320 	add.w	r3, r7, #32
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 fdca 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 80051e6:	f7ff fcef 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 80051ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f0:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 80051f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80051fa:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 80051fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005208:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 800520a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520e:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005218:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 800521a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005226:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 800522e:	f043 0302 	orr.w	r3, r3, #2
 8005232:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <HAL_SPI_MspInit+0x1b0>)
 8005238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005244:	230c      	movs	r3, #12
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524a:	2302      	movs	r3, #2
 800524c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	2300      	movs	r3, #0
 8005258:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800525c:	2305      	movs	r3, #5
 800525e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005262:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005266:	4619      	mov	r1, r3
 8005268:	4812      	ldr	r0, [pc, #72]	; (80052b4 <HAL_SPI_MspInit+0x1bc>)
 800526a:	f002 f953 	bl	8007514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800526e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005282:	2300      	movs	r3, #0
 8005284:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005288:	2305      	movs	r3, #5
 800528a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800528e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005292:	4619      	mov	r1, r3
 8005294:	4808      	ldr	r0, [pc, #32]	; (80052b8 <HAL_SPI_MspInit+0x1c0>)
 8005296:	f002 f93d 	bl	8007514 <HAL_GPIO_Init>
}
 800529a:	bf00      	nop
 800529c:	37f8      	adds	r7, #248	; 0xf8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40013000 	.word	0x40013000
 80052a8:	46020c00 	.word	0x46020c00
 80052ac:	42020000 	.word	0x42020000
 80052b0:	40003800 	.word	0x40003800
 80052b4:	42020800 	.word	0x42020800
 80052b8:	42020400 	.word	0x42020400

080052bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <HAL_TIM_Base_MspInit+0xf8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d117      	bne.n	80052fe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80052ce:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 80052d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d4:	4a38      	ldr	r2, [pc, #224]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 80052d6:	f043 0310 	orr.w	r3, r3, #16
 80052da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 80052e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 80052ec:	2200      	movs	r2, #0
 80052ee:	2102      	movs	r1, #2
 80052f0:	2031      	movs	r0, #49	; 0x31
 80052f2:	f000 fdf8 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80052f6:	2031      	movs	r0, #49	; 0x31
 80052f8:	f000 fe0f 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80052fc:	e055      	b.n	80053aa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <HAL_TIM_Base_MspInit+0x100>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d117      	bne.n	8005338 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005308:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 800530a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530e:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 8005310:	f043 0320 	orr.w	r3, r3, #32
 8005314:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 800531a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8005326:	2200      	movs	r2, #0
 8005328:	2102      	movs	r1, #2
 800532a:	2032      	movs	r0, #50	; 0x32
 800532c:	f000 fddb 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005330:	2032      	movs	r0, #50	; 0x32
 8005332:	f000 fdf2 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 8005336:	e038      	b.n	80053aa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM16)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <HAL_TIM_Base_MspInit+0x104>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d117      	bne.n	8005372 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 8005344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005348:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8005352:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 8005354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8005360:	2200      	movs	r2, #0
 8005362:	2103      	movs	r1, #3
 8005364:	2046      	movs	r0, #70	; 0x46
 8005366:	f000 fdbe 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800536a:	2046      	movs	r0, #70	; 0x46
 800536c:	f000 fdd5 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 8005370:	e01b      	b.n	80053aa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM17)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <HAL_TIM_Base_MspInit+0x108>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d116      	bne.n	80053aa <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 800537e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005382:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <HAL_TIM_Base_MspInit+0xfc>)
 800538e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	2103      	movs	r1, #3
 800539e:	2047      	movs	r0, #71	; 0x47
 80053a0:	f000 fda1 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80053a4:	2047      	movs	r0, #71	; 0x47
 80053a6:	f000 fdb8 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40001000 	.word	0x40001000
 80053b8:	46020c00 	.word	0x46020c00
 80053bc:	40001400 	.word	0x40001400
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800

080053c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0da      	sub	sp, #360	; 0x168
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80053d2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80053d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80053ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053f0:	4618      	mov	r0, r3
 80053f2:	23c0      	movs	r3, #192	; 0xc0
 80053f4:	461a      	mov	r2, r3
 80053f6:	2100      	movs	r1, #0
 80053f8:	f018 fad5 	bl	801d9a6 <memset>
  if(huart->Instance==UART4)
 80053fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005400:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a64      	ldr	r2, [pc, #400]	; (800559c <HAL_UART_MspInit+0x1d4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d15d      	bne.n	80054ca <HAL_UART_MspInit+0x102>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800540e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005412:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 8005416:	f04f 0208 	mov.w	r2, #8
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005422:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005426:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800542a:	2200      	movs	r2, #0
 800542c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800542e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005432:	4618      	mov	r0, r3
 8005434:	f004 fc9e 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 800543e:	f7ff fbc3 	bl	8004bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005442:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005448:	4a55      	ldr	r2, [pc, #340]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 800544a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800544e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005452:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005458:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 800545c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005460:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800546a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800546e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005476:	4a4a      	ldr	r2, [pc, #296]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005480:	4b47      	ldr	r3, [pc, #284]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005486:	f003 0201 	and.w	r2, r3, #1
 800548a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800548e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800549c:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800549e:	2303      	movs	r3, #3
 80054a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a4:	2302      	movs	r3, #2
 80054a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054b6:	2308      	movs	r3, #8
 80054b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054bc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80054c0:	4619      	mov	r1, r3
 80054c2:	4838      	ldr	r0, [pc, #224]	; (80055a4 <HAL_UART_MspInit+0x1dc>)
 80054c4:	f002 f826 	bl	8007514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80054c8:	e1d1      	b.n	800586e <HAL_UART_MspInit+0x4a6>
  else if(huart->Instance==USART1)
 80054ca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054ce:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <HAL_UART_MspInit+0x1e0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d167      	bne.n	80055ac <HAL_UART_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80054dc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054e0:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 80054e4:	f04f 0201 	mov.w	r2, #1
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80054f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80054f8:	2200      	movs	r2, #0
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005500:	4618      	mov	r0, r3
 8005502:	f004 fc37 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_UART_MspInit+0x148>
      Error_Handler();
 800550c:	f7ff fb5c 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005510:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005516:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800551c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8005520:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005526:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800552a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800552e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005538:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800553c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005544:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800554e:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <HAL_UART_MspInit+0x1d8>)
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	f003 0201 	and.w	r2, r3, #1
 8005558:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800555c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005566:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800556a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800556c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005570:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005586:	2307      	movs	r3, #7
 8005588:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005590:	4619      	mov	r1, r3
 8005592:	4804      	ldr	r0, [pc, #16]	; (80055a4 <HAL_UART_MspInit+0x1dc>)
 8005594:	f001 ffbe 	bl	8007514 <HAL_GPIO_Init>
}
 8005598:	e169      	b.n	800586e <HAL_UART_MspInit+0x4a6>
 800559a:	bf00      	nop
 800559c:	40004c00 	.word	0x40004c00
 80055a0:	46020c00 	.word	0x46020c00
 80055a4:	42020000 	.word	0x42020000
 80055a8:	40013800 	.word	0x40013800
  else if(huart->Instance==USART2)
 80055ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4aaf      	ldr	r2, [pc, #700]	; (8005878 <HAL_UART_MspInit+0x4b0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f040 80f1 	bne.w	80057a2 <HAL_UART_MspInit+0x3da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80055c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055c4:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 80055c8:	f04f 0202 	mov.w	r2, #2
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80055d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055e4:	4618      	mov	r0, r3
 80055e6:	f004 fbc5 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80055f0:	f7ff faea 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055f4:	4ba1      	ldr	r3, [pc, #644]	; (800587c <HAL_UART_MspInit+0x4b4>)
 80055f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055fa:	4aa0      	ldr	r2, [pc, #640]	; (800587c <HAL_UART_MspInit+0x4b4>)
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005600:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005604:	4b9d      	ldr	r3, [pc, #628]	; (800587c <HAL_UART_MspInit+0x4b4>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800560e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005612:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800561c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005620:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005622:	4b96      	ldr	r3, [pc, #600]	; (800587c <HAL_UART_MspInit+0x4b4>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005628:	4a94      	ldr	r2, [pc, #592]	; (800587c <HAL_UART_MspInit+0x4b4>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005632:	4b92      	ldr	r3, [pc, #584]	; (800587c <HAL_UART_MspInit+0x4b4>)
 8005634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005638:	f003 0201 	and.w	r2, r3, #1
 800563c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005640:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800564a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800564e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005650:	230c      	movs	r3, #12
 8005652:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005668:	2307      	movs	r3, #7
 800566a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005672:	4619      	mov	r1, r3
 8005674:	4882      	ldr	r0, [pc, #520]	; (8005880 <HAL_UART_MspInit+0x4b8>)
 8005676:	f001 ff4d 	bl	8007514 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800567a:	2321      	movs	r3, #33	; 0x21
 800567c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8005680:	231a      	movs	r3, #26
 8005682:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005698:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800569c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    NodeConfig.Init.SrcBurstLength = 1;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    NodeConfig.Init.DestBurstLength = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    NodeConfig.Init.Mode = DMA_NORMAL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel10) != HAL_OK)
 80056dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80056e0:	4968      	ldr	r1, [pc, #416]	; (8005884 <HAL_UART_MspInit+0x4bc>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f8e2 	bl	80068ac <HAL_DMAEx_List_BuildNode>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_UART_MspInit+0x32a>
      Error_Handler();
 80056ee:	f7ff fa6b 	bl	8004bc8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel10, NULL, &Node_GPDMA1_Channel10) != HAL_OK)
 80056f2:	4a64      	ldr	r2, [pc, #400]	; (8005884 <HAL_UART_MspInit+0x4bc>)
 80056f4:	2100      	movs	r1, #0
 80056f6:	4864      	ldr	r0, [pc, #400]	; (8005888 <HAL_UART_MspInit+0x4c0>)
 80056f8:	f001 f8ee 	bl	80068d8 <HAL_DMAEx_List_InsertNode>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8005702:	f7ff fa61 	bl	8004bc8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel10) != HAL_OK)
 8005706:	4860      	ldr	r0, [pc, #384]	; (8005888 <HAL_UART_MspInit+0x4c0>)
 8005708:	f001 fa27 	bl	8006b5a <HAL_DMAEx_List_SetCircularMode>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8005712:	f7ff fa59 	bl	8004bc8 <Error_Handler>
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 8005716:	4b5d      	ldr	r3, [pc, #372]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005718:	4a5d      	ldr	r2, [pc, #372]	; (8005890 <HAL_UART_MspInit+0x4c8>)
 800571a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel10.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800571c:	4b5b      	ldr	r3, [pc, #364]	; (800588c <HAL_UART_MspInit+0x4c4>)
 800571e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel10.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005724:	4b59      	ldr	r3, [pc, #356]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005726:	2200      	movs	r2, #0
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel10.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 800572a:	4b58      	ldr	r3, [pc, #352]	; (800588c <HAL_UART_MspInit+0x4c4>)
 800572c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel10.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005732:	4b56      	ldr	r3, [pc, #344]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel10.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005738:	4b54      	ldr	r3, [pc, #336]	; (800588c <HAL_UART_MspInit+0x4c4>)
 800573a:	2281      	movs	r2, #129	; 0x81
 800573c:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 800573e:	4853      	ldr	r0, [pc, #332]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005740:	f000 fef4 	bl	800652c <HAL_DMAEx_List_Init>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_UART_MspInit+0x386>
      Error_Handler();
 800574a:	f7ff fa3d 	bl	8004bc8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &List_GPDMA1_Channel10) != HAL_OK)
 800574e:	494e      	ldr	r1, [pc, #312]	; (8005888 <HAL_UART_MspInit+0x4c0>)
 8005750:	484e      	ldr	r0, [pc, #312]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005752:	f001 fa63 	bl	8006c1c <HAL_DMAEx_List_LinkQ>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_UART_MspInit+0x398>
      Error_Handler();
 800575c:	f7ff fa34 	bl	8004bc8 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel10);
 8005760:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005764:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a48      	ldr	r2, [pc, #288]	; (800588c <HAL_UART_MspInit+0x4c4>)
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005770:	4a46      	ldr	r2, [pc, #280]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005772:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005776:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 800577e:	2110      	movs	r1, #16
 8005780:	4842      	ldr	r0, [pc, #264]	; (800588c <HAL_UART_MspInit+0x4c4>)
 8005782:	f000 fe71 	bl	8006468 <HAL_DMA_ConfigChannelAttributes>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 800578c:	f7ff fa1c 	bl	8004bc8 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	2101      	movs	r1, #1
 8005794:	203e      	movs	r0, #62	; 0x3e
 8005796:	f000 fba6 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800579a:	203e      	movs	r0, #62	; 0x3e
 800579c:	f000 fbbd 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 80057a0:	e065      	b.n	800586e <HAL_UART_MspInit+0x4a6>
  else if(huart->Instance==USART3)
 80057a2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057a6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a39      	ldr	r2, [pc, #228]	; (8005894 <HAL_UART_MspInit+0x4cc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d15c      	bne.n	800586e <HAL_UART_MspInit+0x4a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80057b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057b8:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 80057bc:	f04f 0204 	mov.w	r2, #4
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80057c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057d0:	2200      	movs	r2, #0
 80057d2:	659a      	str	r2, [r3, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d8:	4618      	mov	r0, r3
 80057da:	f004 facb 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_UART_MspInit+0x420>
      Error_Handler();
 80057e4:	f7ff f9f0 	bl	8004bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_UART_MspInit+0x4b4>)
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ee:	4a23      	ldr	r2, [pc, #140]	; (800587c <HAL_UART_MspInit+0x4b4>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <HAL_UART_MspInit+0x4b4>)
 80057fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fe:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8005802:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005806:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005810:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005814:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_UART_MspInit+0x4b4>)
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <HAL_UART_MspInit+0x4b4>)
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <HAL_UART_MspInit+0x4b4>)
 8005828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582c:	f003 0204 	and.w	r2, r3, #4
 8005830:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005834:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800583e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005842:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005844:	2330      	movs	r3, #48	; 0x30
 8005846:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584a:	2302      	movs	r3, #2
 800584c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800585c:	2307      	movs	r3, #7
 800585e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005862:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005866:	4619      	mov	r1, r3
 8005868:	480b      	ldr	r0, [pc, #44]	; (8005898 <HAL_UART_MspInit+0x4d0>)
 800586a:	f001 fe53 	bl	8007514 <HAL_GPIO_Init>
}
 800586e:	bf00      	nop
 8005870:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40004400 	.word	0x40004400
 800587c:	46020c00 	.word	0x46020c00
 8005880:	42020000 	.word	0x42020000
 8005884:	20000950 	.word	0x20000950
 8005888:	20000974 	.word	0x20000974
 800588c:	2000098c 	.word	0x2000098c
 8005890:	40020550 	.word	0x40020550
 8005894:	40004800 	.word	0x40004800
 8005898:	42020800 	.word	0x42020800

0800589c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80058a0:	f004 f9c6 	bl	8009c30 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058a4:	e7fe      	b.n	80058a4 <NMI_Handler+0x8>

080058a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058aa:	e7fe      	b.n	80058aa <HardFault_Handler+0x4>

080058ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058b0:	e7fe      	b.n	80058b0 <MemManage_Handler+0x4>

080058b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058b6:	e7fe      	b.n	80058b6 <BusFault_Handler+0x4>

080058b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058bc:	e7fe      	b.n	80058bc <UsageFault_Handler+0x4>

080058be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058be:	b480      	push	{r7}
 80058c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058ec:	f000 f9dc 	bl	8005ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80058f8:	4803      	ldr	r0, [pc, #12]	; (8005908 <TIM6_IRQHandler+0x14>)
 80058fa:	f008 ff9f 	bl	800e83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  IT_TIM6_CALLBACK();
 80058fe:	f7fe fbcb 	bl	8004098 <IT_TIM6_CALLBACK>

  /* USER CODE END TIM6_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200005d0 	.word	0x200005d0

0800590c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005910:	4803      	ldr	r0, [pc, #12]	; (8005920 <TIM7_IRQHandler+0x14>)
 8005912:	f008 ff93 	bl	800e83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  IT_TIM7_CALLBACK();
 8005916:	f7ff f8ab 	bl	8004a70 <IT_TIM7_CALLBACK>

  /* USER CODE END TIM7_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2000061c 	.word	0x2000061c

08005924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005928:	4802      	ldr	r0, [pc, #8]	; (8005934 <USART2_IRQHandler+0x10>)
 800592a:	f009 fbf1 	bl	800f110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000828 	.word	0x20000828

08005938 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800593c:	4803      	ldr	r0, [pc, #12]	; (800594c <TIM16_IRQHandler+0x14>)
 800593e:	f008 ff7d 	bl	800e83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  IT_TIM16_CALLBACK();
 8005942:	f7ff f8a3 	bl	8004a8c <IT_TIM16_CALLBACK>

  /* USER CODE END TIM16_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000668 	.word	0x20000668

08005950 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005954:	4803      	ldr	r0, [pc, #12]	; (8005964 <TIM17_IRQHandler+0x14>)
 8005956:	f008 ff71 	bl	800e83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  IT_TIM17_CALLBACK();
 800595a:	f7ff f8a5 	bl	8004aa8 <IT_TIM17_CALLBACK>

  /* USER CODE END TIM17_IRQn 1 */
}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200006b4 	.word	0x200006b4

08005968 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800596c:	4802      	ldr	r0, [pc, #8]	; (8005978 <SDMMC1_IRQHandler+0x10>)
 800596e:	f007 fb5d 	bl	800d02c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000434 	.word	0x20000434

0800597c <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8005980:	4802      	ldr	r0, [pc, #8]	; (800598c <GPDMA1_Channel10_IRQHandler+0x10>)
 8005982:	f000 fbe9 	bl	8006158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	2000098c 	.word	0x2000098c

08005990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return 1;
 8005994:	2301      	movs	r3, #1
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <_kill>:

int _kill(int pid, int sig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059aa:	f018 f861 	bl	801da70 <__errno>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2216      	movs	r2, #22
 80059b2:	601a      	str	r2, [r3, #0]
  return -1;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_exit>:

void _exit (int status)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059c8:	f04f 31ff 	mov.w	r1, #4294967295
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffe7 	bl	80059a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059d2:	e7fe      	b.n	80059d2 <_exit+0x12>

080059d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e00a      	b.n	80059fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059e6:	f3af 8000 	nop.w
 80059ea:	4601      	mov	r1, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	60ba      	str	r2, [r7, #8]
 80059f2:	b2ca      	uxtb	r2, r1
 80059f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dbf0      	blt.n	80059e6 <_read+0x12>
  }

  return len;
 8005a04:	687b      	ldr	r3, [r7, #4]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e009      	b.n	8005a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	60ba      	str	r2, [r7, #8]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	dbf1      	blt.n	8005a20 <_write+0x12>
  }
  return len;
 8005a3c:	687b      	ldr	r3, [r7, #4]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_close>:

int _close(int file)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_isatty>:

int _isatty(int file)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <_sbrk+0x5c>)
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <_sbrk+0x60>)
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac4:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <_sbrk+0x64>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <_sbrk+0x64>)
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <_sbrk+0x68>)
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <_sbrk+0x64>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d207      	bcs.n	8005af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ae0:	f017 ffc6 	bl	801da70 <__errno>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	220c      	movs	r2, #12
 8005ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295
 8005aee:	e009      	b.n	8005b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <_sbrk+0x64>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <_sbrk+0x64>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <_sbrk+0x64>)
 8005b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	200c0000 	.word	0x200c0000
 8005b10:	00000800 	.word	0x00000800
 8005b14:	2000d00c 	.word	0x2000d00c
 8005b18:	2000d390 	.word	0x2000d390

08005b1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <SystemInit+0x68>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <SystemInit+0x68>)
 8005b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8005b30:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <SystemInit+0x6c>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <SystemInit+0x6c>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005b3c:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <SystemInit+0x6c>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <SystemInit+0x6c>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <SystemInit+0x6c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <SystemInit+0x6c>)
 8005b4e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005b52:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005b56:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <SystemInit+0x6c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <SystemInit+0x6c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <SystemInit+0x6c>)
 8005b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <SystemInit+0x6c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <SystemInit+0x68>)
 8005b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b76:	609a      	str	r2, [r3, #8]
  #endif
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	e000ed00 	.word	0xe000ed00
 8005b88:	46020c00 	.word	0x46020c00

08005b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bc4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b90:	f7ff ffc4 	bl	8005b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005b94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005b96:	e003      	b.n	8005ba0 <LoopCopyDataInit>

08005b98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005b9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005b9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005b9e:	3104      	adds	r1, #4

08005ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ba0:	480a      	ldr	r0, [pc, #40]	; (8005bcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ba4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005ba6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005ba8:	d3f6      	bcc.n	8005b98 <CopyDataInit>
	ldr	r2, =_sbss
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005bac:	e002      	b.n	8005bb4 <LoopFillZerobss>

08005bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bb0:	f842 3b04 	str.w	r3, [r2], #4

08005bb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bb4:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <LoopForever+0x16>)
	cmp	r2, r3
 8005bb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bb8:	d3f9      	bcc.n	8005bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bba:	f017 ff5f 	bl	801da7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bbe:	f7fb fae9 	bl	8001194 <main>

08005bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8005bc2:	e7fe      	b.n	8005bc2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005bc4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8005bc8:	08023e48 	.word	0x08023e48
	ldr	r0, =_sdata
 8005bcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005bd0:	20000248 	.word	0x20000248
	ldr	r2, =_sbss
 8005bd4:	20000248 	.word	0x20000248
	ldr	r3, = _ebss
 8005bd8:	2000d390 	.word	0x2000d390

08005bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bdc:	e7fe      	b.n	8005bdc <ADC1_IRQHandler>
	...

08005be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <HAL_Init+0x4c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a10      	ldr	r2, [pc, #64]	; (8005c2c <HAL_Init+0x4c>)
 8005bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bf0:	2003      	movs	r0, #3
 8005bf2:	f000 f96d 	bl	8005ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005bf6:	f003 feaf 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <HAL_Init+0x50>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	490b      	ldr	r1, [pc, #44]	; (8005c34 <HAL_Init+0x54>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <HAL_Init+0x58>)
 8005c0e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c10:	200f      	movs	r0, #15
 8005c12:	f000 f813 	bl	8005c3c <HAL_InitTick>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e002      	b.n	8005c26 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c20:	f7fe ffe6 	bl	8004bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40022000 	.word	0x40022000
 8005c30:	46020c00 	.word	0x46020c00
 8005c34:	08022a90 	.word	0x08022a90
 8005c38:	20000004 	.word	0x20000004

08005c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_InitTick+0x60>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e021      	b.n	8005c94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <HAL_InitTick+0x64>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_InitTick+0x60>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f965 	bl	8005f36 <HAL_SYSTICK_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e00e      	b.n	8005c94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d80a      	bhi.n	8005c92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	f000 f92f 	bl	8005ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c88:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <HAL_InitTick+0x68>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	20000004 	.word	0x20000004
 8005ca4:	20000008 	.word	0x20000008

08005ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_IncTick+0x20>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_IncTick+0x24>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <HAL_IncTick+0x24>)
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	2000000c 	.word	0x2000000c
 8005ccc:	2000d010 	.word	0x2000d010

08005cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005cd4:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <HAL_GetTick+0x14>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	2000d010 	.word	0x2000d010

08005ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cf0:	f7ff ffee 	bl	8005cd0 <HAL_GetTick>
 8005cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d005      	beq.n	8005d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_Delay+0x44>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d0e:	bf00      	nop
 8005d10:	f7ff ffde 	bl	8005cd0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d8f7      	bhi.n	8005d10 <HAL_Delay+0x28>
  {
  }
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000000c 	.word	0x2000000c

08005d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d62:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	60d3      	str	r3, [r2, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <__NVIC_GetPriorityGrouping+0x18>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 0307 	and.w	r3, r3, #7
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db0b      	blt.n	8005dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f003 021f 	and.w	r2, r3, #31
 8005dac:	4907      	ldr	r1, [pc, #28]	; (8005dcc <__NVIC_EnableIRQ+0x38>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2001      	movs	r0, #1
 8005db6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000e100 	.word	0xe000e100

08005dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db0a      	blt.n	8005dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	490c      	ldr	r1, [pc, #48]	; (8005e1c <__NVIC_SetPriority+0x4c>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df8:	e00a      	b.n	8005e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <__NVIC_SetPriority+0x50>)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3b04      	subs	r3, #4
 8005e08:	0112      	lsls	r2, r2, #4
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	761a      	strb	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e100 	.word	0xe000e100
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf28      	it	cs
 8005e42:	2304      	movcs	r3, #4
 8005e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d902      	bls.n	8005e54 <NVIC_EncodePriority+0x30>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3b03      	subs	r3, #3
 8005e52:	e000      	b.n	8005e56 <NVIC_EncodePriority+0x32>
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	4313      	orrs	r3, r2
         );
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	; 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e9c:	d301      	bcc.n	8005ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e00f      	b.n	8005ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <SysTick_Config+0x40>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eaa:	210f      	movs	r1, #15
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	f7ff ff8e 	bl	8005dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <SysTick_Config+0x40>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <SysTick_Config+0x40>)
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	e000e010 	.word	0xe000e010

08005ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff29 	bl	8005d30 <__NVIC_SetPriorityGrouping>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ef4:	f7ff ff40 	bl	8005d78 <__NVIC_GetPriorityGrouping>
 8005ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	6978      	ldr	r0, [r7, #20]
 8005f00:	f7ff ff90 	bl	8005e24 <NVIC_EncodePriority>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff5f 	bl	8005dd0 <__NVIC_SetPriority>
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	4603      	mov	r3, r0
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ff33 	bl	8005d94 <__NVIC_EnableIRQ>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffa4 	bl	8005e8c <SysTick_Config>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e04f      	b.n	8006006 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_DMA_Start_IT+0x26>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e048      	b.n	8006006 <HAL_DMA_Start_IT+0xb8>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d136      	bne.n	8005ff6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fa9f 	bl	80064e0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8005fb0:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc8:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe0:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e007      	b.n	8006006 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2240      	movs	r2, #64	; 0x40
 8005ffa:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006016:	f7ff fe5b 	bl	8005cd0 <HAL_GetTick>
 800601a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e06b      	b.n	80060fe <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d008      	beq.n	8006044 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e05c      	b.n	80060fe <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0204 	orr.w	r2, r2, #4
 8006052:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2205      	movs	r2, #5
 8006058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800605c:	e020      	b.n	80060a0 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800605e:	f7ff fe37 	bl	8005cd0 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b05      	cmp	r3, #5
 800606a:	d919      	bls.n	80060a0 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f043 0210 	orr.w	r2, r3, #16
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2203      	movs	r2, #3
 800607c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	2201      	movs	r2, #1
 8006092:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e02e      	b.n	80060fe <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0d7      	beq.n	800605e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0202 	orr.w	r2, r2, #2
 80060bc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80060ce:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e8:	2201      	movs	r2, #1
 80060ea:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e019      	b.n	800614c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d004      	beq.n	800612e <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e00e      	b.n	800614c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006144:	f043 0304 	orr.w	r3, r3, #4
 8006148:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006168:	f023 030f 	bic.w	r3, r3, #15
 800616c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	3b50      	subs	r3, #80	; 0x50
 8006178:	09db      	lsrs	r3, r3, #7
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2201      	movs	r2, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4013      	ands	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8156 	beq.w	8006444 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061bc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	f043 0201 	orr.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d011      	beq.n	80061fc <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ee:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	f043 0202 	orr.w	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d011      	beq.n	800622e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006220:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d011      	beq.n	8006260 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006252:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	f043 0208 	orr.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006284:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d05a      	beq.n	800635a <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d053      	beq.n	800635a <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062ba:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d13c      	bne.n	8006342 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0202 	orr.w	r2, r2, #2
 80062e6:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 80062e8:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2203      	movs	r2, #3
 80062fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006300:	e003      	b.n	800630a <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631a:	2201      	movs	r2, #1
 800631c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8088 	beq.w	8006448 <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
        }

        return;
 8006340:	e082      	b.n	8006448 <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2205      	movs	r2, #5
 8006346:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d039      	beq.n	80063dc <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d032      	beq.n	80063dc <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d116      	bne.n	80063ba <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006392:	2b00      	cmp	r3, #0
 8006394:	d111      	bne.n	80063ba <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a2:	2201      	movs	r2, #1
 80063a4:	731a      	strb	r2, [r3, #12]
 80063a6:	e008      	b.n	80063ba <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80063c2:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d032      	beq.n	800644a <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0202 	orr.w	r2, r2, #2
 80063f2:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 80063f4:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2203      	movs	r2, #3
 8006408:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800640c:	e003      	b.n	8006416 <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006426:	2201      	movs	r2, #1
 8006428:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	e002      	b.n	800644a <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <HAL_DMA_IRQHandler+0x2f2>
        return;
 8006448:	bf00      	nop
    }
  }
}
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e02b      	b.n	80064d4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006484:	f023 030f 	bic.w	r3, r3, #15
 8006488:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006492:	3b50      	subs	r3, #80	; 0x50
 8006494:	09db      	lsrs	r3, r3, #7
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2201      	movs	r2, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d012      	beq.n	80064d2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f003 0311 	and.w	r3, r3, #17
 80064b2:	2b11      	cmp	r3, #17
 80064b4:	d106      	bne.n	80064c4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]
 80064c2:	e006      	b.n	80064d2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	401a      	ands	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	b291      	uxth	r1, r2
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	430b      	orrs	r3, r1
 8006502:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800650c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006534:	f7ff fbcc 	bl	8005cd0 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0db      	b.n	80066fc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a6e      	ldr	r2, [pc, #440]	; (8006704 <HAL_DMAEx_List_Init+0x1d8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	f000 809f 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6c      	ldr	r2, [pc, #432]	; (8006708 <HAL_DMAEx_List_Init+0x1dc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	f000 8099 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6a      	ldr	r2, [pc, #424]	; (800670c <HAL_DMAEx_List_Init+0x1e0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	f000 8093 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a68      	ldr	r2, [pc, #416]	; (8006710 <HAL_DMAEx_List_Init+0x1e4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	f000 808d 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a66      	ldr	r2, [pc, #408]	; (8006714 <HAL_DMAEx_List_Init+0x1e8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	f000 8087 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a64      	ldr	r2, [pc, #400]	; (8006718 <HAL_DMAEx_List_Init+0x1ec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 8081 	beq.w	800668e <HAL_DMAEx_List_Init+0x162>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a62      	ldr	r2, [pc, #392]	; (800671c <HAL_DMAEx_List_Init+0x1f0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d07b      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a61      	ldr	r2, [pc, #388]	; (8006720 <HAL_DMAEx_List_Init+0x1f4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d076      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5f      	ldr	r2, [pc, #380]	; (8006724 <HAL_DMAEx_List_Init+0x1f8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d071      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5e      	ldr	r2, [pc, #376]	; (8006728 <HAL_DMAEx_List_Init+0x1fc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d06c      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5c      	ldr	r2, [pc, #368]	; (800672c <HAL_DMAEx_List_Init+0x200>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d067      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5b      	ldr	r2, [pc, #364]	; (8006730 <HAL_DMAEx_List_Init+0x204>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d062      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a59      	ldr	r2, [pc, #356]	; (8006734 <HAL_DMAEx_List_Init+0x208>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d05d      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a58      	ldr	r2, [pc, #352]	; (8006738 <HAL_DMAEx_List_Init+0x20c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d058      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a56      	ldr	r2, [pc, #344]	; (800673c <HAL_DMAEx_List_Init+0x210>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d053      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a55      	ldr	r2, [pc, #340]	; (8006740 <HAL_DMAEx_List_Init+0x214>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d04e      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a53      	ldr	r2, [pc, #332]	; (8006744 <HAL_DMAEx_List_Init+0x218>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d049      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a52      	ldr	r2, [pc, #328]	; (8006748 <HAL_DMAEx_List_Init+0x21c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d044      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a50      	ldr	r2, [pc, #320]	; (800674c <HAL_DMAEx_List_Init+0x220>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d03f      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4f      	ldr	r2, [pc, #316]	; (8006750 <HAL_DMAEx_List_Init+0x224>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d03a      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a4d      	ldr	r2, [pc, #308]	; (8006754 <HAL_DMAEx_List_Init+0x228>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d035      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4c      	ldr	r2, [pc, #304]	; (8006758 <HAL_DMAEx_List_Init+0x22c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d030      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a4a      	ldr	r2, [pc, #296]	; (800675c <HAL_DMAEx_List_Init+0x230>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a49      	ldr	r2, [pc, #292]	; (8006760 <HAL_DMAEx_List_Init+0x234>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d026      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a47      	ldr	r2, [pc, #284]	; (8006764 <HAL_DMAEx_List_Init+0x238>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d021      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a46      	ldr	r2, [pc, #280]	; (8006768 <HAL_DMAEx_List_Init+0x23c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d01c      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a44      	ldr	r2, [pc, #272]	; (800676c <HAL_DMAEx_List_Init+0x240>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a43      	ldr	r2, [pc, #268]	; (8006770 <HAL_DMAEx_List_Init+0x244>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d012      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a41      	ldr	r2, [pc, #260]	; (8006774 <HAL_DMAEx_List_Init+0x248>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00d      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a40      	ldr	r2, [pc, #256]	; (8006778 <HAL_DMAEx_List_Init+0x24c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d008      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_DMAEx_List_Init+0x250>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <HAL_DMAEx_List_Init+0x162>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a3d      	ldr	r2, [pc, #244]	; (8006780 <HAL_DMAEx_List_Init+0x254>)
 800668c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0206 	orr.w	r2, r2, #6
 80066ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80066ae:	e00f      	b.n	80066d0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80066b0:	f7ff fb0e 	bl	8005cd0 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d908      	bls.n	80066d0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2210      	movs	r2, #16
 80066c2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2203      	movs	r2, #3
 80066c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e015      	b.n	80066fc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e8      	bne.n	80066b0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb32 	bl	8006d48 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40020050 	.word	0x40020050
 8006708:	50020050 	.word	0x50020050
 800670c:	400200d0 	.word	0x400200d0
 8006710:	500200d0 	.word	0x500200d0
 8006714:	40020150 	.word	0x40020150
 8006718:	50020150 	.word	0x50020150
 800671c:	400201d0 	.word	0x400201d0
 8006720:	500201d0 	.word	0x500201d0
 8006724:	40020250 	.word	0x40020250
 8006728:	50020250 	.word	0x50020250
 800672c:	400202d0 	.word	0x400202d0
 8006730:	500202d0 	.word	0x500202d0
 8006734:	40020350 	.word	0x40020350
 8006738:	50020350 	.word	0x50020350
 800673c:	400203d0 	.word	0x400203d0
 8006740:	500203d0 	.word	0x500203d0
 8006744:	40020450 	.word	0x40020450
 8006748:	50020450 	.word	0x50020450
 800674c:	400204d0 	.word	0x400204d0
 8006750:	500204d0 	.word	0x500204d0
 8006754:	40020550 	.word	0x40020550
 8006758:	50020550 	.word	0x50020550
 800675c:	400205d0 	.word	0x400205d0
 8006760:	500205d0 	.word	0x500205d0
 8006764:	40020650 	.word	0x40020650
 8006768:	50020650 	.word	0x50020650
 800676c:	400206d0 	.word	0x400206d0
 8006770:	500206d0 	.word	0x500206d0
 8006774:	40020750 	.word	0x40020750
 8006778:	50020750 	.word	0x50020750
 800677c:	400207d0 	.word	0x400207d0
 8006780:	500207d0 	.word	0x500207d0

08006784 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_DMAEx_List_Start_IT+0x16>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e082      	b.n	80068a4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80067a4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d005      	beq.n	80067c4 <HAL_DMAEx_List_Start_IT+0x40>
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d16a      	bne.n	8006894 <HAL_DMAEx_List_Start_IT+0x110>
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d067      	beq.n	8006894 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d157      	bne.n	8006880 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_DMAEx_List_Start_IT+0x5a>
 80067da:	2302      	movs	r3, #2
 80067dc:	e062      	b.n	80068a4 <HAL_DMAEx_List_Start_IT+0x120>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f2:	2202      	movs	r2, #2
 80067f4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	2200      	movs	r2, #0
 8006802:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006812:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006842:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f107 010c 	add.w	r1, r7, #12
 800684e:	2200      	movs	r2, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fd8f 	bl	8007374 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	0c0b      	lsrs	r3, r1, #16
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006874:	4013      	ands	r3, r2
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	430b      	orrs	r3, r1
 800687e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e007      	b.n	80068a4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2240      	movs	r2, #64	; 0x40
 8006898:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_DMAEx_List_BuildNode+0x16>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e004      	b.n	80068d0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb95 	bl	8006ff8 <DMA_List_BuildNode>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_DMAEx_List_InsertNode+0x18>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0b6      	b.n	8006a62 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d104      	bne.n	8006906 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2204      	movs	r2, #4
 8006900:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e0ad      	b.n	8006a62 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fcc4 	bl	800729c <DMA_List_CheckNodesBaseAddresses>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2205      	movs	r2, #5
 800691e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e09e      	b.n	8006a62 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fce5 	bl	80072fc <DMA_List_CheckNodesTypes>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2204      	movs	r2, #4
 800693c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e08f      	b.n	8006a62 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2202      	movs	r2, #2
 8006946:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800694e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fd0b 	bl	8007374 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11a      	bne.n	800699c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	e06c      	b.n	8006a54 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006986:	4013      	ands	r3, r2
 8006988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800698a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698c:	4319      	orrs	r1, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2202      	movs	r2, #2
 8006998:	609a      	str	r2, [r3, #8]
 800699a:	e05b      	b.n	8006a54 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80069ac:	4013      	ands	r3, r2
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b2:	4319      	orrs	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e043      	b.n	8006a4a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80069c6:	f107 0314 	add.w	r3, r7, #20
 80069ca:	461a      	mov	r2, r3
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fd00 	bl	80073d4 <DMA_List_FindNode>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d132      	bne.n	8006a40 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d11a      	bne.n	8006a1a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80069f6:	4013      	ands	r3, r2
 80069f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fc:	4319      	orrs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	4319      	orrs	r1, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a18:	e017      	b.n	8006a4a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006a30:	4013      	ands	r3, r2
 8006a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a36:	4319      	orrs	r1, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a3e:	e004      	b.n	8006a4a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2206      	movs	r2, #6
 8006a44:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e00b      	b.n	8006a62 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3730      	adds	r7, #48	; 0x30
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b08a      	sub	sp, #40	; 0x28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e066      	b.n	8006b52 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d104      	bne.n	8006a96 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e05d      	b.n	8006b52 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fbfc 	bl	800729c <DMA_List_CheckNodesBaseAddresses>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2205      	movs	r2, #5
 8006aae:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e04e      	b.n	8006b52 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fc1d 	bl	80072fc <DMA_List_CheckNodesTypes>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2204      	movs	r2, #4
 8006acc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e03f      	b.n	8006b52 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e02b      	b.n	8006b3a <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006ae2:	f107 0220 	add.w	r2, r7, #32
 8006ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aea:	4619      	mov	r1, r3
 8006aec:	6838      	ldr	r0, [r7, #0]
 8006aee:	f000 fc41 	bl	8007374 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006af6:	f107 030c 	add.w	r3, r7, #12
 8006afa:	461a      	mov	r2, r3
 8006afc:	2100      	movs	r1, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fc68 	bl	80073d4 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	461a      	mov	r2, r3
 8006b12:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006b16:	4013      	ands	r3, r2
 8006b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	4319      	orrs	r1, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	4610      	mov	r0, r2
 8006b32:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006b34:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006b36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b08a      	sub	sp, #40	; 0x28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e052      	b.n	8006c12 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e049      	b.n	8006c12 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d101      	bne.n	8006b96 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e03d      	b.n	8006c12 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e038      	b.n	8006c12 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d104      	bne.n	8006bb2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2204      	movs	r2, #4
 8006bac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e02f      	b.n	8006c12 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f107 0220 	add.w	r2, r7, #32
 8006bc6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fbd2 	bl	8007374 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006bd4:	f107 030c 	add.w	r3, r7, #12
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fbf9 	bl	80073d4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006bec:	4013      	ands	r3, r2
 8006bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006bf6:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006bf8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3728      	adds	r7, #40	; 0x28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_DMAEx_List_LinkQ+0x16>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e072      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006c3c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d002      	beq.n	8006c50 <HAL_DMAEx_List_LinkQ+0x34>
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d108      	bne.n	8006c62 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2240      	movs	r2, #64	; 0x40
 8006c54:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e05c      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	7b1b      	ldrb	r3, [r3, #12]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d104      	bne.n	8006c76 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e052      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a2b      	ldr	r2, [pc, #172]	; (8006d28 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a29      	ldr	r2, [pc, #164]	; (8006d2c <HAL_DMAEx_List_LinkQ+0x110>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a28      	ldr	r2, [pc, #160]	; (8006d30 <HAL_DMAEx_List_LinkQ+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a26      	ldr	r2, [pc, #152]	; (8006d34 <HAL_DMAEx_List_LinkQ+0x118>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a25      	ldr	r2, [pc, #148]	; (8006d38 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a23      	ldr	r2, [pc, #140]	; (8006d3c <HAL_DMAEx_List_LinkQ+0x120>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <HAL_DMAEx_List_LinkQ+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <HAL_DMAEx_List_LinkQ+0x128>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <HAL_DMAEx_List_LinkQ+0xae>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_DMAEx_List_LinkQ+0xb0>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e019      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	2b81      	cmp	r3, #129	; 0x81
 8006cee:	d108      	bne.n	8006d02 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e00c      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e003      	b.n	8006d1c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40020650 	.word	0x40020650
 8006d2c:	50020650 	.word	0x50020650
 8006d30:	400206d0 	.word	0x400206d0
 8006d34:	500206d0 	.word	0x500206d0
 8006d38:	40020750 	.word	0x40020750
 8006d3c:	50020750 	.word	0x50020750
 8006d40:	400207d0 	.word	0x400207d0
 8006d44:	500207d0 	.word	0x500207d0

08006d48 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a85      	ldr	r2, [pc, #532]	; (8006f78 <DMA_List_Init+0x230>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f000 80a0 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a83      	ldr	r2, [pc, #524]	; (8006f7c <DMA_List_Init+0x234>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	f000 809a 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a81      	ldr	r2, [pc, #516]	; (8006f80 <DMA_List_Init+0x238>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f000 8094 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a7f      	ldr	r2, [pc, #508]	; (8006f84 <DMA_List_Init+0x23c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	f000 808e 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <DMA_List_Init+0x240>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f000 8088 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a7b      	ldr	r2, [pc, #492]	; (8006f8c <DMA_List_Init+0x244>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	f000 8082 	beq.w	8006ea8 <DMA_List_Init+0x160>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a79      	ldr	r2, [pc, #484]	; (8006f90 <DMA_List_Init+0x248>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d07c      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a78      	ldr	r2, [pc, #480]	; (8006f94 <DMA_List_Init+0x24c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d077      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a76      	ldr	r2, [pc, #472]	; (8006f98 <DMA_List_Init+0x250>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d072      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a75      	ldr	r2, [pc, #468]	; (8006f9c <DMA_List_Init+0x254>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d06d      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a73      	ldr	r2, [pc, #460]	; (8006fa0 <DMA_List_Init+0x258>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d068      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a72      	ldr	r2, [pc, #456]	; (8006fa4 <DMA_List_Init+0x25c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d063      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a70      	ldr	r2, [pc, #448]	; (8006fa8 <DMA_List_Init+0x260>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d05e      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a6f      	ldr	r2, [pc, #444]	; (8006fac <DMA_List_Init+0x264>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d059      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6d      	ldr	r2, [pc, #436]	; (8006fb0 <DMA_List_Init+0x268>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d054      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a6c      	ldr	r2, [pc, #432]	; (8006fb4 <DMA_List_Init+0x26c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d04f      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a6a      	ldr	r2, [pc, #424]	; (8006fb8 <DMA_List_Init+0x270>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d04a      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a69      	ldr	r2, [pc, #420]	; (8006fbc <DMA_List_Init+0x274>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d045      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a67      	ldr	r2, [pc, #412]	; (8006fc0 <DMA_List_Init+0x278>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d040      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a66      	ldr	r2, [pc, #408]	; (8006fc4 <DMA_List_Init+0x27c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d03b      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a64      	ldr	r2, [pc, #400]	; (8006fc8 <DMA_List_Init+0x280>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d036      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a63      	ldr	r2, [pc, #396]	; (8006fcc <DMA_List_Init+0x284>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d031      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a61      	ldr	r2, [pc, #388]	; (8006fd0 <DMA_List_Init+0x288>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02c      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a60      	ldr	r2, [pc, #384]	; (8006fd4 <DMA_List_Init+0x28c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d027      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5e      	ldr	r2, [pc, #376]	; (8006fd8 <DMA_List_Init+0x290>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d022      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a5d      	ldr	r2, [pc, #372]	; (8006fdc <DMA_List_Init+0x294>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d01d      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5b      	ldr	r2, [pc, #364]	; (8006fe0 <DMA_List_Init+0x298>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d018      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a5a      	ldr	r2, [pc, #360]	; (8006fe4 <DMA_List_Init+0x29c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a58      	ldr	r2, [pc, #352]	; (8006fe8 <DMA_List_Init+0x2a0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00e      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a57      	ldr	r2, [pc, #348]	; (8006fec <DMA_List_Init+0x2a4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a55      	ldr	r2, [pc, #340]	; (8006ff0 <DMA_List_Init+0x2a8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <DMA_List_Init+0x160>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a54      	ldr	r2, [pc, #336]	; (8006ff4 <DMA_List_Init+0x2ac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d101      	bne.n	8006eac <DMA_List_Init+0x164>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <DMA_List_Init+0x166>
 8006eac:	2300      	movs	r3, #0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ee0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a36      	ldr	r2, [pc, #216]	; (8006fd8 <DMA_List_Init+0x290>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d022      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a34      	ldr	r2, [pc, #208]	; (8006fdc <DMA_List_Init+0x294>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01d      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a33      	ldr	r2, [pc, #204]	; (8006fe0 <DMA_List_Init+0x298>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a31      	ldr	r2, [pc, #196]	; (8006fe4 <DMA_List_Init+0x29c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a30      	ldr	r2, [pc, #192]	; (8006fe8 <DMA_List_Init+0x2a0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2e      	ldr	r2, [pc, #184]	; (8006fec <DMA_List_Init+0x2a4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ff0 <DMA_List_Init+0x2a8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <DMA_List_Init+0x202>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <DMA_List_Init+0x2ac>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <DMA_List_Init+0x206>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <DMA_List_Init+0x208>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40020050 	.word	0x40020050
 8006f7c:	50020050 	.word	0x50020050
 8006f80:	400200d0 	.word	0x400200d0
 8006f84:	500200d0 	.word	0x500200d0
 8006f88:	40020150 	.word	0x40020150
 8006f8c:	50020150 	.word	0x50020150
 8006f90:	400201d0 	.word	0x400201d0
 8006f94:	500201d0 	.word	0x500201d0
 8006f98:	40020250 	.word	0x40020250
 8006f9c:	50020250 	.word	0x50020250
 8006fa0:	400202d0 	.word	0x400202d0
 8006fa4:	500202d0 	.word	0x500202d0
 8006fa8:	40020350 	.word	0x40020350
 8006fac:	50020350 	.word	0x50020350
 8006fb0:	400203d0 	.word	0x400203d0
 8006fb4:	500203d0 	.word	0x500203d0
 8006fb8:	40020450 	.word	0x40020450
 8006fbc:	50020450 	.word	0x50020450
 8006fc0:	400204d0 	.word	0x400204d0
 8006fc4:	500204d0 	.word	0x500204d0
 8006fc8:	40020550 	.word	0x40020550
 8006fcc:	50020550 	.word	0x50020550
 8006fd0:	400205d0 	.word	0x400205d0
 8006fd4:	500205d0 	.word	0x500205d0
 8006fd8:	40020650 	.word	0x40020650
 8006fdc:	50020650 	.word	0x50020650
 8006fe0:	400206d0 	.word	0x400206d0
 8006fe4:	500206d0 	.word	0x500206d0
 8006fe8:	40020750 	.word	0x40020750
 8006fec:	50020750 	.word	0x50020750
 8006ff0:	400207d0 	.word	0x400207d0
 8006ff4:	500207d0 	.word	0x500207d0

08006ff8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800700a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007010:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007016:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800701c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	3b01      	subs	r3, #1
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007048:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	3b01      	subs	r3, #1
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007056:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007058:	431a      	orrs	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	f240 237f 	movw	r3, #639	; 0x27f
 800706a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800706c:	431a      	orrs	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d10c      	bne.n	8007096 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d011      	beq.n	80070ac <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	605a      	str	r2, [r3, #4]
 8007094:	e00a      	b.n	80070ac <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709e:	d105      	bne.n	80070ac <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80070cc:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80070ce:	431a      	orrs	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070d8:	b29a      	uxth	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d04e      	beq.n	8007188 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	3b01      	subs	r3, #1
 80070f4:	0419      	lsls	r1, r3, #16
 80070f6:	4b67      	ldr	r3, [pc, #412]	; (8007294 <DMA_List_BuildNode+0x29c>)
 80070f8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80070fa:	431a      	orrs	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007104:	2b00      	cmp	r3, #0
 8007106:	da06      	bge.n	8007116 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	609a      	str	r2, [r3, #8]
 8007114:	e005      	b.n	8007122 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	2b00      	cmp	r3, #0
 8007128:	da06      	bge.n	8007138 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	609a      	str	r2, [r3, #8]
 8007136:	e005      	b.n	8007144 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	2b00      	cmp	r3, #0
 800714a:	da06      	bge.n	800715a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	e005      	b.n	8007166 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	2b00      	cmp	r3, #0
 800716c:	da06      	bge.n	800717c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	609a      	str	r2, [r3, #8]
 800717a:	e005      	b.n	8007188 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d059      	beq.n	8007258 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da09      	bge.n	80071c0 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	425b      	negs	r3, r3
 80071b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	615a      	str	r2, [r3, #20]
 80071be:	e005      	b.n	80071cc <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da0d      	bge.n	80071f0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d8:	425b      	negs	r3, r3
 80071da:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	0419      	lsls	r1, r3, #16
 80071e4:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <DMA_List_BuildNode+0x2a0>)
 80071e6:	400b      	ands	r3, r1
 80071e8:	431a      	orrs	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	615a      	str	r2, [r3, #20]
 80071ee:	e009      	b.n	8007204 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	0419      	lsls	r1, r3, #16
 80071fa:	4b27      	ldr	r3, [pc, #156]	; (8007298 <DMA_List_BuildNode+0x2a0>)
 80071fc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80071fe:	431a      	orrs	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	2b00      	cmp	r3, #0
 800720a:	da08      	bge.n	800721e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007210:	425b      	negs	r3, r3
 8007212:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	b29a      	uxth	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	619a      	str	r2, [r3, #24]
 800721c:	e004      	b.n	8007228 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	2b00      	cmp	r3, #0
 800722e:	da0b      	bge.n	8007248 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007234:	425b      	negs	r3, r3
 8007236:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007240:	431a      	orrs	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	619a      	str	r2, [r3, #24]
 8007246:	e007      	b.n	8007258 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007250:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007252:	431a      	orrs	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007278:	e005      	b.n	8007286 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	07ff0000 	.word	0x07ff0000
 8007298:	1fff0000 	.word	0x1fff0000

0800729c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e00a      	b.n	80072de <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e004      	b.n	80072de <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d001      	beq.n	80072ee <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e00e      	b.n	800733a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e006      	b.n	800733a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800734c:	2302      	movs	r3, #2
 800734e:	e00b      	b.n	8007368 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	d001      	beq.n	8007366 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007362:	2303      	movs	r3, #3
 8007364:	e000      	b.n	8007368 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <DMA_List_GetCLLRNodeInfo+0x58>)
 8007396:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00f      	beq.n	80073be <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2207      	movs	r2, #7
 80073a2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80073a4:	e00b      	b.n	80073be <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80073b0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2205      	movs	r2, #5
 80073bc:	601a      	str	r2, [r3, #0]
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	fe010000 	.word	0xfe010000
 80073d0:	f8010000 	.word	0xf8010000

080073d4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b089      	sub	sp, #36	; 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d142      	bne.n	800747e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80073f8:	e01d      	b.n	8007436 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800740a:	4013      	ands	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	e00f      	b.n	8007430 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	4413      	add	r3, r2
 8007420:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007428:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800742c:	4013      	ands	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	3301      	adds	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	429a      	cmp	r2, r3
 800743e:	d3dc      	bcc.n	80073fa <DMA_List_FindNode+0x26>
 8007440:	e029      	b.n	8007496 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e00f      	b.n	8007478 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	4413      	add	r3, r2
 8007468:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007470:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007474:	4013      	ands	r3, r2
 8007476:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	429a      	cmp	r2, r3
 8007486:	d206      	bcs.n	8007496 <DMA_List_FindNode+0xc2>
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800748e:	4013      	ands	r3, r2
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	429a      	cmp	r2, r3
 8007494:	d1d5      	bne.n	8007442 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80074a2:	4013      	ands	r3, r2
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d001      	beq.n	80074ae <DMA_List_FindNode+0xda>
    {
      return 1U;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e02b      	b.n	8007506 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	461a      	mov	r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00f      	beq.n	8007504 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	461a      	mov	r2, r3
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80074f4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	0c1b      	lsrs	r3, r3, #16
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3724      	adds	r7, #36	; 0x24
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007514:	b480      	push	{r7}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007526:	e1ba      	b.n	800789e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	2101      	movs	r1, #1
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	fa01 f303 	lsl.w	r3, r1, r3
 8007534:	4013      	ands	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 81aa 	beq.w	8007898 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a55      	ldr	r2, [pc, #340]	; (800769c <HAL_GPIO_Init+0x188>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d15d      	bne.n	8007608 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007552:	2201      	movs	r2, #1
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	43db      	mvns	r3, r3
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	4013      	ands	r3, r2
 8007560:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0201 	and.w	r2, r3, #1
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	4313      	orrs	r3, r2
 8007574:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800757c:	4a48      	ldr	r2, [pc, #288]	; (80076a0 <HAL_GPIO_Init+0x18c>)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007584:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007586:	4a46      	ldr	r2, [pc, #280]	; (80076a0 <HAL_GPIO_Init+0x18c>)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	08da      	lsrs	r2, r3, #3
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	3208      	adds	r2, #8
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	220f      	movs	r2, #15
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	43db      	mvns	r3, r3
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	4013      	ands	r3, r2
 80075b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	220b      	movs	r2, #11
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	08da      	lsrs	r2, r3, #3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3208      	adds	r2, #8
 80075d2:	69f9      	ldr	r1, [r7, #28]
 80075d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	2203      	movs	r2, #3
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	43db      	mvns	r3, r3
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	4013      	ands	r3, r2
 80075ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	2202      	movs	r2, #2
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e067      	b.n	80076d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d003      	beq.n	8007618 <HAL_GPIO_Init+0x104>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b12      	cmp	r3, #18
 8007616:	d145      	bne.n	80076a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	08da      	lsrs	r2, r3, #3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3208      	adds	r2, #8
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	220f      	movs	r2, #15
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	4013      	ands	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	4313      	orrs	r3, r2
 8007654:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	08da      	lsrs	r2, r3, #3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3208      	adds	r2, #8
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	2203      	movs	r2, #3
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	4013      	ands	r3, r2
 800767a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f003 0203 	and.w	r2, r3, #3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	4313      	orrs	r3, r2
 8007690:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e01e      	b.n	80076d8 <HAL_GPIO_Init+0x1c4>
 800769a:	bf00      	nop
 800769c:	46020000 	.word	0x46020000
 80076a0:	08022ae8 	.word	0x08022ae8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	2203      	movs	r2, #3
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 0203 	and.w	r2, r3, #3
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d00b      	beq.n	80076f8 <HAL_GPIO_Init+0x1e4>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d007      	beq.n	80076f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076ec:	2b11      	cmp	r3, #17
 80076ee:	d003      	beq.n	80076f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b12      	cmp	r3, #18
 80076f6:	d130      	bne.n	800775a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	2203      	movs	r2, #3
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	43db      	mvns	r3, r3
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	4013      	ands	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	4313      	orrs	r3, r2
 8007720:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800772e:	2201      	movs	r2, #1
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	4013      	ands	r3, r2
 800773c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	091b      	lsrs	r3, r3, #4
 8007744:	f003 0201 	and.w	r2, r3, #1
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	4313      	orrs	r3, r2
 8007752:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d017      	beq.n	8007792 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	4013      	ands	r3, r2
 8007778:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	4313      	orrs	r3, r2
 800778a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d07c      	beq.n	8007898 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800779e:	4a47      	ldr	r2, [pc, #284]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	089b      	lsrs	r3, r3, #2
 80077a4:	3318      	adds	r3, #24
 80077a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	220f      	movs	r2, #15
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	43db      	mvns	r3, r3
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	4013      	ands	r3, r2
 80077c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0a9a      	lsrs	r2, r3, #10
 80077c6:	4b3e      	ldr	r3, [pc, #248]	; (80078c0 <HAL_GPIO_Init+0x3ac>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	f002 0203 	and.w	r2, r2, #3
 80077d0:	00d2      	lsls	r2, r2, #3
 80077d2:	4093      	lsls	r3, r2
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80077da:	4938      	ldr	r1, [pc, #224]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	3318      	adds	r3, #24
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077e8:	4b34      	ldr	r3, [pc, #208]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800780c:	4a2b      	ldr	r2, [pc, #172]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007812:	4b2a      	ldr	r3, [pc, #168]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	43db      	mvns	r3, r3
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	4013      	ands	r3, r2
 8007820:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800783c:	4b1f      	ldr	r3, [pc, #124]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 800783e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007842:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	43db      	mvns	r3, r3
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	4013      	ands	r3, r2
 800784c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007862:	4a16      	ldr	r2, [pc, #88]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800786a:	4b14      	ldr	r3, [pc, #80]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 800786c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007870:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	43db      	mvns	r3, r3
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	4013      	ands	r3, r2
 800787a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_GPIO_Init+0x3a8>)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3301      	adds	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	fa22 f303 	lsr.w	r3, r2, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f ae3d 	bne.w	8007528 <HAL_GPIO_Init+0x14>
  }
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3724      	adds	r7, #36	; 0x24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	46022000 	.word	0x46022000
 80078c0:	002f7f7f 	.word	0x002f7f7f

080078c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	807b      	strh	r3, [r7, #2]
 80078d0:	4613      	mov	r3, r2
 80078d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078d4:	787b      	ldrb	r3, [r7, #1]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078da:	887a      	ldrh	r2, [r7, #2]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80078e0:	e002      	b.n	80078e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80078e2:	887a      	ldrh	r2, [r7, #2]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e08d      	b.n	8007a22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fd f982 	bl	8004c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2224      	movs	r2, #36	; 0x24
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d107      	bne.n	800796e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	e006      	b.n	800797c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800797a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d108      	bne.n	8007996 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007992:	605a      	str	r2, [r3, #4]
 8007994:	e007      	b.n	80079a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691a      	ldr	r2, [r3, #16]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69d9      	ldr	r1, [r3, #28]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1a      	ldr	r2, [r3, #32]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0201 	orr.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	4608      	mov	r0, r1
 8007a36:	4611      	mov	r1, r2
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	817b      	strh	r3, [r7, #10]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	813b      	strh	r3, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	f040 80f9 	bne.w	8007c46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_I2C_Mem_Write+0x34>
 8007a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0ed      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_I2C_Mem_Write+0x4e>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e0e6      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a82:	f7fe f925 	bl	8005cd0 <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2319      	movs	r3, #25
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fac3 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0d1      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2221      	movs	r2, #33	; 0x21
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2240      	movs	r2, #64	; 0x40
 8007ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007acc:	88f8      	ldrh	r0, [r7, #6]
 8007ace:	893a      	ldrh	r2, [r7, #8]
 8007ad0:	8979      	ldrh	r1, [r7, #10]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	4603      	mov	r3, r0
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f9d3 	bl	8007e88 <I2C_RequestMemoryWrite>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0a9      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2bff      	cmp	r3, #255	; 0xff
 8007afc:	d90e      	bls.n	8007b1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	22ff      	movs	r2, #255	; 0xff
 8007b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	8979      	ldrh	r1, [r7, #10]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fc3d 	bl	8008394 <I2C_TransferConfig>
 8007b1a:	e00f      	b.n	8007b3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	8979      	ldrh	r1, [r7, #10]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fc2c 	bl	8008394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fabc 	bl	80080be <I2C_WaitOnTXISFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e07b      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d034      	beq.n	8007bf4 <HAL_I2C_Mem_Write+0x1c8>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d130      	bne.n	8007bf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fa3f 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e04d      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	d90e      	bls.n	8007bd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	8979      	ldrh	r1, [r7, #10]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fbe1 	bl	8008394 <I2C_TransferConfig>
 8007bd2:	e00f      	b.n	8007bf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	8979      	ldrh	r1, [r7, #10]
 8007be6:	2300      	movs	r3, #0
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fbd0 	bl	8008394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d19e      	bne.n	8007b3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 faa2 	bl	800814c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e01a      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2220      	movs	r2, #32
 8007c18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6859      	ldr	r1, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <HAL_I2C_Mem_Write+0x224>)
 8007c26:	400b      	ands	r3, r1
 8007c28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e000      	b.n	8007c48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c46:	2302      	movs	r3, #2
  }
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	fe00e800 	.word	0xfe00e800

08007c54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	461a      	mov	r2, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	817b      	strh	r3, [r7, #10]
 8007c66:	460b      	mov	r3, r1
 8007c68:	813b      	strh	r3, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	f040 80fd 	bne.w	8007e76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_I2C_Mem_Read+0x34>
 8007c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d105      	bne.n	8007c94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0f1      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_I2C_Mem_Read+0x4e>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0ea      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007caa:	f7fe f811 	bl	8005cd0 <HAL_GetTick>
 8007cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2319      	movs	r3, #25
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f9af 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0d5      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2222      	movs	r2, #34	; 0x22
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2240      	movs	r2, #64	; 0x40
 8007cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a3a      	ldr	r2, [r7, #32]
 8007ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cf4:	88f8      	ldrh	r0, [r7, #6]
 8007cf6:	893a      	ldrh	r2, [r7, #8]
 8007cf8:	8979      	ldrh	r1, [r7, #10]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	4603      	mov	r3, r0
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f913 	bl	8007f30 <I2C_RequestMemoryRead>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0ad      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2bff      	cmp	r3, #255	; 0xff
 8007d24:	d90e      	bls.n	8007d44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	22ff      	movs	r2, #255	; 0xff
 8007d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	8979      	ldrh	r1, [r7, #10]
 8007d34:	4b52      	ldr	r3, [pc, #328]	; (8007e80 <HAL_I2C_Mem_Read+0x22c>)
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fb29 	bl	8008394 <I2C_TransferConfig>
 8007d42:	e00f      	b.n	8007d64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	8979      	ldrh	r1, [r7, #10]
 8007d56:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <HAL_I2C_Mem_Read+0x22c>)
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fb18 	bl	8008394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f956 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e07c      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d034      	beq.n	8007e24 <HAL_I2C_Mem_Read+0x1d0>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d130      	bne.n	8007e24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f927 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e04d      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2bff      	cmp	r3, #255	; 0xff
 8007de4:	d90e      	bls.n	8007e04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	22ff      	movs	r2, #255	; 0xff
 8007dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	8979      	ldrh	r1, [r7, #10]
 8007df4:	2300      	movs	r3, #0
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fac9 	bl	8008394 <I2C_TransferConfig>
 8007e02:	e00f      	b.n	8007e24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	8979      	ldrh	r1, [r7, #10]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fab8 	bl	8008394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d19a      	bne.n	8007d64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f98a 	bl	800814c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e01a      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2220      	movs	r2, #32
 8007e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6859      	ldr	r1, [r3, #4]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <HAL_I2C_Mem_Read+0x230>)
 8007e56:	400b      	ands	r3, r1
 8007e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	80002400 	.word	0x80002400
 8007e84:	fe00e800 	.word	0xfe00e800

08007e88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	4608      	mov	r0, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	817b      	strh	r3, [r7, #10]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	813b      	strh	r3, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	8979      	ldrh	r1, [r7, #10]
 8007ea8:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <I2C_RequestMemoryWrite+0xa4>)
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fa6f 	bl	8008394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	69b9      	ldr	r1, [r7, #24]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f8ff 	bl	80080be <I2C_WaitOnTXISFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e02c      	b.n	8007f24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d105      	bne.n	8007edc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed0:	893b      	ldrh	r3, [r7, #8]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8007eda:	e015      	b.n	8007f08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007edc:	893b      	ldrh	r3, [r7, #8]
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	69b9      	ldr	r1, [r7, #24]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 f8e5 	bl	80080be <I2C_WaitOnTXISFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e012      	b.n	8007f24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f884 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	80002000 	.word	0x80002000

08007f30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	817b      	strh	r3, [r7, #10]
 8007f42:	460b      	mov	r3, r1
 8007f44:	813b      	strh	r3, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	8979      	ldrh	r1, [r7, #10]
 8007f50:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <I2C_RequestMemoryRead+0xa4>)
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fa1c 	bl	8008394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f8ac 	bl	80080be <I2C_WaitOnTXISFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e02c      	b.n	8007fca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d105      	bne.n	8007f82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f76:	893b      	ldrh	r3, [r7, #8]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007f80:	e015      	b.n	8007fae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	69b9      	ldr	r1, [r7, #24]
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f892 	bl	80080be <I2C_WaitOnTXISFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e012      	b.n	8007fca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2140      	movs	r1, #64	; 0x40
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f831 	bl	8008020 <I2C_WaitOnFlagUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	80002000 	.word	0x80002000

08007fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d103      	bne.n	8007ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d007      	beq.n	8008014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	619a      	str	r2, [r3, #24]
  }
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008030:	e031      	b.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d02d      	beq.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803a:	f7fd fe49 	bl	8005cd0 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d122      	bne.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4013      	ands	r3, r2
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	429a      	cmp	r2, r3
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	429a      	cmp	r2, r3
 800806c:	d113      	bne.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	f043 0220 	orr.w	r2, r3, #32
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e00f      	b.n	80080b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4013      	ands	r3, r2
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	bf0c      	ite	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	2300      	movne	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d0be      	beq.n	8008032 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080ca:	e033      	b.n	8008134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f87f 	bl	80081d4 <I2C_IsErrorOccurred>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e031      	b.n	8008144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d025      	beq.n	8008134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e8:	f7fd fdf2 	bl	8005cd0 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11a      	bne.n	8008134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b02      	cmp	r3, #2
 800810a:	d013      	beq.n	8008134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e007      	b.n	8008144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b02      	cmp	r3, #2
 8008140:	d1c4      	bne.n	80080cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008158:	e02f      	b.n	80081ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f838 	bl	80081d4 <I2C_IsErrorOccurred>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e02d      	b.n	80081ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800816e:	f7fd fdaf 	bl	8005cd0 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d302      	bcc.n	8008184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11a      	bne.n	80081ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d013      	beq.n	80081ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	f043 0220 	orr.w	r2, r3, #32
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e007      	b.n	80081ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d1c8      	bne.n	800815a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d068      	beq.n	80082d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2210      	movs	r2, #16
 8008206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008208:	e049      	b.n	800829e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d045      	beq.n	800829e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008212:	f7fd fd5d 	bl	8005cd0 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	429a      	cmp	r2, r3
 8008220:	d302      	bcc.n	8008228 <I2C_IsErrorOccurred+0x54>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d13a      	bne.n	800829e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800823a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824a:	d121      	bne.n	8008290 <I2C_IsErrorOccurred+0xbc>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008252:	d01d      	beq.n	8008290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	2b20      	cmp	r3, #32
 8008258:	d01a      	beq.n	8008290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800826a:	f7fd fd31 	bl	8005cd0 <HAL_GetTick>
 800826e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008270:	e00e      	b.n	8008290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008272:	f7fd fd2d 	bl	8005cd0 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b19      	cmp	r3, #25
 800827e:	d907      	bls.n	8008290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f043 0320 	orr.w	r3, r3, #32
 8008286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800828e:	e006      	b.n	800829e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b20      	cmp	r3, #32
 800829c:	d1e9      	bne.n	8008272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d003      	beq.n	80082b4 <I2C_IsErrorOccurred+0xe0>
 80082ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0aa      	beq.n	800820a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2220      	movs	r2, #32
 80082c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	f043 0304 	orr.w	r3, r3, #4
 80082ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00b      	beq.n	800831e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	f043 0302 	orr.w	r3, r3, #2
 800832e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01c      	beq.n	8008382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff fe45 	bl	8007fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6859      	ldr	r1, [r3, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <I2C_IsErrorOccurred+0x1bc>)
 800835a:	400b      	ands	r3, r1
 800835c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	431a      	orrs	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2220      	movs	r2, #32
 800836e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008386:	4618      	mov	r0, r3
 8008388:	3728      	adds	r7, #40	; 0x28
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	fe00e800 	.word	0xfe00e800

08008394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	817b      	strh	r3, [r7, #10]
 80083a2:	4613      	mov	r3, r2
 80083a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083a6:	897b      	ldrh	r3, [r7, #10]
 80083a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083ac:	7a7b      	ldrb	r3, [r7, #9]
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	4313      	orrs	r3, r2
 80083be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	0d5b      	lsrs	r3, r3, #21
 80083ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <I2C_TransferConfig+0x60>)
 80083d4:	430b      	orrs	r3, r1
 80083d6:	43db      	mvns	r3, r3
 80083d8:	ea02 0103 	and.w	r1, r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	03ff63ff 	.word	0x03ff63ff

080083f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	d138      	bne.n	8008480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008418:	2302      	movs	r3, #2
 800841a:	e032      	b.n	8008482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	; 0x24
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800844a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6819      	ldr	r1, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	e000      	b.n	8008482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008480:	2302      	movs	r3, #2
  }
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d139      	bne.n	8008518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e033      	b.n	800851a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2224      	movs	r2, #36	; 0x24
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	e007      	b.n	8008556 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 0204 	bic.w	r2, r3, #4
 800854e:	4905      	ldr	r1, [pc, #20]	; (8008564 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4313      	orrs	r3, r2
 8008554:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	40030400 	.word	0x40030400

08008568 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_ICACHE_Enable+0x1c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a04      	ldr	r2, [pc, #16]	; (8008584 <HAL_ICACHE_Enable+0x1c>)
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	40030400 	.word	0x40030400

08008588 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e055      	b.n	8008646 <HAL_IWDG_Init+0xbe>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f857 	bl	800864e <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80085a8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f245 5255 	movw	r2, #21845	; 0x5555
 80085b2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6892      	ldr	r2, [r2, #8]
 80085c6:	609a      	str	r2, [r3, #8]

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <HAL_IWDG_Init+0x54>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085d8:	615a      	str	r2, [r3, #20]
 80085da:	e006      	b.n	80085ea <HAL_IWDG_Init+0x62>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80085e8:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80085ea:	f7fd fb71 	bl	8005cd0 <HAL_GetTick>
 80085ee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085f0:	e00f      	b.n	8008612 <HAL_IWDG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80085f2:	f7fd fb6d 	bl	8005cd0 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b21      	cmp	r3, #33	; 0x21
 80085fe:	d908      	bls.n	8008612 <HAL_IWDG_Init+0x8a>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_IWDG_Init+0x8a>
      {
        return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e019      	b.n	8008646 <HAL_IWDG_Init+0xbe>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e8      	bne.n	80085f2 <HAL_IWDG_Init+0x6a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	429a      	cmp	r2, r3
 800862c:	d005      	beq.n	800863a <HAL_IWDG_Init+0xb2>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	68d2      	ldr	r2, [r2, #12]
 8008636:	611a      	str	r2, [r3, #16]
 8008638:	e004      	b.n	8008644 <HAL_IWDG_Init+0xbc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008672:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	4a04      	ldr	r2, [pc, #16]	; (80086a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	46020800 	.word	0x46020800

080086a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80086ac:	4b39      	ldr	r3, [pc, #228]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d10b      	bne.n	80086d6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d905      	bls.n	80086d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80086c6:	4b33      	ldr	r3, [pc, #204]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	4a32      	ldr	r2, [pc, #200]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e057      	b.n	8008786 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d90a      	bls.n	80086f4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80086de:	4b2d      	ldr	r3, [pc, #180]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086f0:	60d3      	str	r3, [r2, #12]
 80086f2:	e007      	b.n	8008704 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80086f4:	4b27      	ldr	r3, [pc, #156]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80086fc:	4925      	ldr	r1, [pc, #148]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4313      	orrs	r3, r2
 8008702:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a24      	ldr	r2, [pc, #144]	; (800879c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800870a:	fba2 2303 	umull	r2, r3, r2, r3
 800870e:	099b      	lsrs	r3, r3, #6
 8008710:	2232      	movs	r2, #50	; 0x32
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	4a21      	ldr	r2, [pc, #132]	; (800879c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	099b      	lsrs	r3, r3, #6
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008722:	e002      	b.n	800872a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b01      	subs	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800872a:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d102      	bne.n	800873c <HAL_PWREx_ControlVoltageScaling+0x98>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f3      	bne.n	8008724 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01b      	beq.n	800877a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008742:	4b15      	ldr	r3, [pc, #84]	; (8008798 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a15      	ldr	r2, [pc, #84]	; (800879c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008748:	fba2 2303 	umull	r2, r3, r2, r3
 800874c:	099b      	lsrs	r3, r3, #6
 800874e:	2232      	movs	r2, #50	; 0x32
 8008750:	fb02 f303 	mul.w	r3, r2, r3
 8008754:	4a11      	ldr	r2, [pc, #68]	; (800879c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008756:	fba2 2303 	umull	r2, r3, r2, r3
 800875a:	099b      	lsrs	r3, r3, #6
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008760:	e002      	b.n	8008768 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b01      	subs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800876a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f3      	bne.n	8008762 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e000      	b.n	8008786 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	46020800 	.word	0x46020800
 8008798:	20000004 	.word	0x20000004
 800879c:	10624dd3 	.word	0x10624dd3

080087a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80087a4:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	46020800 	.word	0x46020800

080087bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08e      	sub	sp, #56	; 0x38
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f000 bec8 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087d6:	4b99      	ldr	r3, [pc, #612]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e0:	4b96      	ldr	r3, [pc, #600]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 816c 	beq.w	8008ad0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <HAL_RCC_OscConfig+0x52>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	2b0c      	cmp	r3, #12
 8008802:	f040 80de 	bne.w	80089c2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	2b01      	cmp	r3, #1
 800880a:	f040 80da 	bne.w	80089c2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f000 bea5 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008820:	4b86      	ldr	r3, [pc, #536]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <HAL_RCC_OscConfig+0x7a>
 800882c:	4b83      	ldr	r3, [pc, #524]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008834:	e005      	b.n	8008842 <HAL_RCC_OscConfig+0x86>
 8008836:	4b81      	ldr	r3, [pc, #516]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008842:	4293      	cmp	r3, r2
 8008844:	d255      	bcs.n	80088f2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fa09 	bl	8009c68 <RCC_SetFlashLatencyFromMSIRange>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f000 be82 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	4a75      	ldr	r2, [pc, #468]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800886c:	6093      	str	r3, [r2, #8]
 800886e:	4b73      	ldr	r3, [pc, #460]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	4970      	ldr	r1, [pc, #448]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800887c:	4313      	orrs	r3, r2
 800887e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008888:	d309      	bcc.n	800889e <HAL_RCC_OscConfig+0xe2>
 800888a:	4b6c      	ldr	r3, [pc, #432]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f023 021f 	bic.w	r2, r3, #31
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	4969      	ldr	r1, [pc, #420]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008898:	4313      	orrs	r3, r2
 800889a:	60cb      	str	r3, [r1, #12]
 800889c:	e07e      	b.n	800899c <HAL_RCC_OscConfig+0x1e0>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da0a      	bge.n	80088bc <HAL_RCC_OscConfig+0x100>
 80088a6:	4b65      	ldr	r3, [pc, #404]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	015b      	lsls	r3, r3, #5
 80088b4:	4961      	ldr	r1, [pc, #388]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60cb      	str	r3, [r1, #12]
 80088ba:	e06f      	b.n	800899c <HAL_RCC_OscConfig+0x1e0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c4:	d30a      	bcc.n	80088dc <HAL_RCC_OscConfig+0x120>
 80088c6:	4b5d      	ldr	r3, [pc, #372]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	4959      	ldr	r1, [pc, #356]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60cb      	str	r3, [r1, #12]
 80088da:	e05f      	b.n	800899c <HAL_RCC_OscConfig+0x1e0>
 80088dc:	4b57      	ldr	r3, [pc, #348]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	03db      	lsls	r3, r3, #15
 80088ea:	4954      	ldr	r1, [pc, #336]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60cb      	str	r3, [r1, #12]
 80088f0:	e054      	b.n	800899c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80088f2:	4b52      	ldr	r3, [pc, #328]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	4a51      	ldr	r2, [pc, #324]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088fc:	6093      	str	r3, [r2, #8]
 80088fe:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	494c      	ldr	r1, [pc, #304]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800890c:	4313      	orrs	r3, r2
 800890e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008918:	d309      	bcc.n	800892e <HAL_RCC_OscConfig+0x172>
 800891a:	4b48      	ldr	r3, [pc, #288]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f023 021f 	bic.w	r2, r3, #31
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	4945      	ldr	r1, [pc, #276]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008928:	4313      	orrs	r3, r2
 800892a:	60cb      	str	r3, [r1, #12]
 800892c:	e028      	b.n	8008980 <HAL_RCC_OscConfig+0x1c4>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	2b00      	cmp	r3, #0
 8008934:	da0a      	bge.n	800894c <HAL_RCC_OscConfig+0x190>
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	015b      	lsls	r3, r3, #5
 8008944:	493d      	ldr	r1, [pc, #244]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008946:	4313      	orrs	r3, r2
 8008948:	60cb      	str	r3, [r1, #12]
 800894a:	e019      	b.n	8008980 <HAL_RCC_OscConfig+0x1c4>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d30a      	bcc.n	800896c <HAL_RCC_OscConfig+0x1b0>
 8008956:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	029b      	lsls	r3, r3, #10
 8008964:	4935      	ldr	r1, [pc, #212]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008966:	4313      	orrs	r3, r2
 8008968:	60cb      	str	r3, [r1, #12]
 800896a:	e009      	b.n	8008980 <HAL_RCC_OscConfig+0x1c4>
 800896c:	4b33      	ldr	r3, [pc, #204]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	03db      	lsls	r3, r3, #15
 800897a:	4930      	ldr	r1, [pc, #192]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800897c:	4313      	orrs	r3, r2
 800897e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	4618      	mov	r0, r3
 800898c:	f001 f96c 	bl	8009c68 <RCC_SetFlashLatencyFromMSIRange>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f000 bde5 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800899c:	f001 f8e2 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80089a0:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <HAL_RCC_OscConfig+0x284>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd f949 	bl	8005c3c <HAL_InitTick>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80089b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 808a 	beq.w	8008ace <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80089ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089be:	f000 bdd2 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d066      	beq.n	8008a98 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80089d6:	f7fd f97b 	bl	8005cd0 <HAL_GetTick>
 80089da:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80089dc:	e009      	b.n	80089f2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089de:	f7fd f977 	bl	8005cd0 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d902      	bls.n	80089f2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	f000 bdba 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80089f2:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0ef      	beq.n	80089de <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	4a0e      	ldr	r2, [pc, #56]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a08:	6093      	str	r3, [r2, #8]
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	4909      	ldr	r1, [pc, #36]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008a24:	d30e      	bcc.n	8008a44 <HAL_RCC_OscConfig+0x288>
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f023 021f 	bic.w	r2, r3, #31
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	4902      	ldr	r1, [pc, #8]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60cb      	str	r3, [r1, #12]
 8008a38:	e04a      	b.n	8008ad0 <HAL_RCC_OscConfig+0x314>
 8008a3a:	bf00      	nop
 8008a3c:	46020c00 	.word	0x46020c00
 8008a40:	20000008 	.word	0x20000008
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da0a      	bge.n	8008a62 <HAL_RCC_OscConfig+0x2a6>
 8008a4c:	4b98      	ldr	r3, [pc, #608]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	015b      	lsls	r3, r3, #5
 8008a5a:	4995      	ldr	r1, [pc, #596]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60cb      	str	r3, [r1, #12]
 8008a60:	e036      	b.n	8008ad0 <HAL_RCC_OscConfig+0x314>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6a:	d30a      	bcc.n	8008a82 <HAL_RCC_OscConfig+0x2c6>
 8008a6c:	4b90      	ldr	r3, [pc, #576]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	029b      	lsls	r3, r3, #10
 8008a7a:	498d      	ldr	r1, [pc, #564]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60cb      	str	r3, [r1, #12]
 8008a80:	e026      	b.n	8008ad0 <HAL_RCC_OscConfig+0x314>
 8008a82:	4b8b      	ldr	r3, [pc, #556]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	03db      	lsls	r3, r3, #15
 8008a90:	4987      	ldr	r1, [pc, #540]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60cb      	str	r3, [r1, #12]
 8008a96:	e01b      	b.n	8008ad0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008a98:	4b85      	ldr	r3, [pc, #532]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a84      	ldr	r2, [pc, #528]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008aa4:	f7fd f914 	bl	8005cd0 <HAL_GetTick>
 8008aa8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008aaa:	e009      	b.n	8008ac0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008aac:	f7fd f910 	bl	8005cd0 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d902      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	f000 bd53 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008ac0:	4b7b      	ldr	r3, [pc, #492]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1ef      	bne.n	8008aac <HAL_RCC_OscConfig+0x2f0>
 8008acc:	e000      	b.n	8008ad0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008ace:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 808b 	beq.w	8008bf4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d005      	beq.n	8008af0 <HAL_RCC_OscConfig+0x334>
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	2b0c      	cmp	r3, #12
 8008ae8:	d109      	bne.n	8008afe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d106      	bne.n	8008afe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d17d      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f000 bd34 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b06:	d106      	bne.n	8008b16 <HAL_RCC_OscConfig+0x35a>
 8008b08:	4b69      	ldr	r3, [pc, #420]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a68      	ldr	r2, [pc, #416]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	e041      	b.n	8008b9a <HAL_RCC_OscConfig+0x3de>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b1e:	d112      	bne.n	8008b46 <HAL_RCC_OscConfig+0x38a>
 8008b20:	4b63      	ldr	r3, [pc, #396]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a62      	ldr	r2, [pc, #392]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	4b60      	ldr	r3, [pc, #384]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a5f      	ldr	r2, [pc, #380]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	4b5d      	ldr	r3, [pc, #372]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a5c      	ldr	r2, [pc, #368]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	e029      	b.n	8008b9a <HAL_RCC_OscConfig+0x3de>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008b4e:	d112      	bne.n	8008b76 <HAL_RCC_OscConfig+0x3ba>
 8008b50:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a56      	ldr	r2, [pc, #344]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	4b54      	ldr	r3, [pc, #336]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a53      	ldr	r2, [pc, #332]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	4b51      	ldr	r3, [pc, #324]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a50      	ldr	r2, [pc, #320]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	e011      	b.n	8008b9a <HAL_RCC_OscConfig+0x3de>
 8008b76:	4b4e      	ldr	r3, [pc, #312]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a4d      	ldr	r2, [pc, #308]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	4b4b      	ldr	r3, [pc, #300]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a4a      	ldr	r2, [pc, #296]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	4b48      	ldr	r3, [pc, #288]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a47      	ldr	r2, [pc, #284]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008b94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d014      	beq.n	8008bcc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008ba2:	f7fd f895 	bl	8005cd0 <HAL_GetTick>
 8008ba6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ba8:	e009      	b.n	8008bbe <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008baa:	f7fd f891 	bl	8005cd0 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b64      	cmp	r3, #100	; 0x64
 8008bb6:	d902      	bls.n	8008bbe <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	f000 bcd4 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bbe:	4b3c      	ldr	r3, [pc, #240]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0ef      	beq.n	8008baa <HAL_RCC_OscConfig+0x3ee>
 8008bca:	e013      	b.n	8008bf4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008bcc:	f7fd f880 	bl	8005cd0 <HAL_GetTick>
 8008bd0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008bd2:	e009      	b.n	8008be8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fd f87c 	bl	8005cd0 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	; 0x64
 8008be0:	d902      	bls.n	8008be8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	f000 bcbf 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008be8:	4b31      	ldr	r3, [pc, #196]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1ef      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05f      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d005      	beq.n	8008c12 <HAL_RCC_OscConfig+0x456>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	2b0c      	cmp	r3, #12
 8008c0a:	d114      	bne.n	8008c36 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d111      	bne.n	8008c36 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d102      	bne.n	8008c20 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f000 bca3 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008c20:	4b23      	ldr	r3, [pc, #140]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	041b      	lsls	r3, r3, #16
 8008c2e:	4920      	ldr	r1, [pc, #128]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c34:	e044      	b.n	8008cc0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d024      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c4a:	f7fd f841 	bl	8005cd0 <HAL_GetTick>
 8008c4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c50:	e009      	b.n	8008c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c52:	f7fd f83d 	bl	8005cd0 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d902      	bls.n	8008c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	f000 bc80 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0ef      	beq.n	8008c52 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008c72:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	490b      	ldr	r1, [pc, #44]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	610b      	str	r3, [r1, #16]
 8008c86:	e01b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <HAL_RCC_OscConfig+0x4f4>)
 8008c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c94:	f7fd f81c 	bl	8005cd0 <HAL_GetTick>
 8008c98:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c9a:	e00b      	b.n	8008cb4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c9c:	f7fd f818 	bl	8005cd0 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d904      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	f000 bc5b 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
 8008cb0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008cb4:	4baf      	ldr	r3, [pc, #700]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ed      	bne.n	8008c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80c8 	beq.w	8008e5e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd4:	4ba7      	ldr	r3, [pc, #668]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d111      	bne.n	8008d06 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ce2:	4ba4      	ldr	r3, [pc, #656]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ce8:	4aa2      	ldr	r2, [pc, #648]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008cea:	f043 0304 	orr.w	r3, r3, #4
 8008cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008cf2:	4ba0      	ldr	r3, [pc, #640]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008d06:	4b9c      	ldr	r3, [pc, #624]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d119      	bne.n	8008d46 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008d12:	4b99      	ldr	r3, [pc, #612]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d16:	4a98      	ldr	r2, [pc, #608]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008d18:	f043 0301 	orr.w	r3, r3, #1
 8008d1c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d1e:	f7fc ffd7 	bl	8005cd0 <HAL_GetTick>
 8008d22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008d24:	e009      	b.n	8008d3a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d26:	f7fc ffd3 	bl	8005cd0 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d902      	bls.n	8008d3a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	f000 bc16 	b.w	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008d3a:	4b8f      	ldr	r3, [pc, #572]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ef      	beq.n	8008d26 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d05f      	beq.n	8008e0e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8008d4e:	4b89      	ldr	r3, [pc, #548]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d54:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699a      	ldr	r2, [r3, #24]
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d037      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d006      	beq.n	8008d7c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e3f4      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01b      	beq.n	8008dbe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008d86:	4b7b      	ldr	r3, [pc, #492]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d8c:	4a79      	ldr	r2, [pc, #484]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008d8e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8008d96:	f7fc ff9b 	bl	8005cd0 <HAL_GetTick>
 8008d9a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d9e:	f7fc ff97 	bl	8005cd0 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e3da      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008db0:	4b70      	ldr	r3, [pc, #448]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1ef      	bne.n	8008d9e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008dbe:	4b6d      	ldr	r3, [pc, #436]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dc4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	4969      	ldr	r1, [pc, #420]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008dd4:	4b67      	ldr	r3, [pc, #412]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dda:	4a66      	ldr	r2, [pc, #408]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008de4:	f7fc ff74 	bl	8005cd0 <HAL_GetTick>
 8008de8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008dea:	e008      	b.n	8008dfe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dec:	f7fc ff70 	bl	8005cd0 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b05      	cmp	r3, #5
 8008df8:	d901      	bls.n	8008dfe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e3b3      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008dfe:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0ef      	beq.n	8008dec <HAL_RCC_OscConfig+0x630>
 8008e0c:	e01b      	b.n	8008e46 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008e0e:	4b59      	ldr	r3, [pc, #356]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e14:	4a57      	ldr	r2, [pc, #348]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e16:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008e1e:	f7fc ff57 	bl	8005cd0 <HAL_GetTick>
 8008e22:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e26:	f7fc ff53 	bl	8005cd0 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b05      	cmp	r3, #5
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e396      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008e38:	4b4e      	ldr	r3, [pc, #312]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1ef      	bne.n	8008e26 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d107      	bne.n	8008e5e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e4e:	4b49      	ldr	r3, [pc, #292]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e54:	4a47      	ldr	r2, [pc, #284]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e56:	f023 0304 	bic.w	r3, r3, #4
 8008e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8111 	beq.w	800908e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e72:	4b40      	ldr	r3, [pc, #256]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d111      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e80:	4b3c      	ldr	r3, [pc, #240]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e86:	4a3b      	ldr	r2, [pc, #236]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e88:	f043 0304 	orr.w	r3, r3, #4
 8008e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008e90:	4b38      	ldr	r3, [pc, #224]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ea4:	4b34      	ldr	r3, [pc, #208]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d118      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008eb0:	4b31      	ldr	r3, [pc, #196]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	4a30      	ldr	r2, [pc, #192]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ebc:	f7fc ff08 	bl	8005cd0 <HAL_GetTick>
 8008ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ec4:	f7fc ff04 	bl	8005cd0 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e347      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ed6:	4b28      	ldr	r3, [pc, #160]	; (8008f78 <HAL_RCC_OscConfig+0x7bc>)
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0f0      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01f      	beq.n	8008f2e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008efa:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f00:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f02:	f043 0304 	orr.w	r3, r3, #4
 8008f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f10:	4a18      	ldr	r2, [pc, #96]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008f1a:	e018      	b.n	8008f4e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f1c:	4b15      	ldr	r3, [pc, #84]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f22:	4a14      	ldr	r2, [pc, #80]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008f2c:	e00f      	b.n	8008f4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f2e:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f34:	4a0f      	ldr	r2, [pc, #60]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f44:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <HAL_RCC_OscConfig+0x7b8>)
 8008f46:	f023 0304 	bic.w	r3, r3, #4
 8008f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d057      	beq.n	8009006 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008f56:	f7fc febb 	bl	8005cd0 <HAL_GetTick>
 8008f5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f5c:	e00e      	b.n	8008f7c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f5e:	f7fc feb7 	bl	8005cd0 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d905      	bls.n	8008f7c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e2f8      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
 8008f74:	46020c00 	.word	0x46020c00
 8008f78:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f7c:	4b9c      	ldr	r3, [pc, #624]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0e9      	beq.n	8008f5e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01b      	beq.n	8008fce <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008f96:	4b96      	ldr	r3, [pc, #600]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f9c:	4a94      	ldr	r2, [pc, #592]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008fa6:	e00a      	b.n	8008fbe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fa8:	f7fc fe92 	bl	8005cd0 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e2d3      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008fbe:	4b8c      	ldr	r3, [pc, #560]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0ed      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x7ec>
 8008fcc:	e053      	b.n	8009076 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008fce:	4b88      	ldr	r3, [pc, #544]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fd4:	4a86      	ldr	r2, [pc, #536]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008fde:	e00a      	b.n	8008ff6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fe0:	f7fc fe76 	bl	8005cd0 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e2b7      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ff6:	4b7e      	ldr	r3, [pc, #504]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8008ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1ed      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x824>
 8009004:	e037      	b.n	8009076 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009006:	f7fc fe63 	bl	8005cd0 <HAL_GetTick>
 800900a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800900c:	e00a      	b.n	8009024 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fc fe5f 	bl	8005cd0 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e2a0      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009024:	4b72      	ldr	r3, [pc, #456]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1ed      	bne.n	800900e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009032:	4b6f      	ldr	r3, [pc, #444]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01a      	beq.n	8009076 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009040:	4b6b      	ldr	r3, [pc, #428]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009046:	4a6a      	ldr	r2, [pc, #424]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800904c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009050:	e00a      	b.n	8009068 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009052:	f7fc fe3d 	bl	8005cd0 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e27e      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009068:	4b61      	ldr	r3, [pc, #388]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 800906a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800906e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1ed      	bne.n	8009052 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009076:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800907a:	2b01      	cmp	r3, #1
 800907c:	d107      	bne.n	800908e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800907e:	4b5c      	ldr	r3, [pc, #368]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009084:	4a5a      	ldr	r2, [pc, #360]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009086:	f023 0304 	bic.w	r3, r3, #4
 800908a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d036      	beq.n	8009108 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d019      	beq.n	80090d6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80090a2:	4b53      	ldr	r3, [pc, #332]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a52      	ldr	r2, [pc, #328]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80090ae:	f7fc fe0f 	bl	8005cd0 <HAL_GetTick>
 80090b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090b6:	f7fc fe0b 	bl	8005cd0 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e24e      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80090c8:	4b49      	ldr	r3, [pc, #292]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f0      	beq.n	80090b6 <HAL_RCC_OscConfig+0x8fa>
 80090d4:	e018      	b.n	8009108 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80090d6:	4b46      	ldr	r3, [pc, #280]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a45      	ldr	r2, [pc, #276]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80090e2:	f7fc fdf5 	bl	8005cd0 <HAL_GetTick>
 80090e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80090e8:	e008      	b.n	80090fc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090ea:	f7fc fdf1 	bl	8005cd0 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e234      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80090fc:	4b3c      	ldr	r3, [pc, #240]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1f0      	bne.n	80090ea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	2b00      	cmp	r3, #0
 8009112:	d036      	beq.n	8009182 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	2b00      	cmp	r3, #0
 800911a:	d019      	beq.n	8009150 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800911c:	4b34      	ldr	r3, [pc, #208]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a33      	ldr	r2, [pc, #204]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009126:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009128:	f7fc fdd2 	bl	8005cd0 <HAL_GetTick>
 800912c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009130:	f7fc fdce 	bl	8005cd0 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e211      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009142:	4b2b      	ldr	r3, [pc, #172]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0f0      	beq.n	8009130 <HAL_RCC_OscConfig+0x974>
 800914e:	e018      	b.n	8009182 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009150:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a26      	ldr	r2, [pc, #152]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800915a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800915c:	f7fc fdb8 	bl	8005cd0 <HAL_GetTick>
 8009160:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009162:	e008      	b.n	8009176 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009164:	f7fc fdb4 	bl	8005cd0 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e1f7      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1f0      	bne.n	8009164 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	d07f      	beq.n	800928e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009192:	2b00      	cmp	r3, #0
 8009194:	d062      	beq.n	800925c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009196:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	4a15      	ldr	r2, [pc, #84]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 800919c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091a0:	6093      	str	r3, [r2, #8]
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	4910      	ldr	r1, [pc, #64]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80091bc:	d309      	bcc.n	80091d2 <HAL_RCC_OscConfig+0xa16>
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f023 021f 	bic.w	r2, r3, #31
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	4909      	ldr	r1, [pc, #36]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60cb      	str	r3, [r1, #12]
 80091d0:	e02a      	b.n	8009228 <HAL_RCC_OscConfig+0xa6c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da0c      	bge.n	80091f4 <HAL_RCC_OscConfig+0xa38>
 80091da:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	015b      	lsls	r3, r3, #5
 80091e8:	4901      	ldr	r1, [pc, #4]	; (80091f0 <HAL_RCC_OscConfig+0xa34>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60cb      	str	r3, [r1, #12]
 80091ee:	e01b      	b.n	8009228 <HAL_RCC_OscConfig+0xa6c>
 80091f0:	46020c00 	.word	0x46020c00
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d30a      	bcc.n	8009214 <HAL_RCC_OscConfig+0xa58>
 80091fe:	4ba1      	ldr	r3, [pc, #644]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	029b      	lsls	r3, r3, #10
 800920c:	499d      	ldr	r1, [pc, #628]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800920e:	4313      	orrs	r3, r2
 8009210:	60cb      	str	r3, [r1, #12]
 8009212:	e009      	b.n	8009228 <HAL_RCC_OscConfig+0xa6c>
 8009214:	4b9b      	ldr	r3, [pc, #620]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	03db      	lsls	r3, r3, #15
 8009222:	4998      	ldr	r1, [pc, #608]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009224:	4313      	orrs	r3, r2
 8009226:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009228:	4b96      	ldr	r3, [pc, #600]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a95      	ldr	r2, [pc, #596]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800922e:	f043 0310 	orr.w	r3, r3, #16
 8009232:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009234:	f7fc fd4c 	bl	8005cd0 <HAL_GetTick>
 8009238:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800923c:	f7fc fd48 	bl	8005cd0 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e18b      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800924e:	4b8d      	ldr	r3, [pc, #564]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0xa80>
 800925a:	e018      	b.n	800928e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800925c:	4b89      	ldr	r3, [pc, #548]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a88      	ldr	r2, [pc, #544]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009268:	f7fc fd32 	bl	8005cd0 <HAL_GetTick>
 800926c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800926e:	e008      	b.n	8009282 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009270:	f7fc fd2e 	bl	8005cd0 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b02      	cmp	r3, #2
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e171      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009282:	4b80      	ldr	r3, [pc, #512]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f0      	bne.n	8009270 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8166 	beq.w	8009564 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009298:	2300      	movs	r3, #0
 800929a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800929e:	4b79      	ldr	r3, [pc, #484]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b0c      	cmp	r3, #12
 80092a8:	f000 80f2 	beq.w	8009490 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f040 80c5 	bne.w	8009440 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80092b6:	4b73      	ldr	r3, [pc, #460]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a72      	ldr	r2, [pc, #456]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80092c2:	f7fc fd05 	bl	8005cd0 <HAL_GetTick>
 80092c6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80092c8:	e008      	b.n	80092dc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092ca:	f7fc fd01 	bl	8005cd0 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e144      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80092dc:	4b69      	ldr	r3, [pc, #420]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f0      	bne.n	80092ca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092e8:	4b66      	ldr	r3, [pc, #408]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d111      	bne.n	800931a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80092f6:	4b63      	ldr	r3, [pc, #396]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092fc:	4a61      	ldr	r2, [pc, #388]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80092fe:	f043 0304 	orr.w	r3, r3, #4
 8009302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009306:	4b5f      	ldr	r3, [pc, #380]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800931a:	4b5b      	ldr	r3, [pc, #364]	; (8009488 <HAL_RCC_OscConfig+0xccc>)
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009326:	d102      	bne.n	800932e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800932e:	4b56      	ldr	r3, [pc, #344]	; (8009488 <HAL_RCC_OscConfig+0xccc>)
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4a55      	ldr	r2, [pc, #340]	; (8009488 <HAL_RCC_OscConfig+0xccc>)
 8009334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009338:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800933a:	4b52      	ldr	r3, [pc, #328]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800934e:	3a01      	subs	r2, #1
 8009350:	0212      	lsls	r2, r2, #8
 8009352:	4311      	orrs	r1, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009358:	430a      	orrs	r2, r1
 800935a:	494a      	ldr	r1, [pc, #296]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800935c:	4313      	orrs	r3, r2
 800935e:	628b      	str	r3, [r1, #40]	; 0x28
 8009360:	4b48      	ldr	r3, [pc, #288]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009364:	4b49      	ldr	r3, [pc, #292]	; (800948c <HAL_RCC_OscConfig+0xcd0>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800936c:	3a01      	subs	r2, #1
 800936e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009376:	3a01      	subs	r2, #1
 8009378:	0252      	lsls	r2, r2, #9
 800937a:	b292      	uxth	r2, r2
 800937c:	4311      	orrs	r1, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009382:	3a01      	subs	r2, #1
 8009384:	0412      	lsls	r2, r2, #16
 8009386:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800938a:	4311      	orrs	r1, r2
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009390:	3a01      	subs	r2, #1
 8009392:	0612      	lsls	r2, r2, #24
 8009394:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009398:	430a      	orrs	r2, r1
 800939a:	493a      	ldr	r1, [pc, #232]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800939c:	4313      	orrs	r3, r2
 800939e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80093a0:	4b38      	ldr	r3, [pc, #224]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a4:	4a37      	ldr	r2, [pc, #220]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b0:	4a34      	ldr	r2, [pc, #208]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80093b6:	4b33      	ldr	r3, [pc, #204]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	4a32      	ldr	r2, [pc, #200]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093bc:	f043 0310 	orr.w	r3, r3, #16
 80093c0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80093c2:	4b30      	ldr	r3, [pc, #192]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	f023 020c 	bic.w	r2, r3, #12
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	492d      	ldr	r1, [pc, #180]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80093d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d105      	bne.n	80093e8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80093dc:	4b2a      	ldr	r3, [pc, #168]	; (8009488 <HAL_RCC_OscConfig+0xccc>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <HAL_RCC_OscConfig+0xccc>)
 80093e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093e6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80093e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80093f0:	4b24      	ldr	r3, [pc, #144]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f6:	4a23      	ldr	r2, [pc, #140]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009400:	4b20      	ldr	r3, [pc, #128]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	4a1f      	ldr	r2, [pc, #124]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800940a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800940c:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a1c      	ldr	r2, [pc, #112]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009416:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009418:	f7fc fc5a 	bl	8005cd0 <HAL_GetTick>
 800941c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800941e:	e008      	b.n	8009432 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009420:	f7fc fc56 	bl	8005cd0 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e099      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f0      	beq.n	8009420 <HAL_RCC_OscConfig+0xc64>
 800943e:	e091      	b.n	8009564 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009440:	4b10      	ldr	r3, [pc, #64]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0f      	ldr	r2, [pc, #60]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800944c:	f7fc fc40 	bl	8005cd0 <HAL_GetTick>
 8009450:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009454:	f7fc fc3c 	bl	8005cd0 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e07f      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009466:	4b07      	ldr	r3, [pc, #28]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009472:	4b04      	ldr	r3, [pc, #16]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	4a03      	ldr	r2, [pc, #12]	; (8009484 <HAL_RCC_OscConfig+0xcc8>)
 8009478:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	6293      	str	r3, [r2, #40]	; 0x28
 8009482:	e06f      	b.n	8009564 <HAL_RCC_OscConfig+0xda8>
 8009484:	46020c00 	.word	0x46020c00
 8009488:	46020800 	.word	0x46020800
 800948c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009490:	4b37      	ldr	r3, [pc, #220]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 8009492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009494:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009496:	4b36      	ldr	r3, [pc, #216]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 8009498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d039      	beq.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0203 	and.w	r2, r3, #3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d132      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d129      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d122      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094dc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80094de:	429a      	cmp	r2, r3
 80094e0:	d11a      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	0a5b      	lsrs	r3, r3, #9
 80094e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d111      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009500:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009502:	429a      	cmp	r2, r3
 8009504:	d108      	bne.n	8009518 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	0e1b      	lsrs	r3, r3, #24
 800950a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009512:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009514:	429a      	cmp	r2, r3
 8009516:	d001      	beq.n	800951c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e024      	b.n	8009566 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800951c:	4b14      	ldr	r3, [pc, #80]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	08db      	lsrs	r3, r3, #3
 8009522:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800952a:	429a      	cmp	r2, r3
 800952c:	d01a      	beq.n	8009564 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800952e:	4b10      	ldr	r3, [pc, #64]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	4a0f      	ldr	r2, [pc, #60]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 8009534:	f023 0310 	bic.w	r3, r3, #16
 8009538:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953a:	f7fc fbc9 	bl	8005cd0 <HAL_GetTick>
 800953e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009540:	bf00      	nop
 8009542:	f7fc fbc5 	bl	8005cd0 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	4293      	cmp	r3, r2
 800954c:	d0f9      	beq.n	8009542 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009552:	4a07      	ldr	r2, [pc, #28]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	4a04      	ldr	r2, [pc, #16]	; (8009570 <HAL_RCC_OscConfig+0xdb4>)
 800955e:	f043 0310 	orr.w	r3, r3, #16
 8009562:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3738      	adds	r7, #56	; 0x38
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	46020c00 	.word	0x46020c00

08009574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e1d9      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009588:	4b9b      	ldr	r3, [pc, #620]	; (80097f8 <HAL_RCC_ClockConfig+0x284>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d910      	bls.n	80095b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009596:	4b98      	ldr	r3, [pc, #608]	; (80097f8 <HAL_RCC_ClockConfig+0x284>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f023 020f 	bic.w	r2, r3, #15
 800959e:	4996      	ldr	r1, [pc, #600]	; (80097f8 <HAL_RCC_ClockConfig+0x284>)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095a6:	4b94      	ldr	r3, [pc, #592]	; (80097f8 <HAL_RCC_ClockConfig+0x284>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d001      	beq.n	80095b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e1c1      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	695a      	ldr	r2, [r3, #20]
 80095c8:	4b8c      	ldr	r3, [pc, #560]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d908      	bls.n	80095e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80095d4:	4b89      	ldr	r3, [pc, #548]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	4986      	ldr	r1, [pc, #536]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d012      	beq.n	8009618 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	4b81      	ldr	r3, [pc, #516]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009600:	429a      	cmp	r2, r3
 8009602:	d909      	bls.n	8009618 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009604:	4b7d      	ldr	r3, [pc, #500]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	497a      	ldr	r1, [pc, #488]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009614:	4313      	orrs	r3, r2
 8009616:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	4b74      	ldr	r3, [pc, #464]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009630:	429a      	cmp	r2, r3
 8009632:	d908      	bls.n	8009646 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009634:	4b71      	ldr	r3, [pc, #452]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	496e      	ldr	r1, [pc, #440]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009642:	4313      	orrs	r3, r2
 8009644:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	4b69      	ldr	r3, [pc, #420]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f003 030f 	and.w	r3, r3, #15
 800965e:	429a      	cmp	r2, r3
 8009660:	d908      	bls.n	8009674 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009662:	4b66      	ldr	r3, [pc, #408]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	f023 020f 	bic.w	r2, r3, #15
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	4963      	ldr	r1, [pc, #396]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009670:	4313      	orrs	r3, r2
 8009672:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80d2 	beq.w	8009826 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b03      	cmp	r3, #3
 800968c:	d143      	bne.n	8009716 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800968e:	4b5b      	ldr	r3, [pc, #364]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d110      	bne.n	80096be <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800969c:	4b57      	ldr	r3, [pc, #348]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	4a56      	ldr	r2, [pc, #344]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80096a4:	f043 0304 	orr.w	r3, r3, #4
 80096a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80096ac:	4b53      	ldr	r3, [pc, #332]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80096ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	60bb      	str	r3, [r7, #8]
 80096b8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80096ba:	2301      	movs	r3, #1
 80096bc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80096be:	f7fc fb07 	bl	8005cd0 <HAL_GetTick>
 80096c2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80096c4:	4b4e      	ldr	r3, [pc, #312]	; (8009800 <HAL_RCC_ClockConfig+0x28c>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00f      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80096d0:	e008      	b.n	80096e4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80096d2:	f7fc fafd 	bl	8005cd0 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d901      	bls.n	80096e4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e12b      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80096e4:	4b46      	ldr	r3, [pc, #280]	; (8009800 <HAL_RCC_ClockConfig+0x28c>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0f0      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d107      	bne.n	8009706 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80096f6:	4b41      	ldr	r3, [pc, #260]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80096f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096fc:	4a3f      	ldr	r2, [pc, #252]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80096fe:	f023 0304 	bic.w	r3, r3, #4
 8009702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009706:	4b3d      	ldr	r3, [pc, #244]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d121      	bne.n	8009756 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e112      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d107      	bne.n	800972e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800971e:	4b37      	ldr	r3, [pc, #220]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d115      	bne.n	8009756 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e106      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009736:	4b31      	ldr	r3, [pc, #196]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e0fa      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009746:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e0f2      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009756:	4b29      	ldr	r3, [pc, #164]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f023 0203 	bic.w	r2, r3, #3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4926      	ldr	r1, [pc, #152]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009764:	4313      	orrs	r3, r2
 8009766:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009768:	f7fc fab2 	bl	8005cd0 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d112      	bne.n	800979c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009776:	e00a      	b.n	800978e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009778:	f7fc faaa 	bl	8005cd0 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	f241 3288 	movw	r2, #5000	; 0x1388
 8009786:	4293      	cmp	r3, r2
 8009788:	d901      	bls.n	800978e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e0d6      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800978e:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f003 030c 	and.w	r3, r3, #12
 8009796:	2b0c      	cmp	r3, #12
 8009798:	d1ee      	bne.n	8009778 <HAL_RCC_ClockConfig+0x204>
 800979a:	e044      	b.n	8009826 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d112      	bne.n	80097ca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80097a4:	e00a      	b.n	80097bc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097a6:	f7fc fa93 	bl	8005cd0 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d901      	bls.n	80097bc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e0bf      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f003 030c 	and.w	r3, r3, #12
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d1ee      	bne.n	80097a6 <HAL_RCC_ClockConfig+0x232>
 80097c8:	e02d      	b.n	8009826 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d123      	bne.n	800981a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80097d2:	e00a      	b.n	80097ea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d4:	f7fc fa7c 	bl	8005cd0 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e0a8      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80097ea:	4b04      	ldr	r3, [pc, #16]	; (80097fc <HAL_RCC_ClockConfig+0x288>)
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f003 030c 	and.w	r3, r3, #12
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1ee      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x260>
 80097f6:	e016      	b.n	8009826 <HAL_RCC_ClockConfig+0x2b2>
 80097f8:	40022000 	.word	0x40022000
 80097fc:	46020c00 	.word	0x46020c00
 8009800:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009804:	f7fc fa64 	bl	8005cd0 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009812:	4293      	cmp	r3, r2
 8009814:	d901      	bls.n	800981a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e090      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800981a:	4b4a      	ldr	r3, [pc, #296]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	f003 030c 	and.w	r3, r3, #12
 8009822:	2b04      	cmp	r3, #4
 8009824:	d1ee      	bne.n	8009804 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d010      	beq.n	8009854 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	4b43      	ldr	r3, [pc, #268]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	429a      	cmp	r2, r3
 8009840:	d208      	bcs.n	8009854 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009842:	4b40      	ldr	r3, [pc, #256]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f023 020f 	bic.w	r2, r3, #15
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	493d      	ldr	r1, [pc, #244]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 8009850:	4313      	orrs	r3, r2
 8009852:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009854:	4b3c      	ldr	r3, [pc, #240]	; (8009948 <HAL_RCC_ClockConfig+0x3d4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d210      	bcs.n	8009884 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <HAL_RCC_ClockConfig+0x3d4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f023 020f 	bic.w	r2, r3, #15
 800986a:	4937      	ldr	r1, [pc, #220]	; (8009948 <HAL_RCC_ClockConfig+0x3d4>)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	4313      	orrs	r3, r2
 8009870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009872:	4b35      	ldr	r3, [pc, #212]	; (8009948 <HAL_RCC_ClockConfig+0x3d4>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 030f 	and.w	r3, r3, #15
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d001      	beq.n	8009884 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e05b      	b.n	800993c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b00      	cmp	r3, #0
 800988e:	d010      	beq.n	80098b2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	4b2b      	ldr	r3, [pc, #172]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800989c:	429a      	cmp	r2, r3
 800989e:	d208      	bcs.n	80098b2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80098a0:	4b28      	ldr	r3, [pc, #160]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	4925      	ldr	r1, [pc, #148]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d012      	beq.n	80098e4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	4b20      	ldr	r3, [pc, #128]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	091b      	lsrs	r3, r3, #4
 80098c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d209      	bcs.n	80098e4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80098d0:	4b1c      	ldr	r3, [pc, #112]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	4919      	ldr	r1, [pc, #100]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d010      	beq.n	8009912 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695a      	ldr	r2, [r3, #20]
 80098f4:	4b13      	ldr	r3, [pc, #76]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d208      	bcs.n	8009912 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009900:	4b10      	ldr	r3, [pc, #64]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	490d      	ldr	r1, [pc, #52]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 800990e:	4313      	orrs	r3, r2
 8009910:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009912:	f000 f821 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 8009916:	4602      	mov	r2, r0
 8009918:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <HAL_RCC_ClockConfig+0x3d0>)
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	490a      	ldr	r1, [pc, #40]	; (800994c <HAL_RCC_ClockConfig+0x3d8>)
 8009922:	5ccb      	ldrb	r3, [r1, r3]
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
 8009928:	4a09      	ldr	r2, [pc, #36]	; (8009950 <HAL_RCC_ClockConfig+0x3dc>)
 800992a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <HAL_RCC_ClockConfig+0x3e0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7fc f983 	bl	8005c3c <HAL_InitTick>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]

  return status;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	46020c00 	.word	0x46020c00
 8009948:	40022000 	.word	0x40022000
 800994c:	08022a90 	.word	0x08022a90
 8009950:	20000004 	.word	0x20000004
 8009954:	20000008 	.word	0x20000008

08009958 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009958:	b480      	push	{r7}
 800995a:	b08b      	sub	sp, #44	; 0x2c
 800995c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009966:	4b78      	ldr	r3, [pc, #480]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	f003 030c 	and.w	r3, r3, #12
 800996e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009970:	4b75      	ldr	r3, [pc, #468]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_RCC_GetSysClockFreq+0x34>
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b0c      	cmp	r3, #12
 8009984:	d121      	bne.n	80099ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d11e      	bne.n	80099ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800998c:	4b6e      	ldr	r3, [pc, #440]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d107      	bne.n	80099a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009998:	4b6b      	ldr	r3, [pc, #428]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800999a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800999e:	0b1b      	lsrs	r3, r3, #12
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
 80099a6:	e005      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80099a8:	4b67      	ldr	r3, [pc, #412]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	0f1b      	lsrs	r3, r3, #28
 80099ae:	f003 030f 	and.w	r3, r3, #15
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80099b4:	4a65      	ldr	r2, [pc, #404]	; (8009b4c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d110      	bne.n	80099e6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80099c8:	e00d      	b.n	80099e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099ca:	4b5f      	ldr	r3, [pc, #380]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d102      	bne.n	80099dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80099d6:	4b5e      	ldr	r3, [pc, #376]	; (8009b50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80099d8:	623b      	str	r3, [r7, #32]
 80099da:	e004      	b.n	80099e6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	2b08      	cmp	r3, #8
 80099e0:	d101      	bne.n	80099e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80099e2:	4b5c      	ldr	r3, [pc, #368]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80099e4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b0c      	cmp	r3, #12
 80099ea:	f040 80a5 	bne.w	8009b38 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80099ee:	4b56      	ldr	r3, [pc, #344]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80099f8:	4b53      	ldr	r3, [pc, #332]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	0a1b      	lsrs	r3, r3, #8
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	3301      	adds	r3, #1
 8009a04:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009a06:	4b50      	ldr	r3, [pc, #320]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	091b      	lsrs	r3, r3, #4
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009a12:	4b4d      	ldr	r3, [pc, #308]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d003      	beq.n	8009a3c <HAL_RCC_GetSysClockFreq+0xe4>
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d022      	beq.n	8009a80 <HAL_RCC_GetSysClockFreq+0x128>
 8009a3a:	e043      	b.n	8009ac4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009b58 <HAL_RCC_GetSysClockFreq+0x200>
 8009a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4e:	4b3e      	ldr	r3, [pc, #248]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009a5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009a62:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009b5c <HAL_RCC_GetSysClockFreq+0x204>
 8009a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7e:	e046      	b.n	8009b0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8a:	eddf 6a35 	vldr	s13, [pc, #212]	; 8009b60 <HAL_RCC_GetSysClockFreq+0x208>
 8009a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a92:	4b2d      	ldr	r3, [pc, #180]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009aa2:	ed97 6a01 	vldr	s12, [r7, #4]
 8009aa6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009b5c <HAL_RCC_GetSysClockFreq+0x204>
 8009aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ac2:	e024      	b.n	8009b0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009adc:	4b1a      	ldr	r3, [pc, #104]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009aec:	ed97 6a01 	vldr	s12, [r7, #4]
 8009af0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8009b5c <HAL_RCC_GetSysClockFreq+0x204>
 8009af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b0c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009b0e:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b18:	3301      	adds	r3, #1
 8009b1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b32:	ee17 3a90 	vmov	r3, s15
 8009b36:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	372c      	adds	r7, #44	; 0x2c
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	46020c00 	.word	0x46020c00
 8009b4c:	08022aa8 	.word	0x08022aa8
 8009b50:	00f42400 	.word	0x00f42400
 8009b54:	02625a00 	.word	0x02625a00
 8009b58:	4b742400 	.word	0x4b742400
 8009b5c:	46000000 	.word	0x46000000
 8009b60:	4c189680 	.word	0x4c189680

08009b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009b68:	f7ff fef6 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	4b07      	ldr	r3, [pc, #28]	; (8009b8c <HAL_RCC_GetHCLKFreq+0x28>)
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	4906      	ldr	r1, [pc, #24]	; (8009b90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009b78:	5ccb      	ldrb	r3, [r1, r3]
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	4a05      	ldr	r2, [pc, #20]	; (8009b94 <HAL_RCC_GetHCLKFreq+0x30>)
 8009b80:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009b82:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <HAL_RCC_GetHCLKFreq+0x30>)
 8009b84:	681b      	ldr	r3, [r3, #0]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	46020c00 	.word	0x46020c00
 8009b90:	08022a90 	.word	0x08022a90
 8009b94:	20000004 	.word	0x20000004

08009b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009b9c:	f7ff ffe2 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	091b      	lsrs	r3, r3, #4
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	4903      	ldr	r1, [pc, #12]	; (8009bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bae:	5ccb      	ldrb	r3, [r1, r3]
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	46020c00 	.word	0x46020c00
 8009bbc:	08022aa0 	.word	0x08022aa0

08009bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009bc4:	f7ff ffce 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	4903      	ldr	r1, [pc, #12]	; (8009be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bd6:	5ccb      	ldrb	r3, [r1, r3]
 8009bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	46020c00 	.word	0x46020c00
 8009be4:	08022aa0 	.word	0x08022aa0

08009be8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009bec:	f7ff ffba 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	091b      	lsrs	r3, r3, #4
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4903      	ldr	r1, [pc, #12]	; (8009c0c <HAL_RCC_GetPCLK3Freq+0x24>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	46020c00 	.word	0x46020c00
 8009c0c:	08022aa0 	.word	0x08022aa0

08009c10 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8009c14:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <HAL_RCC_EnableCSS+0x1c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a04      	ldr	r2, [pc, #16]	; (8009c2c <HAL_RCC_EnableCSS+0x1c>)
 8009c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	46020c00 	.word	0x46020c00

08009c30 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009c34:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c40:	d105      	bne.n	8009c4e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009c42:	f000 f809 	bl	8009c58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009c46:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c4c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8009c4e:	bf00      	nop
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	46020c00 	.word	0x46020c00

08009c58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
	...

08009c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c70:	4b3e      	ldr	r3, [pc, #248]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c76:	f003 0304 	and.w	r3, r3, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009c7e:	f7fe fd8f 	bl	80087a0 <HAL_PWREx_GetVoltageRange>
 8009c82:	6178      	str	r0, [r7, #20]
 8009c84:	e019      	b.n	8009cba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c86:	4b39      	ldr	r3, [pc, #228]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c8c:	4a37      	ldr	r2, [pc, #220]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009c8e:	f043 0304 	orr.w	r3, r3, #4
 8009c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009c96:	4b35      	ldr	r3, [pc, #212]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009ca4:	f7fe fd7c 	bl	80087a0 <HAL_PWREx_GetVoltageRange>
 8009ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009caa:	4b30      	ldr	r3, [pc, #192]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cb0:	4a2e      	ldr	r2, [pc, #184]	; (8009d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009cb2:	f023 0304 	bic.w	r3, r3, #4
 8009cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cc0:	d003      	beq.n	8009cca <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc8:	d109      	bne.n	8009cde <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cd0:	d202      	bcs.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009cd6:	e033      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009cdc:	e030      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ce4:	d208      	bcs.n	8009cf8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cec:	d102      	bne.n	8009cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009cee:	2303      	movs	r3, #3
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	e025      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e035      	b.n	8009d64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfe:	d90f      	bls.n	8009d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d0c:	d902      	bls.n	8009d14 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e015      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009d14:	2301      	movs	r3, #1
 8009d16:	613b      	str	r3, [r7, #16]
 8009d18:	e012      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	e00f      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d26:	d109      	bne.n	8009d3c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d2e:	d102      	bne.n	8009d36 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009d30:	2301      	movs	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	e004      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009d36:	2302      	movs	r3, #2
 8009d38:	613b      	str	r3, [r7, #16]
 8009d3a:	e001      	b.n	8009d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f023 020f 	bic.w	r2, r3, #15
 8009d48:	4909      	ldr	r1, [pc, #36]	; (8009d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d001      	beq.n	8009d62 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e000      	b.n	8009d64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	46020c00 	.word	0x46020c00
 8009d70:	40022000 	.word	0x40022000

08009d74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d78:	b0b8      	sub	sp, #224	; 0xe0
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f002 0401 	and.w	r4, r2, #1
 8009d98:	2500      	movs	r5, #0
 8009d9a:	ea54 0305 	orrs.w	r3, r4, r5
 8009d9e:	d00b      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009da0:	4bca      	ldr	r3, [pc, #808]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009da6:	f023 0103 	bic.w	r1, r3, #3
 8009daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db0:	4ac6      	ldr	r2, [pc, #792]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f002 0802 	and.w	r8, r2, #2
 8009dc4:	f04f 0900 	mov.w	r9, #0
 8009dc8:	ea58 0309 	orrs.w	r3, r8, r9
 8009dcc:	d00b      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009dce:	4bbf      	ldr	r3, [pc, #764]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dd4:	f023 010c 	bic.w	r1, r3, #12
 8009dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	4abb      	ldr	r2, [pc, #748]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009de0:	430b      	orrs	r3, r1
 8009de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f002 0a04 	and.w	sl, r2, #4
 8009df2:	f04f 0b00 	mov.w	fp, #0
 8009df6:	ea5a 030b 	orrs.w	r3, sl, fp
 8009dfa:	d00b      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009dfc:	4bb3      	ldr	r3, [pc, #716]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e02:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0c:	4aaf      	ldr	r2, [pc, #700]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f002 0308 	and.w	r3, r2, #8
 8009e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4313      	orrs	r3, r2
 8009e32:	d00b      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009e34:	4ba5      	ldr	r3, [pc, #660]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e44:	4aa1      	ldr	r2, [pc, #644]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009e46:	430b      	orrs	r3, r1
 8009e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f002 0310 	and.w	r3, r2, #16
 8009e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009e66:	460b      	mov	r3, r1
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	d00b      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009e6c:	4b97      	ldr	r3, [pc, #604]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e7c:	4a93      	ldr	r2, [pc, #588]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f002 0320 	and.w	r3, r2, #32
 8009e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e94:	2300      	movs	r3, #0
 8009e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009ea4:	4b89      	ldr	r3, [pc, #548]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009eaa:	f023 0107 	bic.w	r1, r3, #7
 8009eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb4:	4a85      	ldr	r2, [pc, #532]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ed2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	d00b      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009edc:	4b7b      	ldr	r3, [pc, #492]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ee2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eec:	4a77      	ldr	r2, [pc, #476]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009eee:	430b      	orrs	r3, r1
 8009ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f04:	2300      	movs	r3, #0
 8009f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f0a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4313      	orrs	r3, r2
 8009f12:	d00b      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009f14:	4b6d      	ldr	r3, [pc, #436]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f24:	4a69      	ldr	r2, [pc, #420]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f26:	430b      	orrs	r3, r1
 8009f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009f46:	460b      	mov	r3, r1
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	d00b      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009f4c:	4b5f      	ldr	r3, [pc, #380]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5c:	4a5b      	ldr	r2, [pc, #364]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4313      	orrs	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009f84:	4b51      	ldr	r3, [pc, #324]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f8a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8009f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f94:	4a4d      	ldr	r2, [pc, #308]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009f96:	430b      	orrs	r3, r1
 8009f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fac:	2300      	movs	r3, #0
 8009fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	d00b      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009fbc:	4b43      	ldr	r3, [pc, #268]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009fc2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fcc:	4a3f      	ldr	r2, [pc, #252]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	d00b      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009ff4:	4b35      	ldr	r3, [pc, #212]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ffa:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a004:	4a31      	ldr	r2, [pc, #196]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a006:	430b      	orrs	r3, r1
 800a008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a00c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a018:	67bb      	str	r3, [r7, #120]	; 0x78
 800a01a:	2300      	movs	r3, #0
 800a01c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a01e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a022:	460b      	mov	r3, r1
 800a024:	4313      	orrs	r3, r2
 800a026:	d00c      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a028:	4b28      	ldr	r3, [pc, #160]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a02a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a02e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a03a:	4a24      	ldr	r2, [pc, #144]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a04e:	673b      	str	r3, [r7, #112]	; 0x70
 800a050:	2300      	movs	r3, #0
 800a052:	677b      	str	r3, [r7, #116]	; 0x74
 800a054:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a058:	460b      	mov	r3, r1
 800a05a:	4313      	orrs	r3, r2
 800a05c:	d04f      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a05e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d02d      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d827      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a06e:	2b60      	cmp	r3, #96	; 0x60
 800a070:	d02e      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a072:	2b60      	cmp	r3, #96	; 0x60
 800a074:	d823      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	d006      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800a07a:	2b40      	cmp	r3, #64	; 0x40
 800a07c:	d81f      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800a082:	2b20      	cmp	r3, #32
 800a084:	d011      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a086:	e01a      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a088:	4b10      	ldr	r3, [pc, #64]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	4a0f      	ldr	r2, [pc, #60]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a08e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a092:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a094:	e01d      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a09a:	3308      	adds	r3, #8
 800a09c:	4618      	mov	r0, r3
 800a09e:	f002 f9ed 	bl	800c47c <RCCEx_PLL2_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a0a8:	e013      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a0aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a0ae:	332c      	adds	r3, #44	; 0x2c
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f002 fa7b 	bl	800c5ac <RCCEx_PLL3_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a0bc:	e009      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a0c4:	e005      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800a0c6:	bf00      	nop
 800a0c8:	e003      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a0ca:	bf00      	nop
 800a0cc:	46020c00 	.word	0x46020c00
        break;
 800a0d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10d      	bne.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a0da:	4bb6      	ldr	r3, [pc, #728]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a0dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0e0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800a0e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ec:	4ab1      	ldr	r2, [pc, #708]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a0f4:	e003      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a0fa:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a0fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a10a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10c:	2300      	movs	r3, #0
 800a10e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a110:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a114:	460b      	mov	r3, r1
 800a116:	4313      	orrs	r3, r2
 800a118:	d053      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a11a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a126:	d033      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a12c:	d82c      	bhi.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a132:	d02f      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a138:	d826      	bhi.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a13a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a13e:	d008      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a144:	d820      	bhi.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a14e:	d011      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800a150:	e01a      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a152:	4b98      	ldr	r3, [pc, #608]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	4a97      	ldr	r2, [pc, #604]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a15c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a15e:	e01a      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a164:	3308      	adds	r3, #8
 800a166:	4618      	mov	r0, r3
 800a168:	f002 f988 	bl	800c47c <RCCEx_PLL2_Config>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a172:	e010      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a178:	332c      	adds	r3, #44	; 0x2c
 800a17a:	4618      	mov	r0, r3
 800a17c:	f002 fa16 	bl	800c5ac <RCCEx_PLL3_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a186:	e006      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a18e:	e002      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800a194:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a196:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10d      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a19e:	4b85      	ldr	r3, [pc, #532]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a1a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a1a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a1a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1b0:	4a80      	ldr	r2, [pc, #512]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a1b8:	e003      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ba:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a1be:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a1c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a1ce:	663b      	str	r3, [r7, #96]	; 0x60
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	667b      	str	r3, [r7, #100]	; 0x64
 800a1d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	d046      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a1de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a1ea:	d028      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a1ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a1f0:	d821      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a1f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1f6:	d022      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a1f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1fc:	d81b      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a1fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a202:	d01c      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a208:	d815      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a20a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a20e:	d008      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a214:	d80f      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d011      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21e:	d00e      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a220:	e009      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a226:	3308      	adds	r3, #8
 800a228:	4618      	mov	r0, r3
 800a22a:	f002 f927 	bl	800c47c <RCCEx_PLL2_Config>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a234:	e004      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a23c:	e000      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800a23e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a240:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10d      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a248:	4b5a      	ldr	r3, [pc, #360]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a24a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a24e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a25a:	4a56      	ldr	r2, [pc, #344]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a25c:	430b      	orrs	r3, r1
 800a25e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a262:	e003      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a264:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a268:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a26c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a278:	65bb      	str	r3, [r7, #88]	; 0x58
 800a27a:	2300      	movs	r3, #0
 800a27c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a27e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d03f      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a290:	2b04      	cmp	r3, #4
 800a292:	d81e      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a294:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2db 	.word	0x0800a2db
 800a2a0:	0800a2b1 	.word	0x0800a2b1
 800a2a4:	0800a2bf 	.word	0x0800a2bf
 800a2a8:	0800a2db 	.word	0x0800a2db
 800a2ac:	0800a2db 	.word	0x0800a2db
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2b0:	4b40      	ldr	r3, [pc, #256]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	4a3f      	ldr	r2, [pc, #252]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a2b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a2bc:	e00e      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2c2:	332c      	adds	r3, #44	; 0x2c
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f002 f971 	bl	800c5ac <RCCEx_PLL3_Config>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a2d0:	e004      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a2d8:	e000      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800a2da:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a2dc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10d      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a2e4:	4b33      	ldr	r3, [pc, #204]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a2e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a2ea:	f023 0107 	bic.w	r1, r3, #7
 800a2ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	4a2f      	ldr	r2, [pc, #188]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a2fe:	e003      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a300:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a304:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a314:	653b      	str	r3, [r7, #80]	; 0x50
 800a316:	2300      	movs	r3, #0
 800a318:	657b      	str	r3, [r7, #84]	; 0x54
 800a31a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a31e:	460b      	mov	r3, r1
 800a320:	4313      	orrs	r3, r2
 800a322:	d04d      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800a324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a330:	d028      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800a332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a336:	d821      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a33c:	d024      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a33e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a342:	d81b      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a348:	d00e      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800a34a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a34e:	d815      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d01b      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x618>
 800a354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a358:	d110      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a35a:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	4a15      	ldr	r2, [pc, #84]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a364:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a366:	e012      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a36c:	332c      	adds	r3, #44	; 0x2c
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 f91c 	bl	800c5ac <RCCEx_PLL3_Config>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a37a:	e008      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a382:	e004      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800a384:	bf00      	nop
 800a386:	e002      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800a388:	bf00      	nop
 800a38a:	e000      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800a38c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a38e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a392:	2b00      	cmp	r3, #0
 800a394:	d110      	bne.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a39c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a3a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3a8:	4a02      	ldr	r2, [pc, #8]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a3b0:	e006      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a3b2:	bf00      	nop
 800a3b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a3bc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a3cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f000 80b5 	beq.w	800a548 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3e4:	4b9d      	ldr	r3, [pc, #628]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d113      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3f2:	4b9a      	ldr	r3, [pc, #616]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a3f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3f8:	4a98      	ldr	r2, [pc, #608]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a3fa:	f043 0304 	orr.w	r3, r3, #4
 800a3fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a402:	4b96      	ldr	r3, [pc, #600]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 800a414:	2301      	movs	r3, #1
 800a416:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a41a:	4b91      	ldr	r3, [pc, #580]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	4a90      	ldr	r2, [pc, #576]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a426:	f7fb fc53 	bl	8005cd0 <HAL_GetTick>
 800a42a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a42e:	e00b      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a430:	f7fb fc4e 	bl	8005cd0 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d903      	bls.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a446:	e005      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a448:	4b85      	ldr	r3, [pc, #532]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0ed      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800a454:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d165      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a45c:	4b7f      	ldr	r3, [pc, #508]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a45e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d023      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x746>
 800a472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a476:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800a47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a47e:	4293      	cmp	r3, r2
 800a480:	d01b      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a482:	4b76      	ldr	r3, [pc, #472]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a48c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a490:	4b72      	ldr	r3, [pc, #456]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a496:	4a71      	ldr	r2, [pc, #452]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a49c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4a0:	4b6e      	ldr	r3, [pc, #440]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a4a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4a6:	4a6d      	ldr	r2, [pc, #436]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a4b0:	4a6a      	ldr	r2, [pc, #424]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d019      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c6:	f7fb fc03 	bl	8005cd0 <HAL_GetTick>
 800a4ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ce:	e00d      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d0:	f7fb fbfe 	bl	8005cd0 <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4da:	1ad2      	subs	r2, r2, r3
 800a4dc:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d903      	bls.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 800a4ea:	e006      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ec:	4b5b      	ldr	r3, [pc, #364]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a4ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0ea      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800a4fa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10d      	bne.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a502:	4b56      	ldr	r3, [pc, #344]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a508:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a50c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a510:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a514:	4a51      	ldr	r2, [pc, #324]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a516:	430b      	orrs	r3, r1
 800a518:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a51c:	e008      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a51e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a522:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800a526:	e003      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a528:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a52c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a530:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800a534:	2b01      	cmp	r3, #1
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a538:	4b48      	ldr	r3, [pc, #288]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a53a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a53e:	4a47      	ldr	r2, [pc, #284]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a540:	f023 0304 	bic.w	r3, r3, #4
 800a544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a554:	643b      	str	r3, [r7, #64]	; 0x40
 800a556:	2300      	movs	r3, #0
 800a558:	647b      	str	r3, [r7, #68]	; 0x44
 800a55a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a55e:	460b      	mov	r3, r1
 800a560:	4313      	orrs	r3, r2
 800a562:	d042      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a56c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a570:	d022      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800a572:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a576:	d81b      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a57c:	d011      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800a57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a582:	d815      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d019      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x848>
 800a588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a58c:	d110      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a58e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a592:	3308      	adds	r3, #8
 800a594:	4618      	mov	r0, r3
 800a596:	f001 ff71 	bl	800c47c <RCCEx_PLL2_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a5a0:	e00d      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a2:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	4a2d      	ldr	r2, [pc, #180]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a5a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a5ae:	e006      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a5b6:	e002      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800a5b8:	bf00      	nop
 800a5ba:	e000      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800a5bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a5be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10d      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a5c6:	4b25      	ldr	r3, [pc, #148]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5cc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a5d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5d8:	4a20      	ldr	r2, [pc, #128]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a5da:	430b      	orrs	r3, r1
 800a5dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5e0:	e003      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a5e6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a600:	460b      	mov	r3, r1
 800a602:	4313      	orrs	r3, r2
 800a604:	d032      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a60a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a612:	d00b      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a618:	d804      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a622:	d007      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a62a:	e004      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800a62c:	bf00      	nop
 800a62e:	e002      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800a630:	bf00      	nop
 800a632:	e000      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800a634:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a636:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d112      	bne.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a64c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a650:	4a02      	ldr	r2, [pc, #8]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a652:	430b      	orrs	r3, r1
 800a654:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a658:	e008      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800a65a:	bf00      	nop
 800a65c:	46020c00 	.word	0x46020c00
 800a660:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a664:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a668:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a66c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a678:	633b      	str	r3, [r7, #48]	; 0x30
 800a67a:	2300      	movs	r3, #0
 800a67c:	637b      	str	r3, [r7, #52]	; 0x34
 800a67e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a682:	460b      	mov	r3, r1
 800a684:	4313      	orrs	r3, r2
 800a686:	d019      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a68c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a694:	d105      	bne.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a696:	4b88      	ldr	r3, [pc, #544]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	4a87      	ldr	r2, [pc, #540]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a6a2:	4b85      	ldr	r3, [pc, #532]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a6a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a6a8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a6ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6b4:	4a80      	ldr	r2, [pc, #512]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a6bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a6c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d00c      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a6d8:	4b77      	ldr	r3, [pc, #476]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a6da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6ea:	4973      	ldr	r1, [pc, #460]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a6f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a6fe:	623b      	str	r3, [r7, #32]
 800a700:	2300      	movs	r3, #0
 800a702:	627b      	str	r3, [r7, #36]	; 0x24
 800a704:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a708:	460b      	mov	r3, r1
 800a70a:	4313      	orrs	r3, r2
 800a70c:	d00c      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a70e:	4b6a      	ldr	r3, [pc, #424]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a71c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a720:	4965      	ldr	r1, [pc, #404]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a722:	4313      	orrs	r3, r2
 800a724:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a73e:	460b      	mov	r3, r1
 800a740:	4313      	orrs	r3, r2
 800a742:	d00c      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a744:	4b5c      	ldr	r3, [pc, #368]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a74a:	f023 0218 	bic.w	r2, r3, #24
 800a74e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a756:	4958      	ldr	r1, [pc, #352]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a75e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a76a:	613b      	str	r3, [r7, #16]
 800a76c:	2300      	movs	r3, #0
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a774:	460b      	mov	r3, r1
 800a776:	4313      	orrs	r3, r2
 800a778:	d032      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a77a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a77e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a786:	d105      	bne.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a788:	4b4b      	ldr	r3, [pc, #300]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	4a4a      	ldr	r2, [pc, #296]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a78e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a792:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a79c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7a0:	d108      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a7a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 fe67 	bl	800c47c <RCCEx_PLL2_Config>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 800a7b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10d      	bne.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a7bc:	4b3e      	ldr	r3, [pc, #248]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a7be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a7c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7ce:	493a      	ldr	r1, [pc, #232]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a7d6:	e003      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a7dc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a7e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a7ec:	60bb      	str	r3, [r7, #8]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	d03a      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a7fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a808:	d00e      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80e:	d815      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d017      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800a814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a818:	d110      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a81a:	4b27      	ldr	r3, [pc, #156]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81e:	4a26      	ldr	r2, [pc, #152]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a824:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a826:	e00e      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a82c:	3308      	adds	r3, #8
 800a82e:	4618      	mov	r0, r3
 800a830:	f001 fe24 	bl	800c47c <RCCEx_PLL2_Config>
 800a834:	4603      	mov	r3, r0
 800a836:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a83a:	e004      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800a842:	e000      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800a844:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a846:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10d      	bne.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a84e:	4b1a      	ldr	r3, [pc, #104]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a854:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a860:	4915      	ldr	r1, [pc, #84]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a862:	4313      	orrs	r3, r2
 800a864:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a868:	e003      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800a86e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	2300      	movs	r3, #0
 800a882:	607b      	str	r3, [r7, #4]
 800a884:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a888:	460b      	mov	r3, r1
 800a88a:	4313      	orrs	r3, r2
 800a88c:	d00c      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a88e:	4b0a      	ldr	r3, [pc, #40]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a894:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a89c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8a0:	4905      	ldr	r1, [pc, #20]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a8a8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	37e0      	adds	r7, #224	; 0xe0
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8b6:	bf00      	nop
 800a8b8:	46020c00 	.word	0x46020c00

0800a8bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b089      	sub	sp, #36	; 0x24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a8c4:	4ba6      	ldr	r3, [pc, #664]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8cc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a8ce:	4ba4      	ldr	r3, [pc, #656]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a8d8:	4ba1      	ldr	r3, [pc, #644]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8dc:	0a1b      	lsrs	r3, r3, #8
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a8e6:	4b9e      	ldr	r3, [pc, #632]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a8f2:	4b9b      	ldr	r3, [pc, #620]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b03      	cmp	r3, #3
 800a912:	d062      	beq.n	800a9da <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b03      	cmp	r3, #3
 800a918:	f200 8081 	bhi.w	800aa1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d024      	beq.n	800a96c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d17a      	bne.n	800aa1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ab64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b89      	ldr	r3, [pc, #548]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a94a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a94e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ab68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a96a:	e08f      	b.n	800aa8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a96c:	4b7c      	ldr	r3, [pc, #496]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a978:	4b79      	ldr	r3, [pc, #484]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	0f1b      	lsrs	r3, r3, #28
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	e006      	b.n	800a992 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a984:	4b76      	ldr	r3, [pc, #472]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	0f1b      	lsrs	r3, r3, #28
 800a98e:	f003 030f 	and.w	r3, r3, #15
 800a992:	4a76      	ldr	r2, [pc, #472]	; (800ab6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a998:	ee07 3a90 	vmov	s15, r3
 800a99c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	ee07 3a90 	vmov	s15, r3
 800a9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9bc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ab68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a9c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9d8:	e058      	b.n	800aa8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e4:	eddf 6a62 	vldr	s13, [pc, #392]	; 800ab70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 800a9e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ec:	4b5c      	ldr	r3, [pc, #368]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f4:	ee07 3a90 	vmov	s15, r3
 800a9f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa00:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ab68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800aa04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aa08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aa14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa1c:	e036      	b.n	800aa8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aa1e:	4b50      	ldr	r3, [pc, #320]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800aa2a:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	0f1b      	lsrs	r3, r3, #28
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	e006      	b.n	800aa44 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800aa36:	4b4a      	ldr	r3, [pc, #296]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa3c:	041b      	lsls	r3, r3, #16
 800aa3e:	0f1b      	lsrs	r3, r3, #28
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	4a49      	ldr	r2, [pc, #292]	; (800ab6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800aa46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa6e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ab68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800aa8c:	4b34      	ldr	r3, [pc, #208]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d017      	beq.n	800aac8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aa98:	4b31      	ldr	r3, [pc, #196]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9c:	0a5b      	lsrs	r3, r3, #9
 800aa9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800aaaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aabe:	ee17 2a90 	vmov	r2, s15
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	e002      	b.n	800aace <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aada:	4b21      	ldr	r3, [pc, #132]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800aaec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aaf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab00:	ee17 2a90 	vmov	r2, s15
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
 800ab08:	e002      	b.n	800ab10 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ab10:	4b13      	ldr	r3, [pc, #76]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d017      	beq.n	800ab4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab1c:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab20:	0e1b      	lsrs	r3, r3, #24
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ab2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab42:	ee17 2a90 	vmov	r2, s15
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ab4a:	e002      	b.n	800ab52 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
}
 800ab52:	bf00      	nop
 800ab54:	3724      	adds	r7, #36	; 0x24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	46020c00 	.word	0x46020c00
 800ab64:	4b742400 	.word	0x4b742400
 800ab68:	46000000 	.word	0x46000000
 800ab6c:	08022aa8 	.word	0x08022aa8
 800ab70:	4c189680 	.word	0x4c189680

0800ab74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b089      	sub	sp, #36	; 0x24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ab7c:	4ba6      	ldr	r3, [pc, #664]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab84:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ab86:	4ba4      	ldr	r3, [pc, #656]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ab90:	4ba1      	ldr	r3, [pc, #644]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	0a1b      	lsrs	r3, r3, #8
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ab9e:	4b9e      	ldr	r3, [pc, #632]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	091b      	lsrs	r3, r3, #4
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800abaa:	4b9b      	ldr	r3, [pc, #620]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	08db      	lsrs	r3, r3, #3
 800abb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	fb02 f303 	mul.w	r3, r2, r3
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d062      	beq.n	800ac92 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f200 8081 	bhi.w	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d024      	beq.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d17a      	bne.n	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ae1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800abee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf2:	4b89      	ldr	r3, [pc, #548]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac06:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ac0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac22:	e08f      	b.n	800ad44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ac24:	4b7c      	ldr	r3, [pc, #496]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ac30:	4b79      	ldr	r3, [pc, #484]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0f1b      	lsrs	r3, r3, #28
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	e006      	b.n	800ac4a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ac3c:	4b76      	ldr	r3, [pc, #472]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac42:	041b      	lsls	r3, r3, #16
 800ac44:	0f1b      	lsrs	r3, r3, #28
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	4a76      	ldr	r2, [pc, #472]	; (800ae24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ac4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac70:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac74:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ac78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac90:	e058      	b.n	800ad44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9c:	eddf 6a62 	vldr	s13, [pc, #392]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 800aca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca4:	4b5c      	ldr	r3, [pc, #368]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800acb4:	ed97 6a02 	vldr	s12, [r7, #8]
 800acb8:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800acbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800acc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800acc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800accc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd4:	e036      	b.n	800ad44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800acd6:	4b50      	ldr	r3, [pc, #320]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ace2:	4b4d      	ldr	r3, [pc, #308]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	0f1b      	lsrs	r3, r3, #28
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	e006      	b.n	800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800acee:	4b4a      	ldr	r3, [pc, #296]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800acf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acf4:	041b      	lsls	r3, r3, #16
 800acf6:	0f1b      	lsrs	r3, r3, #28
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	4a49      	ldr	r2, [pc, #292]	; (800ae24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800acfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	ee07 3a90 	vmov	s15, r3
 800ad10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	ee07 3a90 	vmov	s15, r3
 800ad1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad26:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ad2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ad3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad42:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ad44:	4b34      	ldr	r3, [pc, #208]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d017      	beq.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad50:	4b31      	ldr	r3, [pc, #196]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad54:	0a5b      	lsrs	r3, r3, #9
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ad62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad76:	ee17 2a90 	vmov	r2, s15
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	e002      	b.n	800ad86 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d017      	beq.n	800adc2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad92:	4b21      	ldr	r3, [pc, #132]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ada4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800adac:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb8:	ee17 2a90 	vmov	r2, s15
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	605a      	str	r2, [r3, #4]
 800adc0:	e002      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800adc8:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d017      	beq.n	800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800add4:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800add6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add8:	0e1b      	lsrs	r3, r3, #24
 800adda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ade6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800adee:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adfa:	ee17 2a90 	vmov	r2, s15
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae02:	e002      	b.n	800ae0a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	609a      	str	r2, [r3, #8]
}
 800ae0a:	bf00      	nop
 800ae0c:	3724      	adds	r7, #36	; 0x24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	46020c00 	.word	0x46020c00
 800ae1c:	4b742400 	.word	0x4b742400
 800ae20:	46000000 	.word	0x46000000
 800ae24:	08022aa8 	.word	0x08022aa8
 800ae28:	4c189680 	.word	0x4c189680

0800ae2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b089      	sub	sp, #36	; 0x24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ae34:	4ba6      	ldr	r3, [pc, #664]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ae3e:	4ba4      	ldr	r3, [pc, #656]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ae48:	4ba1      	ldr	r3, [pc, #644]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	3301      	adds	r3, #1
 800ae54:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ae56:	4b9e      	ldr	r3, [pc, #632]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	091b      	lsrs	r3, r3, #4
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ae62:	4b9b      	ldr	r3, [pc, #620]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	d062      	beq.n	800af4a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	f200 8081 	bhi.w	800af8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d024      	beq.n	800aedc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d17a      	bne.n	800af8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800aea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeaa:	4b89      	ldr	r3, [pc, #548]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aeba:	ed97 6a02 	vldr	s12, [r7, #8]
 800aebe:	eddf 5a86 	vldr	s11, [pc, #536]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aeca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aece:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800aeda:	e08f      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aedc:	4b7c      	ldr	r3, [pc, #496]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800aee8:	4b79      	ldr	r3, [pc, #484]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	0f1b      	lsrs	r3, r3, #28
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	e006      	b.n	800af02 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800aef4:	4b76      	ldr	r3, [pc, #472]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aefa:	041b      	lsls	r3, r3, #16
 800aefc:	0f1b      	lsrs	r3, r3, #28
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	4a76      	ldr	r2, [pc, #472]	; (800b0dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800af04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af28:	ed97 6a02 	vldr	s12, [r7, #8]
 800af2c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800af30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af48:	e058      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	ee07 3a90 	vmov	s15, r3
 800af50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af54:	eddf 6a62 	vldr	s13, [pc, #392]	; 800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 800af58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5c:	4b5c      	ldr	r3, [pc, #368]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800af6c:	ed97 6a02 	vldr	s12, [r7, #8]
 800af70:	eddf 5a59 	vldr	s11, [pc, #356]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800af74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800af7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af8c:	e036      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af8e:	4b50      	ldr	r3, [pc, #320]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d005      	beq.n	800afa6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800af9a:	4b4d      	ldr	r3, [pc, #308]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	0f1b      	lsrs	r3, r3, #28
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	e006      	b.n	800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800afa6:	4b4a      	ldr	r3, [pc, #296]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afac:	041b      	lsls	r3, r3, #16
 800afae:	0f1b      	lsrs	r3, r3, #28
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	4a49      	ldr	r2, [pc, #292]	; (800b0dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800afb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	ee07 3a90 	vmov	s15, r3
 800afc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afda:	ed97 6a02 	vldr	s12, [r7, #8]
 800afde:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800affa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800affc:	4b34      	ldr	r3, [pc, #208]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d017      	beq.n	800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b008:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00c:	0a5b      	lsrs	r3, r3, #9
 800b00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b01a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b01e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b022:	edd7 6a07 	vldr	s13, [r7, #28]
 800b026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02e:	ee17 2a90 	vmov	r2, s15
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	e002      	b.n	800b03e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b03e:	4b24      	ldr	r3, [pc, #144]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d017      	beq.n	800b07a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b04a:	4b21      	ldr	r3, [pc, #132]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04e:	0c1b      	lsrs	r3, r3, #16
 800b050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b060:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b064:	edd7 6a07 	vldr	s13, [r7, #28]
 800b068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b070:	ee17 2a90 	vmov	r2, s15
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	605a      	str	r2, [r3, #4]
 800b078:	e002      	b.n	800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b080:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d017      	beq.n	800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b08c:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b090:	0e1b      	lsrs	r3, r3, #24
 800b092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b09e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b2:	ee17 2a90 	vmov	r2, s15
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0ba:	e002      	b.n	800b0c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
}
 800b0c2:	bf00      	nop
 800b0c4:	3724      	adds	r7, #36	; 0x24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	46020c00 	.word	0x46020c00
 800b0d4:	4b742400 	.word	0x4b742400
 800b0d8:	46000000 	.word	0x46000000
 800b0dc:	08022aa8 	.word	0x08022aa8
 800b0e0:	4c189680 	.word	0x4c189680

0800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08e      	sub	sp, #56	; 0x38
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	d145      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b0fa:	4baa      	ldr	r3, [pc, #680]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b0fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b104:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b106:	4ba7      	ldr	r3, [pc, #668]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b02      	cmp	r3, #2
 800b112:	d108      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b11a:	d104      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b11c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
 800b122:	f001 b98b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b126:	4b9f      	ldr	r3, [pc, #636]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b134:	d114      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b13c:	d110      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b13e:	4b99      	ldr	r3, [pc, #612]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b14c:	d103      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b14e:	23fa      	movs	r3, #250	; 0xfa
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b152:	f001 b973 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800b156:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b15a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b15c:	f001 b96e 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b160:	4b90      	ldr	r3, [pc, #576]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b16c:	d107      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b174:	d103      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b176:	4b8c      	ldr	r3, [pc, #560]	; (800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
 800b17a:	f001 b95f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
 800b182:	f001 b95b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b18e:	430b      	orrs	r3, r1
 800b190:	d151      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b192:	4b84      	ldr	r3, [pc, #528]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b198:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2b80      	cmp	r3, #128	; 0x80
 800b1a2:	d035      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	2b80      	cmp	r3, #128	; 0x80
 800b1a8:	d841      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	2b60      	cmp	r3, #96	; 0x60
 800b1ae:	d02a      	beq.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b2:	2b60      	cmp	r3, #96	; 0x60
 800b1b4:	d83b      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	2b40      	cmp	r3, #64	; 0x40
 800b1ba:	d009      	beq.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	2b40      	cmp	r3, #64	; 0x40
 800b1c0:	d835      	bhi.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00c      	beq.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d012      	beq.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b1ce:	e02e      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff fb71 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1de:	f001 b92d 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e2:	f107 0318 	add.w	r3, r7, #24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fcc4 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1f0:	f001 b924 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f4:	f107 030c 	add.w	r3, r7, #12
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fe17 	bl	800ae2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b202:	f001 b91b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b206:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b20a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b20c:	f001 b916 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b210:	4b64      	ldr	r3, [pc, #400]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b21c:	d103      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b21e:	4b63      	ldr	r3, [pc, #396]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b222:	f001 b90b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b22a:	f001 b907 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :
      {
        frequency = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b232:	f001 b903 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b23e:	430b      	orrs	r3, r1
 800b240:	d158      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b242:	4b58      	ldr	r3, [pc, #352]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b24c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b254:	d03b      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b25c:	d846      	bhi.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b264:	d02e      	beq.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b26c:	d83e      	bhi.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b274:	d00b      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b27c:	d836      	bhi.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00d      	beq.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b28a:	d012      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b28c:	e02e      	b.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fb12 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b29c:	f001 b8ce 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2a0:	f107 0318 	add.w	r3, r7, #24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fc65 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2ae:	f001 b8c5 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2b2:	f107 030c 	add.w	r3, r7, #12
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fdb8 	bl	800ae2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2c0:	f001 b8bc 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b2c4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2ca:	f001 b8b7 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2ce:	4b35      	ldr	r3, [pc, #212]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2da:	d103      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b2dc:	4b33      	ldr	r3, [pc, #204]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b2de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b2e0:	f001 b8ac 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2e8:	f001 b8a8 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2f0:	f001 b8a4 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f8:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	d16e      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b300:	4b28      	ldr	r3, [pc, #160]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b306:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b30a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b312:	d034      	beq.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b31a:	d85c      	bhi.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b322:	d00b      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b32a:	d854      	bhi.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d016      	beq.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b338:	d009      	beq.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b33a:	e04c      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff fabb 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b34a:	f001 b877 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b34e:	f107 0318 	add.w	r3, r7, #24
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fc0e 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b35c:	f001 b86e 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b360:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b36c:	d103      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b372:	f001 b863 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b37a:	f001 b85f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b37e:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b20      	cmp	r3, #32
 800b388:	d121      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b38a:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00e      	beq.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800b396:	4b03      	ldr	r3, [pc, #12]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	0e1b      	lsrs	r3, r3, #24
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	e00f      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b3a2:	bf00      	nop
 800b3a4:	46020c00 	.word	0x46020c00
 800b3a8:	001312d0 	.word	0x001312d0
 800b3ac:	00f42400 	.word	0x00f42400
 800b3b0:	02dc6c00 	.word	0x02dc6c00
 800b3b4:	4ba7      	ldr	r3, [pc, #668]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b3b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b3ba:	041b      	lsls	r3, r3, #16
 800b3bc:	0e1b      	lsrs	r3, r3, #24
 800b3be:	f003 030f 	and.w	r3, r3, #15
 800b3c2:	4aa5      	ldr	r2, [pc, #660]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3ca:	f001 b837 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3d2:	f001 b833 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3da:	f001 b82f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e2:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800b3e6:	430b      	orrs	r3, r1
 800b3e8:	d17f      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3ea:	4b9a      	ldr	r3, [pc, #616]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b3ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b3f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d165      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b3fc:	4b95      	ldr	r3, [pc, #596]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b3fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b402:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b406:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b40e:	d034      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b416:	d853      	bhi.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b41e:	d00b      	beq.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b426:	d84b      	bhi.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d016      	beq.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b434:	d009      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b436:	e043      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff fa3d 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b446:	f000 bff9 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b44a:	f107 0318 	add.w	r3, r7, #24
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fb90 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b458:	f000 bff0 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b45c:	4b7d      	ldr	r3, [pc, #500]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b468:	d103      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800b46a:	4b7c      	ldr	r3, [pc, #496]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b46e:	f000 bfe5 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b476:	f000 bfe1 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b47a:	4b76      	ldr	r3, [pc, #472]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b20      	cmp	r3, #32
 800b484:	d118      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b486:	4b73      	ldr	r3, [pc, #460]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d005      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b492:	4b70      	ldr	r3, [pc, #448]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	0e1b      	lsrs	r3, r3, #24
 800b498:	f003 030f 	and.w	r3, r3, #15
 800b49c:	e006      	b.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800b49e:	4b6d      	ldr	r3, [pc, #436]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b4a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4a4:	041b      	lsls	r3, r3, #16
 800b4a6:	0e1b      	lsrs	r3, r3, #24
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	4a6a      	ldr	r2, [pc, #424]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b4b4:	f000 bfc2 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b4bc:	f000 bfbe 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        default :
        {
          frequency = 0U;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b4c4:	f000 bfba 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4ce:	d108      	bne.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff f9f1 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4de:	f000 bfad 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else
    {
      frequency = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e6:	f000 bfa9 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ee:	1e51      	subs	r1, r2, #1
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	d136      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b4f4:	4b57      	ldr	r3, [pc, #348]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b4f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	2b00      	cmp	r3, #0
 800b504:	d104      	bne.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b506:	f7fe fb5b 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800b50a:	6378      	str	r0, [r7, #52]	; 0x34
 800b50c:	f000 bf96 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	2b01      	cmp	r3, #1
 800b514:	d104      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b516:	f7fe fa1f 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b51a:	6378      	str	r0, [r7, #52]	; 0x34
 800b51c:	f000 bf8e 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b520:	4b4c      	ldr	r3, [pc, #304]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b52c:	d106      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2b02      	cmp	r3, #2
 800b532:	d103      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800b534:	4b4a      	ldr	r3, [pc, #296]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b536:	637b      	str	r3, [r7, #52]	; 0x34
 800b538:	f000 bf80 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b53c:	4b45      	ldr	r3, [pc, #276]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b53e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b02      	cmp	r3, #2
 800b548:	d107      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	d104      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800b550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
 800b556:	f000 bf71 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
 800b55e:	f000 bf6d 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b566:	1e91      	subs	r1, r2, #2
 800b568:	430b      	orrs	r3, r1
 800b56a:	d136      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b56c:	4b39      	ldr	r3, [pc, #228]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b56e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b572:	f003 030c 	and.w	r3, r3, #12
 800b576:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d104      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b57e:	f7fe fb0b 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800b582:	6378      	str	r0, [r7, #52]	; 0x34
 800b584:	f000 bf5a 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d104      	bne.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b58e:	f7fe f9e3 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b592:	6378      	str	r0, [r7, #52]	; 0x34
 800b594:	f000 bf52 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b598:	4b2e      	ldr	r3, [pc, #184]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5a4:	d106      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d103      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800b5ac:	4b2c      	ldr	r3, [pc, #176]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b0:	f000 bf44 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b5b4:	4b27      	ldr	r3, [pc, #156]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b5b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d107      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	2b0c      	cmp	r3, #12
 800b5c6:	d104      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800b5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ce:	f000 bf35 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5d6:	f000 bf31 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5de:	1f11      	subs	r1, r2, #4
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	d13f      	bne.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b5e4:	4b1b      	ldr	r3, [pc, #108]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b5e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d104      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5f6:	f7fe facf 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800b5fa:	6378      	str	r0, [r7, #52]	; 0x34
 800b5fc:	f000 bf1e 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	2b10      	cmp	r3, #16
 800b604:	d104      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b606:	f7fe f9a7 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b60a:	6378      	str	r0, [r7, #52]	; 0x34
 800b60c:	f000 bf16 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b610:	4b10      	ldr	r3, [pc, #64]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b61c:	d106      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	2b20      	cmp	r3, #32
 800b622:	d103      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
 800b628:	f000 bf08 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800b62e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b02      	cmp	r3, #2
 800b638:	d107      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	2b30      	cmp	r3, #48	; 0x30
 800b63e:	d104      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800b640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b644:	637b      	str	r3, [r7, #52]	; 0x34
 800b646:	f000 bef9 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	637b      	str	r3, [r7, #52]	; 0x34
 800b64e:	f000 bef5 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800b652:	bf00      	nop
 800b654:	46020c00 	.word	0x46020c00
 800b658:	08022aa8 	.word	0x08022aa8
 800b65c:	02dc6c00 	.word	0x02dc6c00
 800b660:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b664:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b668:	f1a2 0108 	sub.w	r1, r2, #8
 800b66c:	430b      	orrs	r3, r1
 800b66e:	d136      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b670:	4ba4      	ldr	r3, [pc, #656]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b67a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d104      	bne.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b682:	f7fe fa89 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800b686:	6378      	str	r0, [r7, #52]	; 0x34
 800b688:	f000 bed8 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	2b40      	cmp	r3, #64	; 0x40
 800b690:	d104      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b692:	f7fe f961 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b696:	6378      	str	r0, [r7, #52]	; 0x34
 800b698:	f000 bed0 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b69c:	4b99      	ldr	r3, [pc, #612]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a8:	d106      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	2b80      	cmp	r3, #128	; 0x80
 800b6ae:	d103      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800b6b0:	4b95      	ldr	r3, [pc, #596]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b4:	f000 bec2 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b6b8:	4b92      	ldr	r3, [pc, #584]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d107      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	2bc0      	cmp	r3, #192	; 0xc0
 800b6ca:	d104      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800b6cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b6d2:	f000 beb3 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6da:	f000 beaf 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e2:	f1a2 0110 	sub.w	r1, r2, #16
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	d139      	bne.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b6ea:	4b86      	ldr	r3, [pc, #536]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b6ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b6fc:	f7fe fa4c 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800b700:	6378      	str	r0, [r7, #52]	; 0x34
 800b702:	f000 be9b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70c:	d104      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b70e:	f7fe f923 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b712:	6378      	str	r0, [r7, #52]	; 0x34
 800b714:	f000 be92 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b718:	4b7a      	ldr	r3, [pc, #488]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b724:	d107      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72c:	d103      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800b72e:	4b76      	ldr	r3, [pc, #472]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
 800b732:	f000 be83 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b736:	4b73      	ldr	r3, [pc, #460]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b73c:	f003 0302 	and.w	r3, r3, #2
 800b740:	2b02      	cmp	r3, #2
 800b742:	d108      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b74a:	d104      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800b74c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
 800b752:	f000 be73 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
 800b75a:	f000 be6f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b762:	f1a2 0120 	sub.w	r1, r2, #32
 800b766:	430b      	orrs	r3, r1
 800b768:	d158      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b76a:	4b66      	ldr	r3, [pc, #408]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b76c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b770:	f003 0307 	and.w	r3, r3, #7
 800b774:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b77c:	f7fe fa34 	bl	8009be8 <HAL_RCC_GetPCLK3Freq>
 800b780:	6378      	str	r0, [r7, #52]	; 0x34
 800b782:	f000 be5b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d104      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b78c:	f7fe f8e4 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b790:	6378      	str	r0, [r7, #52]	; 0x34
 800b792:	f000 be53 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b796:	4b5b      	ldr	r3, [pc, #364]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b79e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7a2:	d106      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d103      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800b7aa:	4b57      	ldr	r3, [pc, #348]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ae:	f000 be45 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b7b2:	4b54      	ldr	r3, [pc, #336]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b7b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7b8:	f003 0302 	and.w	r3, r3, #2
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d107      	bne.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d104      	bne.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800b7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b7cc:	f000 be36 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b7d0:	4b4c      	ldr	r3, [pc, #304]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b20      	cmp	r3, #32
 800b7da:	d11b      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d118      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7e2:	4b48      	ldr	r3, [pc, #288]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800b7ee:	4b45      	ldr	r3, [pc, #276]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	0e1b      	lsrs	r3, r3, #24
 800b7f4:	f003 030f 	and.w	r3, r3, #15
 800b7f8:	e006      	b.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b7fa:	4b42      	ldr	r3, [pc, #264]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b7fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	0e1b      	lsrs	r3, r3, #24
 800b804:	f003 030f 	and.w	r3, r3, #15
 800b808:	4a40      	ldr	r2, [pc, #256]	; (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800b80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b80e:	637b      	str	r3, [r7, #52]	; 0x34
 800b810:	f000 be14 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	637b      	str	r3, [r7, #52]	; 0x34
 800b818:	f000 be10 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b820:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b824:	430b      	orrs	r3, r1
 800b826:	d175      	bne.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b828:	4b36      	ldr	r3, [pc, #216]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b82a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b82e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b832:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83a:	d104      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b83c:	f7fe f88c 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800b840:	6378      	str	r0, [r7, #52]	; 0x34
 800b842:	f000 bdfb 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b84c:	d108      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b84e:	f107 0318 	add.w	r3, r7, #24
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff f98e 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
 800b85c:	f000 bdee 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	2b00      	cmp	r3, #0
 800b864:	d104      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b866:	f7fe f97d 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 800b86a:	6378      	str	r0, [r7, #52]	; 0x34
 800b86c:	f000 bde6 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b876:	d122      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b878:	4b22      	ldr	r3, [pc, #136]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0320 	and.w	r3, r3, #32
 800b880:	2b20      	cmp	r3, #32
 800b882:	d118      	bne.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b884:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800b890:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	0e1b      	lsrs	r3, r3, #24
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	e006      	b.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b89c:	4b19      	ldr	r3, [pc, #100]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b89e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b8a2:	041b      	lsls	r3, r3, #16
 800b8a4:	0e1b      	lsrs	r3, r3, #24
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	4a18      	ldr	r2, [pc, #96]	; (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800b8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b2:	f000 bdc3 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ba:	f000 bdbf 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b8be:	4b11      	ldr	r3, [pc, #68]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ca:	d107      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8d2:	d103      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800b8d4:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 800b8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d8:	f000 bdb0 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8e8:	d107      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f0:	d103      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8f6:	f000 bda1 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8fe:	f000 bd9d 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800b902:	bf00      	nop
 800b904:	46020c00 	.word	0x46020c00
 800b908:	00f42400 	.word	0x00f42400
 800b90c:	08022aa8 	.word	0x08022aa8
 800b910:	02625a00 	.word	0x02625a00
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b918:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b91c:	430b      	orrs	r3, r1
 800b91e:	d158      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b920:	4bad      	ldr	r3, [pc, #692]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d84b      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b932:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800b934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b938:	0800b971 	.word	0x0800b971
 800b93c:	0800b94d 	.word	0x0800b94d
 800b940:	0800b95f 	.word	0x0800b95f
 800b944:	0800b97b 	.word	0x0800b97b
 800b948:	0800b985 	.word	0x0800b985
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b94c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe ffb3 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b95a:	f000 bd6f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fa62 	bl	800ae2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b96c:	f000 bd66 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b970:	f7fe f8f8 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 800b974:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b976:	f000 bd61 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b97a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b97e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b980:	f000 bd5c 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b984:	4b94      	ldr	r3, [pc, #592]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0320 	and.w	r3, r3, #32
 800b98c:	2b20      	cmp	r3, #32
 800b98e:	d118      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b990:	4b91      	ldr	r3, [pc, #580]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800b99c:	4b8e      	ldr	r3, [pc, #568]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	f003 030f 	and.w	r3, r3, #15
 800b9a6:	e006      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800b9a8:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b9aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	0e1b      	lsrs	r3, r3, #24
 800b9b2:	f003 030f 	and.w	r3, r3, #15
 800b9b6:	4a89      	ldr	r2, [pc, #548]	; (800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9be:	f000 bd3d 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9c6:	f000 bd39 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9ce:	f000 bd35 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	d167      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b9de:	4b7e      	ldr	r3, [pc, #504]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800b9e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b9e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9f0:	d036      	beq.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9f8:	d855      	bhi.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba00:	d029      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba08:	d84d      	bhi.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba10:	d013      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba18:	d845      	bhi.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d015      	beq.n	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba26:	d13e      	bne.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe ff45 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba36:	f000 bd01 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba3a:	f107 030c 	add.w	r3, r7, #12
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff f9f4 	bl	800ae2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba48:	f000 bcf8 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ba4c:	f7fe f88a 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 800ba50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ba52:	f000 bcf3 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ba56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba5c:	f000 bcee 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ba60:	4b5d      	ldr	r3, [pc, #372]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0320 	and.w	r3, r3, #32
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	d118      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba6c:	4b5a      	ldr	r3, [pc, #360]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 800ba78:	4b57      	ldr	r3, [pc, #348]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	0e1b      	lsrs	r3, r3, #24
 800ba7e:	f003 030f 	and.w	r3, r3, #15
 800ba82:	e006      	b.n	800ba92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800ba84:	4b54      	ldr	r3, [pc, #336]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ba86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba8a:	041b      	lsls	r3, r3, #16
 800ba8c:	0e1b      	lsrs	r3, r3, #24
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	4a52      	ldr	r2, [pc, #328]	; (800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba9a:	f000 bccf 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baa2:	f000 bccb 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baaa:	f000 bcc7 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800baae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800bab6:	430b      	orrs	r3, r1
 800bab8:	d14c      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800baba:	4b47      	ldr	r3, [pc, #284]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800babc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bacc:	f7fe f864 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800bad0:	6378      	str	r0, [r7, #52]	; 0x34
 800bad2:	f000 bcb3 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800badc:	d104      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bade:	f7fd ff3b 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800bae2:	6378      	str	r0, [r7, #52]	; 0x34
 800bae4:	f000 bcaa 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bae8:	4b3b      	ldr	r3, [pc, #236]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf4:	d107      	bne.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bafc:	d103      	bne.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
    {
      frequency = HSI_VALUE;
 800bafe:	4b38      	ldr	r3, [pc, #224]	; (800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
 800bb02:	f000 bc9b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800bb06:	4b34      	ldr	r3, [pc, #208]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	d11c      	bne.n	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb18:	d118      	bne.n	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb1a:	4b2f      	ldr	r3, [pc, #188]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800bb26:	4b2c      	ldr	r3, [pc, #176]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	0e1b      	lsrs	r3, r3, #24
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	e006      	b.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
 800bb32:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb38:	041b      	lsls	r3, r3, #16
 800bb3a:	0e1b      	lsrs	r3, r3, #24
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	4a26      	ldr	r2, [pc, #152]	; (800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb46:	637b      	str	r3, [r7, #52]	; 0x34
 800bb48:	f000 bc78 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb50:	f000 bc74 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800bb54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb58:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800bb5c:	430b      	orrs	r3, r1
 800bb5e:	d152      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bb60:	4b1d      	ldr	r3, [pc, #116]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bb6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d104      	bne.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb72:	f7fe f811 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800bb76:	6378      	str	r0, [r7, #52]	; 0x34
 800bb78:	f000 bc60 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb82:	d104      	bne.n	800bb8e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bb84:	f7fd fee8 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800bb88:	6378      	str	r0, [r7, #52]	; 0x34
 800bb8a:	f000 bc57 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bb8e:	4b12      	ldr	r3, [pc, #72]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb9a:	d107      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba2:	d103      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
    {
      frequency = HSI_VALUE;
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bba6:	637b      	str	r3, [r7, #52]	; 0x34
 800bba8:	f000 bc48 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0320 	and.w	r3, r3, #32
 800bbb4:	2b20      	cmp	r3, #32
 800bbb6:	d122      	bne.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbbe:	d11e      	bne.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800bbcc:	4b02      	ldr	r3, [pc, #8]	; (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	0e1b      	lsrs	r3, r3, #24
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	e00c      	b.n	800bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
 800bbd8:	46020c00 	.word	0x46020c00
 800bbdc:	08022aa8 	.word	0x08022aa8
 800bbe0:	00f42400 	.word	0x00f42400
 800bbe4:	4ba1      	ldr	r3, [pc, #644]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bbe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bbea:	041b      	lsls	r3, r3, #16
 800bbec:	0e1b      	lsrs	r3, r3, #24
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	4a9f      	ldr	r2, [pc, #636]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800bbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfa:	f000 bc1f 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
 800bc02:	f000 bc1b 	b.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bc06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bc0e:	430b      	orrs	r3, r1
 800bc10:	d151      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bc12:	4b96      	ldr	r3, [pc, #600]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	2bc0      	cmp	r3, #192	; 0xc0
 800bc22:	d024      	beq.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	2bc0      	cmp	r3, #192	; 0xc0
 800bc28:	d842      	bhi.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	2b80      	cmp	r3, #128	; 0x80
 800bc2e:	d00d      	beq.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	2b80      	cmp	r3, #128	; 0x80
 800bc34:	d83c      	bhi.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	2b40      	cmp	r3, #64	; 0x40
 800bc40:	d011      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 800bc42:	e035      	b.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bc44:	f7fd ffd0 	bl	8009be8 <HAL_RCC_GetPCLK3Freq>
 800bc48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bc4a:	e3f7      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc4c:	4b87      	ldr	r3, [pc, #540]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc58:	d102      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
        {
          frequency = HSI_VALUE;
 800bc5a:	4b86      	ldr	r3, [pc, #536]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800bc5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bc5e:	e3ed      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc64:	e3ea      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bc66:	f7fd fe77 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800bc6a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bc6c:	e3e6      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bc6e:	4b7f      	ldr	r3, [pc, #508]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d117      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc7a:	4b7c      	ldr	r3, [pc, #496]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800bc86:	4b79      	ldr	r3, [pc, #484]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	0e1b      	lsrs	r3, r3, #24
 800bc8c:	f003 030f 	and.w	r3, r3, #15
 800bc90:	e006      	b.n	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800bc92:	4b76      	ldr	r3, [pc, #472]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bc94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc98:	041b      	lsls	r3, r3, #16
 800bc9a:	0e1b      	lsrs	r3, r3, #24
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	4a73      	ldr	r2, [pc, #460]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800bca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bca8:	e3c8      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcae:	e3c5      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      default:
      {
        frequency = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcb4:	e3c2      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bcb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcba:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	d147      	bne.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bcc2:	4b6a      	ldr	r3, [pc, #424]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bcc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bccc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bcd4:	f7fd ff60 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800bcd8:	6378      	str	r0, [r7, #52]	; 0x34
 800bcda:	e3af      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce2:	d103      	bne.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bce4:	f7fd fe38 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800bce8:	6378      	str	r0, [r7, #52]	; 0x34
 800bcea:	e3a7      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bcec:	4b5f      	ldr	r3, [pc, #380]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf8:	d106      	bne.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd00:	d102      	bne.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
    {
      frequency = HSI_VALUE;
 800bd02:	4b5c      	ldr	r3, [pc, #368]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34
 800bd06:	e399      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bd08:	4b58      	ldr	r3, [pc, #352]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0320 	and.w	r3, r3, #32
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d11b      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bd1a:	d117      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd1c:	4b53      	ldr	r3, [pc, #332]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d005      	beq.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
 800bd28:	4b50      	ldr	r3, [pc, #320]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	0e1b      	lsrs	r3, r3, #24
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	e006      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800bd34:	4b4d      	ldr	r3, [pc, #308]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd3a:	041b      	lsls	r3, r3, #16
 800bd3c:	0e1b      	lsrs	r3, r3, #24
 800bd3e:	f003 030f 	and.w	r3, r3, #15
 800bd42:	4a4b      	ldr	r2, [pc, #300]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800bd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd48:	637b      	str	r3, [r7, #52]	; 0x34
 800bd4a:	e377      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd50:	e374      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bd52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd56:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd5a:	430b      	orrs	r3, r1
 800bd5c:	d164      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bd5e:	4b43      	ldr	r3, [pc, #268]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d120      	bne.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd70:	4b3e      	ldr	r3, [pc, #248]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d117      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800bd88:	4b38      	ldr	r3, [pc, #224]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	0e1b      	lsrs	r3, r3, #24
 800bd8e:	f003 030f 	and.w	r3, r3, #15
 800bd92:	e006      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800bd94:	4b35      	ldr	r3, [pc, #212]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bd96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd9a:	041b      	lsls	r3, r3, #16
 800bd9c:	0e1b      	lsrs	r3, r3, #24
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	4a33      	ldr	r2, [pc, #204]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800bda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdaa:	e347      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	637b      	str	r3, [r7, #52]	; 0x34
 800bdb0:	e344      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bdb2:	4b2e      	ldr	r3, [pc, #184]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bdb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdc0:	d112      	bne.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc8:	d10e      	bne.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdca:	4b28      	ldr	r3, [pc, #160]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bdcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd8:	d102      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 800bdda:	23fa      	movs	r3, #250	; 0xfa
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdde:	e32d      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800bde0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bde6:	e329      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800bde8:	4b20      	ldr	r3, [pc, #128]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdf4:	d106      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfc:	d102      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800be00:	637b      	str	r3, [r7, #52]	; 0x34
 800be02:	e31b      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be04:	4b19      	ldr	r3, [pc, #100]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800be06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d107      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be18:	d103      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 800be1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be1e:	637b      	str	r3, [r7, #52]	; 0x34
 800be20:	e30c      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800be22:	2300      	movs	r3, #0
 800be24:	637b      	str	r3, [r7, #52]	; 0x34
 800be26:	e309      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800be28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be30:	430b      	orrs	r3, r1
 800be32:	d16b      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be34:	4b0d      	ldr	r3, [pc, #52]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800be36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	2b00      	cmp	r3, #0
 800be44:	d127      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	2b20      	cmp	r3, #32
 800be50:	d11e      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be52:	4b06      	ldr	r3, [pc, #24]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00c      	beq.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800be5e:	4b03      	ldr	r3, [pc, #12]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	0e1b      	lsrs	r3, r3, #24
 800be64:	f003 030f 	and.w	r3, r3, #15
 800be68:	e00d      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
 800be6a:	bf00      	nop
 800be6c:	46020c00 	.word	0x46020c00
 800be70:	08022aa8 	.word	0x08022aa8
 800be74:	00f42400 	.word	0x00f42400
 800be78:	4b94      	ldr	r3, [pc, #592]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800be7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be7e:	041b      	lsls	r3, r3, #16
 800be80:	0e1b      	lsrs	r3, r3, #24
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	4a92      	ldr	r2, [pc, #584]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
 800be8e:	e2d5      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800be90:	2300      	movs	r3, #0
 800be92:	637b      	str	r3, [r7, #52]	; 0x34
 800be94:	e2d2      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800be96:	4b8d      	ldr	r3, [pc, #564]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800be98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bea4:	d112      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beac:	d10e      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800beae:	4b87      	ldr	r3, [pc, #540]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800beb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bebc:	d102      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0xde0>
      {
        frequency = LSI_VALUE / 128U;
 800bebe:	23fa      	movs	r3, #250	; 0xfa
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bec2:	e2bb      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800bec4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bec8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800beca:	e2b7      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800becc:	4b7f      	ldr	r3, [pc, #508]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed8:	d106      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee0:	d102      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
    {
      frequency = HSI_VALUE;
 800bee2:	4b7c      	ldr	r3, [pc, #496]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
 800bee6:	e2a9      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bee8:	4b78      	ldr	r3, [pc, #480]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800beea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d107      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800befc:	d103      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    {
      frequency = LSE_VALUE;
 800befe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf02:	637b      	str	r3, [r7, #52]	; 0x34
 800bf04:	e29a      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
 800bf0a:	e297      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf10:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf14:	430b      	orrs	r3, r1
 800bf16:	d147      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xec4>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf18:	4b6c      	ldr	r3, [pc, #432]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bf1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bf22:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d103      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf2a:	f7fd fe35 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800bf2e:	6378      	str	r0, [r7, #52]	; 0x34
 800bf30:	e284      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bf32:	4b66      	ldr	r3, [pc, #408]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bf34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf40:	d112      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf48:	d10e      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf4a:	4b60      	ldr	r3, [pc, #384]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bf4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf58:	d102      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
      {
        frequency = LSI_VALUE / 128U;
 800bf5a:	23fa      	movs	r3, #250	; 0xfa
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf5e:	e26d      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800bf60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf66:	e269      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bf68:	4b58      	ldr	r3, [pc, #352]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf74:	d106      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bf7c:	d102      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
    {
      frequency = HSI_VALUE;
 800bf7e:	4b55      	ldr	r3, [pc, #340]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bf80:	637b      	str	r3, [r7, #52]	; 0x34
 800bf82:	e25b      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bf84:	4b51      	ldr	r3, [pc, #324]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bf86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d107      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bf98:	d103      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
    {
      frequency = LSE_VALUE;
 800bf9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa0:	e24c      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa6:	e249      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bfa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfac:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	d12d      	bne.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bfb4:	4b45      	ldr	r3, [pc, #276]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bfb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bfbe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bfc0:	4b42      	ldr	r3, [pc, #264]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfcc:	d105      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
    {
      frequency = HSE_VALUE;
 800bfd4:	4b40      	ldr	r3, [pc, #256]	; (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bfd6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfd8:	e230      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfe0:	d107      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fc68 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	637b      	str	r3, [r7, #52]	; 0x34
 800bff0:	e224      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bff8:	d107      	bne.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffa:	f107 0318 	add.w	r3, r7, #24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fdb8 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	637b      	str	r3, [r7, #52]	; 0x34
 800c008:	e218      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	637b      	str	r3, [r7, #52]	; 0x34
 800c00e:	e215      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c014:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800c018:	430b      	orrs	r3, r1
 800c01a:	d15f      	bne.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c01c:	4b2b      	ldr	r3, [pc, #172]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c01e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c022:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c026:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c02e:	d028      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c036:	d845      	bhi.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c03e:	d013      	beq.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c046:	d83d      	bhi.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c054:	d004      	beq.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800c056:	e035      	b.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c058:	f7fd fdb2 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800c05c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c05e:	e1ed      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c060:	f7fd fc7a 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800c064:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c066:	e1e9      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c068:	4b18      	ldr	r3, [pc, #96]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c074:	d102      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xf98>
        {
          frequency = HSI_VALUE;
 800c076:	4b17      	ldr	r3, [pc, #92]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c07a:	e1df      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c080:	e1dc      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d117      	bne.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c096:	2b00      	cmp	r3, #0
 800c098:	d005      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800c09a:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	0e1b      	lsrs	r3, r3, #24
 800c0a0:	f003 030f 	and.w	r3, r3, #15
 800c0a4:	e006      	b.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800c0a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0ac:	041b      	lsls	r3, r3, #16
 800c0ae:	0e1b      	lsrs	r3, r3, #24
 800c0b0:	f003 030f 	and.w	r3, r3, #15
 800c0b4:	4a06      	ldr	r2, [pc, #24]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800c0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0bc:	e1be      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0c2:	e1bb      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0c8:	e1b8      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800c0ca:	bf00      	nop
 800c0cc:	46020c00 	.word	0x46020c00
 800c0d0:	08022aa8 	.word	0x08022aa8
 800c0d4:	00f42400 	.word	0x00f42400
 800c0d8:	02625a00 	.word	0x02625a00
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c0e4:	430b      	orrs	r3, r1
 800c0e6:	d156      	bne.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c0e8:	4ba5      	ldr	r3, [pc, #660]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c0ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0f2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0fa:	d028      	beq.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c102:	d845      	bhi.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c10a:	d013      	beq.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1050>
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c112:	d83d      	bhi.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	2b00      	cmp	r3, #0
 800c118:	d004      	beq.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c120:	d004      	beq.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800c122:	e035      	b.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c124:	f7fd fd38 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800c128:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c12a:	e187      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c12c:	f7fd fc14 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800c130:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c132:	e183      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c134:	4b92      	ldr	r3, [pc, #584]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c13c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c140:	d102      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
        {
          frequency = HSI_VALUE;
 800c142:	4b90      	ldr	r3, [pc, #576]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 800c144:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c146:	e179      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c14c:	e176      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c14e:	4b8c      	ldr	r3, [pc, #560]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0320 	and.w	r3, r3, #32
 800c156:	2b20      	cmp	r3, #32
 800c158:	d117      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c15a:	4b89      	ldr	r3, [pc, #548]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d005      	beq.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x108e>
 800c166:	4b86      	ldr	r3, [pc, #536]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	0e1b      	lsrs	r3, r3, #24
 800c16c:	f003 030f 	and.w	r3, r3, #15
 800c170:	e006      	b.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 800c172:	4b83      	ldr	r3, [pc, #524]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c178:	041b      	lsls	r3, r3, #16
 800c17a:	0e1b      	lsrs	r3, r3, #24
 800c17c:	f003 030f 	and.w	r3, r3, #15
 800c180:	4a81      	ldr	r2, [pc, #516]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800c182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c186:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c188:	e158      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c18e:	e155      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c194:	e152      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c19a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c19e:	430b      	orrs	r3, r1
 800c1a0:	d177      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c1a2:	4b77      	ldr	r3, [pc, #476]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c1a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1a8:	f003 0318 	and.w	r3, r3, #24
 800c1ac:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	2b18      	cmp	r3, #24
 800c1b2:	d86b      	bhi.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800c1b4:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>)
 800c1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ba:	bf00      	nop
 800c1bc:	0800c221 	.word	0x0800c221
 800c1c0:	0800c28d 	.word	0x0800c28d
 800c1c4:	0800c28d 	.word	0x0800c28d
 800c1c8:	0800c28d 	.word	0x0800c28d
 800c1cc:	0800c28d 	.word	0x0800c28d
 800c1d0:	0800c28d 	.word	0x0800c28d
 800c1d4:	0800c28d 	.word	0x0800c28d
 800c1d8:	0800c28d 	.word	0x0800c28d
 800c1dc:	0800c229 	.word	0x0800c229
 800c1e0:	0800c28d 	.word	0x0800c28d
 800c1e4:	0800c28d 	.word	0x0800c28d
 800c1e8:	0800c28d 	.word	0x0800c28d
 800c1ec:	0800c28d 	.word	0x0800c28d
 800c1f0:	0800c28d 	.word	0x0800c28d
 800c1f4:	0800c28d 	.word	0x0800c28d
 800c1f8:	0800c28d 	.word	0x0800c28d
 800c1fc:	0800c231 	.word	0x0800c231
 800c200:	0800c28d 	.word	0x0800c28d
 800c204:	0800c28d 	.word	0x0800c28d
 800c208:	0800c28d 	.word	0x0800c28d
 800c20c:	0800c28d 	.word	0x0800c28d
 800c210:	0800c28d 	.word	0x0800c28d
 800c214:	0800c28d 	.word	0x0800c28d
 800c218:	0800c28d 	.word	0x0800c28d
 800c21c:	0800c24b 	.word	0x0800c24b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c220:	f7fd fce2 	bl	8009be8 <HAL_RCC_GetPCLK3Freq>
 800c224:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c226:	e109      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c228:	f7fd fb96 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800c22c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c22e:	e105      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c230:	4b53      	ldr	r3, [pc, #332]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c23c:	d102      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
        {
          frequency = HSI_VALUE;
 800c23e:	4b51      	ldr	r3, [pc, #324]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 800c240:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c242:	e0fb      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c248:	e0f8      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c24a:	4b4d      	ldr	r3, [pc, #308]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0320 	and.w	r3, r3, #32
 800c252:	2b20      	cmp	r3, #32
 800c254:	d117      	bne.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x11a2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c256:	4b4a      	ldr	r3, [pc, #296]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d005      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
 800c262:	4b47      	ldr	r3, [pc, #284]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	0e1b      	lsrs	r3, r3, #24
 800c268:	f003 030f 	and.w	r3, r3, #15
 800c26c:	e006      	b.n	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x1198>
 800c26e:	4b44      	ldr	r3, [pc, #272]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c274:	041b      	lsls	r3, r3, #16
 800c276:	0e1b      	lsrs	r3, r3, #24
 800c278:	f003 030f 	and.w	r3, r3, #15
 800c27c:	4a42      	ldr	r2, [pc, #264]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800c27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c282:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c284:	e0da      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c28a:	e0d7      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c290:	e0d4      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c296:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c29a:	430b      	orrs	r3, r1
 800c29c:	d155      	bne.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c29e:	4b38      	ldr	r3, [pc, #224]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c2a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2b0:	d013      	beq.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2b8:	d844      	bhi.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2c0:	d013      	beq.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2c8:	d83c      	bhi.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d014      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2d6:	d014      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 800c2d8:	e034      	b.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2da:	f107 0318 	add.w	r3, r7, #24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fc48 	bl	800ab74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2e8:	e0a8      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fae4 	bl	800a8bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2f8:	e0a0      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c2fa:	f7fd fb2d 	bl	8009958 <HAL_RCC_GetSysClockFreq>
 800c2fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c300:	e09c      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c302:	4b1f      	ldr	r3, [pc, #124]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	2b20      	cmp	r3, #32
 800c30c:	d117      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x125a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c30e:	4b1c      	ldr	r3, [pc, #112]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 800c31a:	4b19      	ldr	r3, [pc, #100]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	0e1b      	lsrs	r3, r3, #24
 800c320:	f003 030f 	and.w	r3, r3, #15
 800c324:	e006      	b.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x1250>
 800c326:	4b16      	ldr	r3, [pc, #88]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c32c:	041b      	lsls	r3, r3, #16
 800c32e:	0e1b      	lsrs	r3, r3, #24
 800c330:	f003 030f 	and.w	r3, r3, #15
 800c334:	4a14      	ldr	r2, [pc, #80]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800c336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c33a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c33c:	e07e      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c342:	e07b      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800c344:	2300      	movs	r3, #0
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c348:	e078      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c34e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c352:	430b      	orrs	r3, r1
 800c354:	d138      	bne.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c356:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c35c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c360:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c362:	4b07      	ldr	r3, [pc, #28]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800c364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c368:	f003 0302 	and.w	r3, r3, #2
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d10d      	bne.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
    {
      frequency = LSE_VALUE;
 800c376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37a:	637b      	str	r3, [r7, #52]	; 0x34
 800c37c:	e05e      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800c37e:	bf00      	nop
 800c380:	46020c00 	.word	0x46020c00
 800c384:	00f42400 	.word	0x00f42400
 800c388:	08022aa8 	.word	0x08022aa8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c38c:	4b2e      	ldr	r3, [pc, #184]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c38e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c39a:	d112      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3a2:	d10e      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c3a4:	4b28      	ldr	r3, [pc, #160]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c3a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c3aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3b2:	d102      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
      {
        frequency = LSI_VALUE / 128U;
 800c3b4:	23fa      	movs	r3, #250	; 0xfa
 800c3b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c3b8:	e040      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800c3ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c3be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c3c0:	e03c      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c6:	e039      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	d131      	bne.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c3d4:	4b1c      	ldr	r3, [pc, #112]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c3d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c3da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c3de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ec:	d105      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
    {
      frequency = HSI48_VALUE;
 800c3f4:	4b15      	ldr	r3, [pc, #84]	; (800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f8:	e020      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c3fa:	4b13      	ldr	r3, [pc, #76]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c406:	d106      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c40e:	d102      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c410:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c412:	637b      	str	r3, [r7, #52]	; 0x34
 800c414:	e012      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c422:	d106      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c42a:	d102      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
    {
      frequency = HSI_VALUE;
 800c42c:	4b09      	ldr	r3, [pc, #36]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c42e:	637b      	str	r3, [r7, #52]	; 0x34
 800c430:	e004      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	; 0x34
 800c436:	e001      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3738      	adds	r7, #56	; 0x38
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	46020c00 	.word	0x46020c00
 800c44c:	02dc6c00 	.word	0x02dc6c00
 800c450:	016e3600 	.word	0x016e3600
 800c454:	00f42400 	.word	0x00f42400

0800c458 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c45c:	4b06      	ldr	r3, [pc, #24]	; (800c478 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c45e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c462:	4a05      	ldr	r2, [pc, #20]	; (800c478 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c464:	f043 0320 	orr.w	r3, r3, #32
 800c468:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800c46c:	bf00      	nop
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	46020c00 	.word	0x46020c00

0800c47c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c484:	4b47      	ldr	r3, [pc, #284]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a46      	ldr	r2, [pc, #280]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c48a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c48e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c490:	f7f9 fc1e 	bl	8005cd0 <HAL_GetTick>
 800c494:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c496:	e008      	b.n	800c4aa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c498:	f7f9 fc1a 	bl	8005cd0 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d901      	bls.n	800c4aa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	e077      	b.n	800c59a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4aa:	4b3e      	ldr	r3, [pc, #248]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1f0      	bne.n	800c498 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c4b6:	4b3b      	ldr	r3, [pc, #236]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c4be:	f023 0303 	bic.w	r3, r3, #3
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	6811      	ldr	r1, [r2, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	6852      	ldr	r2, [r2, #4]
 800c4ca:	3a01      	subs	r2, #1
 800c4cc:	0212      	lsls	r2, r2, #8
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	4934      	ldr	r1, [pc, #208]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c4d6:	4b33      	ldr	r3, [pc, #204]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c4d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4da:	4b33      	ldr	r3, [pc, #204]	; (800c5a8 <RCCEx_PLL2_Config+0x12c>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	6892      	ldr	r2, [r2, #8]
 800c4e2:	3a01      	subs	r2, #1
 800c4e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	68d2      	ldr	r2, [r2, #12]
 800c4ec:	3a01      	subs	r2, #1
 800c4ee:	0252      	lsls	r2, r2, #9
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	4311      	orrs	r1, r2
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	6912      	ldr	r2, [r2, #16]
 800c4f8:	3a01      	subs	r2, #1
 800c4fa:	0412      	lsls	r2, r2, #16
 800c4fc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c500:	4311      	orrs	r1, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	6952      	ldr	r2, [r2, #20]
 800c506:	3a01      	subs	r2, #1
 800c508:	0612      	lsls	r2, r2, #24
 800c50a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c50e:	430a      	orrs	r2, r1
 800c510:	4924      	ldr	r1, [pc, #144]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c512:	4313      	orrs	r3, r2
 800c514:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c516:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	f023 020c 	bic.w	r2, r3, #12
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	4920      	ldr	r1, [pc, #128]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c524:	4313      	orrs	r3, r2
 800c526:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c528:	4b1e      	ldr	r3, [pc, #120]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	491c      	ldr	r1, [pc, #112]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c532:	4313      	orrs	r3, r2
 800c534:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c536:	4b1b      	ldr	r3, [pc, #108]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53a:	4a1a      	ldr	r2, [pc, #104]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c53c:	f023 0310 	bic.w	r3, r3, #16
 800c540:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c542:	4b18      	ldr	r3, [pc, #96]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c54a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	69d2      	ldr	r2, [r2, #28]
 800c552:	00d2      	lsls	r2, r2, #3
 800c554:	4913      	ldr	r1, [pc, #76]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c556:	4313      	orrs	r3, r2
 800c558:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c55a:	4b12      	ldr	r3, [pc, #72]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	4a11      	ldr	r2, [pc, #68]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c560:	f043 0310 	orr.w	r3, r3, #16
 800c564:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c566:	4b0f      	ldr	r3, [pc, #60]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c56c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c570:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c572:	f7f9 fbad 	bl	8005cd0 <HAL_GetTick>
 800c576:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c578:	e008      	b.n	800c58c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c57a:	f7f9 fba9 	bl	8005cd0 <HAL_GetTick>
 800c57e:	4602      	mov	r2, r0
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	2b02      	cmp	r3, #2
 800c586:	d901      	bls.n	800c58c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	e006      	b.n	800c59a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c58c:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <RCCEx_PLL2_Config+0x128>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d0f0      	beq.n	800c57a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c598:	2300      	movs	r3, #0

}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	46020c00 	.word	0x46020c00
 800c5a8:	80800000 	.word	0x80800000

0800c5ac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c5b4:	4b47      	ldr	r3, [pc, #284]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a46      	ldr	r2, [pc, #280]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c5ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c5c0:	f7f9 fb86 	bl	8005cd0 <HAL_GetTick>
 800c5c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5c6:	e008      	b.n	800c5da <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c5c8:	f7f9 fb82 	bl	8005cd0 <HAL_GetTick>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d901      	bls.n	800c5da <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	e077      	b.n	800c6ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5da:	4b3e      	ldr	r3, [pc, #248]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1f0      	bne.n	800c5c8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c5e6:	4b3b      	ldr	r3, [pc, #236]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c5ee:	f023 0303 	bic.w	r3, r3, #3
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6811      	ldr	r1, [r2, #0]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	6852      	ldr	r2, [r2, #4]
 800c5fa:	3a01      	subs	r2, #1
 800c5fc:	0212      	lsls	r2, r2, #8
 800c5fe:	430a      	orrs	r2, r1
 800c600:	4934      	ldr	r1, [pc, #208]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c602:	4313      	orrs	r3, r2
 800c604:	630b      	str	r3, [r1, #48]	; 0x30
 800c606:	4b33      	ldr	r3, [pc, #204]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c60a:	4b33      	ldr	r3, [pc, #204]	; (800c6d8 <RCCEx_PLL3_Config+0x12c>)
 800c60c:	4013      	ands	r3, r2
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	6892      	ldr	r2, [r2, #8]
 800c612:	3a01      	subs	r2, #1
 800c614:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	68d2      	ldr	r2, [r2, #12]
 800c61c:	3a01      	subs	r2, #1
 800c61e:	0252      	lsls	r2, r2, #9
 800c620:	b292      	uxth	r2, r2
 800c622:	4311      	orrs	r1, r2
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	6912      	ldr	r2, [r2, #16]
 800c628:	3a01      	subs	r2, #1
 800c62a:	0412      	lsls	r2, r2, #16
 800c62c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c630:	4311      	orrs	r1, r2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6952      	ldr	r2, [r2, #20]
 800c636:	3a01      	subs	r2, #1
 800c638:	0612      	lsls	r2, r2, #24
 800c63a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c63e:	430a      	orrs	r2, r1
 800c640:	4924      	ldr	r1, [pc, #144]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c642:	4313      	orrs	r3, r2
 800c644:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c646:	4b23      	ldr	r3, [pc, #140]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64a:	f023 020c 	bic.w	r2, r3, #12
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	4920      	ldr	r1, [pc, #128]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c654:	4313      	orrs	r3, r2
 800c656:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c658:	4b1e      	ldr	r3, [pc, #120]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c65a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	491c      	ldr	r1, [pc, #112]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c662:	4313      	orrs	r3, r2
 800c664:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c666:	4b1b      	ldr	r3, [pc, #108]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	4a1a      	ldr	r2, [pc, #104]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c66c:	f023 0310 	bic.w	r3, r3, #16
 800c670:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c672:	4b18      	ldr	r3, [pc, #96]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c67a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	69d2      	ldr	r2, [r2, #28]
 800c682:	00d2      	lsls	r2, r2, #3
 800c684:	4913      	ldr	r1, [pc, #76]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c686:	4313      	orrs	r3, r2
 800c688:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	4a11      	ldr	r2, [pc, #68]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c690:	f043 0310 	orr.w	r3, r3, #16
 800c694:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c696:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a0e      	ldr	r2, [pc, #56]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c69c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6a2:	f7f9 fb15 	bl	8005cd0 <HAL_GetTick>
 800c6a6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6a8:	e008      	b.n	800c6bc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6aa:	f7f9 fb11 	bl	8005cd0 <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d901      	bls.n	800c6bc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e006      	b.n	800c6ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6bc:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <RCCEx_PLL3_Config+0x128>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0f0      	beq.n	800c6aa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	46020c00 	.word	0x46020c00
 800c6d8:	80800000 	.word	0x80800000

0800c6dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d071      	beq.n	800c7d2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d106      	bne.n	800c708 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f8 fbe6 	bl	8004ed4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c710:	4b32      	ldr	r3, [pc, #200]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	f003 0310 	and.w	r3, r3, #16
 800c718:	2b10      	cmp	r3, #16
 800c71a:	d051      	beq.n	800c7c0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c71c:	4b2f      	ldr	r3, [pc, #188]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c71e:	22ca      	movs	r2, #202	; 0xca
 800c720:	625a      	str	r2, [r3, #36]	; 0x24
 800c722:	4b2e      	ldr	r3, [pc, #184]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c724:	2253      	movs	r2, #83	; 0x53
 800c726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f94b 	bl	800c9c4 <RTC_EnterInitMode>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c732:	7bfb      	ldrb	r3, [r7, #15]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d13f      	bne.n	800c7b8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c738:	4b28      	ldr	r3, [pc, #160]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	4a27      	ldr	r2, [pc, #156]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c73e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c746:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c748:	4b24      	ldr	r3, [pc, #144]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6859      	ldr	r1, [r3, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	4319      	orrs	r1, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	430b      	orrs	r3, r1
 800c75c:	491f      	ldr	r1, [pc, #124]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	041b      	lsls	r3, r3, #16
 800c76c:	491b      	ldr	r1, [pc, #108]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c772:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	430b      	orrs	r3, r1
 800c784:	4915      	ldr	r1, [pc, #84]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c786:	4313      	orrs	r3, r2
 800c788:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f956 	bl	800ca3c <RTC_ExitInitMode>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10e      	bne.n	800c7b8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c79a:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a19      	ldr	r1, [r3, #32]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	4319      	orrs	r1, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	490a      	ldr	r1, [pc, #40]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7b8:	4b08      	ldr	r3, [pc, #32]	; (800c7dc <HAL_RTC_Init+0x100>)
 800c7ba:	22ff      	movs	r2, #255	; 0xff
 800c7bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c7be:	e001      	b.n	800c7c4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d103      	bne.n	800c7d2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	46007800 	.word	0x46007800

0800c7e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800c7ec:	4b34      	ldr	r3, [pc, #208]	; (800c8c0 <HAL_RTC_GetTime+0xe0>)
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c7f4:	4b32      	ldr	r3, [pc, #200]	; (800c8c0 <HAL_RTC_GetTime+0xe0>)
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c800:	d04a      	beq.n	800c898 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800c802:	4b2f      	ldr	r3, [pc, #188]	; (800c8c0 <HAL_RTC_GetTime+0xe0>)
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800c80e:	4b2c      	ldr	r3, [pc, #176]	; (800c8c0 <HAL_RTC_GetTime+0xe0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c816:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c81a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	0c1b      	lsrs	r3, r3, #16
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c826:	b2da      	uxtb	r2, r3
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c844:	b2da      	uxtb	r2, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	0d9b      	lsrs	r3, r3, #22
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	f003 0301 	and.w	r3, r3, #1
 800c854:	b2da      	uxtb	r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d12a      	bne.n	800c8b6 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 f927 	bl	800cab8 <RTC_Bcd2ToByte>
 800c86a:	4603      	mov	r3, r0
 800c86c:	461a      	mov	r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	785b      	ldrb	r3, [r3, #1]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f91e 	bl	800cab8 <RTC_Bcd2ToByte>
 800c87c:	4603      	mov	r3, r0
 800c87e:	461a      	mov	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	789b      	ldrb	r3, [r3, #2]
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f915 	bl	800cab8 <RTC_Bcd2ToByte>
 800c88e:	4603      	mov	r3, r0
 800c890:	461a      	mov	r2, r3
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	709a      	strb	r2, [r3, #2]
 800c896:	e00e      	b.n	800c8b6 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	46007800 	.word	0x46007800

0800c8c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800c8d0:	4b22      	ldr	r3, [pc, #136]	; (800c95c <HAL_RTC_GetDate+0x98>)
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c8dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	0c1b      	lsrs	r3, r3, #16
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	0a1b      	lsrs	r3, r3, #8
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 031f 	and.w	r3, r3, #31
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c900:	b2da      	uxtb	r2, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	0b5b      	lsrs	r3, r3, #13
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	f003 0307 	and.w	r3, r3, #7
 800c910:	b2da      	uxtb	r2, r3
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d11a      	bne.n	800c952 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	78db      	ldrb	r3, [r3, #3]
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f8c9 	bl	800cab8 <RTC_Bcd2ToByte>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	785b      	ldrb	r3, [r3, #1]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f8c0 	bl	800cab8 <RTC_Bcd2ToByte>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	789b      	ldrb	r3, [r3, #2]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f8b7 	bl	800cab8 <RTC_Bcd2ToByte>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461a      	mov	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	46007800 	.word	0x46007800

0800c960 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c968:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <HAL_RTC_WaitForSynchro+0x60>)
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	4a14      	ldr	r2, [pc, #80]	; (800c9c0 <HAL_RTC_WaitForSynchro+0x60>)
 800c96e:	f023 0320 	bic.w	r3, r3, #32
 800c972:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c974:	f7f9 f9ac 	bl	8005cd0 <HAL_GetTick>
 800c978:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c97a:	e013      	b.n	800c9a4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c97c:	f7f9 f9a8 	bl	8005cd0 <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c98a:	d90b      	bls.n	800c9a4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c98c:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <HAL_RTC_WaitForSynchro+0x60>)
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10c      	bne.n	800c9b2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2203      	movs	r2, #3
 800c99c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e008      	b.n	800c9b6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c9a4:	4b06      	ldr	r3, [pc, #24]	; (800c9c0 <HAL_RTC_WaitForSynchro+0x60>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0e5      	beq.n	800c97c <HAL_RTC_WaitForSynchro+0x1c>
 800c9b0:	e000      	b.n	800c9b4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c9b2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	46007800 	.word	0x46007800

0800c9c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c9d0:	4b19      	ldr	r3, [pc, #100]	; (800ca38 <RTC_EnterInitMode+0x74>)
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d128      	bne.n	800ca2e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c9dc:	4b16      	ldr	r3, [pc, #88]	; (800ca38 <RTC_EnterInitMode+0x74>)
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	4a15      	ldr	r2, [pc, #84]	; (800ca38 <RTC_EnterInitMode+0x74>)
 800c9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c9e8:	f7f9 f972 	bl	8005cd0 <HAL_GetTick>
 800c9ec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c9ee:	e013      	b.n	800ca18 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c9f0:	f7f9 f96e 	bl	8005cd0 <HAL_GetTick>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9fe:	d90b      	bls.n	800ca18 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ca00:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <RTC_EnterInitMode+0x74>)
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10f      	bne.n	800ca2c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2203      	movs	r2, #3
 800ca14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <RTC_EnterInitMode+0x74>)
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d104      	bne.n	800ca2e <RTC_EnterInitMode+0x6a>
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d1e2      	bne.n	800c9f0 <RTC_EnterInitMode+0x2c>
 800ca2a:	e000      	b.n	800ca2e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ca2c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	46007800 	.word	0x46007800

0800ca3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ca48:	4b1a      	ldr	r3, [pc, #104]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	4a19      	ldr	r2, [pc, #100]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800ca4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca52:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ca54:	4b17      	ldr	r3, [pc, #92]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	f003 0320 	and.w	r3, r3, #32
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10c      	bne.n	800ca7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff ff7d 	bl	800c960 <HAL_RTC_WaitForSynchro>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01e      	beq.n	800caaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2203      	movs	r2, #3
 800ca70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ca74:	2303      	movs	r3, #3
 800ca76:	73fb      	strb	r3, [r7, #15]
 800ca78:	e017      	b.n	800caaa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca7a:	4b0e      	ldr	r3, [pc, #56]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	4a0d      	ldr	r2, [pc, #52]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800ca80:	f023 0320 	bic.w	r3, r3, #32
 800ca84:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff ff6a 	bl	800c960 <HAL_RTC_WaitForSynchro>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2203      	movs	r2, #3
 800ca96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	4a04      	ldr	r2, [pc, #16]	; (800cab4 <RTC_ExitInitMode+0x78>)
 800caa4:	f043 0320 	orr.w	r3, r3, #32
 800caa8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	46007800 	.word	0x46007800

0800cab8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	091b      	lsrs	r3, r3, #4
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	461a      	mov	r2, r3
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	f003 030f 	and.w	r3, r3, #15
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	4413      	add	r3, r2
 800cae2:	b2db      	uxtb	r3, r3
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	4910      	ldr	r1, [pc, #64]	; (800cb44 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	689a      	ldr	r2, [r3, #8]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	431a      	orrs	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	490c      	ldr	r1, [pc, #48]	; (800cb48 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	6919      	ldr	r1, [r3, #16]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	041b      	lsls	r3, r3, #16
 800cb2e:	430b      	orrs	r3, r1
 800cb30:	4905      	ldr	r1, [pc, #20]	; (800cb48 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	46007800 	.word	0x46007800
 800cb48:	46007c00 	.word	0x46007c00

0800cb4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e075      	b.n	800cc4a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d105      	bne.n	800cb76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7f8 f9fb 	bl	8004f6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2204      	movs	r2, #4
 800cb7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f868 	bl	800cc54 <HAL_SD_InitCard>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e05d      	b.n	800cc4a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cb8e:	f107 0308 	add.w	r3, r7, #8
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fd99 	bl	800d6cc <HAL_SD_GetCardStatus>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e052      	b.n	800cc4a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cba4:	7e3b      	ldrb	r3, [r7, #24]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cbaa:	7e7b      	ldrb	r3, [r7, #25]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d10a      	bne.n	800cbce <HAL_SD_Init+0x82>
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d102      	bne.n	800cbc4 <HAL_SD_Init+0x78>
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d004      	beq.n	800cbce <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbca:	659a      	str	r2, [r3, #88]	; 0x58
 800cbcc:	e00b      	b.n	800cbe6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d104      	bne.n	800cbe0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbdc:	659a      	str	r2, [r3, #88]	; 0x58
 800cbde:	e002      	b.n	800cbe6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fe2b 	bl	800d848 <HAL_SD_ConfigWideBusOperation>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e026      	b.n	800cc4a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cbfc:	f7f9 f868 	bl	8005cd0 <HAL_GetTick>
 800cc00:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cc02:	e011      	b.n	800cc28 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cc04:	f7f9 f864 	bl	8005cd0 <HAL_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc12:	d109      	bne.n	800cc28 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc1a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cc24:	2303      	movs	r3, #3
 800cc26:	e010      	b.n	800cc4a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 ff1f 	bl	800da6c <HAL_SD_GetCardState>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d1e7      	bne.n	800cc04 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3728      	adds	r7, #40	; 0x28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b08d      	sub	sp, #52	; 0x34
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cc60:	2300      	movs	r3, #0
 800cc62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cc64:	2300      	movs	r3, #0
 800cc66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cc6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cc70:	f04f 0100 	mov.w	r1, #0
 800cc74:	f7fe fa36 	bl	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc78:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d109      	bne.n	800cc94 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cc8e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e070      	b.n	800cd76 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	0a1b      	lsrs	r3, r3, #8
 800cc98:	4a39      	ldr	r2, [pc, #228]	; (800cd80 <HAL_SD_InitCard+0x12c>)
 800cc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9e:	091b      	lsrs	r3, r3, #4
 800cca0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681c      	ldr	r4, [r3, #0]
 800cca6:	466a      	mov	r2, sp
 800cca8:	f107 0318 	add.w	r3, r7, #24
 800ccac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ccb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800ccb4:	f107 030c 	add.w	r3, r7, #12
 800ccb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f003 fc8a 	bl	80105d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f003 fccd 	bl	8010664 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d007      	beq.n	800ccf2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cce2:	4a28      	ldr	r2, [pc, #160]	; (800cd84 <HAL_SD_InitCard+0x130>)
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccea:	3301      	adds	r3, #1
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7f8 fffb 	bl	8005ce8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 ffa8 	bl	800dc48 <SD_PowerON>
 800ccf8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e02e      	b.n	800cd76 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fec7 	bl	800daac <SD_InitCard>
 800cd1e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00b      	beq.n	800cd3e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	431a      	orrs	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e01b      	b.n	800cd76 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd46:	4618      	mov	r0, r3
 800cd48:	f003 fd22 	bl	8010790 <SDMMC_CmdBlockLength>
 800cd4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00f      	beq.n	800cd74 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a0b      	ldr	r2, [pc, #44]	; (800cd88 <HAL_SD_InitCard+0x134>)
 800cd5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e000      	b.n	800cd76 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	372c      	adds	r7, #44	; 0x2c
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd90      	pop	{r4, r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	014f8b59 	.word	0x014f8b59
 800cd84:	00012110 	.word	0x00012110
 800cd88:	1fe00fff 	.word	0x1fe00fff

0800cd8c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08c      	sub	sp, #48	; 0x30
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d107      	bne.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e08d      	b.n	800ced0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	f040 8086 	bne.w	800cece <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cdc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	441a      	add	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d907      	bls.n	800cde6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e074      	b.n	800ced0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2203      	movs	r2, #3
 800cdea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	025a      	lsls	r2, r3, #9
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d002      	beq.n	800ce12 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	025b      	lsls	r3, r3, #9
 800ce10:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce12:	f04f 33ff 	mov.w	r3, #4294967295
 800ce16:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	025b      	lsls	r3, r3, #9
 800ce1c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce1e:	2390      	movs	r3, #144	; 0x90
 800ce20:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ce22:	2302      	movs	r3, #2
 800ce24:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f107 0210 	add.w	r2, r7, #16
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f003 fc7d 	bl	8010738 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce4c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASER = (uint32_t) pData ;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d90a      	bls.n	800ce7a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2282      	movs	r2, #130	; 0x82
 800ce68:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce70:	4618      	mov	r0, r3
 800ce72:	f003 fcd3 	bl	801081c <SDMMC_CmdReadMultiBlock>
 800ce76:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce78:	e009      	b.n	800ce8e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2281      	movs	r2, #129	; 0x81
 800ce7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce86:	4618      	mov	r0, r3
 800ce88:	f003 fca5 	bl	80107d6 <SDMMC_CmdReadSingleBlock>
 800ce8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d012      	beq.n	800ceba <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a0f      	ldr	r2, [pc, #60]	; (800ced8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	431a      	orrs	r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e00a      	b.n	800ced0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cec8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	e000      	b.n	800ced0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cece:	2302      	movs	r3, #2
  }
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3730      	adds	r7, #48	; 0x30
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	1fe00fff 	.word	0x1fe00fff

0800cedc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08c      	sub	sp, #48	; 0x30
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d107      	bne.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e08d      	b.n	800d020 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	f040 8086 	bne.w	800d01e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	441a      	add	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d907      	bls.n	800cf36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e074      	b.n	800d020 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	025a      	lsls	r2, r3, #9
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d002      	beq.n	800cf62 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	025b      	lsls	r3, r3, #9
 800cf60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf62:	f04f 33ff 	mov.w	r3, #4294967295
 800cf66:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	025b      	lsls	r3, r3, #9
 800cf6c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf6e:	2390      	movs	r3, #144	; 0x90
 800cf70:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f107 0210 	add.w	r2, r7, #16
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f003 fbd5 	bl	8010738 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf9c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASER = (uint32_t) pData ;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d90a      	bls.n	800cfca <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	22a0      	movs	r2, #160	; 0xa0
 800cfb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f003 fc71 	bl	80108a8 <SDMMC_CmdWriteMultiBlock>
 800cfc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cfc8:	e009      	b.n	800cfde <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2290      	movs	r2, #144	; 0x90
 800cfce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f003 fc43 	bl	8010862 <SDMMC_CmdWriteSingleBlock>
 800cfdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d012      	beq.n	800d00a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a0f      	ldr	r2, [pc, #60]	; (800d028 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cfea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	431a      	orrs	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e00a      	b.n	800d020 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d018:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	e000      	b.n	800d020 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d01e:	2302      	movs	r3, #2
  }
}
 800d020:	4618      	mov	r0, r3
 800d022:	3730      	adds	r7, #48	; 0x30
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	1fe00fff 	.word	0x1fe00fff

0800d02c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d038:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d044:	2b00      	cmp	r3, #0
 800d046:	d008      	beq.n	800d05a <HAL_SD_IRQHandler+0x2e>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f003 0308 	and.w	r3, r3, #8
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 f8e4 	bl	800e220 <SD_Read_IT>
 800d058:	e186      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 80ae 	beq.w	800d1c6 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6812      	ldr	r2, [r2, #0]
 800d07e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d082:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d086:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d096:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68da      	ldr	r2, [r3, #12]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0a6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d038      	beq.n	800d124 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d104      	bne.n	800d0c6 <HAL_SD_IRQHandler+0x9a>
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f003 0320 	and.w	r3, r3, #32
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d011      	beq.n	800d0ea <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f003 fc10 	bl	80108f0 <SDMMC_CmdStopTransfer>
 800d0d0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f943 	bl	800d370 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a9b      	ldr	r2, [pc, #620]	; (800d35c <HAL_SD_IRQHandler+0x330>)
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d104      	bne.n	800d114 <HAL_SD_IRQHandler+0xe8>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d003      	beq.n	800d11c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f004 f899 	bl	801124c <HAL_SD_RxCpltCallback>
 800d11a:	e125      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f004 f885 	bl	801122c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d122:	e121      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f000 811c 	beq.w	800d368 <HAL_SD_IRQHandler+0x33c>
      hsd->Instance->DLEN = 0;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2200      	movs	r2, #0
 800d136:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2200      	movs	r2, #0
 800d13e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2200      	movs	r2, #0
 800d146:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d104      	bne.n	800d15c <HAL_SD_IRQHandler+0x130>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f003 0320 	and.w	r3, r3, #32
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d011      	beq.n	800d180 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f003 fbc5 	bl	80108f0 <SDMMC_CmdStopTransfer>
 800d166:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d008      	beq.n	800d180 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	431a      	orrs	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f8f8 	bl	800d370 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f003 0310 	and.w	r3, r3, #16
 800d194:	2b00      	cmp	r3, #0
 800d196:	d104      	bne.n	800d1a2 <HAL_SD_IRQHandler+0x176>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f003 0320 	and.w	r3, r3, #32
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f004 f842 	bl	801122c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <HAL_SD_IRQHandler+0x192>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f003 0302 	and.w	r3, r3, #2
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f000 80d5 	beq.w	800d368 <HAL_SD_IRQHandler+0x33c>
        HAL_SD_RxCpltCallback(hsd);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f004 f844 	bl	801124c <HAL_SD_RxCpltCallback>
}
 800d1c4:	e0d0      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <HAL_SD_IRQHandler+0x1ba>
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f003 0308 	and.w	r3, r3, #8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f001 f864 	bl	800e2ac <SD_Write_IT>
 800d1e4:	e0c0      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ec:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 809d 	beq.w	800d330 <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d208:	f043 0202 	orr.w	r2, r3, #2
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d216:	f003 0308 	and.w	r3, r3, #8
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d005      	beq.n	800d22a <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d222:	f043 0208 	orr.w	r2, r3, #8
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b00      	cmp	r3, #0
 800d236:	d005      	beq.n	800d244 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23c:	f043 0220 	orr.w	r2, r3, #32
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	f003 0310 	and.w	r3, r3, #16
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d005      	beq.n	800d25e <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d256:	f043 0210 	orr.w	r2, r3, #16
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a3e      	ldr	r2, [pc, #248]	; (800d35c <HAL_SD_IRQHandler+0x330>)
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d274:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68da      	ldr	r2, [r3, #12]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d284:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d294:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2a4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f003 fb20 	bl	80108f0 <SDMMC_CmdStopTransfer>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68da      	ldr	r2, [r3, #12]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2ca:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2d4:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f003 0308 	and.w	r3, r3, #8
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f83e 	bl	800d370 <HAL_SD_ErrorCallback>
}
 800d2f4:	e038      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d033      	beq.n	800d368 <HAL_SD_IRQHandler+0x33c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d304:	2b00      	cmp	r3, #0
 800d306:	d02f      	beq.n	800d368 <HAL_SD_IRQHandler+0x33c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d316:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f821 	bl	800d370 <HAL_SD_ErrorCallback>
}
 800d32e:	e01b      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d014      	beq.n	800d368 <HAL_SD_IRQHandler+0x33c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d346:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f003 0320 	and.w	r3, r3, #32
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <HAL_SD_IRQHandler+0x334>
      HAL_SDEx_Write_DMALnkLstBufCpltCallback(hsd);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fffe 	bl	800e354 <HAL_SDEx_Write_DMALnkLstBufCpltCallback>
}
 800d358:	e006      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
 800d35a:	bf00      	nop
 800d35c:	18000f3a 	.word	0x18000f3a
      HAL_SDEx_Read_DMALnkLstBufCpltCallback(hsd);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 ffed 	bl	800e340 <HAL_SDEx_Read_DMALnkLstBufCpltCallback>
}
 800d366:	e7ff      	b.n	800d368 <HAL_SD_IRQHandler+0x33c>
 800d368:	bf00      	nop
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d392:	0f9b      	lsrs	r3, r3, #30
 800d394:	b2da      	uxtb	r2, r3
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d39e:	0e9b      	lsrs	r3, r3, #26
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 030f 	and.w	r3, r3, #15
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3b0:	0e1b      	lsrs	r3, r3, #24
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0303 	and.w	r3, r3, #3
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3c2:	0c1b      	lsrs	r3, r3, #16
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ce:	0a1b      	lsrs	r3, r3, #8
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3e4:	0d1b      	lsrs	r3, r3, #20
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3f0:	0c1b      	lsrs	r3, r3, #16
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d402:	0bdb      	lsrs	r3, r3, #15
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d414:	0b9b      	lsrs	r3, r3, #14
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d426:	0b5b      	lsrs	r3, r3, #13
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d438:	0b1b      	lsrs	r3, r3, #12
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	b2da      	uxtb	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2200      	movs	r2, #0
 800d44a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d450:	2b00      	cmp	r3, #0
 800d452:	d163      	bne.n	800d51c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d458:	009a      	lsls	r2, r3, #2
 800d45a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d45e:	4013      	ands	r3, r2
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d464:	0f92      	lsrs	r2, r2, #30
 800d466:	431a      	orrs	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d470:	0edb      	lsrs	r3, r3, #27
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 0307 	and.w	r3, r3, #7
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d482:	0e1b      	lsrs	r3, r3, #24
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d494:	0d5b      	lsrs	r3, r3, #21
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0307 	and.w	r3, r3, #7
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4a6:	0c9b      	lsrs	r3, r3, #18
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 0307 	and.w	r3, r3, #7
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4b8:	0bdb      	lsrs	r3, r3, #15
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	f003 0307 	and.w	r3, r3, #7
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	7e1b      	ldrb	r3, [r3, #24]
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	f003 0307 	and.w	r3, r3, #7
 800d4da:	3302      	adds	r3, #2
 800d4dc:	2201      	movs	r2, #1
 800d4de:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d4e6:	fb03 f202 	mul.w	r2, r3, r2
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	7a1b      	ldrb	r3, [r3, #8]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f003 030f 	and.w	r3, r3, #15
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	409a      	lsls	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d508:	0a52      	lsrs	r2, r2, #9
 800d50a:	fb03 f202 	mul.w	r2, r3, r2
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d518:	655a      	str	r2, [r3, #84]	; 0x54
 800d51a:	e031      	b.n	800d580 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d520:	2b01      	cmp	r3, #1
 800d522:	d11d      	bne.n	800d560 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d528:	041b      	lsls	r3, r3, #16
 800d52a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d532:	0c1b      	lsrs	r3, r3, #16
 800d534:	431a      	orrs	r2, r3
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	3301      	adds	r3, #1
 800d540:	029a      	lsls	r2, r3, #10
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d554:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	655a      	str	r2, [r3, #84]	; 0x54
 800d55e:	e00f      	b.n	800d580 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a58      	ldr	r2, [pc, #352]	; (800d6c8 <HAL_SD_GetCardCSD+0x344>)
 800d566:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e09d      	b.n	800d6bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d584:	0b9b      	lsrs	r3, r3, #14
 800d586:	b2db      	uxtb	r3, r3
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d596:	09db      	lsrs	r3, r3, #7
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b8:	0fdb      	lsrs	r3, r3, #31
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5c4:	0f5b      	lsrs	r3, r3, #29
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5d6:	0e9b      	lsrs	r3, r3, #26
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	f003 0307 	and.w	r3, r3, #7
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5e8:	0d9b      	lsrs	r3, r3, #22
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	f003 030f 	and.w	r3, r3, #15
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5fa:	0d5b      	lsrs	r3, r3, #21
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d616:	0c1b      	lsrs	r3, r3, #16
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d62a:	0bdb      	lsrs	r3, r3, #15
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	b2da      	uxtb	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d63e:	0b9b      	lsrs	r3, r3, #14
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d652:	0b5b      	lsrs	r3, r3, #13
 800d654:	b2db      	uxtb	r3, r3
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d666:	0b1b      	lsrs	r3, r3, #12
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d67a:	0a9b      	lsrs	r3, r3, #10
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	b2da      	uxtb	r2, r3
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d68e:	0a1b      	lsrs	r3, r3, #8
 800d690:	b2db      	uxtb	r3, r3
 800d692:	f003 0303 	and.w	r3, r3, #3
 800d696:	b2da      	uxtb	r2, r3
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a2:	085b      	lsrs	r3, r3, #1
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	1fe00fff 	.word	0x1fe00fff

0800d6cc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b094      	sub	sp, #80	; 0x50
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d101      	bne.n	800d6ec <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e0a7      	b.n	800d83c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d6ec:	f107 0308 	add.w	r3, r7, #8
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fb36 	bl	800dd64 <SD_SendSDStatus>
 800d6f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d011      	beq.n	800d724 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a4f      	ldr	r2, [pc, #316]	; (800d844 <HAL_SD_GetCardStatus+0x178>)
 800d706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d70e:	431a      	orrs	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d722:	e070      	b.n	800d806 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	099b      	lsrs	r3, r3, #6
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f003 0303 	and.w	r3, r3, #3
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	095b      	lsrs	r3, r3, #5
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d74e:	b29a      	uxth	r2, r3
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	0e1b      	lsrs	r3, r3, #24
 800d754:	b29b      	uxth	r3, r3
 800d756:	4313      	orrs	r3, r2
 800d758:	b29a      	uxth	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	061a      	lsls	r2, r3, #24
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	021b      	lsls	r3, r3, #8
 800d766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d76a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	0a1b      	lsrs	r3, r3, #8
 800d770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d774:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	0e1b      	lsrs	r3, r3, #24
 800d77a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	b2da      	uxtb	r2, r3
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	0a1b      	lsrs	r3, r3, #8
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	0d1b      	lsrs	r3, r3, #20
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 030f 	and.w	r3, r3, #15
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	0c1b      	lsrs	r3, r3, #16
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	0a9b      	lsrs	r3, r3, #10
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	0a1b      	lsrs	r3, r3, #8
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 0303 	and.w	r3, r3, #3
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	091b      	lsrs	r3, r3, #4
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 030f 	and.w	r3, r3, #15
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	0e1b      	lsrs	r3, r3, #24
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d80e:	4618      	mov	r0, r3
 800d810:	f002 ffbe 	bl	8010790 <SDMMC_CmdBlockLength>
 800d814:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00d      	beq.n	800d838 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a08      	ldr	r2, [pc, #32]	; (800d844 <HAL_SD_GetCardStatus+0x178>)
 800d822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d828:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d838:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3750      	adds	r7, #80	; 0x50
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	1fe00fff 	.word	0x1fe00fff

0800d848 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d848:	b590      	push	{r4, r7, lr}
 800d84a:	b08d      	sub	sp, #52	; 0x34
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2203      	movs	r2, #3
 800d85c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	2b03      	cmp	r3, #3
 800d866:	d02e      	beq.n	800d8c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d86e:	d106      	bne.n	800d87e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	635a      	str	r2, [r3, #52]	; 0x34
 800d87c:	e029      	b.n	800d8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d884:	d10a      	bne.n	800d89c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fb64 	bl	800df54 <SD_WideBus_Enable>
 800d88c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d892:	6a3b      	ldr	r3, [r7, #32]
 800d894:	431a      	orrs	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	635a      	str	r2, [r3, #52]	; 0x34
 800d89a:	e01a      	b.n	800d8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10a      	bne.n	800d8b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fba1 	bl	800dfea <SD_WideBus_Disable>
 800d8a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	431a      	orrs	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	635a      	str	r2, [r3, #52]	; 0x34
 800d8b6:	e00c      	b.n	800d8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	635a      	str	r2, [r3, #52]	; 0x34
 800d8c4:	e005      	b.n	800d8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a5f      	ldr	r2, [pc, #380]	; (800da5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8e8:	e096      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d8ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d8ee:	f04f 0100 	mov.w	r1, #0
 800d8f2:	f7fd fbf7 	bl	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d8f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f000 8083 	beq.w	800da06 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	695a      	ldr	r2, [r3, #20]
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	4950      	ldr	r1, [pc, #320]	; (800da60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d91e:	fba1 1303 	umull	r1, r3, r1, r3
 800d922:	0e1b      	lsrs	r3, r3, #24
 800d924:	429a      	cmp	r2, r3
 800d926:	d303      	bcc.n	800d930 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	e05a      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d938:	d103      	bne.n	800d942 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	61bb      	str	r3, [r7, #24]
 800d940:	e051      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d94a:	d126      	bne.n	800d99a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10e      	bne.n	800d972 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	4a43      	ldr	r2, [pc, #268]	; (800da64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d906      	bls.n	800d96a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	4a40      	ldr	r2, [pc, #256]	; (800da60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d960:	fba2 2303 	umull	r2, r3, r2, r3
 800d964:	0e5b      	lsrs	r3, r3, #25
 800d966:	61bb      	str	r3, [r7, #24]
 800d968:	e03d      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	61bb      	str	r3, [r7, #24]
 800d970:	e039      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	695b      	ldr	r3, [r3, #20]
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	69fa      	ldr	r2, [r7, #28]
 800d97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97e:	4a39      	ldr	r2, [pc, #228]	; (800da64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d906      	bls.n	800d992 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	4a36      	ldr	r2, [pc, #216]	; (800da60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d988:	fba2 2303 	umull	r2, r3, r2, r3
 800d98c:	0e5b      	lsrs	r3, r3, #25
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	e029      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	61bb      	str	r3, [r7, #24]
 800d998:	e025      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10e      	bne.n	800d9c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	4a30      	ldr	r2, [pc, #192]	; (800da68 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d906      	bls.n	800d9b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4a2c      	ldr	r2, [pc, #176]	; (800da60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b2:	0e1b      	lsrs	r3, r3, #24
 800d9b4:	61bb      	str	r3, [r7, #24]
 800d9b6:	e016      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	e012      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	69fa      	ldr	r2, [r7, #28]
 800d9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9cc:	4a26      	ldr	r2, [pc, #152]	; (800da68 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d906      	bls.n	800d9e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	4a22      	ldr	r2, [pc, #136]	; (800da60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9da:	0e1b      	lsrs	r3, r3, #24
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	e002      	b.n	800d9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681c      	ldr	r4, [r3, #0]
 800d9ea:	466a      	mov	r2, sp
 800d9ec:	f107 0314 	add.w	r3, r7, #20
 800d9f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9f4:	e882 0003 	stmia.w	r2, {r0, r1}
 800d9f8:	f107 0308 	add.w	r3, r7, #8
 800d9fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9fe:	4620      	mov	r0, r4
 800da00:	f002 fde8 	bl	80105d4 <SDMMC_Init>
 800da04:	e008      	b.n	800da18 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da20:	4618      	mov	r0, r3
 800da22:	f002 feb5 	bl	8010790 <SDMMC_CmdBlockLength>
 800da26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00c      	beq.n	800da48 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	431a      	orrs	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da54:	4618      	mov	r0, r3
 800da56:	372c      	adds	r7, #44	; 0x2c
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd90      	pop	{r4, r7, pc}
 800da5c:	1fe00fff 	.word	0x1fe00fff
 800da60:	55e63b89 	.word	0x55e63b89
 800da64:	02faf080 	.word	0x02faf080
 800da68:	017d7840 	.word	0x017d7840

0800da6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da78:	f107 030c 	add.w	r3, r7, #12
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fa40 	bl	800df04 <SD_SendStatus>
 800da84:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	431a      	orrs	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	0a5b      	lsrs	r3, r3, #9
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800daa2:	693b      	ldr	r3, [r7, #16]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b090      	sub	sp, #64	; 0x40
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dab4:	2300      	movs	r3, #0
 800dab6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dab8:	f7f8 f90a 	bl	8005cd0 <HAL_GetTick>
 800dabc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f002 fddf 	bl	8010686 <SDMMC_GetPowerState>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dad2:	e0b5      	b.n	800dc40 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad8:	2b03      	cmp	r3, #3
 800dada:	d02e      	beq.n	800db3a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f003 f82a 	bl	8010b3a <SDMMC_CmdSendCID>
 800dae6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <SD_InitCard+0x46>
    {
      return errorstate;
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	e0a6      	b.n	800dc40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2100      	movs	r1, #0
 800daf8:	4618      	mov	r0, r3
 800dafa:	f002 fe0a 	bl	8010712 <SDMMC_GetResponse>
 800dafe:	4602      	mov	r2, r0
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2104      	movs	r1, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f002 fe01 	bl	8010712 <SDMMC_GetResponse>
 800db10:	4602      	mov	r2, r0
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2108      	movs	r1, #8
 800db1c:	4618      	mov	r0, r3
 800db1e:	f002 fdf8 	bl	8010712 <SDMMC_GetResponse>
 800db22:	4602      	mov	r2, r0
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	210c      	movs	r1, #12
 800db2e:	4618      	mov	r0, r3
 800db30:	f002 fdef 	bl	8010712 <SDMMC_GetResponse>
 800db34:	4602      	mov	r2, r0
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d01d      	beq.n	800db7e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800db42:	e019      	b.n	800db78 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f107 020a 	add.w	r2, r7, #10
 800db4c:	4611      	mov	r1, r2
 800db4e:	4618      	mov	r0, r3
 800db50:	f003 f832 	bl	8010bb8 <SDMMC_CmdSetRelAdd>
 800db54:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800db56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <SD_InitCard+0xb4>
      {
        return errorstate;
 800db5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5e:	e06f      	b.n	800dc40 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800db60:	f7f8 f8b6 	bl	8005cd0 <HAL_GetTick>
 800db64:	4602      	mov	r2, r0
 800db66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	f241 3287 	movw	r2, #4999	; 0x1387
 800db6e:	4293      	cmp	r3, r2
 800db70:	d902      	bls.n	800db78 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800db72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db76:	e063      	b.n	800dc40 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800db78:	897b      	ldrh	r3, [r7, #10]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0e2      	beq.n	800db44 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	2b03      	cmp	r3, #3
 800db84:	d036      	beq.n	800dbf4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db86:	897b      	ldrh	r3, [r7, #10]
 800db88:	461a      	mov	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db96:	041b      	lsls	r3, r3, #16
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f002 ffec 	bl	8010b78 <SDMMC_CmdSendCSD>
 800dba0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <SD_InitCard+0x100>
    {
      return errorstate;
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	e049      	b.n	800dc40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f002 fdad 	bl	8010712 <SDMMC_GetResponse>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2104      	movs	r1, #4
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f002 fda4 	bl	8010712 <SDMMC_GetResponse>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2108      	movs	r1, #8
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f002 fd9b 	bl	8010712 <SDMMC_GetResponse>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	210c      	movs	r1, #12
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f002 fd92 	bl	8010712 <SDMMC_GetResponse>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2104      	movs	r1, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f002 fd89 	bl	8010712 <SDMMC_GetResponse>
 800dc00:	4603      	mov	r3, r0
 800dc02:	0d1a      	lsrs	r2, r3, #20
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dc08:	f107 030c 	add.w	r3, r7, #12
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fbb8 	bl	800d384 <HAL_SD_GetCardCSD>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc1e:	e00f      	b.n	800dc40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc28:	041b      	lsls	r3, r3, #16
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f002 fe9b 	bl	8010968 <SDMMC_CmdSelDesel>
 800dc32:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <SD_InitCard+0x192>
  {
    return errorstate;
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	e000      	b.n	800dc40 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3740      	adds	r7, #64	; 0x40
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 fea4 	bl	80109ae <SDMMC_CmdGoIdleState>
 800dc66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	e072      	b.n	800dd58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f002 feb7 	bl	80109ea <SDMMC_CmdOperCond>
 800dc7c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc84:	d10d      	bne.n	800dca2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f002 fe8c 	bl	80109ae <SDMMC_CmdGoIdleState>
 800dc96:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d004      	beq.n	800dca8 <SD_PowerON+0x60>
    {
      return errorstate;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	e05a      	b.n	800dd58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d137      	bne.n	800dd20 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f002 feb7 	bl	8010a2a <SDMMC_CmdAppCommand>
 800dcbc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d02d      	beq.n	800dd20 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcc8:	e046      	b.n	800dd58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f002 feaa 	bl	8010a2a <SDMMC_CmdAppCommand>
 800dcd6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	e03a      	b.n	800dd58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	491e      	ldr	r1, [pc, #120]	; (800dd60 <SD_PowerON+0x118>)
 800dce8:	4618      	mov	r0, r3
 800dcea:	f002 fec1 	bl	8010a70 <SDMMC_CmdAppOperCommand>
 800dcee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcfa:	e02d      	b.n	800dd58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f002 fd05 	bl	8010712 <SDMMC_GetResponse>
 800dd08:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	0fdb      	lsrs	r3, r3, #31
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d101      	bne.n	800dd16 <SD_PowerON+0xce>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e000      	b.n	800dd18 <SD_PowerON+0xd0>
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]

    count++;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d802      	bhi.n	800dd30 <SD_PowerON+0xe8>
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0cc      	beq.n	800dcca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d902      	bls.n	800dd40 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dd3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd3e:	e00b      	b.n	800dd58 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	c1100000 	.word	0xc1100000

0800dd64 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08c      	sub	sp, #48	; 0x30
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd6e:	f7f7 ffaf 	bl	8005cd0 <HAL_GetTick>
 800dd72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f002 fcc7 	bl	8010712 <SDMMC_GetResponse>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd8e:	d102      	bne.n	800dd96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd94:	e0b0      	b.n	800def8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2140      	movs	r1, #64	; 0x40
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f002 fcf7 	bl	8010790 <SDMMC_CmdBlockLength>
 800dda2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d005      	beq.n	800ddb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	e0a0      	b.n	800def8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddbe:	041b      	lsls	r3, r3, #16
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f002 fe31 	bl	8010a2a <SDMMC_CmdAppCommand>
 800ddc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d005      	beq.n	800dddc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	e08d      	b.n	800def8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dddc:	f04f 33ff 	mov.w	r3, #4294967295
 800dde0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800dde2:	2340      	movs	r3, #64	; 0x40
 800dde4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800dde6:	2360      	movs	r3, #96	; 0x60
 800dde8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ddea:	2302      	movs	r3, #2
 800ddec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f107 0208 	add.w	r2, r7, #8
 800ddfe:	4611      	mov	r1, r2
 800de00:	4618      	mov	r0, r3
 800de02:	f002 fc99 	bl	8010738 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f002 ff19 	bl	8010c42 <SDMMC_CmdStatusRegister>
 800de10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de12:	6a3b      	ldr	r3, [r7, #32]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d02b      	beq.n	800de70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	e069      	b.n	800def8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d013      	beq.n	800de5a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800de32:	2300      	movs	r3, #0
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de36:	e00d      	b.n	800de54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f002 fbf3 	bl	8010628 <SDMMC_ReadFIFO>
 800de42:	4602      	mov	r2, r0
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	601a      	str	r2, [r3, #0]
        pData++;
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	3304      	adds	r3, #4
 800de4c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de50:	3301      	adds	r3, #1
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	2b07      	cmp	r3, #7
 800de58:	d9ee      	bls.n	800de38 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800de5a:	f7f7 ff39 	bl	8005cd0 <HAL_GetTick>
 800de5e:	4602      	mov	r2, r0
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de68:	d102      	bne.n	800de70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de6e:	e043      	b.n	800def8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de76:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0d2      	beq.n	800de24 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de84:	f003 0308 	and.w	r3, r3, #8
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800de8c:	2308      	movs	r3, #8
 800de8e:	e033      	b.n	800def8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de96:	f003 0302 	and.w	r3, r3, #2
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de9e:	2302      	movs	r3, #2
 800dea0:	e02a      	b.n	800def8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea8:	f003 0320 	and.w	r3, r3, #32
 800deac:	2b00      	cmp	r3, #0
 800deae:	d017      	beq.n	800dee0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800deb0:	2320      	movs	r3, #32
 800deb2:	e021      	b.n	800def8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fbb5 	bl	8010628 <SDMMC_ReadFIFO>
 800debe:	4602      	mov	r2, r0
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	601a      	str	r2, [r3, #0]
    pData++;
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	3304      	adds	r3, #4
 800dec8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800deca:	f7f7 ff01 	bl	8005cd0 <HAL_GetTick>
 800dece:	4602      	mov	r2, r0
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded8:	d102      	bne.n	800dee0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800deda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dede:	e00b      	b.n	800def8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1e2      	bne.n	800deb4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a03      	ldr	r2, [pc, #12]	; (800df00 <SD_SendSDStatus+0x19c>)
 800def4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3730      	adds	r7, #48	; 0x30
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	18000f3a 	.word	0x18000f3a

0800df04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d102      	bne.n	800df1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800df14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df18:	e018      	b.n	800df4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df22:	041b      	lsls	r3, r3, #16
 800df24:	4619      	mov	r1, r3
 800df26:	4610      	mov	r0, r2
 800df28:	f002 fe68 	bl	8010bfc <SDMMC_CmdSendStatus>
 800df2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <SD_SendStatus+0x34>
  {
    return errorstate;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	e009      	b.n	800df4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2100      	movs	r1, #0
 800df3e:	4618      	mov	r0, r3
 800df40:	f002 fbe7 	bl	8010712 <SDMMC_GetResponse>
 800df44:	4602      	mov	r2, r0
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800df5c:	2300      	movs	r3, #0
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	2300      	movs	r3, #0
 800df62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2100      	movs	r1, #0
 800df6a:	4618      	mov	r0, r3
 800df6c:	f002 fbd1 	bl	8010712 <SDMMC_GetResponse>
 800df70:	4603      	mov	r3, r0
 800df72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df7a:	d102      	bne.n	800df82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df80:	e02f      	b.n	800dfe2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df82:	f107 030c 	add.w	r3, r7, #12
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f879 	bl	800e080 <SD_FindSCR>
 800df8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	e023      	b.n	800dfe2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01c      	beq.n	800dfde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfac:	041b      	lsls	r3, r3, #16
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	f002 fd3a 	bl	8010a2a <SDMMC_CmdAppCommand>
 800dfb6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	e00f      	b.n	800dfe2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2102      	movs	r1, #2
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f002 fd71 	bl	8010ab0 <SDMMC_CmdBusWidth>
 800dfce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	e003      	b.n	800dfe2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e001      	b.n	800dfe2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3718      	adds	r7, #24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b086      	sub	sp, #24
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	2300      	movs	r3, #0
 800dff8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2100      	movs	r1, #0
 800e000:	4618      	mov	r0, r3
 800e002:	f002 fb86 	bl	8010712 <SDMMC_GetResponse>
 800e006:	4603      	mov	r3, r0
 800e008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e00c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e010:	d102      	bne.n	800e018 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e016:	e02f      	b.n	800e078 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e018:	f107 030c 	add.w	r3, r7, #12
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f82e 	bl	800e080 <SD_FindSCR>
 800e024:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	e023      	b.n	800e078 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e036:	2b00      	cmp	r3, #0
 800e038:	d01c      	beq.n	800e074 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	4619      	mov	r1, r3
 800e046:	4610      	mov	r0, r2
 800e048:	f002 fcef 	bl	8010a2a <SDMMC_CmdAppCommand>
 800e04c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	e00f      	b.n	800e078 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2100      	movs	r1, #0
 800e05e:	4618      	mov	r0, r3
 800e060:	f002 fd26 	bl	8010ab0 <SDMMC_CmdBusWidth>
 800e064:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	e003      	b.n	800e078 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e070:	2300      	movs	r3, #0
 800e072:	e001      	b.n	800e078 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e074:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3718      	adds	r7, #24
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b08e      	sub	sp, #56	; 0x38
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e08a:	f7f7 fe21 	bl	8005cd0 <HAL_GetTick>
 800e08e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e094:	2300      	movs	r3, #0
 800e096:	60bb      	str	r3, [r7, #8]
 800e098:	2300      	movs	r3, #0
 800e09a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2108      	movs	r1, #8
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f002 fb72 	bl	8010790 <SDMMC_CmdBlockLength>
 800e0ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b6:	e0ad      	b.n	800e214 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c0:	041b      	lsls	r3, r3, #16
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	f002 fcb0 	bl	8010a2a <SDMMC_CmdAppCommand>
 800e0ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d4:	e09e      	b.n	800e214 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e0dc:	2308      	movs	r3, #8
 800e0de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e0e0:	2330      	movs	r3, #48	; 0x30
 800e0e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f107 0210 	add.w	r2, r7, #16
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fb1c 	bl	8010738 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4618      	mov	r0, r3
 800e106:	f002 fcf6 	bl	8010af6 <SDMMC_CmdSendSCR>
 800e10a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d027      	beq.n	800e162 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	e07e      	b.n	800e214 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d113      	bne.n	800e14c <SD_FindSCR+0xcc>
 800e124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e126:	2b00      	cmp	r3, #0
 800e128:	d110      	bne.n	800e14c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4618      	mov	r0, r3
 800e130:	f002 fa7a 	bl	8010628 <SDMMC_ReadFIFO>
 800e134:	4603      	mov	r3, r0
 800e136:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f002 fa73 	bl	8010628 <SDMMC_ReadFIFO>
 800e142:	4603      	mov	r3, r0
 800e144:	60fb      	str	r3, [r7, #12]
      index++;
 800e146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e148:	3301      	adds	r3, #1
 800e14a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800e14c:	f7f7 fdc0 	bl	8005cd0 <HAL_GetTick>
 800e150:	4602      	mov	r2, r0
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15a:	d102      	bne.n	800e162 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e160:	e058      	b.n	800e214 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e168:	f240 532a 	movw	r3, #1322	; 0x52a
 800e16c:	4013      	ands	r3, r2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0d1      	beq.n	800e116 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e178:	f003 0308 	and.w	r3, r3, #8
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d005      	beq.n	800e18c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2208      	movs	r2, #8
 800e186:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e188:	2308      	movs	r3, #8
 800e18a:	e043      	b.n	800e214 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	f003 0302 	and.w	r3, r3, #2
 800e196:	2b00      	cmp	r3, #0
 800e198:	d005      	beq.n	800e1a6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	e036      	b.n	800e214 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d005      	beq.n	800e1c0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e1bc:	2320      	movs	r3, #32
 800e1be:	e029      	b.n	800e214 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a15      	ldr	r2, [pc, #84]	; (800e21c <SD_FindSCR+0x19c>)
 800e1c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	061a      	lsls	r2, r3, #24
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	021b      	lsls	r3, r3, #8
 800e1d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	0a1b      	lsrs	r3, r3, #8
 800e1da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e1de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	0e1b      	lsrs	r3, r3, #24
 800e1e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	601a      	str	r2, [r3, #0]
    scr++;
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	061a      	lsls	r2, r3, #24
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	021b      	lsls	r3, r3, #8
 800e1f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	0a1b      	lsrs	r3, r3, #8
 800e202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e206:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	0e1b      	lsrs	r3, r3, #24
 800e20c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3738      	adds	r7, #56	; 0x38
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	18000f3a 	.word	0x18000f3a

0800e220 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e232:	2b1f      	cmp	r3, #31
 800e234:	d936      	bls.n	800e2a4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e236:	2300      	movs	r3, #0
 800e238:	617b      	str	r3, [r7, #20]
 800e23a:	e027      	b.n	800e28c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f002 f9f1 	bl	8010628 <SDMMC_ReadFIFO>
 800e246:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	3301      	adds	r3, #1
 800e254:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	0a1b      	lsrs	r3, r3, #8
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	3301      	adds	r3, #1
 800e264:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	0c1b      	lsrs	r3, r3, #16
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	3301      	adds	r3, #1
 800e274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	0e1b      	lsrs	r3, r3, #24
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	3301      	adds	r3, #1
 800e284:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	3301      	adds	r3, #1
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	2b07      	cmp	r3, #7
 800e290:	d9d4      	bls.n	800e23c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29c:	f1a3 0220 	sub.w	r2, r3, #32
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e2a4:	bf00      	nop
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	2b1f      	cmp	r3, #31
 800e2c0:	d93a      	bls.n	800e338 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	e02b      	b.n	800e320 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	021a      	lsls	r2, r3, #8
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	041a      	lsls	r2, r3, #16
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	061a      	lsls	r2, r3, #24
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	4313      	orrs	r3, r2
 800e302:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	3301      	adds	r3, #1
 800e308:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f107 020c 	add.w	r2, r7, #12
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f002 f994 	bl	8010642 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	3301      	adds	r3, #1
 800e31e:	617b      	str	r3, [r7, #20]
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b07      	cmp	r3, #7
 800e324:	d9d0      	bls.n	800e2c8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a1b      	ldr	r3, [r3, #32]
 800e330:	f1a3 0220 	sub.w	r2, r3, #32
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	621a      	str	r2, [r3, #32]
  }
}
 800e338:	bf00      	nop
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <HAL_SDEx_Read_DMALnkLstBufCpltCallback>:
  * @brief Read DMA Linked list node Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMALnkLstBufCpltCallback(SD_HandleTypeDef *hsd)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMALnkLstBufCpltCallback can be implemented in the user file
   */
}
 800e348:	bf00      	nop
 800e34a:	370c      	adds	r7, #12
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <HAL_SDEx_Write_DMALnkLstBufCpltCallback>:
  * @brief Read DMA Linked list node Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMALnkLstBufCpltCallback(SD_HandleTypeDef *hsd)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMALnkLstBufCpltCallback can be implemented in the user file
   */
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e0fb      	b.n	800e572 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a7f      	ldr	r2, [pc, #508]	; (800e57c <HAL_SPI_Init+0x214>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d004      	beq.n	800e38e <HAL_SPI_Init+0x26>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a7d      	ldr	r2, [pc, #500]	; (800e580 <HAL_SPI_Init+0x218>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	e000      	b.n	800e390 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800e38e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a78      	ldr	r2, [pc, #480]	; (800e57c <HAL_SPI_Init+0x214>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d004      	beq.n	800e3aa <HAL_SPI_Init+0x42>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a76      	ldr	r2, [pc, #472]	; (800e580 <HAL_SPI_Init+0x218>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d105      	bne.n	800e3b6 <HAL_SPI_Init+0x4e>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	2b0f      	cmp	r3, #15
 800e3b0:	d901      	bls.n	800e3b6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e0dd      	b.n	800e572 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 f8ec 	bl	800e594 <SPI_GetPacketSize>
 800e3bc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a6e      	ldr	r2, [pc, #440]	; (800e57c <HAL_SPI_Init+0x214>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d004      	beq.n	800e3d2 <HAL_SPI_Init+0x6a>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a6c      	ldr	r2, [pc, #432]	; (800e580 <HAL_SPI_Init+0x218>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d102      	bne.n	800e3d8 <HAL_SPI_Init+0x70>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b08      	cmp	r3, #8
 800e3d6:	d816      	bhi.n	800e406 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3dc:	4a69      	ldr	r2, [pc, #420]	; (800e584 <HAL_SPI_Init+0x21c>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d00e      	beq.n	800e400 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a68      	ldr	r2, [pc, #416]	; (800e588 <HAL_SPI_Init+0x220>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d009      	beq.n	800e400 <HAL_SPI_Init+0x98>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a66      	ldr	r2, [pc, #408]	; (800e58c <HAL_SPI_Init+0x224>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d004      	beq.n	800e400 <HAL_SPI_Init+0x98>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a65      	ldr	r2, [pc, #404]	; (800e590 <HAL_SPI_Init+0x228>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d104      	bne.n	800e40a <HAL_SPI_Init+0xa2>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b10      	cmp	r3, #16
 800e404:	d901      	bls.n	800e40a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e0b3      	b.n	800e572 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d106      	bne.n	800e424 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7f6 fe6a 	bl	80050f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2202      	movs	r2, #2
 800e428:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f022 0201 	bic.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e446:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e450:	d119      	bne.n	800e486 <HAL_SPI_Init+0x11e>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e45a:	d103      	bne.n	800e464 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e460:	2b00      	cmp	r3, #0
 800e462:	d008      	beq.n	800e476 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10c      	bne.n	800e486 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e474:	d107      	bne.n	800e486 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e484:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00f      	beq.n	800e4b2 <HAL_SPI_Init+0x14a>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	2b06      	cmp	r3, #6
 800e498:	d90b      	bls.n	800e4b2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	e007      	b.n	800e4c2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	69da      	ldr	r2, [r3, #28]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	431a      	orrs	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d4:	ea42 0103 	orr.w	r1, r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	430a      	orrs	r2, r1
 800e4e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ec:	431a      	orrs	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	699b      	ldr	r3, [r3, #24]
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	431a      	orrs	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	431a      	orrs	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	431a      	orrs	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	431a      	orrs	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e516:	431a      	orrs	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	431a      	orrs	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e522:	431a      	orrs	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e528:	431a      	orrs	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e52e:	ea42 0103 	orr.w	r1, r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	430a      	orrs	r2, r1
 800e53c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00a      	beq.n	800e560 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	430a      	orrs	r2, r1
 800e55e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	46002000 	.word	0x46002000
 800e580:	56002000 	.word	0x56002000
 800e584:	40013000 	.word	0x40013000
 800e588:	50013000 	.word	0x50013000
 800e58c:	40003800 	.word	0x40003800
 800e590:	50003800 	.word	0x50003800

0800e594 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a0:	095b      	lsrs	r3, r3, #5
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	3307      	adds	r3, #7
 800e5b2:	08db      	lsrs	r3, r3, #3
 800e5b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d12e      	bne.n	800e63e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d101      	bne.n	800e5ee <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	e028      	b.n	800e640 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f022 0201 	bic.w	r2, r2, #1
 800e60c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800e61a:	ea42 0103 	orr.w	r1, r2, r3
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	689a      	ldr	r2, [r3, #8]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2201      	movs	r2, #1
 800e62e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	e000      	b.n	800e640 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
  }
}
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	e049      	b.n	800e6f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7f6 fe22 	bl	80052bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2202      	movs	r2, #2
 800e67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3304      	adds	r3, #4
 800e688:	4619      	mov	r1, r3
 800e68a:	4610      	mov	r0, r2
 800e68c:	f000 fa58 	bl	800eb40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2201      	movs	r2, #1
 800e694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d001      	beq.n	800e714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e710:	2301      	movs	r3, #1
 800e712:	e072      	b.n	800e7fa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0201 	orr.w	r2, r2, #1
 800e72a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a35      	ldr	r2, [pc, #212]	; (800e808 <HAL_TIM_Base_Start_IT+0x10c>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d040      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a34      	ldr	r2, [pc, #208]	; (800e80c <HAL_TIM_Base_Start_IT+0x110>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d03b      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e748:	d036      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e752:	d031      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a2d      	ldr	r2, [pc, #180]	; (800e810 <HAL_TIM_Base_Start_IT+0x114>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d02c      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a2c      	ldr	r2, [pc, #176]	; (800e814 <HAL_TIM_Base_Start_IT+0x118>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d027      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a2a      	ldr	r2, [pc, #168]	; (800e818 <HAL_TIM_Base_Start_IT+0x11c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d022      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a29      	ldr	r2, [pc, #164]	; (800e81c <HAL_TIM_Base_Start_IT+0x120>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d01d      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a27      	ldr	r2, [pc, #156]	; (800e820 <HAL_TIM_Base_Start_IT+0x124>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d018      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a26      	ldr	r2, [pc, #152]	; (800e824 <HAL_TIM_Base_Start_IT+0x128>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d013      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a24      	ldr	r2, [pc, #144]	; (800e828 <HAL_TIM_Base_Start_IT+0x12c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00e      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a23      	ldr	r2, [pc, #140]	; (800e82c <HAL_TIM_Base_Start_IT+0x130>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d009      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a21      	ldr	r2, [pc, #132]	; (800e830 <HAL_TIM_Base_Start_IT+0x134>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d004      	beq.n	800e7b8 <HAL_TIM_Base_Start_IT+0xbc>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a20      	ldr	r2, [pc, #128]	; (800e834 <HAL_TIM_Base_Start_IT+0x138>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d115      	bne.n	800e7e4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	4b1e      	ldr	r3, [pc, #120]	; (800e838 <HAL_TIM_Base_Start_IT+0x13c>)
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b06      	cmp	r3, #6
 800e7c8:	d015      	beq.n	800e7f6 <HAL_TIM_Base_Start_IT+0xfa>
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d0:	d011      	beq.n	800e7f6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f042 0201 	orr.w	r2, r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e2:	e008      	b.n	800e7f6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0201 	orr.w	r2, r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e000      	b.n	800e7f8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr
 800e806:	bf00      	nop
 800e808:	40012c00 	.word	0x40012c00
 800e80c:	50012c00 	.word	0x50012c00
 800e810:	40000400 	.word	0x40000400
 800e814:	50000400 	.word	0x50000400
 800e818:	40000800 	.word	0x40000800
 800e81c:	50000800 	.word	0x50000800
 800e820:	40000c00 	.word	0x40000c00
 800e824:	50000c00 	.word	0x50000c00
 800e828:	40013400 	.word	0x40013400
 800e82c:	50013400 	.word	0x50013400
 800e830:	40014000 	.word	0x40014000
 800e834:	50014000 	.word	0x50014000
 800e838:	00010007 	.word	0x00010007

0800e83c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	f003 0302 	and.w	r3, r3, #2
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d020      	beq.n	800e8a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f003 0302 	and.w	r3, r3, #2
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01b      	beq.n	800e8a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f06f 0202 	mvn.w	r2, #2
 800e870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f93b 	bl	800eb02 <HAL_TIM_IC_CaptureCallback>
 800e88c:	e005      	b.n	800e89a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f92d 	bl	800eaee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f93e 	bl	800eb16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f003 0304 	and.w	r3, r3, #4
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d020      	beq.n	800e8ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d01b      	beq.n	800e8ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f06f 0204 	mvn.w	r2, #4
 800e8bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d003      	beq.n	800e8da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f915 	bl	800eb02 <HAL_TIM_IC_CaptureCallback>
 800e8d8:	e005      	b.n	800e8e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 f907 	bl	800eaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f918 	bl	800eb16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	f003 0308 	and.w	r3, r3, #8
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d020      	beq.n	800e938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f003 0308 	and.w	r3, r3, #8
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d01b      	beq.n	800e938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f06f 0208 	mvn.w	r2, #8
 800e908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2204      	movs	r2, #4
 800e90e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	f003 0303 	and.w	r3, r3, #3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d003      	beq.n	800e926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f8ef 	bl	800eb02 <HAL_TIM_IC_CaptureCallback>
 800e924:	e005      	b.n	800e932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f8e1 	bl	800eaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 f8f2 	bl	800eb16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	f003 0310 	and.w	r3, r3, #16
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d020      	beq.n	800e984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f003 0310 	and.w	r3, r3, #16
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d01b      	beq.n	800e984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f06f 0210 	mvn.w	r2, #16
 800e954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2208      	movs	r2, #8
 800e95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f8c9 	bl	800eb02 <HAL_TIM_IC_CaptureCallback>
 800e970:	e005      	b.n	800e97e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f8bb 	bl	800eaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f8cc 	bl	800eb16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	f003 0301 	and.w	r3, r3, #1
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00c      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f003 0301 	and.w	r3, r3, #1
 800e994:	2b00      	cmp	r3, #0
 800e996:	d007      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f06f 0201 	mvn.w	r2, #1
 800e9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f899 	bl	800eada <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d104      	bne.n	800e9bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00c      	beq.n	800e9d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d007      	beq.n	800e9d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 fa7b 	bl	800eecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00c      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d007      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fa73 	bl	800eee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00c      	beq.n	800ea1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d007      	beq.n	800ea1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f886 	bl	800eb2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	f003 0320 	and.w	r3, r3, #32
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00c      	beq.n	800ea42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f003 0320 	and.w	r3, r3, #32
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d007      	beq.n	800ea42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f06f 0220 	mvn.w	r2, #32
 800ea3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fa3b 	bl	800eeb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00c      	beq.n	800ea66 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d007      	beq.n	800ea66 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ea5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fa47 	bl	800eef4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00c      	beq.n	800ea8a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d007      	beq.n	800ea8a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ea82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fa3f 	bl	800ef08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00c      	beq.n	800eaae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d007      	beq.n	800eaae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800eaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 fa37 	bl	800ef1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00c      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d007      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800eaca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 fa2f 	bl	800ef30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eada:	b480      	push	{r7}
 800eadc:	b083      	sub	sp, #12
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800eae2:	bf00      	nop
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr

0800eaee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaee:	b480      	push	{r7}
 800eaf0:	b083      	sub	sp, #12
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb0a:	bf00      	nop
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b083      	sub	sp, #12
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb1e:	bf00      	nop
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb2a:	b480      	push	{r7}
 800eb2c:	b083      	sub	sp, #12
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb32:	bf00      	nop
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
	...

0800eb40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a68      	ldr	r2, [pc, #416]	; (800ecf4 <TIM_Base_SetConfig+0x1b4>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d02b      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a67      	ldr	r2, [pc, #412]	; (800ecf8 <TIM_Base_SetConfig+0x1b8>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d027      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb66:	d023      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb6e:	d01f      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a62      	ldr	r2, [pc, #392]	; (800ecfc <TIM_Base_SetConfig+0x1bc>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d01b      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a61      	ldr	r2, [pc, #388]	; (800ed00 <TIM_Base_SetConfig+0x1c0>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d017      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a60      	ldr	r2, [pc, #384]	; (800ed04 <TIM_Base_SetConfig+0x1c4>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d013      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a5f      	ldr	r2, [pc, #380]	; (800ed08 <TIM_Base_SetConfig+0x1c8>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d00f      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a5e      	ldr	r2, [pc, #376]	; (800ed0c <TIM_Base_SetConfig+0x1cc>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d00b      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a5d      	ldr	r2, [pc, #372]	; (800ed10 <TIM_Base_SetConfig+0x1d0>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d007      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a5c      	ldr	r2, [pc, #368]	; (800ed14 <TIM_Base_SetConfig+0x1d4>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d003      	beq.n	800ebb0 <TIM_Base_SetConfig+0x70>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a5b      	ldr	r2, [pc, #364]	; (800ed18 <TIM_Base_SetConfig+0x1d8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d108      	bne.n	800ebc2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a4b      	ldr	r2, [pc, #300]	; (800ecf4 <TIM_Base_SetConfig+0x1b4>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d043      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a4a      	ldr	r2, [pc, #296]	; (800ecf8 <TIM_Base_SetConfig+0x1b8>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d03f      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebd8:	d03b      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ebe0:	d037      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a45      	ldr	r2, [pc, #276]	; (800ecfc <TIM_Base_SetConfig+0x1bc>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d033      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a44      	ldr	r2, [pc, #272]	; (800ed00 <TIM_Base_SetConfig+0x1c0>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d02f      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a43      	ldr	r2, [pc, #268]	; (800ed04 <TIM_Base_SetConfig+0x1c4>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d02b      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a42      	ldr	r2, [pc, #264]	; (800ed08 <TIM_Base_SetConfig+0x1c8>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d027      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a41      	ldr	r2, [pc, #260]	; (800ed0c <TIM_Base_SetConfig+0x1cc>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d023      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a40      	ldr	r2, [pc, #256]	; (800ed10 <TIM_Base_SetConfig+0x1d0>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d01f      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a3f      	ldr	r2, [pc, #252]	; (800ed14 <TIM_Base_SetConfig+0x1d4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d01b      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4a3e      	ldr	r2, [pc, #248]	; (800ed18 <TIM_Base_SetConfig+0x1d8>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d017      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4a3d      	ldr	r2, [pc, #244]	; (800ed1c <TIM_Base_SetConfig+0x1dc>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d013      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a3c      	ldr	r2, [pc, #240]	; (800ed20 <TIM_Base_SetConfig+0x1e0>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d00f      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a3b      	ldr	r2, [pc, #236]	; (800ed24 <TIM_Base_SetConfig+0x1e4>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d00b      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a3a      	ldr	r2, [pc, #232]	; (800ed28 <TIM_Base_SetConfig+0x1e8>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d007      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4a39      	ldr	r2, [pc, #228]	; (800ed2c <TIM_Base_SetConfig+0x1ec>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d003      	beq.n	800ec52 <TIM_Base_SetConfig+0x112>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a38      	ldr	r2, [pc, #224]	; (800ed30 <TIM_Base_SetConfig+0x1f0>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d108      	bne.n	800ec64 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a1a      	ldr	r2, [pc, #104]	; (800ecf4 <TIM_Base_SetConfig+0x1b4>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d023      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a19      	ldr	r2, [pc, #100]	; (800ecf8 <TIM_Base_SetConfig+0x1b8>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d01f      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4a1e      	ldr	r2, [pc, #120]	; (800ed14 <TIM_Base_SetConfig+0x1d4>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d01b      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4a1d      	ldr	r2, [pc, #116]	; (800ed18 <TIM_Base_SetConfig+0x1d8>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d017      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a1c      	ldr	r2, [pc, #112]	; (800ed1c <TIM_Base_SetConfig+0x1dc>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d013      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a1b      	ldr	r2, [pc, #108]	; (800ed20 <TIM_Base_SetConfig+0x1e0>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d00f      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4a1a      	ldr	r2, [pc, #104]	; (800ed24 <TIM_Base_SetConfig+0x1e4>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d00b      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4a19      	ldr	r2, [pc, #100]	; (800ed28 <TIM_Base_SetConfig+0x1e8>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d007      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a18      	ldr	r2, [pc, #96]	; (800ed2c <TIM_Base_SetConfig+0x1ec>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d003      	beq.n	800ecd8 <TIM_Base_SetConfig+0x198>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <TIM_Base_SetConfig+0x1f0>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d103      	bne.n	800ece0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	691a      	ldr	r2, [r3, #16]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	615a      	str	r2, [r3, #20]
}
 800ece6:	bf00      	nop
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	40012c00 	.word	0x40012c00
 800ecf8:	50012c00 	.word	0x50012c00
 800ecfc:	40000400 	.word	0x40000400
 800ed00:	50000400 	.word	0x50000400
 800ed04:	40000800 	.word	0x40000800
 800ed08:	50000800 	.word	0x50000800
 800ed0c:	40000c00 	.word	0x40000c00
 800ed10:	50000c00 	.word	0x50000c00
 800ed14:	40013400 	.word	0x40013400
 800ed18:	50013400 	.word	0x50013400
 800ed1c:	40014000 	.word	0x40014000
 800ed20:	50014000 	.word	0x50014000
 800ed24:	40014400 	.word	0x40014400
 800ed28:	50014400 	.word	0x50014400
 800ed2c:	40014800 	.word	0x40014800
 800ed30:	50014800 	.word	0x50014800

0800ed34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d101      	bne.n	800ed4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed48:	2302      	movs	r3, #2
 800ed4a:	e097      	b.n	800ee7c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2202      	movs	r2, #2
 800ed58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a45      	ldr	r2, [pc, #276]	; (800ee88 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d00e      	beq.n	800ed94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a44      	ldr	r2, [pc, #272]	; (800ee8c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d009      	beq.n	800ed94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a42      	ldr	r2, [pc, #264]	; (800ee90 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d004      	beq.n	800ed94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a41      	ldr	r2, [pc, #260]	; (800ee94 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d108      	bne.n	800eda6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800edac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	4313      	orrs	r3, r2
 800edba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a2f      	ldr	r2, [pc, #188]	; (800ee88 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d040      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a2e      	ldr	r2, [pc, #184]	; (800ee8c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d03b      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ede0:	d036      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800edea:	d031      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a29      	ldr	r2, [pc, #164]	; (800ee98 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d02c      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a28      	ldr	r2, [pc, #160]	; (800ee9c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d027      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a26      	ldr	r2, [pc, #152]	; (800eea0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d022      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a25      	ldr	r2, [pc, #148]	; (800eea4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d01d      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a23      	ldr	r2, [pc, #140]	; (800eea8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d018      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a22      	ldr	r2, [pc, #136]	; (800eeac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d013      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a18      	ldr	r2, [pc, #96]	; (800ee90 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d00e      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a17      	ldr	r2, [pc, #92]	; (800ee94 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d009      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a1b      	ldr	r2, [pc, #108]	; (800eeb0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d004      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a1a      	ldr	r2, [pc, #104]	; (800eeb4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d10c      	bne.n	800ee6a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	40012c00 	.word	0x40012c00
 800ee8c:	50012c00 	.word	0x50012c00
 800ee90:	40013400 	.word	0x40013400
 800ee94:	50013400 	.word	0x50013400
 800ee98:	40000400 	.word	0x40000400
 800ee9c:	50000400 	.word	0x50000400
 800eea0:	40000800 	.word	0x40000800
 800eea4:	50000800 	.word	0x50000800
 800eea8:	40000c00 	.word	0x40000c00
 800eeac:	50000c00 	.word	0x50000c00
 800eeb0:	40014000 	.word	0x40014000
 800eeb4:	50014000 	.word	0x50014000

0800eeb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ef24:	bf00      	nop
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef52:	2301      	movs	r3, #1
 800ef54:	e042      	b.n	800efdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d106      	bne.n	800ef6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7f6 fa2d 	bl	80053c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2224      	movs	r2, #36	; 0x24
 800ef72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f022 0201 	bic.w	r2, r2, #1
 800ef84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 fd48 	bl	800fa24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fba3 	bl	800f6e0 <UART_SetConfig>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d101      	bne.n	800efa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800efa0:	2301      	movs	r3, #1
 800efa2:	e01b      	b.n	800efdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800efb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	689a      	ldr	r2, [r3, #8]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800efc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f042 0201 	orr.w	r2, r2, #1
 800efd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fdc7 	bl	800fb68 <UART_CheckIdleState>
 800efda:	4603      	mov	r3, r0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b090      	sub	sp, #64	; 0x40
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800effa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	689b      	ldr	r3, [r3, #8]
 800f002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f006:	2b80      	cmp	r3, #128	; 0x80
 800f008:	d139      	bne.n	800f07e <HAL_UART_DMAStop+0x9a>
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	2b21      	cmp	r3, #33	; 0x21
 800f00e:	d136      	bne.n	800f07e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	3308      	adds	r3, #8
 800f016:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f018:	6a3b      	ldr	r3, [r7, #32]
 800f01a:	e853 3f00 	ldrex	r3, [r3]
 800f01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f026:	637b      	str	r3, [r7, #52]	; 0x34
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3308      	adds	r3, #8
 800f02e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f030:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f032:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f038:	e841 2300 	strex	r3, r2, [r1]
 800f03c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1e5      	bne.n	800f010 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d015      	beq.n	800f078 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f050:	4618      	mov	r0, r3
 800f052:	f7f6 ffdc 	bl	800600e <HAL_DMA_Abort>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00d      	beq.n	800f078 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f060:	4618      	mov	r0, r3
 800f062:	f7f7 f9f5 	bl	8006450 <HAL_DMA_GetError>
 800f066:	4603      	mov	r3, r0
 800f068:	2b10      	cmp	r3, #16
 800f06a:	d105      	bne.n	800f078 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2210      	movs	r2, #16
 800f070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800f074:	2303      	movs	r3, #3
 800f076:	e047      	b.n	800f108 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 ff7f 	bl	800ff7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f088:	2b40      	cmp	r3, #64	; 0x40
 800f08a:	d13c      	bne.n	800f106 <HAL_UART_DMAStop+0x122>
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	2b22      	cmp	r3, #34	; 0x22
 800f090:	d139      	bne.n	800f106 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3308      	adds	r3, #8
 800f098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	e853 3f00 	ldrex	r3, [r3]
 800f0a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0a8:	633b      	str	r3, [r7, #48]	; 0x30
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0b2:	61ba      	str	r2, [r7, #24]
 800f0b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	6979      	ldr	r1, [r7, #20]
 800f0b8:	69ba      	ldr	r2, [r7, #24]
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	613b      	str	r3, [r7, #16]
   return(result);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e5      	bne.n	800f092 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d017      	beq.n	800f100 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f6 ff99 	bl	800600e <HAL_DMA_Abort>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00e      	beq.n	800f100 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7f7 f9b1 	bl	8006450 <HAL_DMA_GetError>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b10      	cmp	r3, #16
 800f0f2:	d105      	bne.n	800f100 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2210      	movs	r2, #16
 800f0f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	e003      	b.n	800f108 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 ff7c 	bl	800fffe <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3740      	adds	r7, #64	; 0x40
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b0ae      	sub	sp, #184	; 0xb8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	69db      	ldr	r3, [r3, #28]
 800f11e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f13a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f13e:	4013      	ands	r3, r2
 800f140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800f144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d11b      	bne.n	800f184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f14c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f150:	f003 0320 	and.w	r3, r3, #32
 800f154:	2b00      	cmp	r3, #0
 800f156:	d015      	beq.n	800f184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f15c:	f003 0320 	and.w	r3, r3, #32
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d009      	beq.n	800f184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 827e 	beq.w	800f676 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	4798      	blx	r3
      }
      return;
 800f182:	e278      	b.n	800f676 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 80fd 	beq.w	800f388 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f18e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f192:	4b7a      	ldr	r3, [pc, #488]	; (800f37c <HAL_UART_IRQHandler+0x26c>)
 800f194:	4013      	ands	r3, r2
 800f196:	2b00      	cmp	r3, #0
 800f198:	d106      	bne.n	800f1a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f19a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f19e:	4b78      	ldr	r3, [pc, #480]	; (800f380 <HAL_UART_IRQHandler+0x270>)
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 80f0 	beq.w	800f388 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d011      	beq.n	800f1d8 <HAL_UART_IRQHandler+0xc8>
 800f1b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00b      	beq.n	800f1d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1ce:	f043 0201 	orr.w	r2, r3, #1
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f1dc:	f003 0302 	and.w	r3, r3, #2
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d011      	beq.n	800f208 <HAL_UART_IRQHandler+0xf8>
 800f1e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1e8:	f003 0301 	and.w	r3, r3, #1
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1fe:	f043 0204 	orr.w	r2, r3, #4
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d011      	beq.n	800f238 <HAL_UART_IRQHandler+0x128>
 800f214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00b      	beq.n	800f238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2204      	movs	r2, #4
 800f226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f22e:	f043 0202 	orr.w	r2, r3, #2
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f23c:	f003 0308 	and.w	r3, r3, #8
 800f240:	2b00      	cmp	r3, #0
 800f242:	d017      	beq.n	800f274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f248:	f003 0320 	and.w	r3, r3, #32
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d105      	bne.n	800f25c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f254:	4b49      	ldr	r3, [pc, #292]	; (800f37c <HAL_UART_IRQHandler+0x26c>)
 800f256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2208      	movs	r2, #8
 800f262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f26a:	f043 0208 	orr.w	r2, r3, #8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d012      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x196>
 800f280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00c      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f29c:	f043 0220 	orr.w	r2, r3, #32
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 81e4 	beq.w	800f67a <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f2b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2b6:	f003 0320 	and.w	r3, r3, #32
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d013      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f2be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f2c2:	f003 0320 	and.w	r3, r3, #32
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d105      	bne.n	800f2d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f2ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d007      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2fa:	2b40      	cmp	r3, #64	; 0x40
 800f2fc:	d005      	beq.n	800f30a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f2fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f302:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f306:	2b00      	cmp	r3, #0
 800f308:	d02e      	beq.n	800f368 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fe77 	bl	800fffe <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f31a:	2b40      	cmp	r3, #64	; 0x40
 800f31c:	d120      	bne.n	800f360 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f324:	2b00      	cmp	r3, #0
 800f326:	d017      	beq.n	800f358 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f32e:	4a15      	ldr	r2, [pc, #84]	; (800f384 <HAL_UART_IRQHandler+0x274>)
 800f330:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f6 fee4 	bl	8006106 <HAL_DMA_Abort_IT>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d019      	beq.n	800f378 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f352:	4610      	mov	r0, r2
 800f354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f356:	e00f      	b.n	800f378 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 f9b7 	bl	800f6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f35e:	e00b      	b.n	800f378 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f9b3 	bl	800f6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f366:	e007      	b.n	800f378 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f9af 	bl	800f6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800f376:	e180      	b.n	800f67a <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f378:	bf00      	nop
    return;
 800f37a:	e17e      	b.n	800f67a <HAL_UART_IRQHandler+0x56a>
 800f37c:	10000001 	.word	0x10000001
 800f380:	04000120 	.word	0x04000120
 800f384:	0801027b 	.word	0x0801027b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	f040 8129 	bne.w	800f5e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f396:	f003 0310 	and.w	r3, r3, #16
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 8122 	beq.w	800f5e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f3a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3a4:	f003 0310 	and.w	r3, r3, #16
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 811b 	beq.w	800f5e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2210      	movs	r2, #16
 800f3b4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c0:	2b40      	cmp	r3, #64	; 0x40
 800f3c2:	f040 8091 	bne.w	800f4e8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3d0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800f3d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 8150 	beq.w	800f67e <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3e4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	f080 8148 	bcs.w	800f67e <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800f3f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f400:	2b81      	cmp	r3, #129	; 0x81
 800f402:	d060      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f40c:	e853 3f00 	ldrex	r3, [r3]
 800f410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f42a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f42c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f42e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f432:	e841 2300 	strex	r3, r2, [r1]
 800f436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1e2      	bne.n	800f404 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f448:	e853 3f00 	ldrex	r3, [r3]
 800f44c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f44e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f450:	f023 0301 	bic.w	r3, r3, #1
 800f454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3308      	adds	r3, #8
 800f45e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f462:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f46a:	e841 2300 	strex	r3, r2, [r1]
 800f46e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1e3      	bne.n	800f43e <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2220      	movs	r2, #32
 800f47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f494:	f023 0310 	bic.w	r3, r3, #16
 800f498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4ae:	e841 2300 	strex	r3, r2, [r1]
 800f4b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1e4      	bne.n	800f484 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7f6 fda4 	bl	800600e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7f4 fdb9 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f4e6:	e0ca      	b.n	800f67e <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f502:	b29b      	uxth	r3, r3
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 80bc 	beq.w	800f682 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800f50a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f000 80b7 	beq.w	800f682 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51c:	e853 3f00 	ldrex	r3, [r3]
 800f520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f536:	647b      	str	r3, [r7, #68]	; 0x44
 800f538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f53c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f53e:	e841 2300 	strex	r3, r2, [r1]
 800f542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e4      	bne.n	800f514 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3308      	adds	r3, #8
 800f550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	e853 3f00 	ldrex	r3, [r3]
 800f558:	623b      	str	r3, [r7, #32]
   return(result);
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f560:	f023 0301 	bic.w	r3, r3, #1
 800f564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	3308      	adds	r3, #8
 800f56e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f572:	633a      	str	r2, [r7, #48]	; 0x30
 800f574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f57a:	e841 2300 	strex	r3, r2, [r1]
 800f57e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1e1      	bne.n	800f54a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2220      	movs	r2, #32
 800f58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2200      	movs	r2, #0
 800f592:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	e853 3f00 	ldrex	r3, [r3]
 800f5a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f023 0310 	bic.w	r3, r3, #16
 800f5ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5bc:	61fb      	str	r3, [r7, #28]
 800f5be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c0:	69b9      	ldr	r1, [r7, #24]
 800f5c2:	69fa      	ldr	r2, [r7, #28]
 800f5c4:	e841 2300 	strex	r3, r2, [r1]
 800f5c8:	617b      	str	r3, [r7, #20]
   return(result);
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d1e4      	bne.n	800f59a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f5d6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7f4 fd3b 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5e2:	e04e      	b.n	800f682 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f5e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f5e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d014      	beq.n	800f61a <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f5f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d105      	bne.n	800f608 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f604:	2b00      	cmp	r3, #0
 800f606:	d008      	beq.n	800f61a <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d03a      	beq.n	800f686 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	4798      	blx	r3
    }
    return;
 800f618:	e035      	b.n	800f686 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f622:	2b00      	cmp	r3, #0
 800f624:	d009      	beq.n	800f63a <HAL_UART_IRQHandler+0x52a>
 800f626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d003      	beq.n	800f63a <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 fe37 	bl	80102a6 <UART_EndTransmit_IT>
    return;
 800f638:	e026      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f63a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f63e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f642:	2b00      	cmp	r3, #0
 800f644:	d009      	beq.n	800f65a <HAL_UART_IRQHandler+0x54a>
 800f646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f64a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d003      	beq.n	800f65a <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fe5c 	bl	8010310 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f658:	e016      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f65a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f65e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f662:	2b00      	cmp	r3, #0
 800f664:	d010      	beq.n	800f688 <HAL_UART_IRQHandler+0x578>
 800f666:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	da0c      	bge.n	800f688 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fe44 	bl	80102fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f674:	e008      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
      return;
 800f676:	bf00      	nop
 800f678:	e006      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
    return;
 800f67a:	bf00      	nop
 800f67c:	e004      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
      return;
 800f67e:	bf00      	nop
 800f680:	e002      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
      return;
 800f682:	bf00      	nop
 800f684:	e000      	b.n	800f688 <HAL_UART_IRQHandler+0x578>
    return;
 800f686:	bf00      	nop
  }
}
 800f688:	37b8      	adds	r7, #184	; 0xb8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop

0800f690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6e4:	b094      	sub	sp, #80	; 0x50
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	4b7e      	ldr	r3, [pc, #504]	; (800f8f0 <UART_SetConfig+0x210>)
 800f6f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	689a      	ldr	r2, [r3, #8]
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	431a      	orrs	r2, r3
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	431a      	orrs	r2, r3
 800f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4977      	ldr	r1, [pc, #476]	; (800f8f4 <UART_SetConfig+0x214>)
 800f718:	4019      	ands	r1, r3
 800f71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f720:	430b      	orrs	r3, r1
 800f722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f730:	68d9      	ldr	r1, [r3, #12]
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	ea40 0301 	orr.w	r3, r0, r1
 800f73a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	699b      	ldr	r3, [r3, #24]
 800f740:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	4b6a      	ldr	r3, [pc, #424]	; (800f8f0 <UART_SetConfig+0x210>)
 800f748:	429a      	cmp	r2, r3
 800f74a:	d009      	beq.n	800f760 <UART_SetConfig+0x80>
 800f74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	4b69      	ldr	r3, [pc, #420]	; (800f8f8 <UART_SetConfig+0x218>)
 800f752:	429a      	cmp	r2, r3
 800f754:	d004      	beq.n	800f760 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f758:	6a1a      	ldr	r2, [r3, #32]
 800f75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f75c:	4313      	orrs	r3, r2
 800f75e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800f76a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f774:	430b      	orrs	r3, r1
 800f776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77e:	f023 000f 	bic.w	r0, r3, #15
 800f782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	ea40 0301 	orr.w	r3, r0, r1
 800f78e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	4b59      	ldr	r3, [pc, #356]	; (800f8fc <UART_SetConfig+0x21c>)
 800f796:	429a      	cmp	r2, r3
 800f798:	d102      	bne.n	800f7a0 <UART_SetConfig+0xc0>
 800f79a:	2301      	movs	r3, #1
 800f79c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f79e:	e029      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	4b56      	ldr	r3, [pc, #344]	; (800f900 <UART_SetConfig+0x220>)
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d102      	bne.n	800f7b0 <UART_SetConfig+0xd0>
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ae:	e021      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	4b53      	ldr	r3, [pc, #332]	; (800f904 <UART_SetConfig+0x224>)
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d102      	bne.n	800f7c0 <UART_SetConfig+0xe0>
 800f7ba:	2304      	movs	r3, #4
 800f7bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7be:	e019      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	4b50      	ldr	r3, [pc, #320]	; (800f908 <UART_SetConfig+0x228>)
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d102      	bne.n	800f7d0 <UART_SetConfig+0xf0>
 800f7ca:	2308      	movs	r3, #8
 800f7cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ce:	e011      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	4b4d      	ldr	r3, [pc, #308]	; (800f90c <UART_SetConfig+0x22c>)
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d102      	bne.n	800f7e0 <UART_SetConfig+0x100>
 800f7da:	2310      	movs	r3, #16
 800f7dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7de:	e009      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4b42      	ldr	r3, [pc, #264]	; (800f8f0 <UART_SetConfig+0x210>)
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d102      	bne.n	800f7f0 <UART_SetConfig+0x110>
 800f7ea:	2320      	movs	r3, #32
 800f7ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ee:	e001      	b.n	800f7f4 <UART_SetConfig+0x114>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	4b3d      	ldr	r3, [pc, #244]	; (800f8f0 <UART_SetConfig+0x210>)
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d005      	beq.n	800f80a <UART_SetConfig+0x12a>
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	4b3d      	ldr	r3, [pc, #244]	; (800f8f8 <UART_SetConfig+0x218>)
 800f804:	429a      	cmp	r2, r3
 800f806:	f040 8085 	bne.w	800f914 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f80c:	2200      	movs	r2, #0
 800f80e:	623b      	str	r3, [r7, #32]
 800f810:	627a      	str	r2, [r7, #36]	; 0x24
 800f812:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f816:	f7fb fc65 	bl	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f81a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800f81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f000 80e8 	beq.w	800f9f4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f828:	4a39      	ldr	r2, [pc, #228]	; (800f910 <UART_SetConfig+0x230>)
 800f82a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f82e:	461a      	mov	r2, r3
 800f830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f832:	fbb3 f3f2 	udiv	r3, r3, r2
 800f836:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	685a      	ldr	r2, [r3, #4]
 800f83c:	4613      	mov	r3, r2
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	4413      	add	r3, r2
 800f842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f844:	429a      	cmp	r2, r3
 800f846:	d305      	bcc.n	800f854 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f850:	429a      	cmp	r2, r3
 800f852:	d903      	bls.n	800f85c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800f854:	2301      	movs	r3, #1
 800f856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f85a:	e048      	b.n	800f8ee <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85e:	2200      	movs	r2, #0
 800f860:	61bb      	str	r3, [r7, #24]
 800f862:	61fa      	str	r2, [r7, #28]
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f868:	4a29      	ldr	r2, [pc, #164]	; (800f910 <UART_SetConfig+0x230>)
 800f86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	2200      	movs	r2, #0
 800f872:	613b      	str	r3, [r7, #16]
 800f874:	617a      	str	r2, [r7, #20]
 800f876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f87a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f87e:	f7f1 fa57 	bl	8000d30 <__aeabi_uldivmod>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	4610      	mov	r0, r2
 800f888:	4619      	mov	r1, r3
 800f88a:	f04f 0200 	mov.w	r2, #0
 800f88e:	f04f 0300 	mov.w	r3, #0
 800f892:	020b      	lsls	r3, r1, #8
 800f894:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f898:	0202      	lsls	r2, r0, #8
 800f89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f89c:	6849      	ldr	r1, [r1, #4]
 800f89e:	0849      	lsrs	r1, r1, #1
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	4605      	mov	r5, r0
 800f8a6:	eb12 0804 	adds.w	r8, r2, r4
 800f8aa:	eb43 0905 	adc.w	r9, r3, r5
 800f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	60bb      	str	r3, [r7, #8]
 800f8b6:	60fa      	str	r2, [r7, #12]
 800f8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8bc:	4640      	mov	r0, r8
 800f8be:	4649      	mov	r1, r9
 800f8c0:	f7f1 fa36 	bl	8000d30 <__aeabi_uldivmod>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8d2:	d308      	bcc.n	800f8e6 <UART_SetConfig+0x206>
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8da:	d204      	bcs.n	800f8e6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800f8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8e2:	60da      	str	r2, [r3, #12]
 800f8e4:	e003      	b.n	800f8ee <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800f8ec:	e082      	b.n	800f9f4 <UART_SetConfig+0x314>
 800f8ee:	e081      	b.n	800f9f4 <UART_SetConfig+0x314>
 800f8f0:	46002400 	.word	0x46002400
 800f8f4:	cfff69f3 	.word	0xcfff69f3
 800f8f8:	56002400 	.word	0x56002400
 800f8fc:	40013800 	.word	0x40013800
 800f900:	40004400 	.word	0x40004400
 800f904:	40004800 	.word	0x40004800
 800f908:	40004c00 	.word	0x40004c00
 800f90c:	40005000 	.word	0x40005000
 800f910:	08022b68 	.word	0x08022b68
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f91c:	d13c      	bne.n	800f998 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f920:	2200      	movs	r2, #0
 800f922:	603b      	str	r3, [r7, #0]
 800f924:	607a      	str	r2, [r7, #4]
 800f926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f92a:	f7fb fbdb 	bl	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f92e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f932:	2b00      	cmp	r3, #0
 800f934:	d05e      	beq.n	800f9f4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93a:	4a39      	ldr	r2, [pc, #228]	; (800fa20 <UART_SetConfig+0x340>)
 800f93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f940:	461a      	mov	r2, r3
 800f942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f944:	fbb3 f3f2 	udiv	r3, r3, r2
 800f948:	005a      	lsls	r2, r3, #1
 800f94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	085b      	lsrs	r3, r3, #1
 800f950:	441a      	add	r2, r3
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	fbb2 f3f3 	udiv	r3, r2, r3
 800f95a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95e:	2b0f      	cmp	r3, #15
 800f960:	d916      	bls.n	800f990 <UART_SetConfig+0x2b0>
 800f962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f968:	d212      	bcs.n	800f990 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	f023 030f 	bic.w	r3, r3, #15
 800f972:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f976:	085b      	lsrs	r3, r3, #1
 800f978:	b29b      	uxth	r3, r3
 800f97a:	f003 0307 	and.w	r3, r3, #7
 800f97e:	b29a      	uxth	r2, r3
 800f980:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f982:	4313      	orrs	r3, r2
 800f984:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800f986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f98c:	60da      	str	r2, [r3, #12]
 800f98e:	e031      	b.n	800f9f4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800f990:	2301      	movs	r3, #1
 800f992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f996:	e02d      	b.n	800f9f4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f99a:	2200      	movs	r2, #0
 800f99c:	469a      	mov	sl, r3
 800f99e:	4693      	mov	fp, r2
 800f9a0:	4650      	mov	r0, sl
 800f9a2:	4659      	mov	r1, fp
 800f9a4:	f7fb fb9e 	bl	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f9a8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800f9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d021      	beq.n	800f9f4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	4a1a      	ldr	r2, [pc, #104]	; (800fa20 <UART_SetConfig+0x340>)
 800f9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9be:	fbb3 f2f2 	udiv	r2, r3, r2
 800f9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	085b      	lsrs	r3, r3, #1
 800f9c8:	441a      	add	r2, r3
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d6:	2b0f      	cmp	r3, #15
 800f9d8:	d909      	bls.n	800f9ee <UART_SetConfig+0x30e>
 800f9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9e0:	d205      	bcs.n	800f9ee <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	60da      	str	r2, [r3, #12]
 800f9ec:	e002      	b.n	800f9f4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	2200      	movs	r2, #0
 800fa08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fa10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3750      	adds	r7, #80	; 0x50
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa1e:	bf00      	nop
 800fa20:	08022b68 	.word	0x08022b68

0800fa24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	f003 0308 	and.w	r3, r3, #8
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00a      	beq.n	800fa4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	430a      	orrs	r2, r1
 800fa4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa52:	f003 0301 	and.w	r3, r3, #1
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00a      	beq.n	800fa70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa74:	f003 0302 	and.w	r3, r3, #2
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00a      	beq.n	800fa92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	f003 0304 	and.w	r3, r3, #4
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00a      	beq.n	800fab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	430a      	orrs	r2, r1
 800fab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab8:	f003 0310 	and.w	r3, r3, #16
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00a      	beq.n	800fad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fada:	f003 0320 	and.w	r3, r3, #32
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00a      	beq.n	800faf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	430a      	orrs	r2, r1
 800faf6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d01a      	beq.n	800fb3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	430a      	orrs	r2, r1
 800fb18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb22:	d10a      	bne.n	800fb3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	430a      	orrs	r2, r1
 800fb38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	430a      	orrs	r2, r1
 800fb5a:	605a      	str	r2, [r3, #4]
  }
}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b098      	sub	sp, #96	; 0x60
 800fb6c:	af02      	add	r7, sp, #8
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb78:	f7f6 f8aa 	bl	8005cd0 <HAL_GetTick>
 800fb7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0308 	and.w	r3, r3, #8
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d12f      	bne.n	800fbec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb94:	2200      	movs	r2, #0
 800fb96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f88e 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d022      	beq.n	800fbec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	e853 3f00 	ldrex	r3, [r3]
 800fbb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbba:	653b      	str	r3, [r7, #80]	; 0x50
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc4:	647b      	str	r3, [r7, #68]	; 0x44
 800fbc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbcc:	e841 2300 	strex	r3, r2, [r1]
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e6      	bne.n	800fba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2220      	movs	r2, #32
 800fbdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fbe8:	2303      	movs	r3, #3
 800fbea:	e063      	b.n	800fcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f003 0304 	and.w	r3, r3, #4
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d149      	bne.n	800fc8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc02:	2200      	movs	r2, #0
 800fc04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f857 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d03c      	beq.n	800fc8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	e853 3f00 	ldrex	r3, [r3]
 800fc20:	623b      	str	r3, [r7, #32]
   return(result);
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc32:	633b      	str	r3, [r7, #48]	; 0x30
 800fc34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc3a:	e841 2300 	strex	r3, r2, [r1]
 800fc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1e6      	bne.n	800fc14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	e853 3f00 	ldrex	r3, [r3]
 800fc54:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f023 0301 	bic.w	r3, r3, #1
 800fc5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3308      	adds	r3, #8
 800fc64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc66:	61fa      	str	r2, [r7, #28]
 800fc68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6a:	69b9      	ldr	r1, [r7, #24]
 800fc6c:	69fa      	ldr	r2, [r7, #28]
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	617b      	str	r3, [r7, #20]
   return(result);
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e5      	bne.n	800fc46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc8a:	2303      	movs	r3, #3
 800fc8c:	e012      	b.n	800fcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2220      	movs	r2, #32
 800fc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2220      	movs	r2, #32
 800fc9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fcb2:	2300      	movs	r3, #0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3758      	adds	r7, #88	; 0x58
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	603b      	str	r3, [r7, #0]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fccc:	e049      	b.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd4:	d045      	beq.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcd6:	f7f5 fffb 	bl	8005cd0 <HAL_GetTick>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	69ba      	ldr	r2, [r7, #24]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d302      	bcc.n	800fcec <UART_WaitOnFlagUntilTimeout+0x30>
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d101      	bne.n	800fcf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e048      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d031      	beq.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	f003 0308 	and.w	r3, r3, #8
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	d110      	bne.n	800fd2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2208      	movs	r2, #8
 800fd12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd14:	68f8      	ldr	r0, [r7, #12]
 800fd16:	f000 f972 	bl	800fffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2208      	movs	r2, #8
 800fd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e029      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	69db      	ldr	r3, [r3, #28]
 800fd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd3c:	d111      	bne.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 f958 	bl	800fffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2220      	movs	r2, #32
 800fd52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fd5e:	2303      	movs	r3, #3
 800fd60:	e00f      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	69da      	ldr	r2, [r3, #28]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	bf0c      	ite	eq
 800fd72:	2301      	moveq	r3, #1
 800fd74:	2300      	movne	r3, #0
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	461a      	mov	r2, r3
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d0a6      	beq.n	800fcce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
	...

0800fd8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b098      	sub	sp, #96	; 0x60
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	4613      	mov	r3, r2
 800fd98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800fd9a:	88fb      	ldrh	r3, [r7, #6]
 800fd9c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	88fa      	ldrh	r2, [r7, #6]
 800fdaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2222      	movs	r2, #34	; 0x22
 800fdba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d07c      	beq.n	800fec2 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdce:	4a68      	ldr	r2, [pc, #416]	; (800ff70 <UART_Start_Receive_DMA+0x1e4>)
 800fdd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdd8:	4a66      	ldr	r2, [pc, #408]	; (800ff74 <UART_Start_Receive_DMA+0x1e8>)
 800fdda:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fde2:	4a65      	ldr	r2, [pc, #404]	; (800ff78 <UART_Start_Receive_DMA+0x1ec>)
 800fde4:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdec:	2200      	movs	r2, #0
 800fdee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdf8:	d107      	bne.n	800fe0a <UART_Start_Receive_DMA+0x7e>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d103      	bne.n	800fe0a <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	005b      	lsls	r3, r3, #1
 800fe06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d034      	beq.n	800fe84 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d02a      	beq.n	800fe7c <UART_Start_Receive_DMA+0xf0>
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d023      	beq.n	800fe7c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800fe42:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7f6 fc88 	bl	8006784 <HAL_DMAEx_List_Start_IT>
 800fe74:	4603      	mov	r3, r0
 800fe76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe7a:	e014      	b.n	800fea6 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe82:	e010      	b.n	800fea6 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	3324      	adds	r3, #36	; 0x24
 800fe90:	4619      	mov	r1, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe96:	461a      	mov	r2, r3
 800fe98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fe9c:	f7f6 f857 	bl	8005f4e <HAL_DMA_Start_IT>
 800fea0:	4603      	mov	r3, r0
 800fea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 800fea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d009      	beq.n	800fec2 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2210      	movs	r2, #16
 800feb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2220      	movs	r2, #32
 800feba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800febe:	2301      	movs	r3, #1
 800fec0:	e051      	b.n	800ff66 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d018      	beq.n	800fefc <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fede:	65bb      	str	r3, [r7, #88]	; 0x58
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800feea:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800feee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fef0:	e841 2300 	strex	r3, r2, [r1]
 800fef4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e6      	bne.n	800feca <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	3308      	adds	r3, #8
 800ff02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff06:	e853 3f00 	ldrex	r3, [r3]
 800ff0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	f043 0301 	orr.w	r3, r3, #1
 800ff12:	657b      	str	r3, [r7, #84]	; 0x54
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	3308      	adds	r3, #8
 800ff1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff1c:	63ba      	str	r2, [r7, #56]	; 0x38
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff24:	e841 2300 	strex	r3, r2, [r1]
 800ff28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1e5      	bne.n	800fefc <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	3308      	adds	r3, #8
 800ff36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	e853 3f00 	ldrex	r3, [r3]
 800ff3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff46:	653b      	str	r3, [r7, #80]	; 0x50
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3308      	adds	r3, #8
 800ff4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff50:	627a      	str	r2, [r7, #36]	; 0x24
 800ff52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff54:	6a39      	ldr	r1, [r7, #32]
 800ff56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff58:	e841 2300 	strex	r3, r2, [r1]
 800ff5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d1e5      	bne.n	800ff30 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3760      	adds	r7, #96	; 0x60
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	080100cb 	.word	0x080100cb
 800ff74:	080101bd 	.word	0x080101bd
 800ff78:	080101fb 	.word	0x080101fb

0800ff7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b08f      	sub	sp, #60	; 0x3c
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8a:	6a3b      	ldr	r3, [r7, #32]
 800ff8c:	e853 3f00 	ldrex	r3, [r3]
 800ff90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ff98:	637b      	str	r3, [r7, #52]	; 0x34
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffa4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffaa:	e841 2300 	strex	r3, r2, [r1]
 800ffae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1e6      	bne.n	800ff84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3308      	adds	r3, #8
 800ffbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	e853 3f00 	ldrex	r3, [r3]
 800ffc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ffcc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3308      	adds	r3, #8
 800ffd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffd6:	61ba      	str	r2, [r7, #24]
 800ffd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffda:	6979      	ldr	r1, [r7, #20]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	e841 2300 	strex	r3, r2, [r1]
 800ffe2:	613b      	str	r3, [r7, #16]
   return(result);
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d1e5      	bne.n	800ffb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2220      	movs	r2, #32
 800ffee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fff2:	bf00      	nop
 800fff4:	373c      	adds	r7, #60	; 0x3c
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fffe:	b480      	push	{r7}
 8010000:	b095      	sub	sp, #84	; 0x54
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000e:	e853 3f00 	ldrex	r3, [r3]
 8010012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801001a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	461a      	mov	r2, r3
 8010022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010024:	643b      	str	r3, [r7, #64]	; 0x40
 8010026:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801002a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e6      	bne.n	8010006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3308      	adds	r3, #8
 801003e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010040:	6a3b      	ldr	r3, [r7, #32]
 8010042:	e853 3f00 	ldrex	r3, [r3]
 8010046:	61fb      	str	r3, [r7, #28]
   return(result);
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801004e:	f023 0301 	bic.w	r3, r3, #1
 8010052:	64bb      	str	r3, [r7, #72]	; 0x48
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3308      	adds	r3, #8
 801005a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801005c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801005e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801006a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e3      	bne.n	8010038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010074:	2b01      	cmp	r3, #1
 8010076:	d118      	bne.n	80100aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	e853 3f00 	ldrex	r3, [r3]
 8010084:	60bb      	str	r3, [r7, #8]
   return(result);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	f023 0310 	bic.w	r3, r3, #16
 801008c:	647b      	str	r3, [r7, #68]	; 0x44
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010096:	61bb      	str	r3, [r7, #24]
 8010098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801009a:	6979      	ldr	r1, [r7, #20]
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	e841 2300 	strex	r3, r2, [r1]
 80100a2:	613b      	str	r3, [r7, #16]
   return(result);
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1e6      	bne.n	8010078 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2220      	movs	r2, #32
 80100ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80100be:	bf00      	nop
 80100c0:	3754      	adds	r7, #84	; 0x54
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b096      	sub	sp, #88	; 0x58
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100d6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100dc:	2b81      	cmp	r3, #129	; 0x81
 80100de:	d057      	beq.n	8010190 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 80100e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	e853 3f00 	ldrex	r3, [r3]
 80100f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100fc:	653b      	str	r3, [r7, #80]	; 0x50
 80100fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010106:	647b      	str	r3, [r7, #68]	; 0x44
 8010108:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801010a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801010c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801010e:	e841 2300 	strex	r3, r2, [r1]
 8010112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1e6      	bne.n	80100e8 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801011a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3308      	adds	r3, #8
 8010120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	e853 3f00 	ldrex	r3, [r3]
 8010128:	623b      	str	r3, [r7, #32]
   return(result);
 801012a:	6a3b      	ldr	r3, [r7, #32]
 801012c:	f023 0301 	bic.w	r3, r3, #1
 8010130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	3308      	adds	r3, #8
 8010138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801013a:	633a      	str	r2, [r7, #48]	; 0x30
 801013c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010142:	e841 2300 	strex	r3, r2, [r1]
 8010146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1e5      	bne.n	801011a <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801014e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010150:	2220      	movs	r2, #32
 8010152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801015a:	2b01      	cmp	r3, #1
 801015c:	d118      	bne.n	8010190 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801015e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	e853 3f00 	ldrex	r3, [r3]
 801016a:	60fb      	str	r3, [r7, #12]
   return(result);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f023 0310 	bic.w	r3, r3, #16
 8010172:	64bb      	str	r3, [r7, #72]	; 0x48
 8010174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	461a      	mov	r2, r3
 801017a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801017c:	61fb      	str	r3, [r7, #28]
 801017e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010180:	69b9      	ldr	r1, [r7, #24]
 8010182:	69fa      	ldr	r2, [r7, #28]
 8010184:	e841 2300 	strex	r3, r2, [r1]
 8010188:	617b      	str	r3, [r7, #20]
   return(result);
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1e6      	bne.n	801015e <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010192:	2200      	movs	r2, #0
 8010194:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801019a:	2b01      	cmp	r3, #1
 801019c:	d107      	bne.n	80101ae <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801019e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101a4:	4619      	mov	r1, r3
 80101a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80101a8:	f7f3 ff56 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80101ac:	e002      	b.n	80101b4 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 80101ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80101b0:	f7ff fa78 	bl	800f6a4 <HAL_UART_RxCpltCallback>
}
 80101b4:	bf00      	nop
 80101b6:	3758      	adds	r7, #88	; 0x58
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2201      	movs	r2, #1
 80101ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d109      	bne.n	80101ec <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101de:	085b      	lsrs	r3, r3, #1
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	4619      	mov	r1, r3
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f7f3 ff37 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80101ea:	e002      	b.n	80101f2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f7ff fa63 	bl	800f6b8 <HAL_UART_RxHalfCpltCallback>
}
 80101f2:	bf00      	nop
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b086      	sub	sp, #24
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010206:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801020e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010216:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010222:	2b80      	cmp	r3, #128	; 0x80
 8010224:	d109      	bne.n	801023a <UART_DMAError+0x40>
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	2b21      	cmp	r3, #33	; 0x21
 801022a:	d106      	bne.n	801023a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	2200      	movs	r2, #0
 8010230:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010234:	6978      	ldr	r0, [r7, #20]
 8010236:	f7ff fea1 	bl	800ff7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010244:	2b40      	cmp	r3, #64	; 0x40
 8010246:	d109      	bne.n	801025c <UART_DMAError+0x62>
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2b22      	cmp	r3, #34	; 0x22
 801024c:	d106      	bne.n	801025c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2200      	movs	r2, #0
 8010252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010256:	6978      	ldr	r0, [r7, #20]
 8010258:	f7ff fed1 	bl	800fffe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010262:	f043 0210 	orr.w	r2, r3, #16
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801026c:	6978      	ldr	r0, [r7, #20]
 801026e:	f7ff fa2d 	bl	800f6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010272:	bf00      	nop
 8010274:	3718      	adds	r7, #24
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2200      	movs	r2, #0
 801028c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2200      	movs	r2, #0
 8010294:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f7ff fa17 	bl	800f6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801029e:	bf00      	nop
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b088      	sub	sp, #32
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	e853 3f00 	ldrex	r3, [r3]
 80102ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	461a      	mov	r2, r3
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	61bb      	str	r3, [r7, #24]
 80102ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d0:	6979      	ldr	r1, [r7, #20]
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	e841 2300 	strex	r3, r2, [r1]
 80102d8:	613b      	str	r3, [r7, #16]
   return(result);
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d1e6      	bne.n	80102ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2220      	movs	r2, #32
 80102e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff f9ce 	bl	800f690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80102f4:	bf00      	nop
 80102f6:	3720      	adds	r7, #32
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010318:	bf00      	nop
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010332:	2b01      	cmp	r3, #1
 8010334:	d101      	bne.n	801033a <HAL_UARTEx_DisableFifoMode+0x16>
 8010336:	2302      	movs	r3, #2
 8010338:	e027      	b.n	801038a <HAL_UARTEx_DisableFifoMode+0x66>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2201      	movs	r2, #1
 801033e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2224      	movs	r2, #36	; 0x24
 8010346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f022 0201 	bic.w	r2, r2, #1
 8010360:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010368:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2220      	movs	r2, #32
 801037c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b084      	sub	sp, #16
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d101      	bne.n	80103ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80103aa:	2302      	movs	r3, #2
 80103ac:	e02d      	b.n	801040a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2224      	movs	r2, #36	; 0x24
 80103ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f022 0201 	bic.w	r2, r2, #1
 80103d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	683a      	ldr	r2, [r7, #0]
 80103e6:	430a      	orrs	r2, r1
 80103e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f8a4 	bl	8010538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2220      	movs	r2, #32
 80103fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010422:	2b01      	cmp	r3, #1
 8010424:	d101      	bne.n	801042a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010426:	2302      	movs	r3, #2
 8010428:	e02d      	b.n	8010486 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2224      	movs	r2, #36	; 0x24
 8010436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f022 0201 	bic.w	r2, r2, #1
 8010450:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	689b      	ldr	r3, [r3, #8]
 8010458:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	430a      	orrs	r2, r1
 8010464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f866 	bl	8010538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2220      	movs	r2, #32
 8010478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b08c      	sub	sp, #48	; 0x30
 8010492:	af00      	add	r7, sp, #0
 8010494:	60f8      	str	r0, [r7, #12]
 8010496:	60b9      	str	r1, [r7, #8]
 8010498:	4613      	mov	r3, r2
 801049a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104a2:	2b20      	cmp	r3, #32
 80104a4:	d142      	bne.n	801052c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d002      	beq.n	80104b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80104ac:	88fb      	ldrh	r3, [r7, #6]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d101      	bne.n	80104b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e03b      	b.n	801052e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2201      	movs	r2, #1
 80104ba:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2200      	movs	r2, #0
 80104c0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80104c2:	88fb      	ldrh	r3, [r7, #6]
 80104c4:	461a      	mov	r2, r3
 80104c6:	68b9      	ldr	r1, [r7, #8]
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7ff fc5f 	bl	800fd8c <UART_Start_Receive_DMA>
 80104ce:	4603      	mov	r3, r0
 80104d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80104d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d124      	bne.n	8010526 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d11d      	bne.n	8010520 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2210      	movs	r2, #16
 80104ea:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	e853 3f00 	ldrex	r3, [r3]
 80104f8:	617b      	str	r3, [r7, #20]
   return(result);
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	f043 0310 	orr.w	r3, r3, #16
 8010500:	62bb      	str	r3, [r7, #40]	; 0x28
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	627b      	str	r3, [r7, #36]	; 0x24
 801050c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050e:	6a39      	ldr	r1, [r7, #32]
 8010510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010512:	e841 2300 	strex	r3, r2, [r1]
 8010516:	61fb      	str	r3, [r7, #28]
   return(result);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d1e6      	bne.n	80104ec <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 801051e:	e002      	b.n	8010526 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801052a:	e000      	b.n	801052e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801052c:	2302      	movs	r3, #2
  }
}
 801052e:	4618      	mov	r0, r3
 8010530:	3730      	adds	r7, #48	; 0x30
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
	...

08010538 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010544:	2b00      	cmp	r3, #0
 8010546:	d108      	bne.n	801055a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010558:	e031      	b.n	80105be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801055a:	2308      	movs	r3, #8
 801055c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801055e:	2308      	movs	r3, #8
 8010560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	0e5b      	lsrs	r3, r3, #25
 801056a:	b2db      	uxtb	r3, r3
 801056c:	f003 0307 	and.w	r3, r3, #7
 8010570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	0f5b      	lsrs	r3, r3, #29
 801057a:	b2db      	uxtb	r3, r3
 801057c:	f003 0307 	and.w	r3, r3, #7
 8010580:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	7b3a      	ldrb	r2, [r7, #12]
 8010586:	4911      	ldr	r1, [pc, #68]	; (80105cc <UARTEx_SetNbDataToProcess+0x94>)
 8010588:	5c8a      	ldrb	r2, [r1, r2]
 801058a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801058e:	7b3a      	ldrb	r2, [r7, #12]
 8010590:	490f      	ldr	r1, [pc, #60]	; (80105d0 <UARTEx_SetNbDataToProcess+0x98>)
 8010592:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010594:	fb93 f3f2 	sdiv	r3, r3, r2
 8010598:	b29a      	uxth	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
 80105a2:	7b7a      	ldrb	r2, [r7, #13]
 80105a4:	4909      	ldr	r1, [pc, #36]	; (80105cc <UARTEx_SetNbDataToProcess+0x94>)
 80105a6:	5c8a      	ldrb	r2, [r1, r2]
 80105a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80105ac:	7b7a      	ldrb	r2, [r7, #13]
 80105ae:	4908      	ldr	r1, [pc, #32]	; (80105d0 <UARTEx_SetNbDataToProcess+0x98>)
 80105b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80105be:	bf00      	nop
 80105c0:	3714      	adds	r7, #20
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop
 80105cc:	08022b80 	.word	0x08022b80
 80105d0:	08022b88 	.word	0x08022b88

080105d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80105d4:	b084      	sub	sp, #16
 80105d6:	b480      	push	{r7}
 80105d8:	b085      	sub	sp, #20
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	f107 001c 	add.w	r0, r7, #28
 80105e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80105ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80105ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80105ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80105f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80105f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80105f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80105fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	4313      	orrs	r3, r2
 8010600:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	685a      	ldr	r2, [r3, #4]
 8010606:	4b07      	ldr	r3, [pc, #28]	; (8010624 <SDMMC_Init+0x50>)
 8010608:	4013      	ands	r3, r2
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	431a      	orrs	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	b004      	add	sp, #16
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	ffc02c00 	.word	0xffc02c00

08010628 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010636:	4618      	mov	r0, r3
 8010638:	370c      	adds	r7, #12
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010642:	b480      	push	{r7}
 8010644:	b083      	sub	sp, #12
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr

08010664 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f043 0203 	orr.w	r2, r3, #3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8010686:	b480      	push	{r7}
 8010688:	b083      	sub	sp, #12
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f003 0303 	and.w	r3, r3, #3
}
 8010696:	4618      	mov	r0, r3
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
	...

080106a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80106c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80106ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68da      	ldr	r2, [r3, #12]
 80106da:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <SDMMC_SendCommand+0x50>)
 80106dc:	4013      	ands	r3, r2
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	431a      	orrs	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	fffee0c0 	.word	0xfffee0c0

080106f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	b2db      	uxtb	r3, r3
}
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010712:	b480      	push	{r7}
 8010714:	b085      	sub	sp, #20
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3314      	adds	r3, #20
 8010720:	461a      	mov	r2, r3
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	4413      	add	r3, r2
 8010726:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801075e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010764:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801076a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	4313      	orrs	r3, r2
 8010770:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	431a      	orrs	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010782:	2300      	movs	r3, #0

}
 8010784:	4618      	mov	r0, r3
 8010786:	3714      	adds	r7, #20
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801079e:	2310      	movs	r3, #16
 80107a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107a8:	2300      	movs	r3, #0
 80107aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107b2:	f107 0308 	add.w	r3, r7, #8
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff ff73 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80107be:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c2:	2110      	movs	r1, #16
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fa5f 	bl	8010c88 <SDMMC_GetCmdResp1>
 80107ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107cc:	69fb      	ldr	r3, [r7, #28]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3720      	adds	r7, #32
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b088      	sub	sp, #32
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80107e4:	2311      	movs	r3, #17
 80107e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107ee:	2300      	movs	r3, #0
 80107f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107f8:	f107 0308 	add.w	r3, r7, #8
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7ff ff50 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010804:	f241 3288 	movw	r2, #5000	; 0x1388
 8010808:	2111      	movs	r1, #17
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 fa3c 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010812:	69fb      	ldr	r3, [r7, #28]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3720      	adds	r7, #32
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801082a:	2312      	movs	r3, #18
 801082c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010834:	2300      	movs	r3, #0
 8010836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801083c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801083e:	f107 0308 	add.w	r3, r7, #8
 8010842:	4619      	mov	r1, r3
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f7ff ff2d 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801084a:	f241 3288 	movw	r2, #5000	; 0x1388
 801084e:	2112      	movs	r1, #18
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 fa19 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010858:	69fb      	ldr	r3, [r7, #28]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b088      	sub	sp, #32
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010870:	2318      	movs	r3, #24
 8010872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010884:	f107 0308 	add.w	r3, r7, #8
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff ff0a 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010890:	f241 3288 	movw	r2, #5000	; 0x1388
 8010894:	2118      	movs	r1, #24
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 f9f6 	bl	8010c88 <SDMMC_GetCmdResp1>
 801089c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801089e:	69fb      	ldr	r3, [r7, #28]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3720      	adds	r7, #32
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b088      	sub	sp, #32
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80108b6:	2319      	movs	r3, #25
 80108b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108c0:	2300      	movs	r3, #0
 80108c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ca:	f107 0308 	add.w	r3, r7, #8
 80108ce:	4619      	mov	r1, r3
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7ff fee7 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80108d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80108da:	2119      	movs	r1, #25
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 f9d3 	bl	8010c88 <SDMMC_GetCmdResp1>
 80108e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108e4:	69fb      	ldr	r3, [r7, #28]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3720      	adds	r7, #32
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
	...

080108f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b088      	sub	sp, #32
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80108f8:	2300      	movs	r3, #0
 80108fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80108fc:	230c      	movs	r3, #12
 80108fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010906:	2300      	movs	r3, #0
 8010908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801090e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010928:	f107 0308 	add.w	r3, r7, #8
 801092c:	4619      	mov	r1, r3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff feb8 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010934:	4a0b      	ldr	r2, [pc, #44]	; (8010964 <SDMMC_CmdStopTransfer+0x74>)
 8010936:	210c      	movs	r1, #12
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f9a5 	bl	8010c88 <SDMMC_GetCmdResp1>
 801093e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010952:	d101      	bne.n	8010958 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010954:	2300      	movs	r3, #0
 8010956:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010958:	69fb      	ldr	r3, [r7, #28]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3720      	adds	r7, #32
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	05f5e100 	.word	0x05f5e100

08010968 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b088      	sub	sp, #32
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010976:	2307      	movs	r3, #7
 8010978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801097e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010980:	2300      	movs	r3, #0
 8010982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801098a:	f107 0308 	add.w	r3, r7, #8
 801098e:	4619      	mov	r1, r3
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff fe87 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010996:	f241 3288 	movw	r2, #5000	; 0x1388
 801099a:	2107      	movs	r1, #7
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 f973 	bl	8010c88 <SDMMC_GetCmdResp1>
 80109a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a4:	69fb      	ldr	r3, [r7, #28]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b088      	sub	sp, #32
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80109b6:	2300      	movs	r3, #0
 80109b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80109ba:	2300      	movs	r3, #0
 80109bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80109be:	2300      	movs	r3, #0
 80109c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109c2:	2300      	movs	r3, #0
 80109c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109cc:	f107 0308 	add.w	r3, r7, #8
 80109d0:	4619      	mov	r1, r3
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff fe66 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fb97 	bl	801110c <SDMMC_GetCmdError>
 80109de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e0:	69fb      	ldr	r3, [r7, #28]
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3720      	adds	r7, #32
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b088      	sub	sp, #32
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80109f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80109f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80109f8:	2308      	movs	r3, #8
 80109fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a02:	2300      	movs	r3, #0
 8010a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff fe46 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 fb29 	bl	8011070 <SDMMC_GetCmdResp7>
 8010a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a20:	69fb      	ldr	r3, [r7, #28]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3720      	adds	r7, #32
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b088      	sub	sp, #32
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a38:	2337      	movs	r3, #55	; 0x37
 8010a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a42:	2300      	movs	r3, #0
 8010a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a4c:	f107 0308 	add.w	r3, r7, #8
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff fe26 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a5c:	2137      	movs	r1, #55	; 0x37
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f912 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a66:	69fb      	ldr	r3, [r7, #28]
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3720      	adds	r7, #32
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b088      	sub	sp, #32
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a7e:	2329      	movs	r3, #41	; 0x29
 8010a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fe03 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fa2e 	bl	8010f00 <SDMMC_GetCmdResp3>
 8010aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa6:	69fb      	ldr	r3, [r7, #28]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3720      	adds	r7, #32
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010abe:	2306      	movs	r3, #6
 8010ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ad2:	f107 0308 	add.w	r3, r7, #8
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff fde3 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae2:	2106      	movs	r1, #6
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f8cf 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aec:	69fb      	ldr	r3, [r7, #28]
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3720      	adds	r7, #32
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b088      	sub	sp, #32
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010afe:	2300      	movs	r3, #0
 8010b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b02:	2333      	movs	r3, #51	; 0x33
 8010b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b16:	f107 0308 	add.w	r3, r7, #8
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7ff fdc1 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b26:	2133      	movs	r1, #51	; 0x33
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f8ad 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b30:	69fb      	ldr	r3, [r7, #28]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b088      	sub	sp, #32
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b42:	2300      	movs	r3, #0
 8010b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b46:	2302      	movs	r3, #2
 8010b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b50:	2300      	movs	r3, #0
 8010b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff fd9f 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 f980 	bl	8010e6c <SDMMC_GetCmdResp2>
 8010b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3720      	adds	r7, #32
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b088      	sub	sp, #32
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b86:	2309      	movs	r3, #9
 8010b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b90:	2300      	movs	r3, #0
 8010b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b9a:	f107 0308 	add.w	r3, r7, #8
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff fd7f 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 f960 	bl	8010e6c <SDMMC_GetCmdResp2>
 8010bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bae:	69fb      	ldr	r3, [r7, #28]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3720      	adds	r7, #32
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b088      	sub	sp, #32
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010bc6:	2303      	movs	r3, #3
 8010bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bda:	f107 0308 	add.w	r3, r7, #8
 8010bde:	4619      	mov	r1, r3
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff fd5f 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010be6:	683a      	ldr	r2, [r7, #0]
 8010be8:	2103      	movs	r1, #3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f9c8 	bl	8010f80 <SDMMC_GetCmdResp6>
 8010bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf2:	69fb      	ldr	r3, [r7, #28]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3720      	adds	r7, #32
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b088      	sub	sp, #32
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c0a:	230d      	movs	r3, #13
 8010c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c14:	2300      	movs	r3, #0
 8010c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c1e:	f107 0308 	add.w	r3, r7, #8
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7ff fd3d 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c2e:	210d      	movs	r1, #13
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 f829 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c38:	69fb      	ldr	r3, [r7, #28]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3720      	adds	r7, #32
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b088      	sub	sp, #32
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010c4e:	230d      	movs	r3, #13
 8010c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c62:	f107 0308 	add.w	r3, r7, #8
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff fd1b 	bl	80106a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c72:	210d      	movs	r1, #13
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 f807 	bl	8010c88 <SDMMC_GetCmdResp1>
 8010c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7c:	69fb      	ldr	r3, [r7, #28]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3720      	adds	r7, #32
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
	...

08010c88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b088      	sub	sp, #32
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	460b      	mov	r3, r1
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c96:	4b70      	ldr	r3, [pc, #448]	; (8010e58 <SDMMC_GetCmdResp1+0x1d0>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a70      	ldr	r2, [pc, #448]	; (8010e5c <SDMMC_GetCmdResp1+0x1d4>)
 8010c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8010ca0:	0a5a      	lsrs	r2, r3, #9
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	fb02 f303 	mul.w	r3, r2, r3
 8010ca8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	1e5a      	subs	r2, r3, #1
 8010cae:	61fa      	str	r2, [r7, #28]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cb8:	e0c9      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cbe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010cc0:	69ba      	ldr	r2, [r7, #24]
 8010cc2:	4b67      	ldr	r3, [pc, #412]	; (8010e60 <SDMMC_GetCmdResp1+0x1d8>)
 8010cc4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d0ef      	beq.n	8010caa <SDMMC_GetCmdResp1+0x22>
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1ea      	bne.n	8010caa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd8:	f003 0304 	and.w	r3, r3, #4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2204      	movs	r2, #4
 8010ce4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ce6:	2304      	movs	r3, #4
 8010ce8:	e0b1      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cee:	f003 0301 	and.w	r3, r3, #1
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d004      	beq.n	8010d00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e0a6      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	4a58      	ldr	r2, [pc, #352]	; (8010e64 <SDMMC_GetCmdResp1+0x1dc>)
 8010d04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f7ff fcf6 	bl	80106f8 <SDMMC_GetCommandResponse>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	461a      	mov	r2, r3
 8010d10:	7afb      	ldrb	r3, [r7, #11]
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d001      	beq.n	8010d1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d16:	2301      	movs	r3, #1
 8010d18:	e099      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff fcf8 	bl	8010712 <SDMMC_GetResponse>
 8010d22:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	4b50      	ldr	r3, [pc, #320]	; (8010e68 <SDMMC_GetCmdResp1+0x1e0>)
 8010d28:	4013      	ands	r3, r2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d101      	bne.n	8010d32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	e08d      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	da02      	bge.n	8010d3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d3c:	e087      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d001      	beq.n	8010d4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d48:	2340      	movs	r3, #64	; 0x40
 8010d4a:	e080      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d56:	2380      	movs	r3, #128	; 0x80
 8010d58:	e079      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d002      	beq.n	8010d6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d68:	e071      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d002      	beq.n	8010d7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d78:	e069      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d88:	e061      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d002      	beq.n	8010d9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d98:	e059      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d002      	beq.n	8010daa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010da8:	e051      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d002      	beq.n	8010dba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010db8:	e049      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d002      	beq.n	8010dca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dc8:	e041      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d002      	beq.n	8010dda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dd8:	e039      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010de8:	e031      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010df8:	e029      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e08:	e021      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d002      	beq.n	8010e1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e18:	e019      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010e28:	e011      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e38:	e009      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f003 0308 	and.w	r3, r3, #8
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e48:	e001      	b.n	8010e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3720      	adds	r7, #32
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	20000004 	.word	0x20000004
 8010e5c:	10624dd3 	.word	0x10624dd3
 8010e60:	00200045 	.word	0x00200045
 8010e64:	002000c5 	.word	0x002000c5
 8010e68:	fdffe008 	.word	0xfdffe008

08010e6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e74:	4b1f      	ldr	r3, [pc, #124]	; (8010ef4 <SDMMC_GetCmdResp2+0x88>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a1f      	ldr	r2, [pc, #124]	; (8010ef8 <SDMMC_GetCmdResp2+0x8c>)
 8010e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e7e:	0a5b      	lsrs	r3, r3, #9
 8010e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e84:	fb02 f303 	mul.w	r3, r2, r3
 8010e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	1e5a      	subs	r2, r3, #1
 8010e8e:	60fa      	str	r2, [r7, #12]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d102      	bne.n	8010e9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e98:	e026      	b.n	8010ee8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d0ef      	beq.n	8010e8a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1ea      	bne.n	8010e8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb8:	f003 0304 	and.w	r3, r3, #4
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d004      	beq.n	8010eca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2204      	movs	r2, #4
 8010ec4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ec6:	2304      	movs	r3, #4
 8010ec8:	e00e      	b.n	8010ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d004      	beq.n	8010ee0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2201      	movs	r2, #1
 8010eda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010edc:	2301      	movs	r3, #1
 8010ede:	e003      	b.n	8010ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4a06      	ldr	r2, [pc, #24]	; (8010efc <SDMMC_GetCmdResp2+0x90>)
 8010ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3714      	adds	r7, #20
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	20000004 	.word	0x20000004
 8010ef8:	10624dd3 	.word	0x10624dd3
 8010efc:	002000c5 	.word	0x002000c5

08010f00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f08:	4b1a      	ldr	r3, [pc, #104]	; (8010f74 <SDMMC_GetCmdResp3+0x74>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a1a      	ldr	r2, [pc, #104]	; (8010f78 <SDMMC_GetCmdResp3+0x78>)
 8010f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f12:	0a5b      	lsrs	r3, r3, #9
 8010f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f18:	fb02 f303 	mul.w	r3, r2, r3
 8010f1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	1e5a      	subs	r2, r3, #1
 8010f22:	60fa      	str	r2, [r7, #12]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d102      	bne.n	8010f2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f2c:	e01b      	b.n	8010f66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d0ef      	beq.n	8010f1e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1ea      	bne.n	8010f1e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4c:	f003 0304 	and.w	r3, r3, #4
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d004      	beq.n	8010f5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2204      	movs	r2, #4
 8010f58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f5a:	2304      	movs	r3, #4
 8010f5c:	e003      	b.n	8010f66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a06      	ldr	r2, [pc, #24]	; (8010f7c <SDMMC_GetCmdResp3+0x7c>)
 8010f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3714      	adds	r7, #20
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	20000004 	.word	0x20000004
 8010f78:	10624dd3 	.word	0x10624dd3
 8010f7c:	002000c5 	.word	0x002000c5

08010f80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	460b      	mov	r3, r1
 8010f8a:	607a      	str	r2, [r7, #4]
 8010f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f8e:	4b35      	ldr	r3, [pc, #212]	; (8011064 <SDMMC_GetCmdResp6+0xe4>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4a35      	ldr	r2, [pc, #212]	; (8011068 <SDMMC_GetCmdResp6+0xe8>)
 8010f94:	fba2 2303 	umull	r2, r3, r2, r3
 8010f98:	0a5b      	lsrs	r3, r3, #9
 8010f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f9e:	fb02 f303 	mul.w	r3, r2, r3
 8010fa2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	1e5a      	subs	r2, r3, #1
 8010fa8:	61fa      	str	r2, [r7, #28]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d102      	bne.n	8010fb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fb2:	e052      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d0ef      	beq.n	8010fa4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1ea      	bne.n	8010fa4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd2:	f003 0304 	and.w	r3, r3, #4
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d004      	beq.n	8010fe4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2204      	movs	r2, #4
 8010fde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fe0:	2304      	movs	r3, #4
 8010fe2:	e03a      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d004      	beq.n	8010ffa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e02f      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f7ff fb7c 	bl	80106f8 <SDMMC_GetCommandResponse>
 8011000:	4603      	mov	r3, r0
 8011002:	461a      	mov	r2, r3
 8011004:	7afb      	ldrb	r3, [r7, #11]
 8011006:	4293      	cmp	r3, r2
 8011008:	d001      	beq.n	801100e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801100a:	2301      	movs	r3, #1
 801100c:	e025      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	4a16      	ldr	r2, [pc, #88]	; (801106c <SDMMC_GetCmdResp6+0xec>)
 8011012:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011014:	2100      	movs	r1, #0
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f7ff fb7b 	bl	8010712 <SDMMC_GetResponse>
 801101c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d106      	bne.n	8011036 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	0c1b      	lsrs	r3, r3, #16
 801102c:	b29a      	uxth	r2, r3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011032:	2300      	movs	r3, #0
 8011034:	e011      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011044:	e009      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801104c:	2b00      	cmp	r3, #0
 801104e:	d002      	beq.n	8011056 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011054:	e001      	b.n	801105a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801105a:	4618      	mov	r0, r3
 801105c:	3720      	adds	r7, #32
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	20000004 	.word	0x20000004
 8011068:	10624dd3 	.word	0x10624dd3
 801106c:	002000c5 	.word	0x002000c5

08011070 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011078:	4b22      	ldr	r3, [pc, #136]	; (8011104 <SDMMC_GetCmdResp7+0x94>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a22      	ldr	r2, [pc, #136]	; (8011108 <SDMMC_GetCmdResp7+0x98>)
 801107e:	fba2 2303 	umull	r2, r3, r2, r3
 8011082:	0a5b      	lsrs	r3, r3, #9
 8011084:	f241 3288 	movw	r2, #5000	; 0x1388
 8011088:	fb02 f303 	mul.w	r3, r2, r3
 801108c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	1e5a      	subs	r2, r3, #1
 8011092:	60fa      	str	r2, [r7, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d102      	bne.n	801109e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801109c:	e02c      	b.n	80110f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0ef      	beq.n	801108e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1ea      	bne.n	801108e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110bc:	f003 0304 	and.w	r3, r3, #4
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d004      	beq.n	80110ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2204      	movs	r2, #4
 80110c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110ca:	2304      	movs	r3, #4
 80110cc:	e014      	b.n	80110f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110d2:	f003 0301 	and.w	r3, r3, #1
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d004      	beq.n	80110e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2201      	movs	r2, #1
 80110de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110e0:	2301      	movs	r3, #1
 80110e2:	e009      	b.n	80110f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d002      	beq.n	80110f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2240      	movs	r2, #64	; 0x40
 80110f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80110f6:	2300      	movs	r3, #0

}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	20000004 	.word	0x20000004
 8011108:	10624dd3 	.word	0x10624dd3

0801110c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801110c:	b480      	push	{r7}
 801110e:	b085      	sub	sp, #20
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011114:	4b11      	ldr	r3, [pc, #68]	; (801115c <SDMMC_GetCmdError+0x50>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a11      	ldr	r2, [pc, #68]	; (8011160 <SDMMC_GetCmdError+0x54>)
 801111a:	fba2 2303 	umull	r2, r3, r2, r3
 801111e:	0a5b      	lsrs	r3, r3, #9
 8011120:	f241 3288 	movw	r2, #5000	; 0x1388
 8011124:	fb02 f303 	mul.w	r3, r2, r3
 8011128:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	1e5a      	subs	r2, r3, #1
 801112e:	60fa      	str	r2, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011138:	e009      	b.n	801114e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011142:	2b00      	cmp	r3, #0
 8011144:	d0f1      	beq.n	801112a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4a06      	ldr	r2, [pc, #24]	; (8011164 <SDMMC_GetCmdError+0x58>)
 801114a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3714      	adds	r7, #20
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	20000004 	.word	0x20000004
 8011160:	10624dd3 	.word	0x10624dd3
 8011164:	002000c5 	.word	0x002000c5

08011168 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(void)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
  UINT ret = FX_SUCCESS;
 801116e:	2300      	movs	r3, #0
 8011170:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

/* Initialize FileX.  */
  fx_system_initialize();
 8011172:	f008 f9bb 	bl	80194ec <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 8011176:	687b      	ldr	r3, [r7, #4]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 801118c:	4806      	ldr	r0, [pc, #24]	; (80111a8 <fx_stm32_sd_get_status+0x28>)
 801118e:	f7fc fc6d 	bl	800da6c <HAL_SD_GetCardState>
 8011192:	4603      	mov	r3, r0
 8011194:	2b04      	cmp	r3, #4
 8011196:	d001      	beq.n	801119c <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8011198:	2301      	movs	r3, #1
 801119a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 801119c:	68fb      	ldr	r3, [r7, #12]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000434 	.word	0x20000434

080111ac <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
 80111b8:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN PRE_READ_BLOCKS */
  /* USER CODE END PRE_READ_BLOCKS */

  sd_rx_cplt = 0;
 80111be:	4b09      	ldr	r3, [pc, #36]	; (80111e4 <fx_stm32_sd_read_blocks+0x38>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	601a      	str	r2, [r3, #0]

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	68b9      	ldr	r1, [r7, #8]
 80111ca:	4807      	ldr	r0, [pc, #28]	; (80111e8 <fx_stm32_sd_read_blocks+0x3c>)
 80111cc:	f7fb fdde 	bl	800cd8c <HAL_SD_ReadBlocks_DMA>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <fx_stm32_sd_read_blocks+0x2e>
  {
    ret = 1;
 80111d6:	2301      	movs	r3, #1
 80111d8:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 80111da:	697b      	ldr	r3, [r7, #20]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	2000d014 	.word	0x2000d014
 80111e8:	20000434 	.word	0x20000434

080111ec <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 80111fa:	2300      	movs	r3, #0
 80111fc:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  /* USER CODE END PRE_WRITE_BLOCKS */

  sd_tx_cplt = 0;
 80111fe:	4b09      	ldr	r3, [pc, #36]	; (8011224 <fx_stm32_sd_write_blocks+0x38>)
 8011200:	2200      	movs	r2, #0
 8011202:	601a      	str	r2, [r3, #0]

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	68b9      	ldr	r1, [r7, #8]
 801120a:	4807      	ldr	r0, [pc, #28]	; (8011228 <fx_stm32_sd_write_blocks+0x3c>)
 801120c:	f7fb fe66 	bl	800cedc <HAL_SD_WriteBlocks_DMA>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <fx_stm32_sd_write_blocks+0x2e>
  {
    ret = 1;
 8011216:	2301      	movs	r3, #1
 8011218:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 801121a:	697b      	ldr	r3, [r7, #20]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	2000d018 	.word	0x2000d018
 8011228:	20000434 	.word	0x20000434

0801122c <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param SD_HandleTypeDef *hsd the SD_HandleTypeDef handle
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN TX_COMPLETED_0 */

/* USER CODE END TX_COMPLETED_0 */

  sd_tx_cplt = 1;
 8011234:	4b04      	ldr	r3, [pc, #16]	; (8011248 <HAL_SD_TxCpltCallback+0x1c>)
 8011236:	2201      	movs	r2, #1
 8011238:	601a      	str	r2, [r3, #0]

/* USER CODE BEGIN TX_COMPLETED_1 */

/* USER CODE END TX_COMPLETED_1 */

}
 801123a:	bf00      	nop
 801123c:	370c      	adds	r7, #12
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	2000d018 	.word	0x2000d018

0801124c <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param SD_HandleTypeDef *hsd the SD_HandleTypeDef handle
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RX_COMPLETED_0 */

/* USER CODE END RX_COMPLETED_0 */
  sd_rx_cplt = 1;
 8011254:	4b04      	ldr	r3, [pc, #16]	; (8011268 <HAL_SD_RxCpltCallback+0x1c>)
 8011256:	2201      	movs	r2, #1
 8011258:	601a      	str	r2, [r3, #0]

/* USER CODE BEGIN RX_COMPLETED_1 */

/* USER CODE END RX_COMPLETED_1 */

}
 801125a:	bf00      	nop
 801125c:	370c      	adds	r7, #12
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	2000d014 	.word	0x2000d014

0801126c <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 8011274:	f7f4 fd2c 	bl	8005cd0 <HAL_GetTick>
 8011278:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 801127a:	e007      	b.n	801128c <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ff7f 	bl	8011180 <fx_stm32_sd_get_status>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d101      	bne.n	801128c <check_sd_status+0x20>
    {
      return 0;
 8011288:	2300      	movs	r3, #0
 801128a:	e009      	b.n	80112a0 <check_sd_status+0x34>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 801128c:	f7f4 fd20 	bl	8005cd0 <HAL_GetTick>
 8011290:	4602      	mov	r2, r0
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	f242 720f 	movw	r2, #9999	; 0x270f
 801129a:	4293      	cmp	r3, r2
 801129c:	d9ee      	bls.n	801127c <check_sd_status+0x10>
    }
  }

  return 1;
 801129e:	2301      	movs	r3, #1
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 80112b0:	4b6f      	ldr	r3, [pc, #444]	; (8011470 <fx_stm32_sd_driver+0x1c8>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 80112b6:	4b6e      	ldr	r3, [pc, #440]	; (8011470 <fx_stm32_sd_driver+0x1c8>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d10a      	bne.n	80112d4 <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80112be:	2000      	movs	r0, #0
 80112c0:	f7ff ffd4 	bl	801126c <check_sd_status>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d004      	beq.n	80112d4 <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2290      	movs	r2, #144	; 0x90
 80112ce:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
 80112d2:	e0ca      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80112da:	f003 0303 	and.w	r3, r3, #3
 80112de:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
 80112e6:	2b08      	cmp	r3, #8
 80112e8:	f200 80b7 	bhi.w	801145a <fx_stm32_sd_driver+0x1b2>
 80112ec:	a201      	add	r2, pc, #4	; (adr r2, 80112f4 <fx_stm32_sd_driver+0x4c>)
 80112ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f2:	bf00      	nop
 80112f4:	0801132d 	.word	0x0801132d
 80112f8:	08011363 	.word	0x08011363
 80112fc:	08011397 	.word	0x08011397
 8011300:	080113a1 	.word	0x080113a1
 8011304:	08011319 	.word	0x08011319
 8011308:	080113ab 	.word	0x080113ab
 801130c:	0801145b 	.word	0x0801145b
 8011310:	0801143f 	.word	0x0801143f
 8011314:	08011323 	.word	0x08011323
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2200      	movs	r2, #0
 801131c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 8011320:	e0a3      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);

      break;
 801132a:	e09e      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2290      	movs	r2, #144	; 0x90
 8011330:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011340:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 f892 	bl	8011474 <sd_read_data>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	f040 8086 	bne.w	8011464 <fx_stm32_sd_driver+0x1bc>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      }

      break;
 8011360:	e080      	b.n	8011464 <fx_stm32_sd_driver+0x1bc>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2290      	movs	r2, #144	; 0x90
 8011366:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011376:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 f8fd 	bl	8011580 <sd_write_data>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d16d      	bne.n	8011468 <fx_stm32_sd_driver+0x1c0>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      }

      break;
 8011394:	e068      	b.n	8011468 <fx_stm32_sd_driver+0x1c0>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      break;
 801139e:	e064      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 80113a8:	e05f      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2100      	movs	r1, #0
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 f85d 	bl	8011474 <sd_read_data>
 80113ba:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d004      	beq.n	80113cc <fx_stm32_sd_driver+0x124>
      {
        media_ptr->fx_media_driver_status = status;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	693a      	ldr	r2, [r7, #16]
 80113c6:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        break;
 80113ca:	e04e      	b.n	801146a <fx_stm32_sd_driver+0x1c2>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 80113cc:	2300      	movs	r3, #0
 80113ce:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
 80113d6:	f107 0308 	add.w	r3, r7, #8
 80113da:	f107 020c 	add.w	r2, r7, #12
 80113de:	2100      	movs	r1, #0
 80113e0:	f007 ff06 	bl	80191f0 <_fx_partition_offset_calculate>
 80113e4:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d004      	beq.n	80113f6 <fx_stm32_sd_driver+0x14e>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2290      	movs	r2, #144	; 0x90
 80113f0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        break;
 80113f4:	e039      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d01b      	beq.n	8011434 <fx_stm32_sd_driver+0x18c>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80113fc:	2000      	movs	r0, #0
 80113fe:	f7ff ff35 	bl	801126c <check_sd_status>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d004      	beq.n	8011412 <fx_stm32_sd_driver+0x16a>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2290      	movs	r2, #144	; 0x90
 801140c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
          break;
 8011410:	e02b      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8011412:	68f9      	ldr	r1, [r7, #12]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f829 	bl	8011474 <sd_read_data>
 8011422:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d004      	beq.n	8011434 <fx_stm32_sd_driver+0x18c>
        {
          media_ptr->fx_media_driver_status = status;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	693a      	ldr	r2, [r7, #16]
 801142e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
          break;
 8011432:	e01a      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      break;
 801143c:	e015      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2100      	movs	r1, #0
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f899 	bl	8011580 <sd_write_data>
 801144e:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	693a      	ldr	r2, [r7, #16]
 8011454:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

      break;
 8011458:	e007      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2290      	movs	r2, #144	; 0x90
 801145e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
      break;
 8011462:	e002      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
      break;
 8011464:	bf00      	nop
 8011466:	e000      	b.n	801146a <fx_stm32_sd_driver+0x1c2>
      break;
 8011468:	bf00      	nop
    }
  }
}
 801146a:	3718      	adds	r7, #24
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	2000d21c 	.word	0x2000d21c

08011474 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b08a      	sub	sp, #40	; 0x28
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	627b      	str	r3, [r7, #36]	; 0x24
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d047      	beq.n	801151c <sd_read_data+0xa8>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8011492:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < num_sectors; i++)
 8011494:	2300      	movs	r3, #0
 8011496:	627b      	str	r3, [r7, #36]	; 0x24
 8011498:	e032      	b.n	8011500 <sd_read_data+0x8c>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	1c53      	adds	r3, r2, #1
 801149e:	60bb      	str	r3, [r7, #8]
 80114a0:	2301      	movs	r3, #1
 80114a2:	4935      	ldr	r1, [pc, #212]	; (8011578 <sd_read_data+0x104>)
 80114a4:	2000      	movs	r0, #0
 80114a6:	f7ff fe81 	bl	80111ac <fx_stm32_sd_read_blocks>
 80114aa:	4603      	mov	r3, r0
 80114ac:	623b      	str	r3, [r7, #32]

      if (status != 0)
 80114ae:	6a3b      	ldr	r3, [r7, #32]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d001      	beq.n	80114b8 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 80114b4:	2390      	movs	r3, #144	; 0x90
 80114b6:	e05a      	b.n	801156e <sd_read_data+0xfa>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 80114b8:	f7f4 fc0a 	bl	8005cd0 <HAL_GetTick>
 80114bc:	6178      	str	r0, [r7, #20]
 80114be:	e003      	b.n	80114c8 <sd_read_data+0x54>
 80114c0:	4b2e      	ldr	r3, [pc, #184]	; (801157c <sd_read_data+0x108>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d008      	beq.n	80114da <sd_read_data+0x66>
 80114c8:	f7f4 fc02 	bl	8005cd0 <HAL_GetTick>
 80114cc:	4602      	mov	r2, r0
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d9f2      	bls.n	80114c0 <sd_read_data+0x4c>
 80114da:	4b28      	ldr	r3, [pc, #160]	; (801157c <sd_read_data+0x108>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <sd_read_data+0x72>
 80114e2:	2390      	movs	r3, #144	; 0x90
 80114e4:	e043      	b.n	801156e <sd_read_data+0xfa>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80114e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114ea:	69f9      	ldr	r1, [r7, #28]
 80114ec:	4822      	ldr	r0, [pc, #136]	; (8011578 <sd_read_data+0x104>)
 80114ee:	f00b f8a0 	bl	801c632 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80114f8:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < num_sectors; i++)
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	3301      	adds	r3, #1
 80114fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	429a      	cmp	r2, r3
 8011506:	d8c8      	bhi.n	801149a <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	429a      	cmp	r2, r3
 801150e:	d102      	bne.n	8011516 <sd_read_data+0xa2>
    {
      status = FX_SUCCESS;
 8011510:	2300      	movs	r3, #0
 8011512:	623b      	str	r3, [r7, #32]
 8011514:	e02a      	b.n	801156c <sd_read_data+0xf8>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8011516:	2321      	movs	r3, #33	; 0x21
 8011518:	623b      	str	r3, [r7, #32]
 801151a:	e027      	b.n	801156c <sd_read_data+0xf8>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	2000      	movs	r0, #0
 8011528:	f7ff fe40 	bl	80111ac <fx_stm32_sd_read_blocks>
 801152c:	4603      	mov	r3, r0
 801152e:	623b      	str	r3, [r7, #32]

    if (status != 0)
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <sd_read_data+0xc6>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8011536:	2390      	movs	r3, #144	; 0x90
 8011538:	e019      	b.n	801156e <sd_read_data+0xfa>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 801153a:	f7f4 fbc9 	bl	8005cd0 <HAL_GetTick>
 801153e:	61b8      	str	r0, [r7, #24]
 8011540:	e003      	b.n	801154a <sd_read_data+0xd6>
 8011542:	4b0e      	ldr	r3, [pc, #56]	; (801157c <sd_read_data+0x108>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	2b01      	cmp	r3, #1
 8011548:	d008      	beq.n	801155c <sd_read_data+0xe8>
 801154a:	f7f4 fbc1 	bl	8005cd0 <HAL_GetTick>
 801154e:	4602      	mov	r2, r0
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	f242 720f 	movw	r2, #9999	; 0x270f
 8011558:	4293      	cmp	r3, r2
 801155a:	d9f2      	bls.n	8011542 <sd_read_data+0xce>
 801155c:	4b07      	ldr	r3, [pc, #28]	; (801157c <sd_read_data+0x108>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <sd_read_data+0xf4>
 8011564:	2390      	movs	r3, #144	; 0x90
 8011566:	e002      	b.n	801156e <sd_read_data+0xfa>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

    status = FX_SUCCESS;
 8011568:	2300      	movs	r3, #0
 801156a:	623b      	str	r3, [r7, #32]
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 801156c:	6a3b      	ldr	r3, [r7, #32]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3728      	adds	r7, #40	; 0x28
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	2000d01c 	.word	0x2000d01c
 801157c:	2000d014 	.word	0x2000d014

08011580 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b08a      	sub	sp, #40	; 0x28
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	603b      	str	r3, [r7, #0]
  INT i = 0;
 801158e:	2300      	movs	r3, #0
 8011590:	627b      	str	r3, [r7, #36]	; 0x24
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d047      	beq.n	8011628 <sd_write_data+0xa8>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 801159e:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < num_sectors; i++)
 80115a0:	2300      	movs	r3, #0
 80115a2:	627b      	str	r3, [r7, #36]	; 0x24
 80115a4:	e032      	b.n	801160c <sd_write_data+0x8c>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80115a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115aa:	4936      	ldr	r1, [pc, #216]	; (8011684 <sd_write_data+0x104>)
 80115ac:	69f8      	ldr	r0, [r7, #28]
 80115ae:	f00b f840 	bl	801c632 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80115b8:	61fb      	str	r3, [r7, #28]
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 80115ba:	68ba      	ldr	r2, [r7, #8]
 80115bc:	1c53      	adds	r3, r2, #1
 80115be:	60bb      	str	r3, [r7, #8]
 80115c0:	2301      	movs	r3, #1
 80115c2:	4930      	ldr	r1, [pc, #192]	; (8011684 <sd_write_data+0x104>)
 80115c4:	2000      	movs	r0, #0
 80115c6:	f7ff fe11 	bl	80111ec <fx_stm32_sd_write_blocks>
 80115ca:	4603      	mov	r3, r0
 80115cc:	623b      	str	r3, [r7, #32]

      if (status != 0)
 80115ce:	6a3b      	ldr	r3, [r7, #32]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d001      	beq.n	80115d8 <sd_write_data+0x58>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 80115d4:	2390      	movs	r3, #144	; 0x90
 80115d6:	e050      	b.n	801167a <sd_write_data+0xfa>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 80115d8:	f7f4 fb7a 	bl	8005cd0 <HAL_GetTick>
 80115dc:	6178      	str	r0, [r7, #20]
 80115de:	e003      	b.n	80115e8 <sd_write_data+0x68>
 80115e0:	4b29      	ldr	r3, [pc, #164]	; (8011688 <sd_write_data+0x108>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d008      	beq.n	80115fa <sd_write_data+0x7a>
 80115e8:	f7f4 fb72 	bl	8005cd0 <HAL_GetTick>
 80115ec:	4602      	mov	r2, r0
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d9f2      	bls.n	80115e0 <sd_write_data+0x60>
 80115fa:	4b23      	ldr	r3, [pc, #140]	; (8011688 <sd_write_data+0x108>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d101      	bne.n	8011606 <sd_write_data+0x86>
 8011602:	2390      	movs	r3, #144	; 0x90
 8011604:	e039      	b.n	801167a <sd_write_data+0xfa>
    for (i = 0; i < num_sectors; i++)
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	3301      	adds	r3, #1
 801160a:	627b      	str	r3, [r7, #36]	; 0x24
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	429a      	cmp	r2, r3
 8011612:	d8c8      	bhi.n	80115a6 <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8011614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	429a      	cmp	r2, r3
 801161a:	d102      	bne.n	8011622 <sd_write_data+0xa2>
    {
      status = FX_SUCCESS;
 801161c:	2300      	movs	r3, #0
 801161e:	623b      	str	r3, [r7, #32]
 8011620:	e02a      	b.n	8011678 <sd_write_data+0xf8>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8011622:	2321      	movs	r3, #33	; 0x21
 8011624:	623b      	str	r3, [r7, #32]
 8011626:	e027      	b.n	8011678 <sd_write_data+0xf8>
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	2000      	movs	r0, #0
 8011634:	f7ff fdda 	bl	80111ec <fx_stm32_sd_write_blocks>
 8011638:	4603      	mov	r3, r0
 801163a:	623b      	str	r3, [r7, #32]

    if (status != 0)
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <sd_write_data+0xc6>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8011642:	2390      	movs	r3, #144	; 0x90
 8011644:	e019      	b.n	801167a <sd_write_data+0xfa>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8011646:	f7f4 fb43 	bl	8005cd0 <HAL_GetTick>
 801164a:	61b8      	str	r0, [r7, #24]
 801164c:	e003      	b.n	8011656 <sd_write_data+0xd6>
 801164e:	4b0e      	ldr	r3, [pc, #56]	; (8011688 <sd_write_data+0x108>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2b01      	cmp	r3, #1
 8011654:	d008      	beq.n	8011668 <sd_write_data+0xe8>
 8011656:	f7f4 fb3b 	bl	8005cd0 <HAL_GetTick>
 801165a:	4602      	mov	r2, r0
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	f242 720f 	movw	r2, #9999	; 0x270f
 8011664:	4293      	cmp	r3, r2
 8011666:	d9f2      	bls.n	801164e <sd_write_data+0xce>
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <sd_write_data+0x108>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <sd_write_data+0xf4>
 8011670:	2390      	movs	r3, #144	; 0x90
 8011672:	e002      	b.n	801167a <sd_write_data+0xfa>

    status = FX_SUCCESS;
 8011674:	2300      	movs	r3, #0
 8011676:	623b      	str	r3, [r7, #32]

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8011678:	6a3b      	ldr	r3, [r7, #32]
}
 801167a:	4618      	mov	r0, r3
 801167c:	3728      	adds	r7, #40	; 0x28
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	2000d01c 	.word	0x2000d01c
 8011688:	2000d018 	.word	0x2000d018

0801168c <_fx_directory_entry_read_FAT>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 801168c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011690:	b09e      	sub	sp, #120	; 0x78
 8011692:	af04      	add	r7, sp, #16
 8011694:	61f8      	str	r0, [r7, #28]
 8011696:	61b9      	str	r1, [r7, #24]
 8011698:	617a      	str	r2, [r7, #20]
 801169a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 80116b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b6:	015b      	lsls	r3, r3, #5
 80116b8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d107      	bne.n	80116d0 <_fx_directory_entry_read_FAT+0x44>
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80116c6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80116ca:	2b0b      	cmp	r3, #11
 80116cc:	f040 80a5 	bne.w	801181a <_fx_directory_entry_read_FAT+0x18e>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 80116d4:	69fa      	ldr	r2, [r7, #28]
 80116d6:	f8d2 2484 	ldr.w	r2, [r2, #1156]	; 0x484
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80116da:	fb02 f303 	mul.w	r3, r2, r3
 80116de:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d101      	bne.n	80116ea <_fx_directory_entry_read_FAT+0x5e>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 80116e6:	2302      	movs	r3, #2
 80116e8:	e381      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 80116ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80116f2:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 80116f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80116fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116fe:	fb01 f202 	mul.w	r2, r1, r2
 8011702:	1a9b      	subs	r3, r3, r2
 8011704:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801170a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011710:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d028      	beq.n	801176a <_fx_directory_entry_read_FAT+0xde>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801171c:	2b00      	cmp	r3, #0
 801171e:	d01e      	beq.n	801175e <_fx_directory_entry_read_FAT+0xd2>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8011724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011726:	429a      	cmp	r2, r3
 8011728:	d319      	bcc.n	801175e <_fx_directory_entry_read_FAT+0xd2>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8011736:	4299      	cmp	r1, r3
 8011738:	bf08      	it	eq
 801173a:	4290      	cmpeq	r0, r2
 801173c:	d10f      	bne.n	801175e <_fx_directory_entry_read_FAT+0xd2>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8011746:	429a      	cmp	r2, r3
 8011748:	d109      	bne.n	801175e <_fx_directory_entry_read_FAT+0xd2>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801174e:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011754:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	2200      	movs	r2, #0
 801175a:	651a      	str	r2, [r3, #80]	; 0x50
 801175c:	e00b      	b.n	8011776 <_fx_directory_entry_read_FAT+0xea>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011762:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 8011764:	2300      	movs	r3, #0
 8011766:	667b      	str	r3, [r7, #100]	; 0x64
 8011768:	e025      	b.n	80117b6 <_fx_directory_entry_read_FAT+0x12a>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8011770:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 8011772:	2300      	movs	r3, #0
 8011774:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8011776:	e01e      	b.n	80117b6 <_fx_directory_entry_read_FAT+0x12a>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8011778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801177a:	2b01      	cmp	r3, #1
 801177c:	d907      	bls.n	801178e <_fx_directory_entry_read_FAT+0x102>
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8011784:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801178a:	429a      	cmp	r2, r3
 801178c:	d301      	bcc.n	8011792 <_fx_directory_entry_read_FAT+0x106>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 801178e:	2308      	movs	r3, #8
 8011790:	e32d      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8011792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011796:	461a      	mov	r2, r3
 8011798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801179a:	69f8      	ldr	r0, [r7, #28]
 801179c:	f007 ffc3 	bl	8019726 <_fx_utility_FAT_entry_read>
 80117a0:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 80117a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <_fx_directory_entry_read_FAT+0x120>
            {

                /* Return error code.  */
                return(status);
 80117a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117aa:	e320      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 80117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ae:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 80117b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117b2:	3301      	adds	r3, #1
 80117b4:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 80117b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d3dc      	bcc.n	8011778 <_fx_directory_entry_read_FAT+0xec>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80117c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117c6:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80117c8:	69f9      	ldr	r1, [r7, #28]
 80117ca:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80117ce:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80117d2:	4413      	add	r3, r2
 80117d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117d6:	4413      	add	r3, r2
 80117d8:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80117da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117dc:	2200      	movs	r2, #0
 80117de:	60bb      	str	r3, [r7, #8]
 80117e0:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80117e6:	2203      	movs	r2, #3
 80117e8:	9202      	str	r2, [sp, #8]
 80117ea:	2201      	movs	r2, #1
 80117ec:	9201      	str	r2, [sp, #4]
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80117f4:	69f8      	ldr	r0, [r7, #28]
 80117f6:	f00a fb1f 	bl	801be38 <_fx_utility_logical_sector_read>
 80117fa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80117fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <_fx_directory_entry_read_FAT+0x17a>
        {

            /* Return error code.  */
            return(status);
 8011802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011804:	e2f3      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801180a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801180c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011810:	fb01 f202 	mul.w	r2, r1, r2
 8011814:	1a9b      	subs	r3, r3, r2
 8011816:	647b      	str	r3, [r7, #68]	; 0x44
 8011818:	e031      	b.n	801187e <_fx_directory_entry_read_FAT+0x1f2>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011820:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801182a:	4413      	add	r3, r2
 801182c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801182e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011830:	2200      	movs	r2, #0
 8011832:	603b      	str	r3, [r7, #0]
 8011834:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801183a:	2203      	movs	r2, #3
 801183c:	9202      	str	r2, [sp, #8]
 801183e:	2201      	movs	r2, #1
 8011840:	9201      	str	r2, [sp, #4]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011848:	69f8      	ldr	r0, [r7, #28]
 801184a:	f00a faf5 	bl	801be38 <_fx_utility_logical_sector_read>
 801184e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8011850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011852:	2b00      	cmp	r3, #0
 8011854:	d001      	beq.n	801185a <_fx_directory_entry_read_FAT+0x1ce>
        {

            /* Return error code.  */
            return(status);
 8011856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011858:	e2c9      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 801185a:	2300      	movs	r3, #0
 801185c:	657b      	str	r3, [r7, #84]	; 0x54
 801185e:	2300      	movs	r3, #0
 8011860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011864:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 801186c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801186e:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8011870:	69fa      	ldr	r2, [r7, #28]
 8011872:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8011874:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8011878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	689a      	ldr	r2, [r3, #8]
 8011882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011884:	4413      	add	r3, r2
 8011886:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8011888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801188a:	2200      	movs	r2, #0
 801188c:	4698      	mov	r8, r3
 801188e:	4691      	mov	r9, r2
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801189a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	2200      	movs	r2, #0
 80118a0:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	2200      	movs	r2, #0
 80118a6:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 80118ae:	2300      	movs	r3, #0
 80118b0:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80118b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118b4:	330b      	adds	r3, #11
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	2b0f      	cmp	r3, #15
 80118ba:	f040 812f 	bne.w	8011b1c <_fx_directory_entry_read_FAT+0x490>
 80118be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	2be5      	cmp	r3, #229	; 0xe5
 80118c4:	f000 812a 	beq.w	8011b1c <_fx_directory_entry_read_FAT+0x490>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 80118c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	f003 021f 	and.w	r2, r3, #31
 80118d0:	4613      	mov	r3, r2
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	4413      	add	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	3b0d      	subs	r3, #13
 80118dc:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 80118de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	f003 031f 	and.w	r3, r3, #31
 80118e6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 80118e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80118ea:	2bfe      	cmp	r3, #254	; 0xfe
 80118ec:	d908      	bls.n	8011900 <_fx_directory_entry_read_FAT+0x274>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 80118ee:	2301      	movs	r3, #1
 80118f0:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 80118f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	f003 021f 	and.w	r2, r3, #31
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	619a      	str	r2, [r3, #24]
 80118fe:	e015      	b.n	801192c <_fx_directory_entry_read_FAT+0x2a0>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	3304      	adds	r3, #4
 8011904:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8011906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011908:	330e      	adds	r3, #14
 801190a:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011912:	4413      	add	r3, r2
 8011914:	2200      	movs	r2, #0
 8011916:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8011918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801191a:	3301      	adds	r3, #1
 801191c:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 801191e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011922:	429a      	cmp	r2, r3
 8011924:	d202      	bcs.n	801192c <_fx_directory_entry_read_FAT+0x2a0>
 8011926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011928:	2bff      	cmp	r3, #255	; 0xff
 801192a:	d9ef      	bls.n	801190c <_fx_directory_entry_read_FAT+0x280>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 801192c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	f003 031f 	and.w	r3, r3, #31
 8011934:	3b01      	subs	r3, #1
 8011936:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8011938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801193a:	2b00      	cmp	r3, #0
 801193c:	d168      	bne.n	8011a10 <_fx_directory_entry_read_FAT+0x384>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 801193e:	2301      	movs	r3, #1
 8011940:	667b      	str	r3, [r7, #100]	; 0x64
 8011942:	2300      	movs	r3, #0
 8011944:	663b      	str	r3, [r7, #96]	; 0x60
 8011946:	e060      	b.n	8011a0a <_fx_directory_entry_read_FAT+0x37e>
                {

                    if ((i == 11) || (i == 26))
 8011948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801194a:	2b0b      	cmp	r3, #11
 801194c:	d057      	beq.n	80119fe <_fx_directory_entry_read_FAT+0x372>
 801194e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011950:	2b1a      	cmp	r3, #26
 8011952:	d054      	beq.n	80119fe <_fx_directory_entry_read_FAT+0x372>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8011954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011956:	2b0d      	cmp	r3, #13
 8011958:	d102      	bne.n	8011960 <_fx_directory_entry_read_FAT+0x2d4>
                    {
                        i = 12;
 801195a:	230c      	movs	r3, #12
 801195c:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 801195e:	e051      	b.n	8011a04 <_fx_directory_entry_read_FAT+0x378>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 8011960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011962:	3301      	adds	r3, #1
 8011964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011966:	4413      	add	r3, r2
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d014      	beq.n	8011998 <_fx_directory_entry_read_FAT+0x30c>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 801196e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011970:	3301      	adds	r3, #1
 8011972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011974:	4413      	add	r3, r2
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2bff      	cmp	r3, #255	; 0xff
 801197a:	d105      	bne.n	8011988 <_fx_directory_entry_read_FAT+0x2fc>
 801197c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801197e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011980:	4413      	add	r3, r2
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2bff      	cmp	r3, #255	; 0xff
 8011986:	d007      	beq.n	8011998 <_fx_directory_entry_read_FAT+0x30c>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 8011988:	2301      	movs	r3, #1
 801198a:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011990:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8011998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801199a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801199c:	4413      	add	r3, r2
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d02e      	beq.n	8011a02 <_fx_directory_entry_read_FAT+0x376>
 80119a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119a8:	4413      	add	r3, r2
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	2bff      	cmp	r3, #255	; 0xff
 80119ae:	d028      	beq.n	8011a02 <_fx_directory_entry_read_FAT+0x376>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 80119b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119b2:	4613      	mov	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	4413      	add	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	441a      	add	r2, r3
 80119bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119be:	4413      	add	r3, r2
 80119c0:	2bfe      	cmp	r3, #254	; 0xfe
 80119c2:	d908      	bls.n	80119d6 <_fx_directory_entry_read_FAT+0x34a>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 80119c4:	2301      	movs	r3, #1
 80119c6:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119cc:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 80119d4:	e01c      	b.n	8011a10 <_fx_directory_entry_read_FAT+0x384>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 80119d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119da:	18d1      	adds	r1, r2, r3
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	441a      	add	r2, r3
 80119ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119ee:	4413      	add	r3, r2
 80119f0:	4403      	add	r3, r0
 80119f2:	780a      	ldrb	r2, [r1, #0]
 80119f4:	701a      	strb	r2, [r3, #0]

                    j++;
 80119f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119f8:	3301      	adds	r3, #1
 80119fa:	663b      	str	r3, [r7, #96]	; 0x60
 80119fc:	e002      	b.n	8011a04 <_fx_directory_entry_read_FAT+0x378>
                        continue;
 80119fe:	bf00      	nop
 8011a00:	e000      	b.n	8011a04 <_fx_directory_entry_read_FAT+0x378>
                        continue;
 8011a02:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8011a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a06:	3302      	adds	r3, #2
 8011a08:	667b      	str	r3, [r7, #100]	; 0x64
 8011a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a0c:	2b1f      	cmp	r3, #31
 8011a0e:	d99b      	bls.n	8011948 <_fx_directory_entry_read_FAT+0x2bc>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8011a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a12:	f103 0220 	add.w	r2, r3, #32
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d36b      	bcc.n	8011af6 <_fx_directory_entry_read_FAT+0x46a>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d104      	bne.n	8011a2e <_fx_directory_entry_read_FAT+0x3a2>
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d03b      	beq.n	8011aa6 <_fx_directory_entry_read_FAT+0x41a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8011a34:	3b01      	subs	r3, #1
 8011a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d206      	bcs.n	8011a4a <_fx_directory_entry_read_FAT+0x3be>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8011a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a3e:	3301      	adds	r3, #1
 8011a40:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8011a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a44:	3301      	adds	r3, #1
 8011a46:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8011a48:	e03c      	b.n	8011ac4 <_fx_directory_entry_read_FAT+0x438>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8011a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a4e:	461a      	mov	r2, r3
 8011a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a52:	69f8      	ldr	r0, [r7, #28]
 8011a54:	f007 fe67 	bl	8019726 <_fx_utility_FAT_entry_read>
 8011a58:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <_fx_directory_entry_read_FAT+0x3d8>
                        {

                            /* Return error code.  */
                            return(status);
 8011a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a62:	e1c4      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8011a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d907      	bls.n	8011a7e <_fx_directory_entry_read_FAT+0x3f2>
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8011a74:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d301      	bcc.n	8011a82 <_fx_directory_entry_read_FAT+0x3f6>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8011a7e:	2308      	movs	r3, #8
 8011a80:	e1b5      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8011a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a84:	3301      	adds	r3, #1
 8011a86:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8011a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a94:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8011a96:	69f9      	ldr	r1, [r7, #28]
 8011a98:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8011a9c:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011aa0:	4413      	add	r3, r2
 8011aa2:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8011aa4:	e00e      	b.n	8011ac4 <_fx_directory_entry_read_FAT+0x438>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8011aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	f8d3 2478 	ldr.w	r2, [r3, #1144]	; 0x478
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8011ab8:	4413      	add	r3, r2
 8011aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d301      	bcc.n	8011ac4 <_fx_directory_entry_read_FAT+0x438>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8011ac0:	2308      	movs	r3, #8
 8011ac2:	e194      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8011ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	469a      	mov	sl, r3
 8011aca:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8011ad0:	2203      	movs	r2, #3
 8011ad2:	9202      	str	r2, [sp, #8]
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	9201      	str	r2, [sp, #4]
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	4652      	mov	r2, sl
 8011adc:	465b      	mov	r3, fp
 8011ade:	69f8      	ldr	r0, [r7, #28]
 8011ae0:	f00a f9aa 	bl	801be38 <_fx_utility_logical_sector_read>
 8011ae4:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8011ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <_fx_directory_entry_read_FAT+0x464>
                {
                    return(status);
 8011aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aee:	e17e      	b.n	8011dee <_fx_directory_entry_read_FAT+0x762>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8011af0:	2300      	movs	r3, #0
 8011af2:	647b      	str	r3, [r7, #68]	; 0x44
 8011af4:	e002      	b.n	8011afc <_fx_directory_entry_read_FAT+0x470>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8011af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af8:	3320      	adds	r3, #32
 8011afa:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	689a      	ldr	r2, [r3, #8]
 8011b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b02:	4413      	add	r3, r2
 8011b04:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8011b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b08:	3301      	adds	r3, #1
 8011b0a:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8011b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f47f af0c 	bne.w	801192c <_fx_directory_entry_read_FAT+0x2a0>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	2201      	movs	r2, #1
 8011b18:	615a      	str	r2, [r3, #20]
 8011b1a:	e001      	b.n	8011b20 <_fx_directory_entry_read_FAT+0x494>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8011b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d102      	bne.n	8011b2c <_fx_directory_entry_read_FAT+0x4a0>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8011b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8011b36:	2300      	movs	r3, #0
 8011b38:	667b      	str	r3, [r7, #100]	; 0x64
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8011b3e:	e03d      	b.n	8011bbc <_fx_directory_entry_read_FAT+0x530>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8011b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b44:	4413      	add	r3, r2
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d03b      	beq.n	8011bc4 <_fx_directory_entry_read_FAT+0x538>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 8011b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b50:	4413      	add	r3, r2
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	2b2e      	cmp	r3, #46	; 0x2e
 8011b56:	d101      	bne.n	8011b5c <_fx_directory_entry_read_FAT+0x4d0>
        {
            dotflag =  2;
 8011b58:	2302      	movs	r3, #2
 8011b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 8011b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b60:	4413      	add	r3, r2
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	2b20      	cmp	r3, #32
 8011b66:	d105      	bne.n	8011b74 <_fx_directory_entry_read_FAT+0x4e8>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 8011b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d122      	bne.n	8011bb4 <_fx_directory_entry_read_FAT+0x528>
            {
                dotflag =  1;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8011b72:	e01f      	b.n	8011bb4 <_fx_directory_entry_read_FAT+0x528>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8011b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b76:	2b08      	cmp	r3, #8
 8011b78:	d104      	bne.n	8011b84 <_fx_directory_entry_read_FAT+0x4f8>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8011b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <_fx_directory_entry_read_FAT+0x4f8>
            {
                dotflag =  1;
 8011b80:	2301      	movs	r3, #1
 8011b82:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8011b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d108      	bne.n	8011b9c <_fx_directory_entry_read_FAT+0x510>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8011b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b8c:	1c5a      	adds	r2, r3, #1
 8011b8e:	663a      	str	r2, [r7, #96]	; 0x60
 8011b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b92:	4413      	add	r3, r2
 8011b94:	222e      	movs	r2, #46	; 0x2e
 8011b96:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8011b98:	2302      	movs	r3, #2
 8011b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8011b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ba0:	441a      	add	r2, r3
 8011ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ba6:	440b      	add	r3, r1
 8011ba8:	7812      	ldrb	r2, [r2, #0]
 8011baa:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8011bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bae:	3301      	adds	r3, #1
 8011bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8011bb2:	e000      	b.n	8011bb6 <_fx_directory_entry_read_FAT+0x52a>
            continue;
 8011bb4:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8011bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011bb8:	3301      	adds	r3, #1
 8011bba:	667b      	str	r3, [r7, #100]	; 0x64
 8011bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011bbe:	2b0a      	cmp	r3, #10
 8011bc0:	d9be      	bls.n	8011b40 <_fx_directory_entry_read_FAT+0x4b4>
 8011bc2:	e000      	b.n	8011bc6 <_fx_directory_entry_read_FAT+0x53a>
            break;
 8011bc4:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00a      	beq.n	8011be4 <_fx_directory_entry_read_FAT+0x558>
 8011bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2be5      	cmp	r3, #229	; 0xe5
 8011bd4:	d106      	bne.n	8011be4 <_fx_directory_entry_read_FAT+0x558>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	22e5      	movs	r2, #229	; 0xe5
 8011bdc:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8011bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be0:	2200      	movs	r2, #0
 8011be2:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8011be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d114      	bne.n	8011c16 <_fx_directory_entry_read_FAT+0x58a>
 8011bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b20      	cmp	r3, #32
 8011bf2:	d110      	bne.n	8011c16 <_fx_directory_entry_read_FAT+0x58a>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8011bf8:	e00a      	b.n	8011c10 <_fx_directory_entry_read_FAT+0x584>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8011bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bfe:	441a      	add	r2, r3
 8011c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c04:	440b      	add	r3, r1
 8011c06:	7812      	ldrb	r2, [r2, #0]
 8011c08:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8011c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8011c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c12:	2b0a      	cmp	r3, #10
 8011c14:	d9f1      	bls.n	8011bfa <_fx_directory_entry_read_FAT+0x56e>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8011c16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c1a:	4413      	add	r3, r2
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8011c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c22:	330b      	adds	r3, #11
 8011c24:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8011c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	643a      	str	r2, [r7, #64]	; 0x40
 8011c2c:	781a      	ldrb	r2, [r3, #0]
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8011c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c34:	1c5a      	adds	r2, r3, #1
 8011c36:	643a      	str	r2, [r7, #64]	; 0x40
 8011c38:	781a      	ldrb	r2, [r3, #0]
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8011c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d02a      	beq.n	8011c9a <_fx_directory_entry_read_FAT+0x60e>
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	7f5b      	ldrb	r3, [r3, #29]
 8011c48:	f003 0308 	and.w	r3, r3, #8
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d024      	beq.n	8011c9a <_fx_directory_entry_read_FAT+0x60e>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8011c50:	2300      	movs	r3, #0
 8011c52:	663b      	str	r3, [r7, #96]	; 0x60
 8011c54:	e018      	b.n	8011c88 <_fx_directory_entry_read_FAT+0x5fc>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8011c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c5a:	4413      	add	r3, r2
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	2b40      	cmp	r3, #64	; 0x40
 8011c60:	d90f      	bls.n	8011c82 <_fx_directory_entry_read_FAT+0x5f6>
 8011c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c66:	4413      	add	r3, r2
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	2b5a      	cmp	r3, #90	; 0x5a
 8011c6c:	d809      	bhi.n	8011c82 <_fx_directory_entry_read_FAT+0x5f6>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8011c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c72:	4413      	add	r3, r2
 8011c74:	781a      	ldrb	r2, [r3, #0]
 8011c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c7a:	440b      	add	r3, r1
 8011c7c:	3220      	adds	r2, #32
 8011c7e:	b2d2      	uxtb	r2, r2
 8011c80:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8011c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c84:	3301      	adds	r3, #1
 8011c86:	663b      	str	r3, [r7, #96]	; 0x60
 8011c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c8a:	2b0b      	cmp	r3, #11
 8011c8c:	d805      	bhi.n	8011c9a <_fx_directory_entry_read_FAT+0x60e>
 8011c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c92:	4413      	add	r3, r2
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1dd      	bne.n	8011c56 <_fx_directory_entry_read_FAT+0x5ca>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8011c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c9c:	1c5a      	adds	r2, r3, #1
 8011c9e:	643a      	str	r2, [r7, #64]	; 0x40
 8011ca0:	781a      	ldrb	r2, [r3, #0]
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8011ca6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011ca8:	f007 fc8a 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011cac:	4602      	mov	r2, r0
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cb4:	3302      	adds	r3, #2
 8011cb6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8011cb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011cba:	f007 fc81 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cc6:	3302      	adds	r3, #2
 8011cc8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8011cca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011ccc:	f007 fc78 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd8:	3302      	adds	r3, #2
 8011cda:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00b      	beq.n	8011cfe <_fx_directory_entry_read_FAT+0x672>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8011ce6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011ce8:	f007 fc6a 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011cec:	4602      	mov	r2, r0
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cf6:	041a      	lsls	r2, r3, #16
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8011cfc:	e002      	b.n	8011d04 <_fx_directory_entry_read_FAT+0x678>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	2200      	movs	r2, #0
 8011d02:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d06:	3302      	adds	r3, #2
 8011d08:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8011d0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011d0c:	f007 fc58 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011d10:	4602      	mov	r2, r0
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d18:	3302      	adds	r3, #2
 8011d1a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8011d1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011d1e:	f007 fc4f 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011d22:	4602      	mov	r2, r0
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d2a:	3302      	adds	r3, #2
 8011d2c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8011d2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011d30:	f007 fc46 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8011d34:	4602      	mov	r2, r0
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d3a:	441a      	add	r2, r3
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8011d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d42:	3302      	adds	r3, #2
 8011d44:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8011d46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011d48:	f007 fc62 	bl	8019610 <_fx_utility_32_unsigned_read>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2200      	movs	r2, #0
 8011d50:	461c      	mov	r4, r3
 8011d52:	4615      	mov	r5, r2
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	2200      	movs	r2, #0
 8011d64:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8011d66:	6939      	ldr	r1, [r7, #16]
 8011d68:	f04f 0200 	mov.w	r2, #0
 8011d6c:	f04f 0300 	mov.w	r3, #0
 8011d70:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	2200      	movs	r2, #0
 8011d78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d84:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00f      	beq.n	8011dac <_fx_directory_entry_read_FAT+0x720>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d90:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8011d9e:	69b9      	ldr	r1, [r7, #24]
 8011da0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	661a      	str	r2, [r3, #96]	; 0x60
    }
#ifdef FX_ENABLE_EXFAT
    destination_ptr -> fx_dir_entry_dont_use_fat = 0;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* If a file whose first byte of long name is read, fx_dir_entry_short_name will not be empty. */
    /* If a free dir_entry is obtained, fx_dir_entry_short_name[0] will not be assigned as 0 around Line 623 in this file. */
    /* If there is only a free dir_entry without front long name dir_entries, fx_dir_entry_name[0] will be assigned by the loop around Line 568. */
    if (((UCHAR)destination_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_FREE) && ((UCHAR)destination_ptr -> fx_dir_entry_short_name[0] == 0))
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	2be5      	cmp	r3, #229	; 0xe5
 8011dbc:	d108      	bne.n	8011dd0 <_fx_directory_entry_read_FAT+0x744>
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	791b      	ldrb	r3, [r3, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d104      	bne.n	8011dd0 <_fx_directory_entry_read_FAT+0x744>
    {
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FREE;
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	22ff      	movs	r2, #255	; 0xff
 8011dca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8011dce:	e00d      	b.n	8011dec <_fx_directory_entry_read_FAT+0x760>
    }
    else if ((UCHAR)destination_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d104      	bne.n	8011de4 <_fx_directory_entry_read_FAT+0x758>
    {
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8011de2:	e003      	b.n	8011dec <_fx_directory_entry_read_FAT+0x760>
    }
    else
    {
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	2285      	movs	r2, #133	; 0x85
 8011de8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3768      	adds	r7, #104	; 0x68
 8011df2:	46bd      	mov	sp, r7
 8011df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011df8 <_fx_directory_entry_read_ex>:


#ifdef FX_ENABLE_EXFAT
UINT  _fx_directory_entry_read_ex(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                                  ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr, UINT hash)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b08a      	sub	sp, #40	; 0x28
 8011dfc:	af04      	add	r7, sp, #16
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
 8011e04:	603b      	str	r3, [r7, #0]
UINT status = FX_SUCCESS;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]

    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8011e10:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8011e14:	2b07      	cmp	r3, #7
 8011e16:	d10f      	bne.n	8011e38 <_fx_directory_entry_read_ex+0x40>
    {
        status =
            _fx_directory_exFAT_entry_read(
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9303      	str	r3, [sp, #12]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	9302      	str	r3, [sp, #8]
 8011e20:	2300      	movs	r3, #0
 8011e22:	9301      	str	r3, [sp, #4]
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	68b9      	ldr	r1, [r7, #8]
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 fe72 	bl	8012b18 <_fx_directory_exFAT_entry_read>
 8011e34:	6178      	str	r0, [r7, #20]
 8011e36:	e006      	b.n	8011e46 <_fx_directory_entry_read_ex+0x4e>
                media_ptr, source_dir, entry_ptr, destination_ptr, hash, FX_FALSE, NULL, NULL);
    }
    else
    {
        status =
            _fx_directory_entry_read_FAT(media_ptr, source_dir, entry_ptr, destination_ptr);
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	68b9      	ldr	r1, [r7, #8]
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7ff fc24 	bl	801168c <_fx_directory_entry_read_FAT>
 8011e44:	6178      	str	r0, [r7, #20]
    }

    return(status);
 8011e46:	697b      	ldr	r3, [r7, #20]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <_fx_directory_entry_read>:


UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af02      	add	r7, sp, #8
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
 8011e5c:	603b      	str	r3, [r7, #0]

    return(_fx_directory_entry_read_ex(media_ptr, source_dir, entry_ptr, destination_ptr, 0));
 8011e5e:	2300      	movs	r3, #0
 8011e60:	9300      	str	r3, [sp, #0]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	68b9      	ldr	r1, [r7, #8]
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f7ff ffc5 	bl	8011df8 <_fx_directory_entry_read_ex>
 8011e6e:	4603      	mov	r3, r0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8011e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011e7c:	b0a2      	sub	sp, #136	; 0x88
 8011e7e:	af04      	add	r7, sp, #16
 8011e80:	6178      	str	r0, [r7, #20]
 8011e82:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
 8011e8a:	1c5a      	adds	r2, r3, #1
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2be5      	cmp	r3, #229	; 0xe5
 8011e9a:	d109      	bne.n	8011eb0 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8011ea0:	2be5      	cmp	r3, #229	; 0xe5
 8011ea2:	d105      	bne.n	8011eb0 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	711a      	strb	r2, [r3, #4]
 8011eae:	e001      	b.n	8011eb4 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011eb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8011eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d31a      	bcc.n	8011f06 <_fx_directory_entry_write+0x8e>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8011ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ed8:	1ad2      	subs	r2, r2, r3
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8011ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee4:	3302      	adds	r3, #2
 8011ee6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8011eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef0:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8011ef2:	6979      	ldr	r1, [r7, #20]
 8011ef4:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8011ef8:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8011efc:	4413      	add	r3, r2
 8011efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f04:	e003      	b.n	8011f0e <_fx_directory_entry_write+0x96>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8011f06:	2300      	movs	r3, #0
 8011f08:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8011f18:	2303      	movs	r3, #3
 8011f1a:	9302      	str	r3, [sp, #8]
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	9301      	str	r3, [sp, #4]
 8011f20:	9200      	str	r2, [sp, #0]
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	6978      	ldr	r0, [r7, #20]
 8011f28:	f009 ff86 	bl	801be38 <_fx_utility_logical_sector_read>
 8011f2c:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8011f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <_fx_directory_entry_write+0xc2>
    {

        /* Return the error status.  */
        return(status);
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f36:	f000 bdea 	b.w	8012b0e <_fx_directory_entry_write+0xc96>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f46:	4413      	add	r3, r2
 8011f48:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	695b      	ldr	r3, [r3, #20]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f000 83d2 	beq.w	80126f8 <_fx_directory_entry_write+0x880>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8011f54:	2300      	movs	r3, #0
 8011f56:	653b      	str	r3, [r7, #80]	; 0x50
 8011f58:	2300      	movs	r3, #0
 8011f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f60:	2300      	movs	r3, #0
 8011f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f64:	e02c      	b.n	8011fc0 <_fx_directory_entry_write+0x148>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6c:	4413      	add	r3, r2
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	2b2e      	cmp	r3, #46	; 0x2e
 8011f72:	d108      	bne.n	8011f86 <_fx_directory_entry_write+0x10e>
            {

                /* Check for leading dot. */
                if (len == 0)
 8011f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d01e      	beq.n	8011fb8 <_fx_directory_entry_write+0x140>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 8011f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 8011f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f80:	3301      	adds	r3, #1
 8011f82:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 8011f84:	e019      	b.n	8011fba <_fx_directory_entry_write+0x142>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f8c:	4413      	add	r3, r2
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b20      	cmp	r3, #32
 8011f92:	d012      	beq.n	8011fba <_fx_directory_entry_write+0x142>
 8011f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f96:	2b07      	cmp	r3, #7
 8011f98:	d80f      	bhi.n	8011fba <_fx_directory_entry_write+0x142>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa0:	4413      	add	r3, r2
 8011fa2:	7819      	ldrb	r1, [r3, #0]
 8011fa4:	f107 021c 	add.w	r2, r7, #28
 8011fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011faa:	4413      	add	r3, r2
 8011fac:	460a      	mov	r2, r1
 8011fae:	701a      	strb	r2, [r3, #0]
                i++;
 8011fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8011fb6:	e000      	b.n	8011fba <_fx_directory_entry_write+0x142>
                    continue;
 8011fb8:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8011fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc6:	4413      	add	r3, r2
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1cb      	bne.n	8011f66 <_fx_directory_entry_write+0xee>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8011fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8011fd2:	e008      	b.n	8011fe6 <_fx_directory_entry_write+0x16e>
        {
            shortname[j] =  ' ';
 8011fd4:	f107 021c 	add.w	r2, r7, #28
 8011fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fda:	4413      	add	r3, r2
 8011fdc:	2220      	movs	r2, #32
 8011fde:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8011fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8011fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fe8:	2b0a      	cmp	r3, #10
 8011fea:	d9f3      	bls.n	8011fd4 <_fx_directory_entry_write+0x15c>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 8011fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d03e      	beq.n	8012070 <_fx_directory_entry_write+0x1f8>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ff8:	4413      	add	r3, r2
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d008      	beq.n	8012012 <_fx_directory_entry_write+0x19a>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012006:	1c59      	adds	r1, r3, #1
 8012008:	64b9      	str	r1, [r7, #72]	; 0x48
 801200a:	4413      	add	r3, r2
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012018:	4413      	add	r3, r2
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d008      	beq.n	8012032 <_fx_directory_entry_write+0x1ba>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012026:	1c59      	adds	r1, r3, #1
 8012028:	64b9      	str	r1, [r7, #72]	; 0x48
 801202a:	4413      	add	r3, r2
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012038:	4413      	add	r3, r2
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d008      	beq.n	8012052 <_fx_directory_entry_write+0x1da>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012046:	1c59      	adds	r1, r3, #1
 8012048:	64b9      	str	r1, [r7, #72]	; 0x48
 801204a:	4413      	add	r3, r2
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 8012052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012054:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 8012056:	e008      	b.n	801206a <_fx_directory_entry_write+0x1f2>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 8012058:	f107 021c 	add.w	r2, r7, #28
 801205c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801205e:	4413      	add	r3, r2
 8012060:	2220      	movs	r2, #32
 8012062:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 8012064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012066:	3301      	adds	r3, #1
 8012068:	64fb      	str	r3, [r7, #76]	; 0x4c
 801206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801206c:	2b07      	cmp	r3, #7
 801206e:	d9f3      	bls.n	8012058 <_fx_directory_entry_write+0x1e0>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 8012070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012072:	4b8f      	ldr	r3, [pc, #572]	; (80122b0 <_fx_directory_entry_write+0x438>)
 8012074:	fba3 2301 	umull	r2, r3, r3, r1
 8012078:	089a      	lsrs	r2, r3, #2
 801207a:	4613      	mov	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	4413      	add	r3, r2
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	4413      	add	r3, r2
 8012084:	1aca      	subs	r2, r1, r3
 8012086:	2a00      	cmp	r2, #0
 8012088:	d106      	bne.n	8012098 <_fx_directory_entry_write+0x220>
        {
            card =  len / 13;
 801208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208c:	4a88      	ldr	r2, [pc, #544]	; (80122b0 <_fx_directory_entry_write+0x438>)
 801208e:	fba2 2303 	umull	r2, r3, r2, r3
 8012092:	089b      	lsrs	r3, r3, #2
 8012094:	657b      	str	r3, [r7, #84]	; 0x54
 8012096:	e006      	b.n	80120a6 <_fx_directory_entry_write+0x22e>
        }
        else
        {
            card =  len / 13 + 1;
 8012098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801209a:	4a85      	ldr	r2, [pc, #532]	; (80122b0 <_fx_directory_entry_write+0x438>)
 801209c:	fba2 2303 	umull	r2, r3, r2, r3
 80120a0:	089b      	lsrs	r3, r3, #2
 80120a2:	3301      	adds	r3, #1
 80120a4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 80120a6:	2301      	movs	r3, #1
 80120a8:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 80120b2:	e03f      	b.n	8012134 <_fx_directory_entry_write+0x2bc>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 80120b4:	f107 021c 	add.w	r2, r7, #28
 80120b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120ba:	4413      	add	r3, r2
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	2b20      	cmp	r3, #32
 80120c0:	d116      	bne.n	80120f0 <_fx_directory_entry_write+0x278>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120c8:	4413      	add	r3, r2
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d035      	beq.n	801213c <_fx_directory_entry_write+0x2c4>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120d6:	4413      	add	r3, r2
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b2e      	cmp	r3, #46	; 0x2e
 80120dc:	d002      	beq.n	80120e4 <_fx_directory_entry_write+0x26c>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 80120de:	2300      	movs	r3, #0
 80120e0:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80120e2:	e02c      	b.n	801213e <_fx_directory_entry_write+0x2c6>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 80120e4:	2308      	movs	r3, #8
 80120e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 80120e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120ea:	3301      	adds	r3, #1
 80120ec:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 80120ee:	e021      	b.n	8012134 <_fx_directory_entry_write+0x2bc>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 80120f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120f2:	2b08      	cmp	r3, #8
 80120f4:	d109      	bne.n	801210a <_fx_directory_entry_write+0x292>
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120fc:	4413      	add	r3, r2
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b2e      	cmp	r3, #46	; 0x2e
 8012102:	d102      	bne.n	801210a <_fx_directory_entry_write+0x292>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 8012104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012106:	3301      	adds	r3, #1
 8012108:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 801210a:	f107 021c 	add.w	r2, r7, #28
 801210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012110:	4413      	add	r3, r2
 8012112:	781a      	ldrb	r2, [r3, #0]
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	6819      	ldr	r1, [r3, #0]
 8012118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801211a:	440b      	add	r3, r1
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	429a      	cmp	r2, r3
 8012120:	d002      	beq.n	8012128 <_fx_directory_entry_write+0x2b0>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 8012122:	2300      	movs	r3, #0
 8012124:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8012126:	e00a      	b.n	801213e <_fx_directory_entry_write+0x2c6>
            }

            /* Move the indices forward.  */
            k++;
 8012128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801212a:	3301      	adds	r3, #1
 801212c:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 801212e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012130:	3301      	adds	r3, #1
 8012132:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8012134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012136:	2b0a      	cmp	r3, #10
 8012138:	d9bc      	bls.n	80120b4 <_fx_directory_entry_write+0x23c>
 801213a:	e000      	b.n	801213e <_fx_directory_entry_write+0x2c6>
                    break;
 801213c:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 801213e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012140:	2b00      	cmp	r3, #0
 8012142:	d005      	beq.n	8012150 <_fx_directory_entry_write+0x2d8>
 8012144:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012148:	2b20      	cmp	r3, #32
 801214a:	d101      	bne.n	8012150 <_fx_directory_entry_write+0x2d8>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 801214c:	2300      	movs	r3, #0
 801214e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012156:	4413      	add	r3, r2
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <_fx_directory_entry_write+0x2ea>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 801215e:	2300      	movs	r3, #0
 8012160:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 8012162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012164:	2b00      	cmp	r3, #0
 8012166:	d15a      	bne.n	801221e <_fx_directory_entry_write+0x3a6>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801216c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	b29b      	uxth	r3, r3
 8012172:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 8012174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012176:	2b03      	cmp	r3, #3
 8012178:	d901      	bls.n	801217e <_fx_directory_entry_write+0x306>
            {
                i = 3;
 801217a:	2303      	movs	r3, #3
 801217c:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 801217e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012180:	1c5a      	adds	r2, r3, #1
 8012182:	667a      	str	r2, [r7, #100]	; 0x64
 8012184:	3368      	adds	r3, #104	; 0x68
 8012186:	f107 0210 	add.w	r2, r7, #16
 801218a:	4413      	add	r3, r2
 801218c:	227e      	movs	r2, #126	; 0x7e
 801218e:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 8012192:	2300      	movs	r3, #0
 8012194:	65bb      	str	r3, [r7, #88]	; 0x58
 8012196:	e03f      	b.n	8012218 <_fx_directory_entry_write+0x3a0>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 8012198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801219a:	2b00      	cmp	r3, #0
 801219c:	d105      	bne.n	80121aa <_fx_directory_entry_write+0x332>
                {
                    temp =  ((entry >> 12) & 0xf);
 801219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a0:	0b1b      	lsrs	r3, r3, #12
 80121a2:	f003 030f 	and.w	r3, r3, #15
 80121a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80121a8:	e015      	b.n	80121d6 <_fx_directory_entry_write+0x35e>
                }
                else if (l == 1)
 80121aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d105      	bne.n	80121bc <_fx_directory_entry_write+0x344>
                {
                     temp = ((entry >> 8) & 0xf);
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	0a1b      	lsrs	r3, r3, #8
 80121b4:	f003 030f 	and.w	r3, r3, #15
 80121b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80121ba:	e00c      	b.n	80121d6 <_fx_directory_entry_write+0x35e>
                }
                else if (l == 2)
 80121bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d105      	bne.n	80121ce <_fx_directory_entry_write+0x356>
                {
                     temp = ((entry >> 4) & 0xf);
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	091b      	lsrs	r3, r3, #4
 80121c6:	f003 030f 	and.w	r3, r3, #15
 80121ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80121cc:	e003      	b.n	80121d6 <_fx_directory_entry_write+0x35e>
                }
                else
                {
                     temp = ((entry) & 0xf);
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	f003 030f 	and.w	r3, r3, #15
 80121d4:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 80121d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121d8:	2b09      	cmp	r3, #9
 80121da:	d90d      	bls.n	80121f8 <_fx_directory_entry_write+0x380>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80121dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121e2:	1c59      	adds	r1, r3, #1
 80121e4:	6679      	str	r1, [r7, #100]	; 0x64
 80121e6:	3237      	adds	r2, #55	; 0x37
 80121e8:	b2d2      	uxtb	r2, r2
 80121ea:	3368      	adds	r3, #104	; 0x68
 80121ec:	f107 0110 	add.w	r1, r7, #16
 80121f0:	440b      	add	r3, r1
 80121f2:	f803 2c5c 	strb.w	r2, [r3, #-92]
 80121f6:	e00c      	b.n	8012212 <_fx_directory_entry_write+0x39a>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 80121f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121fa:	b2da      	uxtb	r2, r3
 80121fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121fe:	1c59      	adds	r1, r3, #1
 8012200:	6679      	str	r1, [r7, #100]	; 0x64
 8012202:	3230      	adds	r2, #48	; 0x30
 8012204:	b2d2      	uxtb	r2, r2
 8012206:	3368      	adds	r3, #104	; 0x68
 8012208:	f107 0110 	add.w	r1, r7, #16
 801220c:	440b      	add	r3, r1
 801220e:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 8012212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012214:	3301      	adds	r3, #1
 8012216:	65bb      	str	r3, [r7, #88]	; 0x58
 8012218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801221a:	2b03      	cmp	r3, #3
 801221c:	d9bc      	bls.n	8012198 <_fx_directory_entry_write+0x320>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8012224:	7f3b      	ldrb	r3, [r7, #28]
 8012226:	2be5      	cmp	r3, #229	; 0xe5
 8012228:	d104      	bne.n	8012234 <_fx_directory_entry_write+0x3bc>
 801222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801222c:	2b00      	cmp	r3, #0
 801222e:	d101      	bne.n	8012234 <_fx_directory_entry_write+0x3bc>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 8012230:	238f      	movs	r3, #143	; 0x8f
 8012232:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012234:	2300      	movs	r3, #0
 8012236:	667b      	str	r3, [r7, #100]	; 0x64
 8012238:	e01d      	b.n	8012276 <_fx_directory_entry_write+0x3fe>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 801223a:	f107 021c 	add.w	r2, r7, #28
 801223e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012240:	4413      	add	r3, r2
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 8012248:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801224c:	2b60      	cmp	r3, #96	; 0x60
 801224e:	d908      	bls.n	8012262 <_fx_directory_entry_write+0x3ea>
 8012250:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012254:	2b7a      	cmp	r3, #122	; 0x7a
 8012256:	d804      	bhi.n	8012262 <_fx_directory_entry_write+0x3ea>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8012258:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801225c:	3b20      	subs	r3, #32
 801225e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8012262:	f107 021c 	add.w	r2, r7, #28
 8012266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012268:	4413      	add	r3, r2
 801226a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801226e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012272:	3301      	adds	r3, #1
 8012274:	667b      	str	r3, [r7, #100]	; 0x64
 8012276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012278:	2b0a      	cmp	r3, #10
 801227a:	d9de      	bls.n	801223a <_fx_directory_entry_write+0x3c2>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	791b      	ldrb	r3, [r3, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 8096 	beq.w	80123b2 <_fx_directory_entry_write+0x53a>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8012286:	2300      	movs	r3, #0
 8012288:	667b      	str	r3, [r7, #100]	; 0x64
 801228a:	e008      	b.n	801229e <_fx_directory_entry_write+0x426>
            {
                shortname[i] = ' ';
 801228c:	f107 021c 	add.w	r2, r7, #28
 8012290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012292:	4413      	add	r3, r2
 8012294:	2220      	movs	r2, #32
 8012296:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8012298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801229a:	3301      	adds	r3, #1
 801229c:	667b      	str	r3, [r7, #100]	; 0x64
 801229e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122a0:	2b0a      	cmp	r3, #10
 80122a2:	d9f3      	bls.n	801228c <_fx_directory_entry_write+0x414>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80122a4:	2300      	movs	r3, #0
 80122a6:	667b      	str	r3, [r7, #100]	; 0x64
 80122a8:	2300      	movs	r3, #0
 80122aa:	663b      	str	r3, [r7, #96]	; 0x60
 80122ac:	e024      	b.n	80122f8 <_fx_directory_entry_write+0x480>
 80122ae:	bf00      	nop
 80122b0:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 80122b4:	693a      	ldr	r2, [r7, #16]
 80122b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122b8:	4413      	add	r3, r2
 80122ba:	3304      	adds	r3, #4
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	2b2e      	cmp	r3, #46	; 0x2e
 80122c0:	d01e      	beq.n	8012300 <_fx_directory_entry_write+0x488>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122c6:	4413      	add	r3, r2
 80122c8:	3304      	adds	r3, #4
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d019      	beq.n	8012304 <_fx_directory_entry_write+0x48c>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 80122d0:	693a      	ldr	r2, [r7, #16]
 80122d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122d4:	4413      	add	r3, r2
 80122d6:	3304      	adds	r3, #4
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 80122de:	f107 021c 	add.w	r2, r7, #28
 80122e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122e4:	4413      	add	r3, r2
 80122e6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80122ea:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80122ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122ee:	3301      	adds	r3, #1
 80122f0:	667b      	str	r3, [r7, #100]	; 0x64
 80122f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122f4:	3301      	adds	r3, #1
 80122f6:	663b      	str	r3, [r7, #96]	; 0x60
 80122f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122fa:	2b07      	cmp	r3, #7
 80122fc:	d9da      	bls.n	80122b4 <_fx_directory_entry_write+0x43c>
 80122fe:	e002      	b.n	8012306 <_fx_directory_entry_write+0x48e>
                    break;
 8012300:	bf00      	nop
 8012302:	e000      	b.n	8012306 <_fx_directory_entry_write+0x48e>
                    break;
 8012304:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8012306:	693a      	ldr	r2, [r7, #16]
 8012308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801230a:	4413      	add	r3, r2
 801230c:	3304      	adds	r3, #4
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d025      	beq.n	8012360 <_fx_directory_entry_write+0x4e8>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8012314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012316:	3301      	adds	r3, #1
 8012318:	667b      	str	r3, [r7, #100]	; 0x64
 801231a:	2308      	movs	r3, #8
 801231c:	663b      	str	r3, [r7, #96]	; 0x60
 801231e:	e01a      	b.n	8012356 <_fx_directory_entry_write+0x4de>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8012320:	693a      	ldr	r2, [r7, #16]
 8012322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012324:	4413      	add	r3, r2
 8012326:	3304      	adds	r3, #4
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d017      	beq.n	801235e <_fx_directory_entry_write+0x4e6>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 801232e:	693a      	ldr	r2, [r7, #16]
 8012330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012332:	4413      	add	r3, r2
 8012334:	3304      	adds	r3, #4
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 801233c:	f107 021c 	add.w	r2, r7, #28
 8012340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012342:	4413      	add	r3, r2
 8012344:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8012348:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 801234a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801234c:	3301      	adds	r3, #1
 801234e:	667b      	str	r3, [r7, #100]	; 0x64
 8012350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012352:	3301      	adds	r3, #1
 8012354:	663b      	str	r3, [r7, #96]	; 0x60
 8012356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012358:	2b0a      	cmp	r3, #10
 801235a:	d9e1      	bls.n	8012320 <_fx_directory_entry_write+0x4a8>
 801235c:	e000      	b.n	8012360 <_fx_directory_entry_write+0x4e8>
                        break;
 801235e:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8012360:	2300      	movs	r3, #0
 8012362:	663b      	str	r3, [r7, #96]	; 0x60
 8012364:	e01d      	b.n	80123a2 <_fx_directory_entry_write+0x52a>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 8012366:	f107 021c 	add.w	r2, r7, #28
 801236a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801236c:	4413      	add	r3, r2
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8012374:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012378:	2b60      	cmp	r3, #96	; 0x60
 801237a:	d908      	bls.n	801238e <_fx_directory_entry_write+0x516>
 801237c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012380:	2b7a      	cmp	r3, #122	; 0x7a
 8012382:	d804      	bhi.n	801238e <_fx_directory_entry_write+0x516>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8012384:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012388:	3b20      	subs	r3, #32
 801238a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 801238e:	f107 021c 	add.w	r2, r7, #28
 8012392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012394:	4413      	add	r3, r2
 8012396:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801239a:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 801239c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801239e:	3301      	adds	r3, #1
 80123a0:	663b      	str	r3, [r7, #96]	; 0x60
 80123a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123a4:	2b0a      	cmp	r3, #10
 80123a6:	d9de      	bls.n	8012366 <_fx_directory_entry_write+0x4ee>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 80123a8:	7f3b      	ldrb	r3, [r7, #28]
 80123aa:	2be5      	cmp	r3, #229	; 0xe5
 80123ac:	d101      	bne.n	80123b2 <_fx_directory_entry_write+0x53a>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 80123ae:	238f      	movs	r3, #143	; 0x8f
 80123b0:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80123b2:	2300      	movs	r3, #0
 80123b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123b8:	2300      	movs	r3, #0
 80123ba:	667b      	str	r3, [r7, #100]	; 0x64
 80123bc:	e016      	b.n	80123ec <_fx_directory_entry_write+0x574>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 80123be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123c2:	01db      	lsls	r3, r3, #7
 80123c4:	b25a      	sxtb	r2, r3
 80123c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123ca:	085b      	lsrs	r3, r3, #1
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	b25b      	sxtb	r3, r3
 80123d0:	4313      	orrs	r3, r2
 80123d2:	b25b      	sxtb	r3, r3
 80123d4:	b2da      	uxtb	r2, r3
 80123d6:	f107 011c 	add.w	r1, r7, #28
 80123da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123dc:	440b      	add	r3, r1
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	4413      	add	r3, r2
 80123e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80123e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123e8:	3301      	adds	r3, #1
 80123ea:	667b      	str	r3, [r7, #100]	; 0x64
 80123ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123ee:	2b0a      	cmp	r3, #10
 80123f0:	d9e5      	bls.n	80123be <_fx_directory_entry_write+0x546>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 80123f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123fe:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 8012400:	e0f8      	b.n	80125f4 <_fx_directory_entry_write+0x77c>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8012408:	7f3b      	ldrb	r3, [r7, #28]
 801240a:	2be5      	cmp	r3, #229	; 0xe5
 801240c:	d102      	bne.n	8012414 <_fx_directory_entry_write+0x59c>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 801240e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012410:	22e5      	movs	r2, #229	; 0xe5
 8012412:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 8012414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012416:	330b      	adds	r3, #11
 8012418:	220f      	movs	r2, #15
 801241a:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 801241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801241e:	330c      	adds	r3, #12
 8012420:	2200      	movs	r2, #0
 8012422:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 8012424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012426:	330d      	adds	r3, #13
 8012428:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801242c:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 801242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012430:	331a      	adds	r3, #26
 8012432:	2200      	movs	r2, #0
 8012434:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 8012436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012438:	331b      	adds	r3, #27
 801243a:	2200      	movs	r2, #0
 801243c:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 801243e:	2301      	movs	r3, #1
 8012440:	667b      	str	r3, [r7, #100]	; 0x64
 8012442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012444:	4613      	mov	r3, r2
 8012446:	005b      	lsls	r3, r3, #1
 8012448:	4413      	add	r3, r2
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	4413      	add	r3, r2
 801244e:	3b0d      	subs	r3, #13
 8012450:	663b      	str	r3, [r7, #96]	; 0x60
 8012452:	e03e      	b.n	80124d2 <_fx_directory_entry_write+0x65a>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 8012454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012456:	2b0b      	cmp	r3, #11
 8012458:	d037      	beq.n	80124ca <_fx_directory_entry_write+0x652>
 801245a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801245c:	2b1a      	cmp	r3, #26
 801245e:	d034      	beq.n	80124ca <_fx_directory_entry_write+0x652>
                {
                    continue;
                }

                if (i == 13)
 8012460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012462:	2b0d      	cmp	r3, #13
 8012464:	d102      	bne.n	801246c <_fx_directory_entry_write+0x5f4>
                {
                    i = 12;
 8012466:	230c      	movs	r3, #12
 8012468:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 801246a:	e02f      	b.n	80124cc <_fx_directory_entry_write+0x654>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 801246c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8012470:	2b00      	cmp	r3, #0
 8012472:	d00d      	beq.n	8012490 <_fx_directory_entry_write+0x618>
                {

                    work_ptr[i] = eof_marker;
 8012474:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012478:	4413      	add	r3, r2
 801247a:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 801247e:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 8012480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012482:	3301      	adds	r3, #1
 8012484:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012486:	4413      	add	r3, r2
 8012488:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	e00e      	b.n	80124ae <_fx_directory_entry_write+0x636>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012496:	441a      	add	r2, r3
 8012498:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801249a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801249c:	440b      	add	r3, r1
 801249e:	7812      	ldrb	r2, [r2, #0]
 80124a0:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 80124a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124a4:	3301      	adds	r3, #1
 80124a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80124a8:	4413      	add	r3, r2
 80124aa:	2200      	movs	r2, #0
 80124ac:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124b4:	4413      	add	r3, r2
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d102      	bne.n	80124c2 <_fx_directory_entry_write+0x64a>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 80124bc:	23ff      	movs	r3, #255	; 0xff
 80124be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 80124c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124c4:	3301      	adds	r3, #1
 80124c6:	663b      	str	r3, [r7, #96]	; 0x60
 80124c8:	e000      	b.n	80124cc <_fx_directory_entry_write+0x654>
                    continue;
 80124ca:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 80124cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124ce:	3302      	adds	r3, #2
 80124d0:	667b      	str	r3, [r7, #100]	; 0x64
 80124d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124d4:	2b1f      	cmp	r3, #31
 80124d6:	d9bd      	bls.n	8012454 <_fx_directory_entry_write+0x5dc>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 80124d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124da:	3320      	adds	r3, #32
 80124dc:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 80124de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124e0:	3320      	adds	r3, #32
 80124e2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d37b      	bcc.n	80125e6 <_fx_directory_entry_write+0x76e>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80124ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124f0:	2200      	movs	r2, #0
 80124f2:	60bb      	str	r3, [r7, #8]
 80124f4:	60fa      	str	r2, [r7, #12]
 80124f6:	2303      	movs	r3, #3
 80124f8:	9302      	str	r3, [sp, #8]
 80124fa:	2301      	movs	r3, #1
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012506:	6978      	ldr	r0, [r7, #20]
 8012508:	f009 ff2a 	bl	801c360 <_fx_utility_logical_sector_write>
 801250c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	2b00      	cmp	r3, #0
 8012512:	d001      	beq.n	8012518 <_fx_directory_entry_write+0x6a0>
                {

                    /* Return the error status.  */
                    return(status);
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	e2fa      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801251e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012520:	429a      	cmp	r2, r3
 8012522:	d338      	bcc.n	8012596 <_fx_directory_entry_write+0x71e>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801252a:	3b01      	subs	r3, #1
 801252c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801252e:	429a      	cmp	r2, r3
 8012530:	d206      	bcs.n	8012540 <_fx_directory_entry_write+0x6c8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8012532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012534:	3301      	adds	r3, #1
 8012536:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	3301      	adds	r3, #1
 801253c:	63bb      	str	r3, [r7, #56]	; 0x38
 801253e:	e035      	b.n	80125ac <_fx_directory_entry_write+0x734>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8012540:	f107 0318 	add.w	r3, r7, #24
 8012544:	461a      	mov	r2, r3
 8012546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012548:	6978      	ldr	r0, [r7, #20]
 801254a:	f007 f8ec 	bl	8019726 <_fx_utility_FAT_entry_read>
 801254e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8012550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012552:	2b00      	cmp	r3, #0
 8012554:	d001      	beq.n	801255a <_fx_directory_entry_write+0x6e2>
                        {

                            /* Return error code.  */
                            return(status);
 8012556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012558:	e2d9      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 801255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012560:	2b01      	cmp	r3, #1
 8012562:	d907      	bls.n	8012574 <_fx_directory_entry_write+0x6fc>
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801256a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801256e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012570:	429a      	cmp	r2, r3
 8012572:	d301      	bcc.n	8012578 <_fx_directory_entry_write+0x700>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8012574:	2308      	movs	r3, #8
 8012576:	e2ca      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8012578:	2300      	movs	r3, #0
 801257a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8012586:	6979      	ldr	r1, [r7, #20]
 8012588:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 801258c:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012590:	4413      	add	r3, r2
 8012592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012594:	e00a      	b.n	80125ac <_fx_directory_entry_write+0x734>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 8012596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012598:	3301      	adds	r3, #1
 801259a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80125a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d301      	bcc.n	80125ac <_fx_directory_entry_write+0x734>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 80125a8:	2308      	movs	r3, #8
 80125aa:	e2b0      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80125ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ae:	2200      	movs	r2, #0
 80125b0:	603b      	str	r3, [r7, #0]
 80125b2:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80125b8:	2203      	movs	r2, #3
 80125ba:	9202      	str	r2, [sp, #8]
 80125bc:	2201      	movs	r2, #1
 80125be:	9201      	str	r2, [sp, #4]
 80125c0:	9300      	str	r3, [sp, #0]
 80125c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125c6:	6978      	ldr	r0, [r7, #20]
 80125c8:	f009 fc36 	bl	801be38 <_fx_utility_logical_sector_read>
 80125cc:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80125ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <_fx_directory_entry_write+0x760>
                {

                    /* Return the error status.  */
                    return(status);
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	e29a      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 80125e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80125e4:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 80125e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125e8:	3b01      	subs	r3, #1
 80125ea:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 80125ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125ee:	b2da      	uxtb	r2, r3
 80125f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125f2:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 80125f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f47f af03 	bne.w	8012402 <_fx_directory_entry_write+0x58a>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	791b      	ldrb	r3, [r3, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d116      	bne.n	8012632 <_fx_directory_entry_write+0x7ba>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012604:	2300      	movs	r3, #0
 8012606:	667b      	str	r3, [r7, #100]	; 0x64
 8012608:	e00f      	b.n	801262a <_fx_directory_entry_write+0x7b2>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 801260a:	f107 021c 	add.w	r2, r7, #28
 801260e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 8012618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801261a:	1c5a      	adds	r2, r3, #1
 801261c:	677a      	str	r2, [r7, #116]	; 0x74
 801261e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8012622:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012626:	3301      	adds	r3, #1
 8012628:	667b      	str	r3, [r7, #100]	; 0x64
 801262a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801262c:	2b0a      	cmp	r3, #10
 801262e:	d9ec      	bls.n	801260a <_fx_directory_entry_write+0x792>
 8012630:	e1aa      	b.n	8012988 <_fx_directory_entry_write+0xb10>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8012632:	2300      	movs	r3, #0
 8012634:	667b      	str	r3, [r7, #100]	; 0x64
 8012636:	e007      	b.n	8012648 <_fx_directory_entry_write+0x7d0>
            {
                work_ptr[i] = ' ';
 8012638:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801263a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801263c:	4413      	add	r3, r2
 801263e:	2220      	movs	r2, #32
 8012640:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8012642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012644:	3301      	adds	r3, #1
 8012646:	667b      	str	r3, [r7, #100]	; 0x64
 8012648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801264a:	2b0a      	cmp	r3, #10
 801264c:	d9f4      	bls.n	8012638 <_fx_directory_entry_write+0x7c0>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801264e:	2300      	movs	r3, #0
 8012650:	667b      	str	r3, [r7, #100]	; 0x64
 8012652:	2300      	movs	r3, #0
 8012654:	663b      	str	r3, [r7, #96]	; 0x60
 8012656:	e01c      	b.n	8012692 <_fx_directory_entry_write+0x81a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8012658:	693a      	ldr	r2, [r7, #16]
 801265a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801265c:	4413      	add	r3, r2
 801265e:	3304      	adds	r3, #4
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2b2e      	cmp	r3, #46	; 0x2e
 8012664:	d019      	beq.n	801269a <_fx_directory_entry_write+0x822>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801266a:	4413      	add	r3, r2
 801266c:	3304      	adds	r3, #4
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d014      	beq.n	801269e <_fx_directory_entry_write+0x826>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8012674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012678:	4413      	add	r3, r2
 801267a:	6939      	ldr	r1, [r7, #16]
 801267c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801267e:	440a      	add	r2, r1
 8012680:	3204      	adds	r2, #4
 8012682:	7812      	ldrb	r2, [r2, #0]
 8012684:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8012686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012688:	3301      	adds	r3, #1
 801268a:	667b      	str	r3, [r7, #100]	; 0x64
 801268c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801268e:	3301      	adds	r3, #1
 8012690:	663b      	str	r3, [r7, #96]	; 0x60
 8012692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012694:	2b07      	cmp	r3, #7
 8012696:	d9df      	bls.n	8012658 <_fx_directory_entry_write+0x7e0>
 8012698:	e002      	b.n	80126a0 <_fx_directory_entry_write+0x828>
                    break;
 801269a:	bf00      	nop
 801269c:	e000      	b.n	80126a0 <_fx_directory_entry_write+0x828>
                    break;
 801269e:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 80126a0:	693a      	ldr	r2, [r7, #16]
 80126a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126a4:	4413      	add	r3, r2
 80126a6:	3304      	adds	r3, #4
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d020      	beq.n	80126f0 <_fx_directory_entry_write+0x878>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 80126ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126b0:	3301      	adds	r3, #1
 80126b2:	667b      	str	r3, [r7, #100]	; 0x64
 80126b4:	2308      	movs	r3, #8
 80126b6:	663b      	str	r3, [r7, #96]	; 0x60
 80126b8:	e015      	b.n	80126e6 <_fx_directory_entry_write+0x86e>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80126ba:	693a      	ldr	r2, [r7, #16]
 80126bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126be:	4413      	add	r3, r2
 80126c0:	3304      	adds	r3, #4
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d012      	beq.n	80126ee <_fx_directory_entry_write+0x876>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80126c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80126ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126cc:	4413      	add	r3, r2
 80126ce:	6939      	ldr	r1, [r7, #16]
 80126d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80126d2:	440a      	add	r2, r1
 80126d4:	3204      	adds	r2, #4
 80126d6:	7812      	ldrb	r2, [r2, #0]
 80126d8:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 80126da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126dc:	3301      	adds	r3, #1
 80126de:	667b      	str	r3, [r7, #100]	; 0x64
 80126e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126e2:	3301      	adds	r3, #1
 80126e4:	663b      	str	r3, [r7, #96]	; 0x60
 80126e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126e8:	2b0a      	cmp	r3, #10
 80126ea:	d9e6      	bls.n	80126ba <_fx_directory_entry_write+0x842>
 80126ec:	e000      	b.n	80126f0 <_fx_directory_entry_write+0x878>
                        break;
 80126ee:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 80126f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126f2:	330b      	adds	r3, #11
 80126f4:	677b      	str	r3, [r7, #116]	; 0x74
 80126f6:	e147      	b.n	8012988 <_fx_directory_entry_write+0xb10>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	699b      	ldr	r3, [r3, #24]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f000 80a6 	beq.w	801284e <_fx_directory_entry_write+0x9d6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	b2db      	uxtb	r3, r3
 8012708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801270c:	b2da      	uxtb	r2, r3
 801270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	f040 809b 	bne.w	801284e <_fx_directory_entry_write+0x9d6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 8012718:	2300      	movs	r3, #0
 801271a:	663b      	str	r3, [r7, #96]	; 0x60
 801271c:	e091      	b.n	8012842 <_fx_directory_entry_write+0x9ca>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2be5      	cmp	r3, #229	; 0xe5
 8012726:	d102      	bne.n	801272e <_fx_directory_entry_write+0x8b6>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8012728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801272a:	22e5      	movs	r2, #229	; 0xe5
 801272c:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 801272e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012730:	3320      	adds	r3, #32
 8012732:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 8012734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012736:	3320      	adds	r3, #32
 8012738:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801273e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012740:	429a      	cmp	r2, r3
 8012742:	d37b      	bcc.n	801283c <_fx_directory_entry_write+0x9c4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8012744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012746:	2200      	movs	r2, #0
 8012748:	4698      	mov	r8, r3
 801274a:	4691      	mov	r9, r2
 801274c:	2303      	movs	r3, #3
 801274e:	9302      	str	r3, [sp, #8]
 8012750:	2301      	movs	r3, #1
 8012752:	9301      	str	r3, [sp, #4]
 8012754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	4642      	mov	r2, r8
 801275a:	464b      	mov	r3, r9
 801275c:	6978      	ldr	r0, [r7, #20]
 801275e:	f009 fdff 	bl	801c360 <_fx_utility_logical_sector_write>
 8012762:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 8012764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <_fx_directory_entry_write+0x8f6>
                        {

                            /* Return the error status.  */
                            return(status);
 801276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276c:	e1cf      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8012774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012776:	429a      	cmp	r2, r3
 8012778:	d338      	bcc.n	80127ec <_fx_directory_entry_write+0x974>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012780:	3b01      	subs	r3, #1
 8012782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012784:	429a      	cmp	r2, r3
 8012786:	d206      	bcs.n	8012796 <_fx_directory_entry_write+0x91e>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 8012788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801278a:	3301      	adds	r3, #1
 801278c:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 801278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012790:	3301      	adds	r3, #1
 8012792:	63bb      	str	r3, [r7, #56]	; 0x38
 8012794:	e035      	b.n	8012802 <_fx_directory_entry_write+0x98a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8012796:	f107 0318 	add.w	r3, r7, #24
 801279a:	461a      	mov	r2, r3
 801279c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801279e:	6978      	ldr	r0, [r7, #20]
 80127a0:	f006 ffc1 	bl	8019726 <_fx_utility_FAT_entry_read>
 80127a4:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 80127a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d001      	beq.n	80127b0 <_fx_directory_entry_write+0x938>
                                {

                                    /* Return error code.  */
                                    return(status);
 80127ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ae:	e1ae      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d907      	bls.n	80127ca <_fx_directory_entry_write+0x952>
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80127c0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80127c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d301      	bcc.n	80127ce <_fx_directory_entry_write+0x956>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 80127ca:	2308      	movs	r3, #8
 80127cc:	e19f      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 80127ce:	2300      	movs	r3, #0
 80127d0:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80127d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127da:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80127dc:	6979      	ldr	r1, [r7, #20]
 80127de:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80127e2:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80127e6:	4413      	add	r3, r2
 80127e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80127ea:	e00a      	b.n	8012802 <_fx_directory_entry_write+0x98a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 80127ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ee:	3301      	adds	r3, #1
 80127f0:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80127f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d301      	bcc.n	8012802 <_fx_directory_entry_write+0x98a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 80127fe:	2308      	movs	r3, #8
 8012800:	e185      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8012802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012804:	2200      	movs	r2, #0
 8012806:	469a      	mov	sl, r3
 8012808:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801280e:	2203      	movs	r2, #3
 8012810:	9202      	str	r2, [sp, #8]
 8012812:	2201      	movs	r2, #1
 8012814:	9201      	str	r2, [sp, #4]
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	4652      	mov	r2, sl
 801281a:	465b      	mov	r3, fp
 801281c:	6978      	ldr	r0, [r7, #20]
 801281e:	f009 fb0b 	bl	801be38 <_fx_utility_logical_sector_read>
 8012822:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <_fx_directory_entry_write+0x9b6>
                        {

                            /* Return the error status.  */
                            return(status);
 801282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282c:	e16f      	b.n	8012b0e <_fx_directory_entry_write+0xc96>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	689b      	ldr	r3, [r3, #8]
 8012832:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 8012834:	2300      	movs	r3, #0
 8012836:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 8012838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801283a:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 801283c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801283e:	3301      	adds	r3, #1
 8012840:	663b      	str	r3, [r7, #96]	; 0x60
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	699b      	ldr	r3, [r3, #24]
 8012846:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012848:	429a      	cmp	r2, r3
 801284a:	f4ff af68 	bcc.w	801271e <_fx_directory_entry_write+0x8a6>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 801284e:	2300      	movs	r3, #0
 8012850:	663b      	str	r3, [r7, #96]	; 0x60
 8012852:	e007      	b.n	8012864 <_fx_directory_entry_write+0x9ec>
        {
            work_ptr[j] = ' ';
 8012854:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012858:	4413      	add	r3, r2
 801285a:	2220      	movs	r2, #32
 801285c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 801285e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012860:	3301      	adds	r3, #1
 8012862:	663b      	str	r3, [r7, #96]	; 0x60
 8012864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012866:	2b0a      	cmp	r3, #10
 8012868:	d9f4      	bls.n	8012854 <_fx_directory_entry_write+0x9dc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 801286a:	2300      	movs	r3, #0
 801286c:	667b      	str	r3, [r7, #100]	; 0x64
 801286e:	e007      	b.n	8012880 <_fx_directory_entry_write+0xa08>
        {
            work_ptr[i] = '.';
 8012870:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012874:	4413      	add	r3, r2
 8012876:	222e      	movs	r2, #46	; 0x2e
 8012878:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 801287a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801287c:	3301      	adds	r3, #1
 801287e:	667b      	str	r3, [r7, #100]	; 0x64
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012886:	4413      	add	r3, r2
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b2e      	cmp	r3, #46	; 0x2e
 801288c:	d0f0      	beq.n	8012870 <_fx_directory_entry_write+0x9f8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	681a      	ldr	r2, [r3, #0]
 8012892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012894:	4413      	add	r3, r2
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d039      	beq.n	8012910 <_fx_directory_entry_write+0xa98>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801289c:	2300      	movs	r3, #0
 801289e:	667b      	str	r3, [r7, #100]	; 0x64
 80128a0:	2300      	movs	r3, #0
 80128a2:	663b      	str	r3, [r7, #96]	; 0x60
 80128a4:	e02d      	b.n	8012902 <_fx_directory_entry_write+0xa8a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128ac:	4413      	add	r3, r2
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	2b2e      	cmp	r3, #46	; 0x2e
 80128b2:	d02a      	beq.n	801290a <_fx_directory_entry_write+0xa92>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128ba:	4413      	add	r3, r2
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d025      	beq.n	801290e <_fx_directory_entry_write+0xa96>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128c8:	4413      	add	r3, r2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80128d0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80128d4:	2b60      	cmp	r3, #96	; 0x60
 80128d6:	d908      	bls.n	80128ea <_fx_directory_entry_write+0xa72>
 80128d8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80128dc:	2b7a      	cmp	r3, #122	; 0x7a
 80128de:	d804      	bhi.n	80128ea <_fx_directory_entry_write+0xa72>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80128e0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80128e4:	3b20      	subs	r3, #32
 80128e6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 80128ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80128ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128ee:	4413      	add	r3, r2
 80128f0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80128f4:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80128f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128f8:	3301      	adds	r3, #1
 80128fa:	667b      	str	r3, [r7, #100]	; 0x64
 80128fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128fe:	3301      	adds	r3, #1
 8012900:	663b      	str	r3, [r7, #96]	; 0x60
 8012902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012904:	2b07      	cmp	r3, #7
 8012906:	d9ce      	bls.n	80128a6 <_fx_directory_entry_write+0xa2e>
 8012908:	e002      	b.n	8012910 <_fx_directory_entry_write+0xa98>
                    break;
 801290a:	bf00      	nop
 801290c:	e000      	b.n	8012910 <_fx_directory_entry_write+0xa98>
                    break;
 801290e:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012916:	4413      	add	r3, r2
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d031      	beq.n	8012982 <_fx_directory_entry_write+0xb0a>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 801291e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012920:	3301      	adds	r3, #1
 8012922:	667b      	str	r3, [r7, #100]	; 0x64
 8012924:	2308      	movs	r3, #8
 8012926:	663b      	str	r3, [r7, #96]	; 0x60
 8012928:	e026      	b.n	8012978 <_fx_directory_entry_write+0xb00>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012930:	4413      	add	r3, r2
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d023      	beq.n	8012980 <_fx_directory_entry_write+0xb08>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801293e:	4413      	add	r3, r2
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8012946:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801294a:	2b60      	cmp	r3, #96	; 0x60
 801294c:	d908      	bls.n	8012960 <_fx_directory_entry_write+0xae8>
 801294e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012952:	2b7a      	cmp	r3, #122	; 0x7a
 8012954:	d804      	bhi.n	8012960 <_fx_directory_entry_write+0xae8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8012956:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801295a:	3b20      	subs	r3, #32
 801295c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8012960:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012964:	4413      	add	r3, r2
 8012966:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801296a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 801296c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801296e:	3301      	adds	r3, #1
 8012970:	667b      	str	r3, [r7, #100]	; 0x64
 8012972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012974:	3301      	adds	r3, #1
 8012976:	663b      	str	r3, [r7, #96]	; 0x60
 8012978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801297a:	2b0a      	cmp	r3, #10
 801297c:	d9d5      	bls.n	801292a <_fx_directory_entry_write+0xab2>
 801297e:	e000      	b.n	8012982 <_fx_directory_entry_write+0xb0a>
                    break;
 8012980:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8012982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012984:	330b      	adds	r3, #11
 8012986:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8012988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	677a      	str	r2, [r7, #116]	; 0x74
 801298e:	693a      	ldr	r2, [r7, #16]
 8012990:	7f12      	ldrb	r2, [r2, #28]
 8012992:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 8012994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012996:	1c5a      	adds	r2, r3, #1
 8012998:	677a      	str	r2, [r7, #116]	; 0x74
 801299a:	693a      	ldr	r2, [r7, #16]
 801299c:	7f52      	ldrb	r2, [r2, #29]
 801299e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 80129a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129a2:	1c5a      	adds	r2, r3, #1
 80129a4:	677a      	str	r2, [r7, #116]	; 0x74
 80129a6:	693a      	ldr	r2, [r7, #16]
 80129a8:	7f92      	ldrb	r2, [r2, #30]
 80129aa:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	6a1b      	ldr	r3, [r3, #32]
 80129b0:	4619      	mov	r1, r3
 80129b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80129b4:	f006 fe17 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80129b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129ba:	3302      	adds	r3, #2
 80129bc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c2:	4619      	mov	r1, r3
 80129c4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80129c6:	f006 fe0e 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80129ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129cc:	3302      	adds	r3, #2
 80129ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129d4:	4619      	mov	r1, r3
 80129d6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80129d8:	f006 fe05 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80129dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129de:	3302      	adds	r3, #2
 80129e0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d008      	beq.n	80129fe <_fx_directory_entry_write+0xb86>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129f0:	0c1b      	lsrs	r3, r3, #16
 80129f2:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 80129f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80129f6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80129f8:	f006 fdf5 	bl	80195e6 <_fx_utility_16_unsigned_write>
 80129fc:	e003      	b.n	8012a06 <_fx_directory_entry_write+0xb8e>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 80129fe:	2100      	movs	r1, #0
 8012a00:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012a02:	f006 fdf0 	bl	80195e6 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8012a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a08:	3302      	adds	r3, #2
 8012a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a10:	4619      	mov	r1, r3
 8012a12:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012a14:	f006 fde7 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8012a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a1a:	3302      	adds	r3, #2
 8012a1c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a22:	4619      	mov	r1, r3
 8012a24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012a26:	f006 fdde 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8012a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a2c:	3302      	adds	r3, #2
 8012a2e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a34:	4619      	mov	r1, r3
 8012a36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012a38:	f006 fdd5 	bl	80195e6 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8012a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a3e:	3302      	adds	r3, #2
 8012a40:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012a48:	4613      	mov	r3, r2
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012a4e:	f006 fdfc 	bl	801964a <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8012a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a54:	2200      	movs	r2, #0
 8012a56:	461c      	mov	r4, r3
 8012a58:	4615      	mov	r5, r2
 8012a5a:	2303      	movs	r3, #3
 8012a5c:	9302      	str	r3, [sp, #8]
 8012a5e:	2301      	movs	r3, #1
 8012a60:	9301      	str	r3, [sp, #4]
 8012a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	4622      	mov	r2, r4
 8012a68:	462b      	mov	r3, r5
 8012a6a:	6978      	ldr	r0, [r7, #20]
 8012a6c:	f009 fc78 	bl	801c360 <_fx_utility_logical_sector_write>
 8012a70:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8012a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d001      	beq.n	8012a7c <_fx_directory_entry_write+0xc04>
    {

        /* Return the error status.  */
        return(status);
 8012a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7a:	e048      	b.n	8012b0e <_fx_directory_entry_write+0xc96>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	f893 3810 	ldrb.w	r3, [r3, #2064]	; 0x810
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d042      	beq.n	8012b0c <_fx_directory_entry_write+0xc94>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8012a92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012a96:	4299      	cmp	r1, r3
 8012a98:	bf08      	it	eq
 8012a9a:	4290      	cmpeq	r0, r2
 8012a9c:	d136      	bne.n	8012b0c <_fx_directory_entry_write+0xc94>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d12f      	bne.n	8012b0c <_fx_directory_entry_write+0xc94>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	f8c3 26bc 	str.w	r2, [r3, #1724]	; 0x6bc
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012abc:	6979      	ldr	r1, [r7, #20]
 8012abe:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8012ac2:	e9c1 2300 	strd	r2, r3, [r1]
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	7f1a      	ldrb	r2, [r3, #28]
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	f8c3 26b8 	str.w	r2, [r3, #1720]	; 0x6b8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	7f5a      	ldrb	r2, [r3, #29]
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	7f9a      	ldrb	r2, [r3, #30]
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	6a1a      	ldr	r2, [r3, #32]
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3778      	adds	r7, #120	; 0x78
 8012b12:	46bd      	mov	sp, r7
 8012b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012b18 <_fx_directory_exFAT_entry_read>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_exFAT_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                                     ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr,
                                     UINT hash, UINT skip, UCHAR *unicode_name, UINT *unicode_length)
{
 8012b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012b1c:	b0c8      	sub	sp, #288	; 0x120
 8012b1e:	af04      	add	r7, sp, #16
 8012b20:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8012b24:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8012b28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

UINT    status = FX_SUCCESS;
 8012b30:	2300      	movs	r3, #0
 8012b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
UCHAR   i;
UCHAR   j;
ULONG   cluster = 0, next_cluster = 0;
 8012b36:	2300      	movs	r3, #0
 8012b38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
ULONG64 next_logical_sector;
UINT    relative_cluster;
UINT    relative_sector = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
ULONG64 logical_sector;
ULONG   byte_offset;
ULONG   bytes_per_cluster;
UCHAR  *read_ptr;
UCHAR   secondary_count;
UCHAR   name_length = 0;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
UCHAR   name_pos = 0;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
UCHAR   copy_size = 0;
 8012b54:	2300      	movs	r3, #0
 8012b56:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
USHORT  checksum = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
USHORT  file_checksum;
ULONG   date_time;
UCHAR   dont_use_fat;
ULONG   clusters_count = 0;
 8012b60:	2300      	movs	r3, #0
 8012b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  (*entry_ptr) * FX_DIR_ENTRY_SIZE;
 8012b66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	015b      	lsls	r3, r3, #5
 8012b6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8012b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8012b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012b7c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8012b80:	fb02 f303 	mul.w	r3, r2, r3
 8012b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    /* Now determine the relative cluster in the sub-directory file.  */
    relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8012b88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8012b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /* Calculate the byte offset within the cluster.  */
    byte_offset =  byte_offset % bytes_per_cluster;
 8012b98:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8012b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012ba0:	fbb1 f2f3 	udiv	r2, r1, r3
 8012ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012ba8:	fb02 f303 	mul.w	r3, r2, r3
 8012bac:	1acb      	subs	r3, r1, r3
 8012bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    /* Now figure out the relative sector within the cluster.  */
    relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8012bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012bb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Read the directory sector into the internal memory buffer.  */

    /* Determine if there is a sub-directory.  */
    if (source_dir)
 8012bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d02c      	beq.n	8012c26 <_fx_directory_exFAT_entry_read+0x10e>
    {

        /* Yes, setup the starting cluster to that of the sub-directory.  */
        cluster =  source_dir -> fx_dir_entry_cluster;
 8012bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        /* Save the cluster count for the directory entry.  */
        clusters_count = (ULONG)((source_dir -> fx_dir_entry_file_size + bytes_per_cluster - 1) / bytes_per_cluster - 1);
 8012bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012bda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012bde:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8012be2:	2000      	movs	r0, #0
 8012be4:	4688      	mov	r8, r1
 8012be6:	4681      	mov	r9, r0
 8012be8:	eb12 0408 	adds.w	r4, r2, r8
 8012bec:	eb43 0509 	adc.w	r5, r3, r9
 8012bf0:	1e63      	subs	r3, r4, #1
 8012bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012bf6:	f145 33ff 	adc.w	r3, r5, #4294967295
 8012bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012c02:	2200      	movs	r2, #0
 8012c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012c08:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8012c0c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8012c10:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8012c14:	f7ee f88c 	bl	8000d30 <__aeabi_uldivmod>
 8012c18:	4602      	mov	r2, r0
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012c24:	e005      	b.n	8012c32 <_fx_directory_exFAT_entry_read+0x11a>
    }
    else
    {

        /* No, setup the starting cluster to the exFAT root directory cluster.  */
        cluster =  media_ptr -> fx_media_root_cluster_32;
 8012c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012c2a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* Loop to position to the appropriate cluster.  */
    for (i = 0;; i++)
 8012c32:	2300      	movs	r3, #0
 8012c34:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    {

        /* Check the value of the new cluster - it must be a valid cluster number
           or something is really wrong!  */
        if ((cluster < FX_FAT_ENTRY_START) || (cluster > FX_RESERVED_1_exFAT))
 8012c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d904      	bls.n	8012c4a <_fx_directory_exFAT_entry_read+0x132>
 8012c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012c44:	f113 0f08 	cmn.w	r3, #8
 8012c48:	d902      	bls.n	8012c50 <_fx_directory_exFAT_entry_read+0x138>
        {

            /* Send error message back to caller.  */
            return(FX_FILE_CORRUPT);
 8012c4a:	2308      	movs	r3, #8
 8012c4c:	f000 bcf7 	b.w	801363e <_fx_directory_exFAT_entry_read+0xb26>
        }

        /* Read the next cluster. First check if FAT is used.  */
        if ((source_dir) && (source_dir -> fx_dir_entry_dont_use_fat & 1))
 8012c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d018      	beq.n	8012c8a <_fx_directory_exFAT_entry_read+0x172>
 8012c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012c5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012c60:	f003 0301 	and.w	r3, r3, #1
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d010      	beq.n	8012c8a <_fx_directory_exFAT_entry_read+0x172>
        {

            /* FAT is not used. Check for file size range.  */
            if (i >= clusters_count)
 8012c68:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8012c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d804      	bhi.n	8012c7e <_fx_directory_exFAT_entry_read+0x166>
            {

                /* We are at the last cluster, set next cluster to LAST CLUSTER.  */
                next_cluster =  FX_LAST_CLUSTER_exFAT;
 8012c74:	f04f 33ff 	mov.w	r3, #4294967295
 8012c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (i >= clusters_count)
 8012c7c:	e018      	b.n	8012cb0 <_fx_directory_exFAT_entry_read+0x198>
            }
            else
            {

                /* The next cluster is just after the current cluster.  */
                next_cluster =  cluster + 1;
 8012c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012c82:	3301      	adds	r3, #1
 8012c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (i >= clusters_count)
 8012c88:	e012      	b.n	8012cb0 <_fx_directory_exFAT_entry_read+0x198>
        }
        else
        {

            /* FAT is used, call FAT read function to get the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8012c8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012c8e:	461a      	mov	r2, r3
 8012c90:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8012c94:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8012c98:	f006 fd45 	bl	8019726 <_fx_utility_FAT_entry_read>
 8012c9c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8012ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d003      	beq.n	8012cb0 <_fx_directory_exFAT_entry_read+0x198>
            {

                /* Return error code.  */
                return(status);
 8012ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012cac:	f000 bcc7 	b.w	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }
        }

        /* Are we positioned to the appropriate cluster?  */
        if (i < relative_cluster)
 8012cb0:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8012cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d909      	bls.n	8012cd0 <_fx_directory_exFAT_entry_read+0x1b8>
        {
            cluster = next_cluster;
 8012cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012cc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    for (i = 0;; i++)
 8012cc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8012cc8:	3301      	adds	r3, #1
 8012cca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        if ((cluster < FX_FAT_ENTRY_START) || (cluster > FX_RESERVED_1_exFAT))
 8012cce:	e7b3      	b.n	8012c38 <_fx_directory_exFAT_entry_read+0x120>
        }
        else
        {
            break;
 8012cd0:	bf00      	nop
        }
    }

    /* At this point, the directory data sector needs to be read.  */
    logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012cd6:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012ce0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
        (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 8012ce4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012ce8:	2200      	movs	r2, #0
 8012cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012cf2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	3b02      	subs	r3, #2
 8012cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012cfe:	4613      	mov	r3, r2
 8012d00:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8012d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012d0c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012d10:	2200      	movs	r2, #0
 8012d12:	67bb      	str	r3, [r7, #120]	; 0x78
 8012d14:	67fa      	str	r2, [r7, #124]	; 0x7c
        (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 8012d16:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012d20:	4642      	mov	r2, r8
 8012d22:	fb02 f203 	mul.w	r2, r2, r3
 8012d26:	464b      	mov	r3, r9
 8012d28:	4621      	mov	r1, r4
 8012d2a:	fb01 f303 	mul.w	r3, r1, r3
 8012d2e:	4413      	add	r3, r2
 8012d30:	4622      	mov	r2, r4
 8012d32:	4641      	mov	r1, r8
 8012d34:	fba2 ab01 	umull	sl, fp, r2, r1
 8012d38:	445b      	add	r3, fp
 8012d3a:	469b      	mov	fp, r3
    logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012d3c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8012d40:	460b      	mov	r3, r1
 8012d42:	eb13 030a 	adds.w	r3, r3, sl
 8012d46:	673b      	str	r3, [r7, #112]	; 0x70
 8012d48:	4613      	mov	r3, r2
 8012d4a:	eb43 030b 	adc.w	r3, r3, fp
 8012d4e:	677b      	str	r3, [r7, #116]	; 0x74
         ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8012d50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012d54:	2200      	movs	r2, #0
 8012d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8012d58:	66fa      	str	r2, [r7, #108]	; 0x6c
    logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012d5a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8012d5e:	4623      	mov	r3, r4
 8012d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012d64:	4602      	mov	r2, r0
 8012d66:	189b      	adds	r3, r3, r2
 8012d68:	623b      	str	r3, [r7, #32]
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	462a      	mov	r2, r5
 8012d6e:	eb42 0303 	adc.w	r3, r2, r3
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
 8012d74:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012d78:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
        relative_sector;

    /* Determine if next sector is in next cluster or in next sector.  */
    if ((bytes_per_cluster - byte_offset) >= (ULONG)media_ptr -> fx_media_bytes_per_sector)
 8012d7c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8012d80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d84:	1ad2      	subs	r2, r2, r3
 8012d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d30b      	bcc.n	8012da8 <_fx_directory_exFAT_entry_read+0x290>
    {

        /* Move to the next logical sector.   */
        next_logical_sector = logical_sector + 1;
 8012d90:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8012d94:	1c51      	adds	r1, r2, #1
 8012d96:	61b9      	str	r1, [r7, #24]
 8012d98:	f143 0300 	adc.w	r3, r3, #0
 8012d9c:	61fb      	str	r3, [r7, #28]
 8012d9e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8012da2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8012da6:	e057      	b.n	8012e58 <_fx_directory_exFAT_entry_read+0x340>
    }
    else
    {
        /* No, calculate the next logical sector.  */
        if ((next_cluster >= FX_FAT_ENTRY_START) && (next_cluster <= FX_RESERVED_1_exFAT))
 8012da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d94d      	bls.n	8012e4c <_fx_directory_exFAT_entry_read+0x334>
 8012db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012db4:	f113 0f08 	cmn.w	r3, #8
 8012db8:	d848      	bhi.n	8012e4c <_fx_directory_exFAT_entry_read+0x334>
        {
            next_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012dbe:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8012dc6:	667a      	str	r2, [r7, #100]	; 0x64
                (((ULONG64)next_cluster - FX_FAT_ENTRY_START) * ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8012dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012dcc:	2200      	movs	r2, #0
 8012dce:	65bb      	str	r3, [r7, #88]	; 0x58
 8012dd0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8012dd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	3b02      	subs	r3, #2
 8012dda:	653b      	str	r3, [r7, #80]	; 0x50
 8012ddc:	4613      	mov	r3, r2
 8012dde:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012de2:	657b      	str	r3, [r7, #84]	; 0x54
 8012de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012de8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012dec:	2200      	movs	r2, #0
 8012dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8012df0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012df2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8012df6:	462b      	mov	r3, r5
 8012df8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8012dfc:	4642      	mov	r2, r8
 8012dfe:	fb02 f203 	mul.w	r2, r2, r3
 8012e02:	464b      	mov	r3, r9
 8012e04:	4621      	mov	r1, r4
 8012e06:	fb01 f303 	mul.w	r3, r1, r3
 8012e0a:	4413      	add	r3, r2
 8012e0c:	4622      	mov	r2, r4
 8012e0e:	4641      	mov	r1, r8
 8012e10:	fba2 1201 	umull	r1, r2, r2, r1
 8012e14:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8012e18:	460a      	mov	r2, r1
 8012e1a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8012e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012e22:	4413      	add	r3, r2
 8012e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            next_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012e28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8012e2c:	4623      	mov	r3, r4
 8012e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012e32:	4602      	mov	r2, r0
 8012e34:	189b      	adds	r3, r3, r2
 8012e36:	613b      	str	r3, [r7, #16]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	462a      	mov	r2, r5
 8012e3c:	eb42 0303 	adc.w	r3, r2, r3
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012e46:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8012e4a:	e005      	b.n	8012e58 <_fx_directory_exFAT_entry_read+0x340>
        }
        else
        {
            next_logical_sector = 0; /* No such sector possible.  */
 8012e4c:	f04f 0200 	mov.w	r2, #0
 8012e50:	f04f 0300 	mov.w	r3, #0
 8012e54:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
        }
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, ((ULONG64) logical_sector),
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8012e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012e5c:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, ((ULONG64) logical_sector),
 8012e5e:	2303      	movs	r3, #3
 8012e60:	9302      	str	r3, [sp, #8]
 8012e62:	2301      	movs	r3, #1
 8012e64:	9301      	str	r3, [sp, #4]
 8012e66:	9200      	str	r2, [sp, #0]
 8012e68:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8012e6c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8012e70:	f008 ffe2 	bl	801be38 <_fx_utility_logical_sector_read>
 8012e74:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8012e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d002      	beq.n	8012e86 <_fx_directory_exFAT_entry_read+0x36e>
    {

        /* Return error code.  */
        return(status);
 8012e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e84:	e3db      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    }

    /* Calculate the byte offset within this sector.  */
    byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8012e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012e8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8012e8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8012e90:	fbb2 f3f1 	udiv	r3, r2, r1
 8012e94:	fb01 f303 	mul.w	r3, r1, r3
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec


    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8012e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012ea2:	689a      	ldr	r2, [r3, #8]
 8012ea4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012ea8:	4413      	add	r3, r2
 8012eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8012eae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8012eb2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8012eb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    destination_ptr -> fx_dir_entry_next_log_sector =  next_logical_sector;
 8012eba:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8012ebe:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8012ec2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8012ec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012ece:	6493      	str	r3, [r2, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8012ed0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	6193      	str	r3, [r2, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8012ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012edc:	2300      	movs	r3, #0
 8012ede:	7113      	strb	r3, [r2, #4]

    /* Check if the directory entry type has InUse bit set, or if it is an end marker.  */
    if ((*read_ptr & FX_EXFAT_ENTRY_TYPE_IN_USE_MASK) || (*read_ptr == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER))
 8012ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	b25b      	sxtb	r3, r3
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	db04      	blt.n	8012ef6 <_fx_directory_exFAT_entry_read+0x3de>
 8012eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d107      	bne.n	8012f06 <_fx_directory_exFAT_entry_read+0x3ee>
    {

        /* Set the directory entry type.  */
        destination_ptr -> fx_dir_entry_type = *read_ptr;
 8012ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012f00:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 8012f04:	e004      	b.n	8012f10 <_fx_directory_exFAT_entry_read+0x3f8>
    }
    else
    {

        /* This is a free entry.  */
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FREE;
 8012f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012f0a:	23ff      	movs	r3, #255	; 0xff
 8012f0c:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    }

    /* Check if the entry is a file directory entry.  */
    if (destination_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
 8012f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f14:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012f18:	2b85      	cmp	r3, #133	; 0x85
 8012f1a:	d02b      	beq.n	8012f74 <_fx_directory_exFAT_entry_read+0x45c>
    {

        /* The entry is not directory entry, check if we know the type.  */
        if ((destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_ALLOCATION_BITMAP) ||
 8012f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f20:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012f24:	2b81      	cmp	r3, #129	; 0x81
 8012f26:	d017      	beq.n	8012f58 <_fx_directory_exFAT_entry_read+0x440>
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_UP_CASE_TABLE)     ||
 8012f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f2c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
        if ((destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_ALLOCATION_BITMAP) ||
 8012f30:	2b82      	cmp	r3, #130	; 0x82
 8012f32:	d011      	beq.n	8012f58 <_fx_directory_exFAT_entry_read+0x440>
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_VOLUME_LABEL)      ||
 8012f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f38:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_UP_CASE_TABLE)     ||
 8012f3c:	2b83      	cmp	r3, #131	; 0x83
 8012f3e:	d00b      	beq.n	8012f58 <_fx_directory_exFAT_entry_read+0x440>
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_FREE)              ||
 8012f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f44:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_VOLUME_LABEL)      ||
 8012f48:	2bff      	cmp	r3, #255	; 0xff
 8012f4a:	d005      	beq.n	8012f58 <_fx_directory_exFAT_entry_read+0x440>
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER))
 8012f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
            (destination_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_FREE)              ||
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <_fx_directory_exFAT_entry_read+0x444>
        {

            /* Known critical primary or free, just skip it. */
            return(FX_SUCCESS);
 8012f58:	2300      	movs	r3, #0
 8012f5a:	e370      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
        }

        /* Check if the entry is unknown critical primary directory entry.  */
        if ((destination_ptr -> fx_dir_entry_type & (FX_EXFAT_ENTRY_TYPE_IMPORTANCE_MASK | FX_EXFAT_ENTRY_TYPE_CATEGORY_MASK)) == 0)
 8012f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f60:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <_fx_directory_exFAT_entry_read+0x458>
        {

            /* Yes, it is an unknown critical primary entry. Return error.  */
            return(FX_MEDIA_INVALID);
 8012f6c:	2302      	movs	r3, #2
 8012f6e:	e366      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
        }

        /* Just ignore.  */
        return(FX_SUCCESS);
 8012f70:	2300      	movs	r3, #0
 8012f72:	e364      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    }

    /* Calculate checksum for file entry.  */
    for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8012f74:	2300      	movs	r3, #0
 8012f76:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8012f7a:	e024      	b.n	8012fc6 <_fx_directory_exFAT_entry_read+0x4ae>
    {

        /* Skip the checksum field.  */
        if ((j == 2) || (j == 3))
 8012f7c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d01a      	beq.n	8012fba <_fx_directory_exFAT_entry_read+0x4a2>
 8012f84:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012f88:	2b03      	cmp	r3, #3
 8012f8a:	d016      	beq.n	8012fba <_fx_directory_exFAT_entry_read+0x4a2>
            continue;
        }

        /* Calculate the checksum using the algorithm described in the specification.  */
        /* Right rotate the checksum by one bit position and add the data.  */
        checksum = (USHORT)(((checksum >> 1) | (checksum << 15)) + read_ptr[j]);
 8012f8c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8012f90:	085b      	lsrs	r3, r3, #1
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	b21a      	sxth	r2, r3
 8012f96:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8012f9a:	03db      	lsls	r3, r3, #15
 8012f9c:	b21b      	sxth	r3, r3
 8012f9e:	4313      	orrs	r3, r2
 8012fa0:	b21b      	sxth	r3, r3
 8012fa2:	b299      	uxth	r1, r3
 8012fa4:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8012fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012fac:	4413      	add	r3, r2
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	440b      	add	r3, r1
 8012fb4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8012fb8:	e000      	b.n	8012fbc <_fx_directory_exFAT_entry_read+0x4a4>
            continue;
 8012fba:	bf00      	nop
    for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8012fbc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8012fc6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8012fca:	2b1f      	cmp	r3, #31
 8012fcc:	d9d6      	bls.n	8012f7c <_fx_directory_exFAT_entry_read+0x464>
    }

    /* Read secondary count field.  */
    read_ptr++;
 8012fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    secondary_count = *read_ptr;
 8012fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    /* Validate the secondary count field.  */
    if (secondary_count < 2)
 8012fe2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	d801      	bhi.n	8012fee <_fx_directory_exFAT_entry_read+0x4d6>
    {

        /* Something wrong, file entry should have at least 2 entries: stream and filename.  */
        return(FX_FILE_CORRUPT);
 8012fea:	2308      	movs	r3, #8
 8012fec:	e327      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    }

    /* Save secondary count.  */
    destination_ptr -> fx_dir_entry_secondary_count =  secondary_count;
 8012fee:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8012ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* exFAT has no short/long name concept, set long name present for compatibility.  */
    destination_ptr -> fx_dir_entry_long_name_present =  1;
 8012ffa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012ffe:	2301      	movs	r3, #1
 8013000:	6153      	str	r3, [r2, #20]

    /* Advance the pointer to the checksum field.  */
    read_ptr++;
 8013002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013006:	3301      	adds	r3, #1
 8013008:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read checksum field.  */
    file_checksum = (USHORT)_fx_utility_16_unsigned_read(read_ptr);
 801300c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8013010:	f006 fad6 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8013014:	4603      	mov	r3, r0
 8013016:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    read_ptr += 2;
 801301a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801301e:	3302      	adds	r3, #2
 8013020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read FileAttributes field.  */
    destination_ptr -> fx_dir_entry_attributes = (UCHAR)_fx_utility_16_unsigned_read(read_ptr); /* The same order as FAT32 but more unused bits.  */
 8013024:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8013028:	f006 faca 	bl	80195c0 <_fx_utility_16_unsigned_read>
 801302c:	4603      	mov	r3, r0
 801302e:	b2db      	uxtb	r3, r3
 8013030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013034:	7713      	strb	r3, [r2, #28]

    /* Skip Reserved1.  */
    read_ptr += 4;
 8013036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801303a:	3304      	adds	r3, #4
 801303c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read CreatedTimestamp field.  */
    date_time = _fx_utility_32_unsigned_read(read_ptr);
 8013040:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8013044:	f006 fae4 	bl	8019610 <_fx_utility_32_unsigned_read>
 8013048:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    destination_ptr -> fx_dir_entry_created_time = date_time & 0xffff;
 801304c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013050:	b29a      	uxth	r2, r3
 8013052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013056:	621a      	str	r2, [r3, #32]
    destination_ptr -> fx_dir_entry_created_date = date_time >> 16;
 8013058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801305c:	0c1a      	lsrs	r2, r3, #16
 801305e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013062:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr += 4;
 8013064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013068:	3304      	adds	r3, #4
 801306a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read LastModifiedTimestamp.  */
    date_time = _fx_utility_32_unsigned_read(read_ptr);
 801306e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8013072:	f006 facd 	bl	8019610 <_fx_utility_32_unsigned_read>
 8013076:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    destination_ptr -> fx_dir_entry_time = date_time & 0xffff;
 801307a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801307e:	b29a      	uxth	r2, r3
 8013080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013084:	62da      	str	r2, [r3, #44]	; 0x2c
    destination_ptr -> fx_dir_entry_date = date_time >> 16;
 8013086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801308a:	0c1a      	lsrs	r2, r3, #16
 801308c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013090:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr += 4;
 8013092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013096:	3304      	adds	r3, #4
 8013098:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read LastAccessedTimestamp.  */
    date_time = _fx_utility_32_unsigned_read(read_ptr);
 801309c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80130a0:	f006 fab6 	bl	8019610 <_fx_utility_32_unsigned_read>
 80130a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    destination_ptr -> fx_dir_entry_last_accessed_date = date_time >> 16;
 80130a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80130ac:	0c1a      	lsrs	r2, r3, #16
 80130ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80130b2:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr += 4;
 80130b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130b8:	3304      	adds	r3, #4
 80130ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Read Create10msIncrement.  */
    destination_ptr -> fx_dir_entry_created_time_ms = *read_ptr;
 80130be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80130c8:	7793      	strb	r3, [r2, #30]
    read_ptr++;
 80130ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130ce:	3301      	adds	r3, #1
 80130d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* LastModified10msIncrement field is currently ignored.  */
    read_ptr++;
 80130d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130d8:	3301      	adds	r3, #1
 80130da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* CreateUtcOffset field is currently ignored.  */
    read_ptr++;
 80130de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130e2:	3301      	adds	r3, #1
 80130e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* LastModifiedUtcOffset field is currently ignored.  */
    read_ptr++;
 80130e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80130ec:	3301      	adds	r3, #1
 80130ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* LastAccessedUtcOffset field is currently ignored.  */

    /* Process all the secondary directory entries.  */
    for (i = 0; i < secondary_count; ++i)
 80130f2:	2300      	movs	r3, #0
 80130f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80130f8:	e264      	b.n	80135c4 <_fx_directory_exFAT_entry_read+0xaac>
    {

        /* Determine if a new sector needs to be read.  */
        if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 80130fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80130fe:	f103 0220 	add.w	r2, r3, #32
 8013102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013108:	429a      	cmp	r2, r3
 801310a:	f0c0 80c2 	bcc.w	8013292 <_fx_directory_exFAT_entry_read+0x77a>
        {

            /* Determine the next sector of the directory entry.  */
            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 801310e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013112:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013116:	1e5a      	subs	r2, r3, #1
 8013118:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801311c:	4293      	cmp	r3, r2
 801311e:	d210      	bcs.n	8013142 <_fx_directory_exFAT_entry_read+0x62a>
            {

                /* More sectors in this cluster.  */

                /* Simply increment the logical sector.  */
                logical_sector++;
 8013120:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013124:	1c51      	adds	r1, r2, #1
 8013126:	60b9      	str	r1, [r7, #8]
 8013128:	f143 0300 	adc.w	r3, r3, #0
 801312c:	60fb      	str	r3, [r7, #12]
 801312e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013132:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

                /* Increment the relative sector.  */
                relative_sector++;
 8013136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801313a:	3301      	adds	r3, #1
 801313c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013140:	e08c      	b.n	801325c <_fx_directory_exFAT_entry_read+0x744>
            {

                /* We need to move to the next cluster.  */

                /* Read the next cluster. First check if FAT is used.  */
                if ((source_dir) && (source_dir -> fx_dir_entry_dont_use_fat & 1))
 8013142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d018      	beq.n	801317c <_fx_directory_exFAT_entry_read+0x664>
 801314a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801314e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013152:	f003 0301 	and.w	r3, r3, #1
 8013156:	2b00      	cmp	r3, #0
 8013158:	d010      	beq.n	801317c <_fx_directory_exFAT_entry_read+0x664>
                {

                    /* FAT is not used. Check for file size range.  */
                    if (relative_cluster >= clusters_count)
 801315a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013162:	429a      	cmp	r2, r3
 8013164:	d304      	bcc.n	8013170 <_fx_directory_exFAT_entry_read+0x658>
                    {

                        /* We are at the last cluster, set next cluster to LAST CLUSTER.  */
                        next_cluster =  FX_LAST_CLUSTER_exFAT;
 8013166:	f04f 33ff 	mov.w	r3, #4294967295
 801316a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    if (relative_cluster >= clusters_count)
 801316e:	e017      	b.n	80131a0 <_fx_directory_exFAT_entry_read+0x688>
                    }
                    else
                    {

                        /* The next cluster is just after the current cluster.  */
                        next_cluster =  cluster + 1;
 8013170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013174:	3301      	adds	r3, #1
 8013176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    if (relative_cluster >= clusters_count)
 801317a:	e011      	b.n	80131a0 <_fx_directory_exFAT_entry_read+0x688>
                }
                else
                {

                    /* FAT is used, call FAT read function to get the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 801317c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8013180:	461a      	mov	r2, r3
 8013182:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8013186:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801318a:	f006 facc 	bl	8019726 <_fx_utility_FAT_entry_read>
 801318e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

                    /* Check for I/O error.  */
                    if (status != FX_SUCCESS)
 8013192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013196:	2b00      	cmp	r3, #0
 8013198:	d002      	beq.n	80131a0 <_fx_directory_exFAT_entry_read+0x688>
                    {

                        /* Return error code.  */
                        return(status);
 801319a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801319e:	e24e      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
                    }
                }

                /* Copy next cluster to the current cluster.  */
                cluster =  next_cluster;
 80131a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80131a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

                /* Check the value of the new cluster - it must be a valid cluster number
                   or something is really wrong!  */
                if ((cluster < FX_FAT_ENTRY_START) || (cluster > FX_RESERVED_1_exFAT))
 80131a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d904      	bls.n	80131ba <_fx_directory_exFAT_entry_read+0x6a2>
 80131b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80131b4:	f113 0f08 	cmn.w	r3, #8
 80131b8:	d901      	bls.n	80131be <_fx_directory_exFAT_entry_read+0x6a6>
                {

                    /* Send error message back to caller.  */
                    return(FX_FILE_CORRUPT);
 80131ba:	2308      	movs	r3, #8
 80131bc:	e23f      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
                }

                /* Now increment the relative cluster.  */
                relative_cluster++;
 80131be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131c2:	3301      	adds	r3, #1
 80131c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

                /* Setup the relative sector (this is zero for subsequent cluster.  */
                relative_sector =  0;
 80131c8:	2300      	movs	r3, #0
 80131ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                /* Calculate the next logical sector.  */
                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80131ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80131d2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80131d6:	2200      	movs	r2, #0
 80131d8:	643b      	str	r3, [r7, #64]	; 0x40
 80131da:	647a      	str	r2, [r7, #68]	; 0x44
                    (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 80131dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80131e0:	2200      	movs	r2, #0
 80131e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80131e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80131e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80131ea:	460b      	mov	r3, r1
 80131ec:	3b02      	subs	r3, #2
 80131ee:	633b      	str	r3, [r7, #48]	; 0x30
 80131f0:	4613      	mov	r3, r2
 80131f2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80131f6:	637b      	str	r3, [r7, #52]	; 0x34
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80131f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80131fc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013200:	2200      	movs	r2, #0
 8013202:	62bb      	str	r3, [r7, #40]	; 0x28
 8013204:	62fa      	str	r2, [r7, #44]	; 0x2c
                    (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 8013206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801320a:	462b      	mov	r3, r5
 801320c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8013210:	4642      	mov	r2, r8
 8013212:	fb02 f203 	mul.w	r2, r2, r3
 8013216:	464b      	mov	r3, r9
 8013218:	4621      	mov	r1, r4
 801321a:	fb01 f303 	mul.w	r3, r1, r3
 801321e:	4413      	add	r3, r2
 8013220:	4622      	mov	r2, r4
 8013222:	4641      	mov	r1, r8
 8013224:	fba2 1201 	umull	r1, r2, r2, r1
 8013228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801322c:	460a      	mov	r2, r1
 801322e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013232:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013236:	4413      	add	r3, r2
 8013238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801323c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013240:	4623      	mov	r3, r4
 8013242:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8013246:	4602      	mov	r2, r0
 8013248:	189b      	adds	r3, r3, r2
 801324a:	603b      	str	r3, [r7, #0]
 801324c:	462b      	mov	r3, r5
 801324e:	460a      	mov	r2, r1
 8013250:	4153      	adcs	r3, r2
 8013252:	607b      	str	r3, [r7, #4]
 8013254:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013258:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
            }

            /* Read the new sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, ((ULONG64) logical_sector),
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801325c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013260:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, ((ULONG64) logical_sector),
 8013262:	2303      	movs	r3, #3
 8013264:	9302      	str	r3, [sp, #8]
 8013266:	2301      	movs	r3, #1
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	9200      	str	r2, [sp, #0]
 801326c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013270:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8013274:	f008 fde0 	bl	801be38 <_fx_utility_logical_sector_read>
 8013278:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

            /* Check I/O status.  */
            if (status != FX_SUCCESS)
 801327c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <_fx_directory_exFAT_entry_read+0x772>
            {
                return(status);
 8013284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013288:	e1d9      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* Set the byte offset to 0 for new sector.  */
            byte_offset = 0;
 801328a:	2300      	movs	r3, #0
 801328c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013290:	e004      	b.n	801329c <_fx_directory_exFAT_entry_read+0x784>
        }
        else
        {

            /* Calculate the new byte offset.  */
            byte_offset += FX_DIR_ENTRY_SIZE;
 8013292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013296:	3320      	adds	r3, #32
 8013298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        }

        /* Read sub entry.  */
        read_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801329c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80132a0:	689a      	ldr	r2, [r3, #8]
 80132a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80132a6:	4413      	add	r3, r2
 80132a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

        /* Calculate checksum for sub entry.  */
        for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 80132ac:	2300      	movs	r3, #0
 80132ae:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80132b2:	e01a      	b.n	80132ea <_fx_directory_exFAT_entry_read+0x7d2>
        {

            /* Right rotate the checksum by one bit position and add the data.  */
            checksum = (USHORT)(((checksum >> 1) | (checksum << 15)) + read_ptr[j]);
 80132b4:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80132b8:	085b      	lsrs	r3, r3, #1
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	b21a      	sxth	r2, r3
 80132be:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80132c2:	03db      	lsls	r3, r3, #15
 80132c4:	b21b      	sxth	r3, r3
 80132c6:	4313      	orrs	r3, r2
 80132c8:	b21b      	sxth	r3, r3
 80132ca:	b299      	uxth	r1, r3
 80132cc:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80132d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80132d4:	4413      	add	r3, r2
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	b29b      	uxth	r3, r3
 80132da:	440b      	add	r3, r1
 80132dc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 80132e0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80132e4:	3301      	adds	r3, #1
 80132e6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80132ea:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80132ee:	2b1f      	cmp	r3, #31
 80132f0:	d9e0      	bls.n	80132b4 <_fx_directory_exFAT_entry_read+0x79c>
        }

        /* Add the entry number to the next entry.  */
        (*entry_ptr)++;
 80132f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	1c5a      	adds	r2, r3, #1
 80132fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80132fe:	601a      	str	r2, [r3, #0]

        /* Check if we are processing the first secondary directory entry.  */
        if (i == 0)
 8013300:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8013304:	2b00      	cmp	r3, #0
 8013306:	f040 80df 	bne.w	80134c8 <_fx_directory_exFAT_entry_read+0x9b0>
        {

            /* Make sure the directory entry type is stream extension.  */
            if (*read_ptr != FX_EXFAT_DIR_ENTRY_TYPE_STREAM_EXTENSION)
 801330a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	2bc0      	cmp	r3, #192	; 0xc0
 8013312:	d001      	beq.n	8013318 <_fx_directory_exFAT_entry_read+0x800>
            {

                /* Something wrong, stream entry should be next to file entry.  */
                return(FX_FILE_CORRUPT);
 8013314:	2308      	movs	r3, #8
 8013316:	e192      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* Read stream entry.  */

            /* Advance the pointer to general secondary flags field.  */
            read_ptr++;
 8013318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801331c:	3301      	adds	r3, #1
 801331e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

            /* Read NoFatChain field.  */
            dont_use_fat = ((*read_ptr) >> 1) & 1; /* 0 bit - current */
 8013322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	085b      	lsrs	r3, r3, #1
 801332a:	b2db      	uxtb	r3, r3
 801332c:	f003 0301 	and.w	r3, r3, #1
 8013330:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

            /* Check if we have a parent directory.  */
            if (source_dir)
 8013334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d00e      	beq.n	801335a <_fx_directory_exFAT_entry_read+0x842>
            {

                /* Save the dont_use_fat flag for parent directory.  */
                dont_use_fat = (UCHAR)(dont_use_fat | ((source_dir -> fx_dir_entry_dont_use_fat & 1) << 1)); /* 1st bit parent */
 801333c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013340:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	b25b      	sxtb	r3, r3
 8013348:	f003 0302 	and.w	r3, r3, #2
 801334c:	b25a      	sxtb	r2, r3
 801334e:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 8013352:	4313      	orrs	r3, r2
 8013354:	b25b      	sxtb	r3, r3
 8013356:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
            }

            /* Put the dont_use_fat flag to the destination.  */
            destination_ptr -> fx_dir_entry_dont_use_fat =  (CHAR)dont_use_fat;
 801335a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801335e:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8013362:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70

            /* Skip the reserved1 field.  */
            read_ptr += 2;
 8013366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801336a:	3302      	adds	r3, #2
 801336c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

            /* Read the name length field.  */
            name_length = *read_ptr;
 8013370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

            /* Check if name_length is invalid.  */
            if (name_length == 0)
 801337a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801337e:	2b00      	cmp	r3, #0
 8013380:	d101      	bne.n	8013386 <_fx_directory_exFAT_entry_read+0x86e>
            {

                /* Name length should be at least 1. Return error.  */
                return(FX_FILE_CORRUPT);
 8013382:	2308      	movs	r3, #8
 8013384:	e15b      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* Advance the pointer to the name hash field.  */
            read_ptr++;
 8013386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801338a:	3301      	adds	r3, #1
 801338c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

            /* Hash search */
            if (skip || (hash && (hash != _fx_utility_16_unsigned_read(read_ptr))))
 8013390:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013394:	2b00      	cmp	r3, #0
 8013396:	d10c      	bne.n	80133b2 <_fx_directory_exFAT_entry_read+0x89a>
 8013398:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801339c:	2b00      	cmp	r3, #0
 801339e:	d01c      	beq.n	80133da <_fx_directory_exFAT_entry_read+0x8c2>
 80133a0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80133a4:	f006 f90c 	bl	80195c0 <_fx_utility_16_unsigned_read>
 80133a8:	4602      	mov	r2, r0
 80133aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80133ae:	4293      	cmp	r3, r2
 80133b0:	d013      	beq.n	80133da <_fx_directory_exFAT_entry_read+0x8c2>
            {

                /* Wrong hash, skip filename.  */
                destination_ptr -> fx_dir_entry_type =  FX_EXFAT_DIR_ENTRY_TYPE_STREAM_EXTENSION;
 80133b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80133b6:	22c0      	movs	r2, #192	; 0xc0
 80133b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                name_length =  0;
 80133bc:	2300      	movs	r3, #0
 80133be:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
                (*entry_ptr) +=  (ULONG)(secondary_count - 1);
 80133c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80133cc:	4413      	add	r3, r2
 80133ce:	1e5a      	subs	r2, r3, #1
 80133d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80133d4:	601a      	str	r2, [r3, #0]

                /* Return success.  */
                return(FX_SUCCESS);
 80133d6:	2300      	movs	r3, #0
 80133d8:	e131      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* Skip name hash and reserved2.  */
            read_ptr += 4;
 80133da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80133de:	3304      	adds	r3, #4
 80133e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

            /* Read Valid Data Len. */
            destination_ptr -> fx_dir_entry_file_size = _fx_utility_64_unsigned_read(read_ptr);
 80133e4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80133e8:	f006 f950 	bl	801968c <_fx_utility_64_unsigned_read>
 80133ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80133f0:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

            /* Skip ValidDataLen and reserved3.  */
            read_ptr += 12;
 80133f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80133f8:	330c      	adds	r3, #12
 80133fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            destination_ptr -> fx_dir_entry_cluster = _fx_utility_32_unsigned_read(read_ptr);
 80133fe:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8013402:	f006 f905 	bl	8019610 <_fx_utility_32_unsigned_read>
 8013406:	4602      	mov	r2, r0
 8013408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801340c:	635a      	str	r2, [r3, #52]	; 0x34
            read_ptr += 4;
 801340e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013412:	3304      	adds	r3, #4
 8013414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

            /* Read Data Len.  */
            destination_ptr -> fx_dir_entry_available_file_size = _fx_utility_64_unsigned_read(read_ptr);
 8013418:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801341c:	f006 f936 	bl	801968c <_fx_utility_64_unsigned_read>
 8013420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013424:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78

            /* Checks for corruption */
            if (((destination_ptr -> fx_dir_entry_available_file_size == 0)   &&
 8013428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801342c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8013430:	4313      	orrs	r3, r2
 8013432:	d104      	bne.n	801343e <_fx_directory_exFAT_entry_read+0x926>
                 (destination_ptr -> fx_dir_entry_cluster       != 0))  ||
 8013434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            if (((destination_ptr -> fx_dir_entry_available_file_size == 0)   &&
 801343a:	2b00      	cmp	r3, #0
 801343c:	d10a      	bne.n	8013454 <_fx_directory_exFAT_entry_read+0x93c>
                ((destination_ptr -> fx_dir_entry_available_file_size != 0)   &&
 801343e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013442:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
                 (destination_ptr -> fx_dir_entry_cluster       != 0))  ||
 8013446:	4313      	orrs	r3, r2
 8013448:	d006      	beq.n	8013458 <_fx_directory_exFAT_entry_read+0x940>
                 (destination_ptr -> fx_dir_entry_cluster       == 0)))
 801344a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                ((destination_ptr -> fx_dir_entry_available_file_size != 0)   &&
 8013450:	2b00      	cmp	r3, #0
 8013452:	d101      	bne.n	8013458 <_fx_directory_exFAT_entry_read+0x940>
            {

                /* Return file corrupt error.  */
                return(FX_FILE_CORRUPT);
 8013454:	2308      	movs	r3, #8
 8013456:	e0f2      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* File System Specification Ver 3.00 */
            if (destination_ptr -> fx_dir_entry_cluster == 0)
 8013458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10a      	bne.n	8013478 <_fx_directory_exFAT_entry_read+0x960>
            {

                /* Don't use FAT by default.  */
                destination_ptr -> fx_dir_entry_dont_use_fat |=  1;
 8013462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013466:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801346a:	f043 0301 	orr.w	r3, r3, #1
 801346e:	b2db      	uxtb	r3, r3
 8013470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013474:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
            }

            /* Check for directory restrictions.  */
            if ((destination_ptr -> fx_dir_entry_attributes & FX_DIRECTORY) &&
 8013478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801347c:	7f1b      	ldrb	r3, [r3, #28]
 801347e:	f003 0310 	and.w	r3, r3, #16
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00d      	beq.n	80134a2 <_fx_directory_exFAT_entry_read+0x98a>
                (destination_ptr -> fx_dir_entry_available_file_size != destination_ptr -> fx_dir_entry_file_size))
 8013486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801348a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 801348e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013492:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
            if ((destination_ptr -> fx_dir_entry_attributes & FX_DIRECTORY) &&
 8013496:	4299      	cmp	r1, r3
 8013498:	bf08      	it	eq
 801349a:	4290      	cmpeq	r0, r2
 801349c:	d001      	beq.n	80134a2 <_fx_directory_exFAT_entry_read+0x98a>
            {

                /* Return file corrupt error.  */
                return(FX_FILE_CORRUPT);
 801349e:	2308      	movs	r3, #8
 80134a0:	e0cd      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
            }

            /* Check if the directory size exceed file system limits.  */
            if ((destination_ptr -> fx_dir_entry_attributes & FX_DIRECTORY) &&
 80134a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134a6:	7f1b      	ldrb	r3, [r3, #28]
 80134a8:	f003 0310 	and.w	r3, r3, #16
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 8084 	beq.w	80135ba <_fx_directory_exFAT_entry_read+0xaa2>
                (destination_ptr -> fx_dir_entry_available_file_size > FX_EXFAT_MAX_DIRECTORY_SIZE))
 80134b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
            if ((destination_ptr -> fx_dir_entry_attributes & FX_DIRECTORY) &&
 80134ba:	4964      	ldr	r1, [pc, #400]	; (801364c <_fx_directory_exFAT_entry_read+0xb34>)
 80134bc:	428a      	cmp	r2, r1
 80134be:	f173 0300 	sbcs.w	r3, r3, #0
 80134c2:	d37a      	bcc.n	80135ba <_fx_directory_exFAT_entry_read+0xaa2>
            {

                /* Return the no more space error.  */
                return(FX_NO_MORE_SPACE);
 80134c4:	230a      	movs	r3, #10
 80134c6:	e0ba      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
        }
        else
        {

            /* Check if the entry type is file name directory entry.  */
            if (*read_ptr == FX_EXFAT_DIR_ENTRY_TYPE_FILE_NAME)
 80134c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	2bc1      	cmp	r3, #193	; 0xc1
 80134d0:	d16a      	bne.n	80135a8 <_fx_directory_exFAT_entry_read+0xa90>
            {

                /* Skip the entry type and flags field.  */
                read_ptr += 2;
 80134d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134d6:	3302      	adds	r3, #2
 80134d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* There are 15 characters in one file name directory entry.  */
                if (name_length > 15)
 80134dc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80134e0:	2b0f      	cmp	r3, #15
 80134e2:	d903      	bls.n	80134ec <_fx_directory_exFAT_entry_read+0x9d4>
                {

                    /* Set copy size to the max size of one entry.  */
                    copy_size = 15;
 80134e4:	230f      	movs	r3, #15
 80134e6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80134ea:	e003      	b.n	80134f4 <_fx_directory_exFAT_entry_read+0x9dc>
                }
                else
                {

                    /* Set copy size to the acutal remaining length.  */
                    copy_size = name_length;
 80134ec:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80134f0:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
                }

                /* Check if we are requested to return the unicode name.  */
                if (unicode_name)
 80134f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d029      	beq.n	8013550 <_fx_directory_exFAT_entry_read+0xa38>
                {

                    /* Loop to copy the unicode file name. from the file name directory entry.  */
                    for (j = 0; j < copy_size * 2; ++j)
 80134fc:	2300      	movs	r3, #0
 80134fe:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8013502:	e015      	b.n	8013530 <_fx_directory_exFAT_entry_read+0xa18>
                    {

                        /* Copy the unicode file name from the file name directory entry.  */
                        unicode_name[name_pos * 2 + j] = *read_ptr++;
 8013504:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013508:	1c4b      	adds	r3, r1, #1
 801350a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801350e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8013512:	005a      	lsls	r2, r3, #1
 8013514:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8013518:	4413      	add	r3, r2
 801351a:	461a      	mov	r2, r3
 801351c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013520:	441a      	add	r2, r3
 8013522:	780b      	ldrb	r3, [r1, #0]
 8013524:	7013      	strb	r3, [r2, #0]
                    for (j = 0; j < copy_size * 2; ++j)
 8013526:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 801352a:	3301      	adds	r3, #1
 801352c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8013530:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8013534:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	429a      	cmp	r2, r3
 801353c:	dbe2      	blt.n	8013504 <_fx_directory_exFAT_entry_read+0x9ec>
                    }

                    /* Revert the read pointer for later use.  */
                    read_ptr -= copy_size * 2;
 801353e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8013542:	005b      	lsls	r3, r3, #1
 8013544:	425a      	negs	r2, r3
 8013546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801354a:	4413      	add	r3, r2
 801354c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                }

                /* Loop to copy the non-unicode file name.  */
                for (j = 0; j < copy_size; ++j)
 8013550:	2300      	movs	r3, #0
 8013552:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8013556:	e019      	b.n	801358c <_fx_directory_exFAT_entry_read+0xa74>
                {

                    /* Copy and convert the file name from the file name directory entry.  */
                    destination_ptr -> fx_dir_entry_name[name_pos++] = (CHAR)_fx_utility_16_unsigned_read(read_ptr);
 8013558:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801355c:	f006 f830 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8013560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013564:	6819      	ldr	r1, [r3, #0]
 8013566:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 801356a:	1c53      	adds	r3, r2, #1
 801356c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8013570:	4613      	mov	r3, r2
 8013572:	18ca      	adds	r2, r1, r3
 8013574:	b2c3      	uxtb	r3, r0
 8013576:	7013      	strb	r3, [r2, #0]
                    read_ptr += 2;
 8013578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801357c:	3302      	adds	r3, #2
 801357e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                for (j = 0; j < copy_size; ++j)
 8013582:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8013586:	3301      	adds	r3, #1
 8013588:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 801358c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8013590:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8013594:	429a      	cmp	r2, r3
 8013596:	d3df      	bcc.n	8013558 <_fx_directory_exFAT_entry_read+0xa40>
                }

                /* Modify the name_length to indicate the remaining length.  */
                name_length = (UCHAR)(name_length - copy_size);
 8013598:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 801359c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80135a6:	e008      	b.n	80135ba <_fx_directory_exFAT_entry_read+0xaa2>
            }
            else if (((*read_ptr & (FX_EXFAT_ENTRY_TYPE_IN_USE_MASK | FX_EXFAT_ENTRY_TYPE_IMPORTANCE_MASK | FX_EXFAT_ENTRY_TYPE_CATEGORY_MASK)) ==
 80135a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80135b2:	2bc0      	cmp	r3, #192	; 0xc0
 80135b4:	d101      	bne.n	80135ba <_fx_directory_exFAT_entry_read+0xaa2>
                      (FX_EXFAT_ENTRY_TYPE_IN_USE_MASK | FX_EXFAT_ENTRY_TYPE_CATEGORY_MASK)))
            {

                /* Unknown critical secondary, we can't work with this directory.  */
                return(FX_FILE_CORRUPT);
 80135b6:	2308      	movs	r3, #8
 80135b8:	e041      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    for (i = 0; i < secondary_count; ++i)
 80135ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80135be:	3301      	adds	r3, #1
 80135c0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80135c4:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80135c8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80135cc:	429a      	cmp	r2, r3
 80135ce:	f4ff ad94 	bcc.w	80130fa <_fx_directory_exFAT_entry_read+0x5e2>
            }
        }
    }

    /* Terminate the entry name string.  */
    destination_ptr -> fx_dir_entry_name[name_pos] = 0;
 80135d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80135dc:	4413      	add	r3, r2
 80135de:	2200      	movs	r2, #0
 80135e0:	701a      	strb	r2, [r3, #0]

    /* Check if we are requested to return the unicode name.  */
    if (unicode_name)
 80135e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d01a      	beq.n	8013620 <_fx_directory_exFAT_entry_read+0xb08>
    {

        /* Terminate the unicode name string.  */
        unicode_name[name_pos * 2] = 0;
 80135ea:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	461a      	mov	r2, r3
 80135f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80135f6:	4413      	add	r3, r2
 80135f8:	2200      	movs	r2, #0
 80135fa:	701a      	strb	r2, [r3, #0]
        unicode_name[name_pos * 2 + 1] = 0;
 80135fc:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8013600:	005b      	lsls	r3, r3, #1
 8013602:	3301      	adds	r3, #1
 8013604:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013608:	4413      	add	r3, r2
 801360a:	2200      	movs	r2, #0
 801360c:	701a      	strb	r2, [r3, #0]

        /* Check if we are requested to return the unicode name length.  */
        if (unicode_length)
 801360e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013612:	2b00      	cmp	r3, #0
 8013614:	d004      	beq.n	8013620 <_fx_directory_exFAT_entry_read+0xb08>
        {

            /* Return the unicode name length.  */
            *unicode_length = name_pos;
 8013616:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 801361a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801361e:	601a      	str	r2, [r3, #0]
        }
    }

    /* Verify checksum.  */
    if (checksum != file_checksum)
 8013620:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8013624:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8013628:	429a      	cmp	r2, r3
 801362a:	d001      	beq.n	8013630 <_fx_directory_exFAT_entry_read+0xb18>
    {

        /* Return corrupted file error.  */
        return(FX_FILE_CORRUPT);
 801362c:	2308      	movs	r3, #8
 801362e:	e006      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    }

    /* Check if we have found all the file name directory entries.  */
    if (name_length != 0)
 8013630:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8013634:	2b00      	cmp	r3, #0
 8013636:	d001      	beq.n	801363c <_fx_directory_exFAT_entry_read+0xb24>
    {

        /* Return file corrupted error.  */
        return(FX_FILE_CORRUPT);
 8013638:	2308      	movs	r3, #8
 801363a:	e000      	b.n	801363e <_fx_directory_exFAT_entry_read+0xb26>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8013644:	46bd      	mov	sp, r7
 8013646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801364a:	bf00      	nop
 801364c:	10000001 	.word	0x10000001

08013650 <_fx_directory_exFAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_exFAT_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr, UCHAR update_level)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b088      	sub	sp, #32
 8013654:	af02      	add	r7, sp, #8
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	4613      	mov	r3, r2
 801365c:	71fb      	strb	r3, [r7, #7]

UINT status;


    /* Call the unicode director entry write function.  */
    status =  _fx_directory_exFAT_unicode_entry_write(media_ptr, entry_ptr, update_level, NULL, 0);
 801365e:	79fa      	ldrb	r2, [r7, #7]
 8013660:	2300      	movs	r3, #0
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	2300      	movs	r3, #0
 8013666:	68b9      	ldr	r1, [r7, #8]
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f000 fae9 	bl	8013c40 <_fx_directory_exFAT_unicode_entry_write>
 801366e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8013670:	697b      	ldr	r3, [r7, #20]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3718      	adds	r7, #24
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
	...

0801367c <_fx_directory_exFAT_free_search>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_exFAT_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 801367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013680:	b0b8      	sub	sp, #224	; 0xe0
 8013682:	af04      	add	r7, sp, #16
 8013684:	66f8      	str	r0, [r7, #108]	; 0x6c
 8013686:	66b9      	str	r1, [r7, #104]	; 0x68
 8013688:	667a      	str	r2, [r7, #100]	; 0x64

ULONG             i;
UCHAR            *work_ptr;
UINT              status, total_entries;
ULONG64           entry_sector = 0;
 801368a:	f04f 0200 	mov.w	r2, #0
 801368e:	f04f 0300 	mov.w	r3, #0
 8013692:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
ULONG64           entry_next_sector = 0;
 8013696:	f04f 0200 	mov.w	r2, #0
 801369a:	f04f 0300 	mov.w	r3, #0
 801369e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
ULONG             entry_offset = 0;
 80136a2:	2300      	movs	r3, #0
 80136a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
#endif
ULONG             bytes_per_cluster;


    /* Get name length.  */
    i = _fx_utility_string_length_get(entry_ptr -> fx_dir_entry_name, FX_MAX_EX_FAT_NAME_LEN);
 80136a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	21ff      	movs	r1, #255	; 0xff
 80136ae:	4618      	mov	r0, r3
 80136b0:	f008 ffce 	bl	801c650 <_fx_utility_string_length_get>
 80136b4:	4603      	mov	r3, r0
 80136b6:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Check if name is valid.  */
    if (entry_ptr -> fx_dir_entry_name[i] != 0)
 80136b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80136be:	4413      	add	r3, r2
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <_fx_directory_exFAT_free_search+0x4e>
    {

        /* Invalid name, return error.  */
        return(FX_INVALID_NAME);
 80136c6:	230c      	movs	r3, #12
 80136c8:	e2b1      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
    }
    /* Determine the total entries.  */
    total_entries = 2 + (i + 14) / 15;
 80136ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80136cc:	f103 020e 	add.w	r2, r3, #14
 80136d0:	4bb8      	ldr	r3, [pc, #736]	; (80139b4 <_fx_directory_exFAT_free_search+0x338>)
 80136d2:	fba3 2302 	umull	r2, r3, r3, r2
 80136d6:	08db      	lsrs	r3, r3, #3
 80136d8:	3302      	adds	r3, #2
 80136da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 80136de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00a      	beq.n	80136fe <_fx_directory_exFAT_free_search+0x82>
    {

        /* Search for a free entry in a sub-directory.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size / FX_DIR_ENTRY_SIZE;
 80136e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80136ee:	4613      	mov	r3, r2
 80136f0:	095b      	lsrs	r3, r3, #5
 80136f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 80136f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80136fc:	e00b      	b.n	8013716 <_fx_directory_exFAT_free_search+0x9a>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 80136fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013700:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8013704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8013708:	2300      	movs	r3, #0
 801370a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Clear dont_use_fat for root directory.  */
        directory_ptr -> fx_dir_entry_dont_use_fat = 0;
 801370e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013710:	2300      	movs	r3, #0
 8013712:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    i =  0;
 8013716:	2300      	movs	r3, #0
 8013718:	67fb      	str	r3, [r7, #124]	; 0x7c
    free_entry_start =  directory_entries;
 801371a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801371e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (directory_entries > 0)
 8013722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d06d      	beq.n	8013806 <_fx_directory_exFAT_free_search+0x18a>
    {
        do
        {
            /* Read an entry from the directory.  */
            status =
                _fx_directory_exFAT_entry_read(media_ptr,
 801372a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801372e:	2300      	movs	r3, #0
 8013730:	9303      	str	r3, [sp, #12]
 8013732:	2300      	movs	r3, #0
 8013734:	9302      	str	r3, [sp, #8]
 8013736:	2301      	movs	r3, #1
 8013738:	9301      	str	r3, [sp, #4]
 801373a:	2300      	movs	r3, #0
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013740:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8013744:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013746:	f7ff f9e7 	bl	8012b18 <_fx_directory_exFAT_entry_read>
 801374a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                               search_dir_ptr, &i, entry_ptr, 0, FX_TRUE, NULL, NULL);

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 801374e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013752:	2b00      	cmp	r3, #0
 8013754:	d002      	beq.n	801375c <_fx_directory_exFAT_free_search+0xe0>
            {
                return(status);
 8013756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801375a:	e268      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
            }

            /* Determine if this is an empty entry.  */
            if ((entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_FREE) ||
 801375c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801375e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8013762:	2bff      	cmp	r3, #255	; 0xff
 8013764:	d004      	beq.n	8013770 <_fx_directory_exFAT_free_search+0xf4>
                (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER))
 8013766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013768:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
            if ((entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_FREE) ||
 801376c:	2b00      	cmp	r3, #0
 801376e:	d13e      	bne.n	80137ee <_fx_directory_exFAT_free_search+0x172>
            {
                /* Determine if we are at the first free entry.  */
                if (free_entry_start == directory_entries)
 8013770:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013778:	429a      	cmp	r2, r3
 801377a:	d110      	bne.n	801379e <_fx_directory_exFAT_free_search+0x122>
                {

                    /* Remember the start of the free entry.  */
                    free_entry_start =  i;
 801377c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801377e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    entry_sector =      entry_ptr -> fx_dir_entry_log_sector;
 8013782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013784:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013788:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
                    entry_next_sector = entry_ptr -> fx_dir_entry_next_log_sector;
 801378c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801378e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8013792:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
                    entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 8013796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                }

                /* Determine if there are enough free entries to satisfy the request.  */
                if ((i - free_entry_start + 1) >= total_entries)
 801379e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80137a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80137a4:	1ad3      	subs	r3, r2, r3
 80137a6:	1c5a      	adds	r2, r3, #1
 80137a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d822      	bhi.n	80137f6 <_fx_directory_exFAT_free_search+0x17a>
                {
                    FX_INT_SAVE_AREA

                    /* Found an empty slot.  All the pertinent information is already
                       in the entry structure.  */
                    entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 80137b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80137b2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80137b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                    entry_ptr -> fx_dir_entry_next_log_sector = entry_next_sector;
 80137ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80137bc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80137c0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
                    entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 80137c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80137ca:	649a      	str	r2, [r3, #72]	; 0x48

                    /* Initialize the additional directory entries.  */
                    entry_ptr -> fx_dir_entry_created_time_ms =     0;
 80137cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137ce:	2200      	movs	r2, #0
 80137d0:	779a      	strb	r2, [r3, #30]

                    /* Lockout interrupts for time/date access.  */
                    FX_DISABLE_INTS

                    entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 80137d2:	4b79      	ldr	r3, [pc, #484]	; (80139b8 <_fx_directory_exFAT_free_search+0x33c>)
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137d8:	621a      	str	r2, [r3, #32]
                    entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 80137da:	4b78      	ldr	r3, [pc, #480]	; (80139bc <_fx_directory_exFAT_free_search+0x340>)
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137e0:	625a      	str	r2, [r3, #36]	; 0x24
                    entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 80137e2:	4b76      	ldr	r3, [pc, #472]	; (80139bc <_fx_directory_exFAT_free_search+0x340>)
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137e8:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Restore interrupts.  */
                    FX_RESTORE_INTS

                    /* Return a successful completion.  */
                    return(FX_SUCCESS);
 80137ea:	2300      	movs	r3, #0
 80137ec:	e21f      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
            }
            else
            {

                /* Reset the free entry start.  */
                free_entry_start =  directory_entries;
 80137ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80137f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            }

            /* Move to the next entry.  */
            i++;
 80137f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80137f8:	3301      	adds	r3, #1
 80137fa:	67fb      	str	r3, [r7, #124]	; 0x7c
        } while (i < directory_entries);
 80137fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80137fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013802:	4293      	cmp	r3, r2
 8013804:	d891      	bhi.n	801372a <_fx_directory_exFAT_free_search+0xae>
    }

    /* No empty entries were found.  If the specified directory is a sub-directory,
       attempt to allocate another cluster to it.  */
    if (media_ptr -> fx_media_available_clusters)
 8013806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013808:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 801380c:	2b00      	cmp	r3, #0
 801380e:	f000 820d 	beq.w	8013c2c <_fx_directory_exFAT_free_search+0x5b0>
    {
    ULONG64 size;
        bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8013812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8013816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013818:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
        bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801381c:	fb02 f303 	mul.w	r3, r2, r3
 8013820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        /* Check if it is a sub directory.  */
        if (search_dir_ptr)
 8013824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013828:	2b00      	cmp	r3, #0
 801382a:	d006      	beq.n	801383a <_fx_directory_exFAT_free_search+0x1be>
        {

            /* Set size to the available file size.  */
            size = search_dir_ptr -> fx_dir_entry_available_file_size;
 801382c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013830:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8013834:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8013838:	e00a      	b.n	8013850 <_fx_directory_exFAT_free_search+0x1d4>
        }
        else
        {

            /* Root directory, set size to root directory size.  */
            size = media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE;
 801383a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801383c:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8013840:	015b      	lsls	r3, r3, #5
 8013842:	2200      	movs	r2, #0
 8013844:	60bb      	str	r3, [r7, #8]
 8013846:	60fa      	str	r2, [r7, #12]
 8013848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801384c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
        }

        /* Check for directory restriction */
        if (size + bytes_per_cluster > FX_EXFAT_MAX_DIRECTORY_SIZE)
 8013850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013854:	2200      	movs	r2, #0
 8013856:	65bb      	str	r3, [r7, #88]	; 0x58
 8013858:	65fa      	str	r2, [r7, #92]	; 0x5c
 801385a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 801385e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013860:	188c      	adds	r4, r1, r2
 8013862:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8013864:	eb43 0101 	adc.w	r1, r3, r1
 8013868:	460d      	mov	r5, r1
 801386a:	4b55      	ldr	r3, [pc, #340]	; (80139c0 <_fx_directory_exFAT_free_search+0x344>)
 801386c:	429c      	cmp	r4, r3
 801386e:	f175 0300 	sbcs.w	r3, r5, #0
 8013872:	d301      	bcc.n	8013878 <_fx_directory_exFAT_free_search+0x1fc>
        {
            return(FX_NO_MORE_SPACE);
 8013874:	230a      	movs	r3, #10
 8013876:	e1da      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
        }

        /* Search the FAT for the next available cluster.  */
        status = _fx_utility_exFAT_allocate_new_cluster(media_ptr, search_dir_ptr, &last_cluster, &cluster);
 8013878:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801387c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013880:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8013884:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013886:	f006 fedb 	bl	801a640 <_fx_utility_exFAT_allocate_new_cluster>
 801388a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (status != FX_SUCCESS)
 801388e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013892:	2b00      	cmp	r3, #0
 8013894:	d002      	beq.n	801389c <_fx_directory_exFAT_free_search+0x220>
        {
            return(status);
 8013896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801389a:	e1c8      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
        }

        /* Decrease the available clusters in the media.  */
        media_ptr -> fx_media_available_clusters--;
 801389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801389e:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80138a2:	1e5a      	subs	r2, r3, #1
 80138a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138a6:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

        /* Defer the update of the FAT entry and the last cluster of the current
           directory entry until after the new cluster is initialized and written out.  */

        /* Update entry size. */
        if (search_dir_ptr)
 80138aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d020      	beq.n	80138f4 <_fx_directory_exFAT_free_search+0x278>
        {
            search_dir_ptr -> fx_dir_entry_file_size += bytes_per_cluster;
 80138b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80138ba:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80138be:	2000      	movs	r0, #0
 80138c0:	6539      	str	r1, [r7, #80]	; 0x50
 80138c2:	6578      	str	r0, [r7, #84]	; 0x54
 80138c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80138c8:	4621      	mov	r1, r4
 80138ca:	1851      	adds	r1, r2, r1
 80138cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80138ce:	4629      	mov	r1, r5
 80138d0:	eb43 0101 	adc.w	r1, r3, r1
 80138d4:	64f9      	str	r1, [r7, #76]	; 0x4c
 80138d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80138de:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
            search_dir_ptr -> fx_dir_entry_available_file_size = search_dir_ptr -> fx_dir_entry_file_size;
 80138e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80138ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138ee:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
 80138f2:	e009      	b.n	8013908 <_fx_directory_exFAT_free_search+0x28c>
        }
        else
        {

            /* Change root directory entry count - FAT32 has a variable sized root directory.  */
            media_ptr -> fx_media_root_directory_entries += bytes_per_cluster / FX_DIR_ENTRY_SIZE;
 80138f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138f6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80138fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80138fe:	095b      	lsrs	r3, r3, #5
 8013900:	441a      	add	r2, r3
 8013902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013904:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
        }

        /* Calculate the logical sector of this cluster.  */
        logical_sector =  ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801390a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801390e:	2200      	movs	r2, #0
 8013910:	643b      	str	r3, [r7, #64]	; 0x40
 8013912:	647a      	str	r2, [r7, #68]	; 0x44
            ((((ULONG64)cluster) - FX_FAT_ENTRY_START) *
 8013914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013916:	2200      	movs	r2, #0
 8013918:	63bb      	str	r3, [r7, #56]	; 0x38
 801391a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801391c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8013920:	460b      	mov	r3, r1
 8013922:	f1b3 0a02 	subs.w	sl, r3, #2
 8013926:	4613      	mov	r3, r2
 8013928:	f143 3bff 	adc.w	fp, r3, #4294967295
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801392e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013932:	2200      	movs	r2, #0
 8013934:	633b      	str	r3, [r7, #48]	; 0x30
 8013936:	637a      	str	r2, [r7, #52]	; 0x34
            ((((ULONG64)cluster) - FX_FAT_ENTRY_START) *
 8013938:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801393c:	4603      	mov	r3, r0
 801393e:	fb03 f20b 	mul.w	r2, r3, fp
 8013942:	460b      	mov	r3, r1
 8013944:	fb0a f303 	mul.w	r3, sl, r3
 8013948:	4413      	add	r3, r2
 801394a:	4602      	mov	r2, r0
 801394c:	fbaa 8902 	umull	r8, r9, sl, r2
 8013950:	444b      	add	r3, r9
 8013952:	4699      	mov	r9, r3
        logical_sector =  ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8013958:	460b      	mov	r3, r1
 801395a:	eb13 0308 	adds.w	r3, r3, r8
 801395e:	603b      	str	r3, [r7, #0]
 8013960:	4613      	mov	r3, r2
 8013962:	eb43 0309 	adc.w	r3, r3, r9
 8013966:	607b      	str	r3, [r7, #4]
 8013968:	e9d7 3400 	ldrd	r3, r4, [r7]
 801396c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

        /* Pickup the number of sectors for the next directory cluster.  */
        sectors =  media_ptr -> fx_media_sectors_per_cluster;
 8013970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013972:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        /* Read the logical sector just for cache reasons.  */
        status =  _fx_utility_logical_sector_read(media_ptr, logical_sector,
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801397c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, logical_sector,
 801397e:	2203      	movs	r2, #3
 8013980:	9202      	str	r2, [sp, #8]
 8013982:	2201      	movs	r2, #1
 8013984:	9201      	str	r2, [sp, #4]
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801398c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801398e:	f008 fa53 	bl	801be38 <_fx_utility_logical_sector_read>
 8013992:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        /* Check the return value.  */
        if (status != FX_SUCCESS)
 8013996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801399a:	2b00      	cmp	r3, #0
 801399c:	d002      	beq.n	80139a4 <_fx_directory_exFAT_free_search+0x328>
        {

            /* Return the error status.  */
            return(status);
 801399e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80139a2:	e144      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
        }

        /* Clear the entire first sector of the new sub-directory cluster.  */
        work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80139a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139a6:	689b      	ldr	r3, [r3, #8]
 80139a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        i =  0;
 80139ac:	2300      	movs	r3, #0
 80139ae:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i < media_ptr -> fx_media_bytes_per_sector)
 80139b0:	e014      	b.n	80139dc <_fx_directory_exFAT_free_search+0x360>
 80139b2:	bf00      	nop
 80139b4:	88888889 	.word	0x88888889
 80139b8:	2000d22c 	.word	0x2000d22c
 80139bc:	2000d228 	.word	0x2000d228
 80139c0:	10000001 	.word	0x10000001
        {

            /* Clear 4 bytes.  */
            *((ULONG *)work_ptr) =  (ULONG)0;
 80139c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80139c8:	2200      	movs	r2, #0
 80139ca:	601a      	str	r2, [r3, #0]

            /* Increment pointer.  */
            work_ptr =  work_ptr + sizeof(ULONG);
 80139cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80139d0:	3304      	adds	r3, #4
 80139d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

            /* Increment counter.  */
            i =  i + sizeof(ULONG);
 80139d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80139d8:	3304      	adds	r3, #4
 80139da:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i < media_ptr -> fx_media_bytes_per_sector)
 80139dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d8ee      	bhi.n	80139c4 <_fx_directory_exFAT_free_search+0x348>
#ifndef FX_DISABLE_CACHE
        /* Invalidate all cached sectors that are contained in the newly allocated first
           cluster of the directory.  */

        /* Pickup the total number of cache entries.  */
        i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 80139e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139e8:	695b      	ldr	r3, [r3, #20]
 80139ea:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Setup pointer to first cache entry (not in list order).  */
        cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 80139ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139ee:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 80139f2:	3328      	adds	r3, #40	; 0x28
 80139f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

        /* Examine all the logical sector cache entries.  */
        while (i--)
 80139f8:	e044      	b.n	8013a84 <_fx_directory_exFAT_free_search+0x408>
        {

            /* Determine if the cached entry is a sector in the first cluster of the
               new directory.  We don't need to worry about the first sector since it
               was read using the logical sector read utility earlier.  */
            if ((cache_entry_ptr -> fx_cached_sector >= (logical_sector + 1)) &&
 80139fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80139fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8013a02:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8013a06:	1c54      	adds	r4, r2, #1
 8013a08:	62bc      	str	r4, [r7, #40]	; 0x28
 8013a0a:	f143 0300 	adc.w	r3, r3, #0
 8013a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a10:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8013a14:	4623      	mov	r3, r4
 8013a16:	4298      	cmp	r0, r3
 8013a18:	462b      	mov	r3, r5
 8013a1a:	eb71 0303 	sbcs.w	r3, r1, r3
 8013a1e:	d327      	bcc.n	8013a70 <_fx_directory_exFAT_free_search+0x3f4>
                (cache_entry_ptr -> fx_cached_sector <  (logical_sector + sectors)))
 8013a20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8013a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	623b      	str	r3, [r7, #32]
 8013a30:	627a      	str	r2, [r7, #36]	; 0x24
 8013a32:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8013a36:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013a3a:	4644      	mov	r4, r8
 8013a3c:	18a4      	adds	r4, r4, r2
 8013a3e:	61bc      	str	r4, [r7, #24]
 8013a40:	464c      	mov	r4, r9
 8013a42:	eb44 0303 	adc.w	r3, r4, r3
 8013a46:	61fb      	str	r3, [r7, #28]
            if ((cache_entry_ptr -> fx_cached_sector >= (logical_sector + 1)) &&
 8013a48:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013a4c:	4623      	mov	r3, r4
 8013a4e:	4298      	cmp	r0, r3
 8013a50:	462b      	mov	r3, r5
 8013a52:	eb71 0303 	sbcs.w	r3, r1, r3
 8013a56:	d20b      	bcs.n	8013a70 <_fx_directory_exFAT_free_search+0x3f4>
            {

                /* Yes, we have found a logical sector in the cache that is one of the directory
                   sectors that will be written with zeros.  Because of this, simply make this
                   cache entry invalid.  */
                cache_entry_ptr -> fx_cached_sector =                0;
 8013a58:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8013a5c:	f04f 0200 	mov.w	r2, #0
 8013a60:	f04f 0300 	mov.w	r3, #0
 8013a64:	e9c1 2302 	strd	r2, r3, [r1, #8]
                cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 8013a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	741a      	strb	r2, [r3, #16]
            }

            /* Move to next entry in the cached sector list.  */
            if (cache_entry_ptr -> fx_cached_sector_next_used)
 8013a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a74:	695b      	ldr	r3, [r3, #20]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d004      	beq.n	8013a84 <_fx_directory_exFAT_free_search+0x408>
            {
                cache_entry_ptr =  cache_entry_ptr -> fx_cached_sector_next_used;
 8013a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a7e:	695b      	ldr	r3, [r3, #20]
 8013a80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        while (i--)
 8013a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a86:	1e5a      	subs	r2, r3, #1
 8013a88:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1b5      	bne.n	80139fa <_fx_directory_exFAT_free_search+0x37e>
        /* Clear all sectors of new sub-directory cluster.  */
        do
        {

            /* Decrease the number of sectors to clear.  */
            sectors--;
 8013a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013a92:	3b01      	subs	r3, #1
 8013a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Build Write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013aa2:	2290      	movs	r2, #144	; 0x90
 8013aa4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8013aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013aaa:	689a      	ldr	r2, [r3, #8]
 8013aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013aae:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8013ab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013aba:	441a      	add	r2, r3
 8013abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013abe:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
            media_ptr -> fx_media_driver_sectors =          1;
 8013ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ac4:	2201      	movs	r2, #1
 8013ac6:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8

            /* Set the system write flag since we are writing a directory sector.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8013aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013acc:	2201      	movs	r2, #1
 8013ace:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry)(media_ptr);
 8013ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ad4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8013ad8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013ada:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8013adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

            /* Determine if an error occurred.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8013ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ae6:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d002      	beq.n	8013af4 <_fx_directory_exFAT_free_search+0x478>
            {

                /* Return error code.  */
                return(status);
 8013aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013af2:	e09c      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
            }
        } while (sectors);
 8013af4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1c8      	bne.n	8013a8e <_fx_directory_exFAT_free_search+0x412>

        /* Flush the internal logical sector.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, media_ptr -> fx_media_sectors_per_cluster, FX_FALSE);
#endif

        if ((!search_dir_ptr) || (!(search_dir_ptr -> fx_dir_entry_dont_use_fat & 1)))
 8013afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d007      	beq.n	8013b14 <_fx_directory_exFAT_free_search+0x498>
 8013b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d121      	bne.n	8013b58 <_fx_directory_exFAT_free_search+0x4dc>
        {

            /* At this point, link up the last cluster with the new cluster.  */

            /* Setup the last cluster to indicate the end of the chain.  */
            status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_LAST_CLUSTER_exFAT);
 8013b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b16:	f04f 32ff 	mov.w	r2, #4294967295
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013b1e:	f006 f848 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8013b22:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

            /* Check the return value.  */
            if (status != FX_SUCCESS)
 8013b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d002      	beq.n	8013b34 <_fx_directory_exFAT_free_search+0x4b8>
            {

                /* Return the error status.  */
                return(status);
 8013b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b32:	e07c      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
            }

            /* Link the last cluster of the directory to the new cluster.  */
            if (last_cluster)
 8013b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00e      	beq.n	8013b58 <_fx_directory_exFAT_free_search+0x4dc>
            {

                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, cluster);
 8013b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b3e:	4619      	mov	r1, r3
 8013b40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013b42:	f006 f836 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8013b46:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8013b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d002      	beq.n	8013b58 <_fx_directory_exFAT_free_search+0x4dc>
                {

                    /* Return the error status.  */
                    return(status);
 8013b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b56:	e06a      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
                }
            }
        }

        if (!last_cluster && search_dir_ptr)
 8013b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d107      	bne.n	8013b6e <_fx_directory_exFAT_free_search+0x4f2>
 8013b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d003      	beq.n	8013b6e <_fx_directory_exFAT_free_search+0x4f2>
        {

            search_dir_ptr -> fx_dir_entry_cluster = cluster;
 8013b66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b6c:	635a      	str	r2, [r3, #52]	; 0x34
        }

        /* Mark the cluster as used. */
        status = _fx_utility_exFAT_cluster_state_set(media_ptr, cluster, FX_EXFAT_BITMAP_CLUSTER_OCCUPIED);
 8013b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b70:	2201      	movs	r2, #1
 8013b72:	4619      	mov	r1, r3
 8013b74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013b76:	f007 f942 	bl	801adfe <_fx_utility_exFAT_cluster_state_set>
 8013b7a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        /* Check the return value.  */
        if (status != FX_SUCCESS)
 8013b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d002      	beq.n	8013b8c <_fx_directory_exFAT_free_search+0x510>
        {

            /* Return the error status.  */
            return(status);
 8013b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b8a:	e050      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
        }

        /* Move cluster search pointer forward. */
        media_ptr -> fx_media_cluster_search_start = cluster + 1;
 8013b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b92:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

        /* Determine if this needs to be wrapped. */
        if (media_ptr -> fx_media_cluster_search_start >= media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 8013b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b98:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8013b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba0:	3302      	adds	r3, #2
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d303      	bcc.n	8013bae <_fx_directory_exFAT_free_search+0x532>
        {

            /* Wrap the search to the beginning FAT entry. */
            media_ptr -> fx_media_cluster_search_start = FX_FAT_ENTRY_START;
 8013ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ba8:	2202      	movs	r2, #2
 8013baa:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
        /* Finally load up the directory entry with information for the
           beginning of the new cluster.  */
        {
            FX_INT_SAVE_AREA

            entry_ptr -> fx_dir_entry_name[0] = 0;
 8013bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	701a      	strb	r2, [r3, #0]
            if (free_entry_start == directory_entries)
 8013bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013bba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d114      	bne.n	8013bec <_fx_directory_exFAT_free_search+0x570>
            {

                /* start from begining of new cluster */
                entry_ptr -> fx_dir_entry_log_sector = logical_sector;
 8013bc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013bc4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8013bc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

                /* There are more sectors in this cluster.  */
                entry_ptr -> fx_dir_entry_next_log_sector = logical_sector + 1;
 8013bcc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8013bd0:	1c51      	adds	r1, r2, #1
 8013bd2:	6139      	str	r1, [r7, #16]
 8013bd4:	f143 0300 	adc.w	r3, r3, #0
 8013bd8:	617b      	str	r3, [r7, #20]
 8013bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013be0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68

                /* Clear the byte offset since this is a new entry.  */
                entry_ptr -> fx_dir_entry_byte_offset = 0;
 8013be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013be6:	2200      	movs	r2, #0
 8013be8:	649a      	str	r2, [r3, #72]	; 0x48
 8013bea:	e00d      	b.n	8013c08 <_fx_directory_exFAT_free_search+0x58c>
            }
            else
            {

                /* start from end of last cluster */
                entry_ptr -> fx_dir_entry_log_sector = entry_sector;
 8013bec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013bee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8013bf2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

                /* Next sector in new cluster */
                entry_ptr -> fx_dir_entry_next_log_sector = logical_sector;
 8013bf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013bf8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8013bfc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

                /* Set byte offset */
                entry_ptr -> fx_dir_entry_byte_offset = entry_offset;
 8013c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013c06:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS

            entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8013c08:	4b0b      	ldr	r3, [pc, #44]	; (8013c38 <_fx_directory_exFAT_free_search+0x5bc>)
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c0e:	621a      	str	r2, [r3, #32]
            entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8013c10:	4b0a      	ldr	r3, [pc, #40]	; (8013c3c <_fx_directory_exFAT_free_search+0x5c0>)
 8013c12:	681a      	ldr	r2, [r3, #0]
 8013c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c16:	625a      	str	r2, [r3, #36]	; 0x24
            entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8013c18:	4b08      	ldr	r3, [pc, #32]	; (8013c3c <_fx_directory_exFAT_free_search+0x5c0>)
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Restore interrupts.  */
            FX_RESTORE_INTS
        }

        entry_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER;
 8013c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c22:	2200      	movs	r2, #0
 8013c24:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8013c28:	2300      	movs	r3, #0
 8013c2a:	e000      	b.n	8013c2e <_fx_directory_exFAT_free_search+0x5b2>
    }

    /* Return "not found" status to the caller.  */
    return(FX_NOT_FOUND);
 8013c2c:	2304      	movs	r3, #4
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	37d0      	adds	r7, #208	; 0xd0
 8013c32:	46bd      	mov	sp, r7
 8013c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013c38:	2000d22c 	.word	0x2000d22c
 8013c3c:	2000d228 	.word	0x2000d228

08013c40 <_fx_directory_exFAT_unicode_entry_write>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_exFAT_unicode_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr,
                                              UCHAR update_level, USHORT *unicode_name, UINT unicode_length)
{
 8013c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c44:	b0ae      	sub	sp, #184	; 0xb8
 8013c46:	af04      	add	r7, sp, #16
 8013c48:	65f8      	str	r0, [r7, #92]	; 0x5c
 8013c4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8013c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8013c4e:	4613      	mov	r3, r2
 8013c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
ULONG   relative_sector;
ULONG   byte_offset;
ULONG   cluster, next_cluster;
UINT    total_entries;
UINT    name_length;
UINT    name_pos = 0;
 8013c54:	2300      	movs	r3, #0
 8013c56:	67bb      	str	r3, [r7, #120]	; 0x78
UINT    copy_size;
USHORT  checksum = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
ULONG   date_time;
UINT    use_unicode = FX_FALSE;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* FX_ENABLE_FAULT_TOLERANT */



    /* Check if we have unicode file name available.  */
    if (unicode_name && unicode_length)
 8013c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d009      	beq.n	8013c7c <_fx_directory_exFAT_unicode_entry_write+0x3c>
 8013c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d005      	beq.n	8013c7c <_fx_directory_exFAT_unicode_entry_write+0x3c>
    {

        /* Set use unicode flag.  */
        use_unicode = FX_TRUE;
 8013c70:	2301      	movs	r3, #1
 8013c72:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Save the length of the name.  */
        name_length = unicode_length;
 8013c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013c78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013c7a:	e010      	b.n	8013c9e <_fx_directory_exFAT_unicode_entry_write+0x5e>
    }
    else
    {

        /* Calculate the length of the name from the name string.  */
        name_length = _fx_utility_string_length_get(entry_ptr -> fx_dir_entry_name, FX_MAX_EX_FAT_NAME_LEN);
 8013c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	21ff      	movs	r1, #255	; 0xff
 8013c82:	4618      	mov	r0, r3
 8013c84:	f008 fce4 	bl	801c650 <_fx_utility_string_length_get>
 8013c88:	67f8      	str	r0, [r7, #124]	; 0x7c

        /* Check if name is valid.  */
        if (entry_ptr -> fx_dir_entry_name[name_length] != 0)
 8013c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c90:	4413      	add	r3, r2
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <_fx_directory_exFAT_unicode_entry_write+0x5e>
        {

            /* Invalid name, return error.  */
            return(FX_INVALID_NAME);
 8013c98:	230c      	movs	r3, #12
 8013c9a:	f000 bd33 	b.w	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
        }
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8013c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Pickup the logical sector of the entry.  */
    logical_sector = entry_ptr -> fx_dir_entry_log_sector;
 8013ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ca8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013cac:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

    /* Calculate the cluster that this logical sector is in.  */
    cluster =  (ULONG)((logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster)) + FX_FAT_ENTRY_START;
 8013cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cb2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	461c      	mov	r4, r3
 8013cba:	4615      	mov	r5, r2
 8013cbc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8013cc0:	ebb2 0804 	subs.w	r8, r2, r4
 8013cc4:	eb63 0905 	sbc.w	r9, r3, r5
 8013cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cca:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013cce:	2200      	movs	r2, #0
 8013cd0:	469a      	mov	sl, r3
 8013cd2:	4693      	mov	fp, r2
 8013cd4:	4652      	mov	r2, sl
 8013cd6:	465b      	mov	r3, fp
 8013cd8:	4640      	mov	r0, r8
 8013cda:	4649      	mov	r1, r9
 8013cdc:	f7ed f828 	bl	8000d30 <__aeabi_uldivmod>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	3302      	adds	r3, #2
 8013ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Calculate the relative cluster.  */
    relative_sector =  (ULONG)(logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013cec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cf2:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
 8013cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cfa:	1e9a      	subs	r2, r3, #2
                                                  (((ULONG64)cluster - FX_FAT_ENTRY_START) *
                                                   ((ULONG)media_ptr -> fx_media_sectors_per_cluster))));
 8013cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cfe:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
    relative_sector =  (ULONG)(logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013d02:	fb02 f303 	mul.w	r3, r2, r3
 8013d06:	440b      	add	r3, r1
 8013d08:	1ac3      	subs	r3, r0, r3
 8013d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Read the sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8013d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d10:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8013d12:	2303      	movs	r3, #3
 8013d14:	9302      	str	r3, [sp, #8]
 8013d16:	2301      	movs	r3, #1
 8013d18:	9301      	str	r3, [sp, #4]
 8013d1a:	9200      	str	r2, [sp, #0]
 8013d1c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8013d20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013d22:	f008 f889 	bl	801be38 <_fx_utility_logical_sector_read>
 8013d26:	66b8      	str	r0, [r7, #104]	; 0x68

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8013d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d002      	beq.n	8013d34 <_fx_directory_exFAT_unicode_entry_write+0xf4>
    {

        /* Return the error status.  */
        return(status);
 8013d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d30:	f000 bce8 	b.w	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8013d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d36:	689b      	ldr	r3, [r3, #8]
 8013d38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8013d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d44:	4413      	add	r3, r2
 8013d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Build file entry fields.  */

    /* Check if we need to update EntryType field.  */
    if (update_level == UPDATE_FULL)
 8013d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d4e:	2b04      	cmp	r3, #4
 8013d50:	d104      	bne.n	8013d5c <_fx_directory_exFAT_unicode_entry_write+0x11c>
    {

        /* Set EntryType field to file directory.  */
        *work_ptr = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
 8013d52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013d56:	2385      	movs	r3, #133	; 0x85
 8013d58:	7013      	strb	r3, [r2, #0]
 8013d5a:	e00c      	b.n	8013d76 <_fx_directory_exFAT_unicode_entry_write+0x136>
    }
    /* Check if we are request to delete the file.  */
    else if (update_level == UPDATE_DELETE)
 8013d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d108      	bne.n	8013d76 <_fx_directory_exFAT_unicode_entry_write+0x136>
    {

        /* Clear InUse bit.  */
        *work_ptr &= 0x7f;
 8013d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013d74:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field: SecondaryCount.  */
    work_ptr++;
 8013d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Update SecondaryCount field.  */
    if (update_level == UPDATE_FULL)
 8013d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d84:	2b04      	cmp	r3, #4
 8013d86:	d110      	bne.n	8013daa <_fx_directory_exFAT_unicode_entry_write+0x16a>
    {

        /* Calculate the secondary entry count from file name length.  */
        total_entries = 1 + (name_length + 14) / 15;
 8013d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d8a:	f103 020e 	add.w	r2, r3, #14
 8013d8e:	4bbc      	ldr	r3, [pc, #752]	; (8014080 <_fx_directory_exFAT_unicode_entry_write+0x440>)
 8013d90:	fba3 2302 	umull	r2, r3, r3, r2
 8013d94:	08db      	lsrs	r3, r3, #3
 8013d96:	3301      	adds	r3, #1
 8013d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Save SecondaryCount field.  */
        *work_ptr = (UCHAR)total_entries;
 8013d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013da0:	b2db      	uxtb	r3, r3
 8013da2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013da6:	7013      	strb	r3, [r2, #0]
 8013da8:	e004      	b.n	8013db4 <_fx_directory_exFAT_unicode_entry_write+0x174>
    }
    else
    {

        /* We are not performing a full update, read back the secondary entry count.  */
        total_entries = *work_ptr;
 8013daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013db4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013db8:	3301      	adds	r3, #1
 8013dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Skip SetChecksum field.  */
    work_ptr += 2;
 8013dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dc2:	3302      	adds	r3, #2
 8013dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to update FileAttributes field.  */
    if (update_level >= UPDATE_FILE)
 8013dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d006      	beq.n	8013dde <_fx_directory_exFAT_unicode_entry_write+0x19e>
    {

        /* Write the file attributes field.  */
        _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_attributes);
 8013dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013dd2:	7f1b      	ldrb	r3, [r3, #28]
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013dda:	f005 fc04 	bl	80195e6 <_fx_utility_16_unsigned_write>
    }

    /* Advance the pointer to the next field.  */
    work_ptr += 2;
 8013dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013de2:	3302      	adds	r3, #2
 8013de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to perform full entry update.  */
    if (update_level == UPDATE_FULL)
 8013de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dec:	2b04      	cmp	r3, #4
 8013dee:	d104      	bne.n	8013dfa <_fx_directory_exFAT_unicode_entry_write+0x1ba>
    {

        /* Clear Reserved1 field.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 8013df0:	2100      	movs	r1, #0
 8013df2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013df6:	f005 fbf6 	bl	80195e6 <_fx_utility_16_unsigned_write>
    }

    /* Advance the pointer to the next field.  */
    work_ptr += 2;
 8013dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dfe:	3302      	adds	r3, #2
 8013e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to update the CreateTimestamp field.  */
    if (update_level >= UPDATE_FILE)
 8013e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d00b      	beq.n	8013e24 <_fx_directory_exFAT_unicode_entry_write+0x1e4>
    {

        /* Calculate and update CreateTimestamp field.  */
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_created_date << 16) |
 8013e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e10:	041a      	lsls	r2, r3, #16
                     (ULONG)entry_ptr -> fx_dir_entry_created_time;
 8013e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e14:	6a1b      	ldr	r3, [r3, #32]
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_created_date << 16) |
 8013e16:	4313      	orrs	r3, r2
 8013e18:	667b      	str	r3, [r7, #100]	; 0x64
        _fx_utility_32_unsigned_write(work_ptr, date_time);
 8013e1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e1c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013e20:	f005 fc13 	bl	801964a <_fx_utility_32_unsigned_write>
    }

    /* Advance the pointer to the next field.  */
    work_ptr += 4;
 8013e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e28:	3304      	adds	r3, #4
 8013e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to update LastModifiedTimestamp field.  */
    if (update_level >= UPDATE_FILE)
 8013e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00b      	beq.n	8013e4e <_fx_directory_exFAT_unicode_entry_write+0x20e>
    {

        /* Calculate and update LastModifiedTimestamp field.  */
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_date << 16) |
 8013e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e3a:	041a      	lsls	r2, r3, #16
                     (ULONG)entry_ptr -> fx_dir_entry_time;
 8013e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_date << 16) |
 8013e40:	4313      	orrs	r3, r2
 8013e42:	667b      	str	r3, [r7, #100]	; 0x64
        _fx_utility_32_unsigned_write(work_ptr, date_time);
 8013e44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e46:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013e4a:	f005 fbfe 	bl	801964a <_fx_utility_32_unsigned_write>
    }

    /* Advance the pointer to the next field.  */
    work_ptr += 4;
 8013e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e52:	3304      	adds	r3, #4
 8013e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to update LastAccessedTimestamp field.  */
    if (update_level >= UPDATE_FILE)
 8013e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00b      	beq.n	8013e78 <_fx_directory_exFAT_unicode_entry_write+0x238>
    {

        /* Calculate and update LastAccessedTimestamp field.  */
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_date << 16) |
 8013e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e64:	041a      	lsls	r2, r3, #16
                     (ULONG)entry_ptr -> fx_dir_entry_time; /* use modified as accessed */
 8013e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        date_time = ((ULONG)entry_ptr -> fx_dir_entry_date << 16) |
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	667b      	str	r3, [r7, #100]	; 0x64
        _fx_utility_32_unsigned_write(work_ptr, date_time);
 8013e6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013e74:	f005 fbe9 	bl	801964a <_fx_utility_32_unsigned_write>
    }

    /* Advance the pointer to the next field.  */
    work_ptr += 4;
 8013e78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to update Create10msIncrement field.  */
    if (update_level >= UPDATE_FILE)
 8013e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d004      	beq.n	8013e94 <_fx_directory_exFAT_unicode_entry_write+0x254>
    {

        /* Update Create10msIncrement field.  */
        *work_ptr = entry_ptr -> fx_dir_entry_created_time_ms;
 8013e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e8c:	7f9b      	ldrb	r3, [r3, #30]
 8013e8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013e92:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e98:	3301      	adds	r3, #1
 8013e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to perform full entry update.  */
    if (update_level >= UPDATE_FILE)
 8013e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d003      	beq.n	8013eae <_fx_directory_exFAT_unicode_entry_write+0x26e>
    {

        /* 10ms increment field is not supported, clear this field.  */
        *work_ptr = 0;
 8013ea6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013eaa:	2300      	movs	r3, #0
 8013eac:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to perform full entry update.  */
    if (update_level == UPDATE_FULL)
 8013eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ebc:	2b04      	cmp	r3, #4
 8013ebe:	d103      	bne.n	8013ec8 <_fx_directory_exFAT_unicode_entry_write+0x288>
    {

        /*CreateUtcOffset field is not supported, clear this field.  */
        *work_ptr = 0;
 8013ec0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013ec8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ecc:	3301      	adds	r3, #1
 8013ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to perform full entry update.  */
    if (update_level >= UPDATE_FILE)
 8013ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d003      	beq.n	8013ee2 <_fx_directory_exFAT_unicode_entry_write+0x2a2>
    {

        /* LastModifiedUtcOffset field is not supported, clear this field.  */
        *work_ptr = 0;
 8013eda:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ede:	2300      	movs	r3, #0
 8013ee0:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Check if we need to perform full entry update.  */
    if (update_level == UPDATE_FULL)
 8013eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ef0:	2b04      	cmp	r3, #4
 8013ef2:	d103      	bne.n	8013efc <_fx_directory_exFAT_unicode_entry_write+0x2bc>
    {

        /* LastModifiedUtcOffset field is not supported, clear this field.  */
        *work_ptr = 0; /* Not supported.  */
 8013ef4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ef8:	2300      	movs	r3, #0
 8013efa:	7013      	strb	r3, [r2, #0]
    }

    /* Advance the pointer to the next field.  */
    work_ptr++;
 8013efc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f00:	3301      	adds	r3, #1
 8013f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Clear Reserved2 field.  */
    if (update_level == UPDATE_FULL)
 8013f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f0a:	2b04      	cmp	r3, #4
 8013f0c:	d116      	bne.n	8013f3c <_fx_directory_exFAT_unicode_entry_write+0x2fc>
    {

        /* Loop to clear the reserved field.  */
        for (i = 0; i < 7; ++i)
 8013f0e:	2300      	movs	r3, #0
 8013f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013f14:	e00d      	b.n	8013f32 <_fx_directory_exFAT_unicode_entry_write+0x2f2>
        {

            /* Clear the reserved field.  */
            *work_ptr = 0;
 8013f16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	7013      	strb	r3, [r2, #0]
            work_ptr++;
 8013f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f22:	3301      	adds	r3, #1
 8013f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (i = 0; i < 7; ++i)
 8013f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f36:	2b06      	cmp	r3, #6
 8013f38:	d9ed      	bls.n	8013f16 <_fx_directory_exFAT_unicode_entry_write+0x2d6>
 8013f3a:	e004      	b.n	8013f46 <_fx_directory_exFAT_unicode_entry_write+0x306>
    }
    else
    {

        /* Skip the reserved field.  */
        work_ptr += 7;
 8013f3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f40:	3307      	adds	r3, #7
 8013f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    /* Calculate checksum.  */
    work_ptr -= FX_DIR_ENTRY_SIZE;
 8013f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f4a:	3b20      	subs	r3, #32
 8013f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Loop to calculate the entry checksum.  */
    for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8013f50:	2300      	movs	r3, #0
 8013f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013f56:	e024      	b.n	8013fa2 <_fx_directory_exFAT_unicode_entry_write+0x362>
    {

        /* Skip the checksum field.  */
        if ((j == 2) || (j == 3))
 8013f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d01a      	beq.n	8013f96 <_fx_directory_exFAT_unicode_entry_write+0x356>
 8013f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f64:	2b03      	cmp	r3, #3
 8013f66:	d016      	beq.n	8013f96 <_fx_directory_exFAT_unicode_entry_write+0x356>
            continue;
        }

        /* Calculate the checksum using the algorithm described in the specification.  */
        /* Right rotate the checksum by one bit position and add the data.  */
        checksum = (USHORT)(((checksum >> 1) | (checksum << 15)) + work_ptr[j]);
 8013f68:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8013f6c:	085b      	lsrs	r3, r3, #1
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	b21a      	sxth	r2, r3
 8013f72:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8013f76:	03db      	lsls	r3, r3, #15
 8013f78:	b21b      	sxth	r3, r3
 8013f7a:	4313      	orrs	r3, r2
 8013f7c:	b21b      	sxth	r3, r3
 8013f7e:	b299      	uxth	r1, r3
 8013f80:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f88:	4413      	add	r3, r2
 8013f8a:	781b      	ldrb	r3, [r3, #0]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	440b      	add	r3, r1
 8013f90:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8013f94:	e000      	b.n	8013f98 <_fx_directory_exFAT_unicode_entry_write+0x358>
            continue;
 8013f96:	bf00      	nop
    for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8013f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013fa6:	2b1f      	cmp	r3, #31
 8013fa8:	d9d6      	bls.n	8013f58 <_fx_directory_exFAT_unicode_entry_write+0x318>
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
    changed_size = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Update second entries.  */
    for (i = 0; i < total_entries; ++i)
 8013faa:	2300      	movs	r3, #0
 8013fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013fb0:	e276      	b.n	80144a0 <_fx_directory_exFAT_unicode_entry_write+0x860>
    {

        /* Advance the pointer and offset to next directory entry.  */
        work_ptr += FX_DIR_ENTRY_SIZE;
 8013fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013fb6:	3320      	adds	r3, #32
 8013fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        byte_offset += FX_DIR_ENTRY_SIZE;
 8013fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013fc0:	3320      	adds	r3, #32
 8013fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Update changed_size. */
        changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Determine if the entry overlaps into the next sector.  */
        if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8013fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	f0c0 80b9 	bcc.w	8014146 <_fx_directory_exFAT_unicode_entry_write+0x506>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Write current logical sector out.  */
                status =  _fx_utility_logical_sector_write(media_ptr, logical_sector,
 8013fd4:	2303      	movs	r3, #3
 8013fd6:	9302      	str	r3, [sp, #8]
 8013fd8:	2301      	movs	r3, #1
 8013fda:	9301      	str	r3, [sp, #4]
 8013fdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8013fe6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013fe8:	f008 f9ba 	bl	801c360 <_fx_utility_logical_sector_write>
 8013fec:	66b8      	str	r0, [r7, #104]	; 0x68
                                                           sector_base_ptr, ((ULONG) 1), FX_DIRECTORY_SECTOR);
            }

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8013fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <_fx_directory_exFAT_unicode_entry_write+0x3b8>
            {

                /* Return the error status.  */
                return(status);
 8013ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ff6:	e385      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
            }

            /* Determine the next sector of the directory entry.  */
            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8013ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ffa:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013ffe:	1e5a      	subs	r2, r3, #1
 8014000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014004:	4293      	cmp	r3, r2
 8014006:	d210      	bcs.n	801402a <_fx_directory_exFAT_unicode_entry_write+0x3ea>
            {

                /* More sectors in this cluster.  */

                /* Simply increment the logical sector.  */
                logical_sector++;
 8014008:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801400c:	1c51      	adds	r1, r2, #1
 801400e:	60b9      	str	r1, [r7, #8]
 8014010:	f143 0300 	adc.w	r3, r3, #0
 8014014:	60fb      	str	r3, [r7, #12]
 8014016:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801401a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

                /* Increment the relative sector.  */
                relative_sector++;
 801401e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014022:	3301      	adds	r3, #1
 8014024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014028:	e070      	b.n	801410c <_fx_directory_exFAT_unicode_entry_write+0x4cc>
            }
            else
            {

                /* We need to move to the next cluster.  */
                if ((entry_ptr -> fx_dir_entry_dont_use_fat >> 1) & 1) /* Check parent dont_use_fat flag.  */
 801402a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801402c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8014030:	085b      	lsrs	r3, r3, #1
 8014032:	b2db      	uxtb	r3, r3
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d004      	beq.n	8014046 <_fx_directory_exFAT_unicode_entry_write+0x406>
                {

                    /* FAT is not used, next cluster is after the current cluster.  */
                    next_cluster = cluster + 1;
 801403c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014040:	3301      	adds	r3, #1
 8014042:	663b      	str	r3, [r7, #96]	; 0x60
 8014044:	e00d      	b.n	8014062 <_fx_directory_exFAT_unicode_entry_write+0x422>
                }
                else
                {

                    /* FAT is used, read FAT to get the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8014046:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801404a:	461a      	mov	r2, r3
 801404c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014050:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8014052:	f005 fb68 	bl	8019726 <_fx_utility_FAT_entry_read>
 8014056:	66b8      	str	r0, [r7, #104]	; 0x68

                    /* Check for I/O error.  */
                    if (status != FX_SUCCESS)
 8014058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801405a:	2b00      	cmp	r3, #0
 801405c:	d001      	beq.n	8014062 <_fx_directory_exFAT_unicode_entry_write+0x422>
                    {

                        /* Return error code.  */
                        return(status);
 801405e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014060:	e350      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
                    }
                }

                /* Copy next cluster to the current cluster.  */
                cluster =  next_cluster;
 8014062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Check the value of the new cluster - it must be a valid cluster number
                   or something is really wrong!  */
                if ((cluster < FX_FAT_ENTRY_START) || (cluster > FX_RESERVED_1_exFAT))
 8014068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801406c:	2b01      	cmp	r3, #1
 801406e:	d904      	bls.n	801407a <_fx_directory_exFAT_unicode_entry_write+0x43a>
 8014070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014074:	f113 0f08 	cmn.w	r3, #8
 8014078:	d904      	bls.n	8014084 <_fx_directory_exFAT_unicode_entry_write+0x444>
                {

                    /* Send error message back to caller.  */
                    return(FX_FILE_CORRUPT);
 801407a:	2308      	movs	r3, #8
 801407c:	e342      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
 801407e:	bf00      	nop
 8014080:	88888889 	.word	0x88888889
                }

                /* Setup the relative sector (this is zero for subsequent cluster.  */
                relative_sector =  0;
 8014084:	2300      	movs	r3, #0
 8014086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Calculate the next logical sector.  */
                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801408c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8014090:	2200      	movs	r2, #0
 8014092:	643b      	str	r3, [r7, #64]	; 0x40
 8014094:	647a      	str	r2, [r7, #68]	; 0x44
                    (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 8014096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801409a:	2200      	movs	r2, #0
 801409c:	63bb      	str	r3, [r7, #56]	; 0x38
 801409e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80140a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80140a4:	460b      	mov	r3, r1
 80140a6:	3b02      	subs	r3, #2
 80140a8:	633b      	str	r3, [r7, #48]	; 0x30
 80140aa:	4613      	mov	r3, r2
 80140ac:	f143 33ff 	adc.w	r3, r3, #4294967295
 80140b0:	637b      	str	r3, [r7, #52]	; 0x34
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80140b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140b4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80140b8:	2200      	movs	r2, #0
 80140ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80140bc:	62fa      	str	r2, [r7, #44]	; 0x2c
                    (((ULONG64)cluster - FX_FAT_ENTRY_START) *
 80140be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80140c2:	462b      	mov	r3, r5
 80140c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80140c8:	4642      	mov	r2, r8
 80140ca:	fb02 f203 	mul.w	r2, r2, r3
 80140ce:	464b      	mov	r3, r9
 80140d0:	4621      	mov	r1, r4
 80140d2:	fb01 f303 	mul.w	r3, r1, r3
 80140d6:	4413      	add	r3, r2
 80140d8:	4622      	mov	r2, r4
 80140da:	4641      	mov	r1, r8
 80140dc:	fba2 1201 	umull	r1, r2, r2, r1
 80140e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80140e2:	460a      	mov	r2, r1
 80140e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80140e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80140e8:	4413      	add	r3, r2
 80140ea:	64fb      	str	r3, [r7, #76]	; 0x4c
                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80140ec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80140f0:	4623      	mov	r3, r4
 80140f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80140f6:	4602      	mov	r2, r0
 80140f8:	189b      	adds	r3, r3, r2
 80140fa:	603b      	str	r3, [r7, #0]
 80140fc:	462b      	mov	r3, r5
 80140fe:	460a      	mov	r2, r1
 8014100:	4153      	adcs	r3, r2
 8014102:	607b      	str	r3, [r7, #4]
 8014104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014108:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            }

            /* Read the sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801410c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801410e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8014110:	2303      	movs	r3, #3
 8014112:	9302      	str	r3, [sp, #8]
 8014114:	2301      	movs	r3, #1
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	9200      	str	r2, [sp, #0]
 801411a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801411e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8014120:	f007 fe8a 	bl	801be38 <_fx_utility_logical_sector_read>
 8014124:	66b8      	str	r0, [r7, #104]	; 0x68

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8014126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014128:	2b00      	cmp	r3, #0
 801412a:	d001      	beq.n	8014130 <_fx_directory_exFAT_unicode_entry_write+0x4f0>
            {

                /* Return the error status.  */
                return(status);
 801412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801412e:	e2e9      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
            }

            /* Setup logical sector.  */
            sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8014130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            /* Setup a fresh byte offset.  */
            byte_offset = 0;
 8014138:	2300      	movs	r3, #0
 801413a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            /* Setup a new pointer into the buffer.  */
            work_ptr = sector_base_ptr;
 801413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
        }

        /* Check if we are processing the first secondary entry.  */
        if (i == 0)
 8014146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801414a:	2b00      	cmp	r3, #0
 801414c:	f040 80c9 	bne.w	80142e2 <_fx_directory_exFAT_unicode_entry_write+0x6a2>
        {

            /* First sub entry is stream entry.  */

            /* Check if we need to perform full entry update.  */
            if (update_level == UPDATE_FULL)
 8014150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014154:	2b04      	cmp	r3, #4
 8014156:	d104      	bne.n	8014162 <_fx_directory_exFAT_unicode_entry_write+0x522>
            {

                /* Set the EntryType field to stream extension type.  */
                *work_ptr = FX_EXFAT_DIR_ENTRY_TYPE_STREAM_EXTENSION;
 8014158:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801415c:	23c0      	movs	r3, #192	; 0xc0
 801415e:	7013      	strb	r3, [r2, #0]
 8014160:	e00c      	b.n	801417c <_fx_directory_exFAT_unicode_entry_write+0x53c>
            }
            else if (update_level == UPDATE_DELETE)
 8014162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014166:	2b00      	cmp	r3, #0
 8014168:	d108      	bne.n	801417c <_fx_directory_exFAT_unicode_entry_write+0x53c>
            {

                /* Clear InUse bit.  */
                *work_ptr &= 0x7f;
 801416a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014174:	b2db      	uxtb	r3, r3
 8014176:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801417a:	7013      	strb	r3, [r2, #0]
            }

            /* Advance the pointer to the next field.  */
            work_ptr++;
 801417c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014180:	3301      	adds	r3, #1
 8014182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Update GeneralSecondaryFlags field.  */
            if (update_level >= UPDATE_STREAM)
 8014186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801418a:	2b01      	cmp	r3, #1
 801418c:	d913      	bls.n	80141b6 <_fx_directory_exFAT_unicode_entry_write+0x576>
            {

                /* Check if FAT is used and the entry has associated cluster.  */
                if ((entry_ptr -> fx_dir_entry_dont_use_fat & 1) && (entry_ptr -> fx_dir_entry_cluster != 0))
 801418e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014190:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8014194:	f003 0301 	and.w	r3, r3, #1
 8014198:	2b00      	cmp	r3, #0
 801419a:	d008      	beq.n	80141ae <_fx_directory_exFAT_unicode_entry_write+0x56e>
 801419c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d004      	beq.n	80141ae <_fx_directory_exFAT_unicode_entry_write+0x56e>
                {

                    /* Set the flags to don't use FAT.  */
                    *work_ptr = 3;
 80141a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80141a8:	2303      	movs	r3, #3
 80141aa:	7013      	strb	r3, [r2, #0]
 80141ac:	e003      	b.n	80141b6 <_fx_directory_exFAT_unicode_entry_write+0x576>
                }
                else
                {

                    /* FAT is used.  */
                    *work_ptr = 1;
 80141ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80141b2:	2301      	movs	r3, #1
 80141b4:	7013      	strb	r3, [r2, #0]
                }
            }

            /* Advance the pointer to the next field.  */
            work_ptr++;
 80141b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141ba:	3301      	adds	r3, #1
 80141bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to perform full entry update.  */
            if (update_level == UPDATE_FULL)
 80141c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141c4:	2b04      	cmp	r3, #4
 80141c6:	d103      	bne.n	80141d0 <_fx_directory_exFAT_unicode_entry_write+0x590>
            {

                /* Clear Reserved1 field.  */
                *work_ptr = 0;
 80141c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80141cc:	2300      	movs	r3, #0
 80141ce:	7013      	strb	r3, [r2, #0]
            }

            /* Advance the pointer to the next field.  */
            work_ptr++;
 80141d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141d4:	3301      	adds	r3, #1
 80141d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to update NameLength field.  */
            if (update_level >= UPDATE_NAME)
 80141da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141de:	2b02      	cmp	r3, #2
 80141e0:	d904      	bls.n	80141ec <_fx_directory_exFAT_unicode_entry_write+0x5ac>
            {

                /* Update NameLength field.  */
                *work_ptr = (UCHAR)name_length;
 80141e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80141ea:	7013      	strb	r3, [r2, #0]
            }

            /* Advance the pointer to the next field.  */
            work_ptr++;
 80141ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141f0:	3301      	adds	r3, #1
 80141f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to update NameHash field.  */
            if (update_level >= UPDATE_NAME)
 80141f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141fa:	2b02      	cmp	r3, #2
 80141fc:	d918      	bls.n	8014230 <_fx_directory_exFAT_unicode_entry_write+0x5f0>
            {
                /* Check if the supplied file name is in unicode format.  */
                if (use_unicode)
 80141fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00a      	beq.n	801421a <_fx_directory_exFAT_unicode_entry_write+0x5da>
                {

                    /* Update NameHash field.  */
                    _fx_utility_16_unsigned_write(work_ptr, _fx_utility_exFAT_unicode_name_hash_get((CHAR *)unicode_name, name_length));
 8014204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014206:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014208:	f007 f8b0 	bl	801b36c <_fx_utility_exFAT_unicode_name_hash_get>
 801420c:	4603      	mov	r3, r0
 801420e:	4619      	mov	r1, r3
 8014210:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014214:	f005 f9e7 	bl	80195e6 <_fx_utility_16_unsigned_write>
 8014218:	e00a      	b.n	8014230 <_fx_directory_exFAT_unicode_entry_write+0x5f0>
                }
                else
                {

                    /* Update NameHash field.  */
                    _fx_utility_16_unsigned_write(work_ptr, _fx_utility_exFAT_name_hash_get(entry_ptr -> fx_dir_entry_name));
 801421a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4618      	mov	r0, r3
 8014220:	f006 ff99 	bl	801b156 <_fx_utility_exFAT_name_hash_get>
 8014224:	4603      	mov	r3, r0
 8014226:	4619      	mov	r1, r3
 8014228:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801422c:	f005 f9db 	bl	80195e6 <_fx_utility_16_unsigned_write>
                }
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 2;
 8014230:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014234:	3302      	adds	r3, #2
 8014236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to perform full entry update.  */
            if (update_level == UPDATE_FULL)
 801423a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801423e:	2b04      	cmp	r3, #4
 8014240:	d104      	bne.n	801424c <_fx_directory_exFAT_unicode_entry_write+0x60c>
            {

                /* Clear Reserved2 field.  */
                _fx_utility_16_unsigned_write(work_ptr, 0);
 8014242:	2100      	movs	r1, #0
 8014244:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014248:	f005 f9cd 	bl	80195e6 <_fx_utility_16_unsigned_write>
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 2;
 801424c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014250:	3302      	adds	r3, #2
 8014252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to update ValidDataLength field.  */
            if (update_level >= UPDATE_STREAM)
 8014256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801425a:	2b01      	cmp	r3, #1
 801425c:	d906      	bls.n	801426c <_fx_directory_exFAT_unicode_entry_write+0x62c>
            {

                /* Update ValidDataLength field.  */
                _fx_utility_64_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_file_size);
 801425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014260:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014264:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014268:	f005 fa3f 	bl	80196ea <_fx_utility_64_unsigned_write>
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 8;
 801426c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014270:	3308      	adds	r3, #8
 8014272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to perform full entry update.  */
            if (update_level == UPDATE_FULL)
 8014276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801427a:	2b04      	cmp	r3, #4
 801427c:	d104      	bne.n	8014288 <_fx_directory_exFAT_unicode_entry_write+0x648>
            {

                /* Clear Reserved3 field.  */
                _fx_utility_32_unsigned_write(work_ptr, 0);
 801427e:	2100      	movs	r1, #0
 8014280:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014284:	f005 f9e1 	bl	801964a <_fx_utility_32_unsigned_write>
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 4;
 8014288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801428c:	3304      	adds	r3, #4
 801428e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check if we need to update FirstCluster field.  */
            if (update_level >= UPDATE_STREAM)
 8014292:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014296:	2b01      	cmp	r3, #1
 8014298:	d906      	bls.n	80142a8 <_fx_directory_exFAT_unicode_entry_write+0x668>
            {

                /* Update FirstCluster field.  */
                _fx_utility_32_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_cluster);
 801429a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801429e:	4619      	mov	r1, r3
 80142a0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80142a4:	f005 f9d1 	bl	801964a <_fx_utility_32_unsigned_write>
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 4;
 80142a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142ac:	3304      	adds	r3, #4
 80142ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Update DataLength fields.  */
            if (update_level >= UPDATE_STREAM)
 80142b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d90d      	bls.n	80142d6 <_fx_directory_exFAT_unicode_entry_write+0x696>
            {

                /* Update DataLength fields.  */
                _fx_utility_64_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_available_file_size);
 80142ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80142bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80142c0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80142c4:	f005 fa11 	bl	80196ea <_fx_utility_64_unsigned_write>
                _fx_utility_64_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_file_size);
 80142c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80142ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80142ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80142d2:	f005 fa0a 	bl	80196ea <_fx_utility_64_unsigned_write>
            }

            /* Advance the pointer to the next field.  */
            work_ptr += 8;
 80142d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142da:	3308      	adds	r3, #8
 80142dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80142e0:	e0b1      	b.n	8014446 <_fx_directory_exFAT_unicode_entry_write+0x806>
        }
        else
        {

            /* Check if we are requested to delete the entries.  */
            if (update_level == UPDATE_DELETE)
 80142e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d123      	bne.n	8014332 <_fx_directory_exFAT_unicode_entry_write+0x6f2>
            {

                /* Check the directory entry type.  */
                if ((*work_ptr != FX_EXFAT_DIR_ENTRY_TYPE_FILE_NAME) && (*work_ptr != FX_EXFAT_DIR_ENTRY_TYPE_STREAM_EXTENSION))
 80142ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	2bc1      	cmp	r3, #193	; 0xc1
 80142f2:	d00f      	beq.n	8014314 <_fx_directory_exFAT_unicode_entry_write+0x6d4>
 80142f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2bc0      	cmp	r3, #192	; 0xc0
 80142fc:	d00a      	beq.n	8014314 <_fx_directory_exFAT_unicode_entry_write+0x6d4>
                {

                    /* Unknown secondary, we should free used clusters if any.  */
                    status = _fx_utility_exFAT_cluster_free(media_ptr, work_ptr);
 80142fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014302:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8014304:	f006 fc87 	bl	801ac16 <_fx_utility_exFAT_cluster_free>
 8014308:	66b8      	str	r0, [r7, #104]	; 0x68
                    if (status != FX_SUCCESS)
 801430a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801430c:	2b00      	cmp	r3, #0
 801430e:	d001      	beq.n	8014314 <_fx_directory_exFAT_unicode_entry_write+0x6d4>
                    {

                        /* Return completion status.  */
                        return(status);
 8014310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014312:	e1f7      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
                    }
                }

                /* Clear InUse bit.  */
                *work_ptr &= 0x7f;
 8014314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801431e:	b2db      	uxtb	r3, r3
 8014320:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014324:	7013      	strb	r3, [r2, #0]
                work_ptr += FX_DIR_ENTRY_SIZE;
 8014326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801432a:	3320      	adds	r3, #32
 801432c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014330:	e089      	b.n	8014446 <_fx_directory_exFAT_unicode_entry_write+0x806>
            }
            /* Check if we need to update the file name.  */
            else if ((update_level == UPDATE_FULL) ||
 8014332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014336:	2b04      	cmp	r3, #4
 8014338:	d008      	beq.n	801434c <_fx_directory_exFAT_unicode_entry_write+0x70c>
 801433a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801433e:	2b03      	cmp	r3, #3
 8014340:	d17c      	bne.n	801443c <_fx_directory_exFAT_unicode_entry_write+0x7fc>
                     ((update_level == UPDATE_NAME) && (*work_ptr == FX_EXFAT_DIR_ENTRY_TYPE_FILE_NAME)))
 8014342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	2bc1      	cmp	r3, #193	; 0xc1
 801434a:	d177      	bne.n	801443c <_fx_directory_exFAT_unicode_entry_write+0x7fc>
            {

                /* Build Name entry.  */

                /* Update EntryType field.  */
                *work_ptr = FX_EXFAT_DIR_ENTRY_TYPE_FILE_NAME;
 801434c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014350:	23c1      	movs	r3, #193	; 0xc1
 8014352:	7013      	strb	r3, [r2, #0]
                work_ptr++;
 8014354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014358:	3301      	adds	r3, #1
 801435a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                /* Update GeneralSecondaryFlags field.  */
                *work_ptr = 0;
 801435e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014362:	2300      	movs	r3, #0
 8014364:	7013      	strb	r3, [r2, #0]
                work_ptr++;
 8014366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801436a:	3301      	adds	r3, #1
 801436c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                /* Update FileName field.  */

                /* One name entry can hold up to 15 characters. Set how many characters to copy.  */
                if (name_length > 15)
 8014370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014372:	2b0f      	cmp	r3, #15
 8014374:	d902      	bls.n	801437c <_fx_directory_exFAT_unicode_entry_write+0x73c>
                {
                    copy_size = 15;
 8014376:	230f      	movs	r3, #15
 8014378:	677b      	str	r3, [r7, #116]	; 0x74
 801437a:	e001      	b.n	8014380 <_fx_directory_exFAT_unicode_entry_write+0x740>
                }
                else
                {
                    copy_size = name_length;
 801437c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801437e:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* Check if the supplied file name is in unicode format.  */
                if (use_unicode)
 8014380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d01f      	beq.n	80143c6 <_fx_directory_exFAT_unicode_entry_write+0x786>
                {

                    /* Loop to copy the unicode file name.  */
                    for (j = 0; j < copy_size; ++j)
 8014386:	2300      	movs	r3, #0
 8014388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801438c:	e015      	b.n	80143ba <_fx_directory_exFAT_unicode_entry_write+0x77a>
                    {

                        /* Copy unicode file name to the file name entry.  */
                        _fx_utility_16_unsigned_write(work_ptr, (UINT)unicode_name[name_pos++]);
 801438e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014390:	1c53      	adds	r3, r2, #1
 8014392:	67bb      	str	r3, [r7, #120]	; 0x78
 8014394:	0052      	lsls	r2, r2, #1
 8014396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014398:	4413      	add	r3, r2
 801439a:	881b      	ldrh	r3, [r3, #0]
 801439c:	4619      	mov	r1, r3
 801439e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80143a2:	f005 f920 	bl	80195e6 <_fx_utility_16_unsigned_write>
                        work_ptr += 2;
 80143a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80143aa:	3302      	adds	r3, #2
 80143ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    for (j = 0; j < copy_size; ++j)
 80143b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80143b4:	3301      	adds	r3, #1
 80143b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80143ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80143be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d3e4      	bcc.n	801438e <_fx_directory_exFAT_unicode_entry_write+0x74e>
 80143c4:	e01e      	b.n	8014404 <_fx_directory_exFAT_unicode_entry_write+0x7c4>
                }
                else
                {

                    /* Loop to copy non-unicode file name.  */
                    for (j = 0; j < copy_size; ++j)
 80143c6:	2300      	movs	r3, #0
 80143c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80143cc:	e015      	b.n	80143fa <_fx_directory_exFAT_unicode_entry_write+0x7ba>
                    {

                        /* Copy and convert non-unicode file name.  */
                        _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_name[name_pos++]);
 80143ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80143d0:	6819      	ldr	r1, [r3, #0]
 80143d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80143d4:	1c53      	adds	r3, r2, #1
 80143d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80143d8:	188b      	adds	r3, r1, r2
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	4619      	mov	r1, r3
 80143de:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80143e2:	f005 f900 	bl	80195e6 <_fx_utility_16_unsigned_write>
                        work_ptr += 2;
 80143e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80143ea:	3302      	adds	r3, #2
 80143ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    for (j = 0; j < copy_size; ++j)
 80143f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80143f4:	3301      	adds	r3, #1
 80143f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80143fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80143fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014400:	429a      	cmp	r2, r3
 8014402:	d3e4      	bcc.n	80143ce <_fx_directory_exFAT_unicode_entry_write+0x78e>
                    }
                }

                /* Loop to clear remaining bytes.  */
                for (j = copy_size; j < 15; ++j)
 8014404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014406:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801440a:	e00e      	b.n	801442a <_fx_directory_exFAT_unicode_entry_write+0x7ea>
                {

                    /* Clear the remaining bytes.  */
                    _fx_utility_16_unsigned_write(work_ptr, 0);
 801440c:	2100      	movs	r1, #0
 801440e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014412:	f005 f8e8 	bl	80195e6 <_fx_utility_16_unsigned_write>
                    work_ptr += 2;
 8014416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801441a:	3302      	adds	r3, #2
 801441c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                for (j = copy_size; j < 15; ++j)
 8014420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014424:	3301      	adds	r3, #1
 8014426:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801442a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801442e:	2b0e      	cmp	r3, #14
 8014430:	d9ec      	bls.n	801440c <_fx_directory_exFAT_unicode_entry_write+0x7cc>
                }

                /* Modify the name_length to indicate the remaining length.  */
                name_length -= copy_size;
 8014432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014436:	1ad3      	subs	r3, r2, r3
 8014438:	67fb      	str	r3, [r7, #124]	; 0x7c
 801443a:	e004      	b.n	8014446 <_fx_directory_exFAT_unicode_entry_write+0x806>
            }
            else
            {

                /* The entry does need to be updated, move to next entry.  */
                work_ptr += FX_DIR_ENTRY_SIZE;
 801443c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014440:	3320      	adds	r3, #32
 8014442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            }
        }

        /* Set pointer back for checksum calculation.  */
        work_ptr -= FX_DIR_ENTRY_SIZE;
 8014446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801444a:	3b20      	subs	r3, #32
 801444c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        /* Loop to calculate the checksum.  */
        for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8014450:	2300      	movs	r3, #0
 8014452:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014456:	e01a      	b.n	801448e <_fx_directory_exFAT_unicode_entry_write+0x84e>
        {

            /* Calculate the checksum.  */
            /* Right rotate the checksum by one bit position and add the data.  */
            checksum = (USHORT)(((checksum >> 1) | (checksum << 15)) + work_ptr[j]);
 8014458:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 801445c:	085b      	lsrs	r3, r3, #1
 801445e:	b29b      	uxth	r3, r3
 8014460:	b21a      	sxth	r2, r3
 8014462:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8014466:	03db      	lsls	r3, r3, #15
 8014468:	b21b      	sxth	r3, r3
 801446a:	4313      	orrs	r3, r2
 801446c:	b21b      	sxth	r3, r3
 801446e:	b299      	uxth	r1, r3
 8014470:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014478:	4413      	add	r3, r2
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	b29b      	uxth	r3, r3
 801447e:	440b      	add	r3, r1
 8014480:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        for (j = 0; j < FX_DIR_ENTRY_SIZE; ++j)
 8014484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014488:	3301      	adds	r3, #1
 801448a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801448e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014492:	2b1f      	cmp	r3, #31
 8014494:	d9e0      	bls.n	8014458 <_fx_directory_exFAT_unicode_entry_write+0x818>
    for (i = 0; i < total_entries; ++i)
 8014496:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801449a:	3301      	adds	r3, #1
 801449c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80144a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80144a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144a8:	429a      	cmp	r2, r3
 80144aa:	f4ff ad82 	bcc.w	8013fb2 <_fx_directory_exFAT_unicode_entry_write+0x372>
    /* Update changed_size. */
    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Go back to file entry.  */
    if (byte_offset < total_entries * FX_DIR_ENTRY_SIZE)
 80144ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144b2:	015b      	lsls	r3, r3, #5
 80144b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d265      	bcs.n	8014588 <_fx_directory_exFAT_unicode_entry_write+0x948>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Write current logical sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, logical_sector,
 80144bc:	2303      	movs	r3, #3
 80144be:	9302      	str	r3, [sp, #8]
 80144c0:	2301      	movs	r3, #1
 80144c2:	9301      	str	r3, [sp, #4]
 80144c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80144ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80144d0:	f007 ff46 	bl	801c360 <_fx_utility_logical_sector_write>
 80144d4:	66b8      	str	r0, [r7, #104]	; 0x68
                                                       sector_base_ptr, ((ULONG) 1), FX_DIRECTORY_SECTOR);
        }
        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80144d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d001      	beq.n	80144e0 <_fx_directory_exFAT_unicode_entry_write+0x8a0>
        {

            /* Return the error status.  */
            return(status);
 80144dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144de:	e111      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
        }

        /* Pickup the byte offset of the entry.  */
        byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 80144e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* Pickup the logical sector of the entry.  */
        logical_sector = entry_ptr -> fx_dir_entry_log_sector;
 80144e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80144ee:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (ULONG)((logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster)) + FX_FAT_ENTRY_START;
 80144f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144f4:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80144f8:	2200      	movs	r2, #0
 80144fa:	623b      	str	r3, [r7, #32]
 80144fc:	627a      	str	r2, [r7, #36]	; 0x24
 80144fe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8014502:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014506:	4621      	mov	r1, r4
 8014508:	1a51      	subs	r1, r2, r1
 801450a:	61b9      	str	r1, [r7, #24]
 801450c:	4629      	mov	r1, r5
 801450e:	eb63 0301 	sbc.w	r3, r3, r1
 8014512:	61fb      	str	r3, [r7, #28]
 8014514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014516:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801451a:	2200      	movs	r2, #0
 801451c:	613b      	str	r3, [r7, #16]
 801451e:	617a      	str	r2, [r7, #20]
 8014520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014528:	f7ec fc02 	bl	8000d30 <__aeabi_uldivmod>
 801452c:	4602      	mov	r2, r0
 801452e:	460b      	mov	r3, r1
 8014530:	4613      	mov	r3, r2
 8014532:	3302      	adds	r3, #2
 8014534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* Calculate the relative cluster.  */
        relative_sector =  (ULONG)(logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8014538:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801453c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801453e:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
 8014542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014546:	3b02      	subs	r3, #2
                                                      (((ULONG64)cluster - FX_FAT_ENTRY_START) *
                                                       ((ULONG)media_ptr -> fx_media_sectors_per_cluster))));
 8014548:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801454a:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
        relative_sector =  (ULONG)(logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 801454e:	fb00 f303 	mul.w	r3, r0, r3
 8014552:	440b      	add	r3, r1
 8014554:	1ad3      	subs	r3, r2, r3
 8014556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        /* Read the sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801455a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801455c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801455e:	2203      	movs	r2, #3
 8014560:	9202      	str	r2, [sp, #8]
 8014562:	2201      	movs	r2, #1
 8014564:	9201      	str	r2, [sp, #4]
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801456c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801456e:	f007 fc63 	bl	801be38 <_fx_utility_logical_sector_read>
 8014572:	66b8      	str	r0, [r7, #104]	; 0x68

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8014574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014576:	2b00      	cmp	r3, #0
 8014578:	d001      	beq.n	801457e <_fx_directory_exFAT_unicode_entry_write+0x93e>
        {

            /* Return the error status.  */
            return(status);
 801457a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801457c:	e0c2      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
        }

        /* Setup logical sector.  */
        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 801457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014580:	689b      	ldr	r3, [r3, #8]
 8014582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014586:	e007      	b.n	8014598 <_fx_directory_exFAT_unicode_entry_write+0x958>
    }
    else
    {

        /* The directory entries are not crossing sector boundary, just adjust the pointer to go back to the first entry.  */
        byte_offset -= total_entries * FX_DIR_ENTRY_SIZE;
 8014588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801458c:	015b      	lsls	r3, r3, #5
 801458e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014592:	1ad3      	subs	r3, r2, r3
 8014594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Setup work pointer to the directory entry.  */
    work_ptr = sector_base_ptr + byte_offset;
 8014598:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801459c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80145a0:	4413      	add	r3, r2
 80145a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* Store SetChecksum field.  */
    work_ptr += 2;
 80145a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80145aa:	3302      	adds	r3, #2
 80145ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    _fx_utility_16_unsigned_write(work_ptr, checksum);
 80145b0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80145b4:	4619      	mov	r1, r3
 80145b6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80145ba:	f005 f814 	bl	80195e6 <_fx_utility_16_unsigned_write>
    else
#endif /* FX_ENABLE_FAULT_TOLERANT */
    {

        /* Write current logical sector out.  */
        status =  _fx_utility_logical_sector_write(media_ptr, logical_sector,
 80145be:	2303      	movs	r3, #3
 80145c0:	9302      	str	r3, [sp, #8]
 80145c2:	2301      	movs	r3, #1
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80145d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80145d2:	f007 fec5 	bl	801c360 <_fx_utility_logical_sector_write>
 80145d6:	66b8      	str	r0, [r7, #104]	; 0x68
                                                   sector_base_ptr, ((ULONG) 1), FX_DIRECTORY_SECTOR);
    }

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 80145d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d001      	beq.n	80145e2 <_fx_directory_exFAT_unicode_entry_write+0x9a2>
    {

        /* Return the error status.  */
        return(status);
 80145de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145e0:	e090      	b.n	8014704 <_fx_directory_exFAT_unicode_entry_write+0xac4>
    }

    /* Check if there is a default path.  */
    if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 80145e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145e4:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d02d      	beq.n	801464a <_fx_directory_exFAT_unicode_entry_write+0xa0a>
    {

        /* Check default path directory was updated.  */
        if ((media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_log_sector ==
 80145ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145f0:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80145f4:	e9d3 0100 	ldrd	r0, r1, [r3]
             entry_ptr -> fx_dir_entry_log_sector) &&
 80145f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        if ((media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_log_sector ==
 80145fe:	4299      	cmp	r1, r3
 8014600:	bf08      	it	eq
 8014602:	4290      	cmpeq	r0, r2
 8014604:	d121      	bne.n	801464a <_fx_directory_exFAT_unicode_entry_write+0xa0a>
            (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_byte_offset ==
 8014606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014608:	f8d3 2958 	ldr.w	r2, [r3, #2392]	; 0x958
             entry_ptr -> fx_dir_entry_byte_offset))
 801460c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
             entry_ptr -> fx_dir_entry_log_sector) &&
 8014610:	429a      	cmp	r2, r3
 8014612:	d11a      	bne.n	801464a <_fx_directory_exFAT_unicode_entry_write+0xa0a>
        {

            /* Update default path.  */
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_file_size =
                entry_ptr -> fx_dir_entry_file_size;
 8014614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014616:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_file_size =
 801461a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801461c:	f501 6115 	add.w	r1, r1, #2384	; 0x950
 8014620:	e941 2302 	strd	r2, r3, [r1, #-8]
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_available_file_size =
                entry_ptr -> fx_dir_entry_available_file_size;
 8014624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014626:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_available_file_size =
 801462a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801462c:	f501 6119 	add.w	r1, r1, #2448	; 0x990
 8014630:	e941 2302 	strd	r2, r3, [r1, #-8]
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_dont_use_fat =
                entry_ptr -> fx_dir_entry_dont_use_fat;
 8014634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014636:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_dont_use_fat =
 801463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801463c:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_cluster =
                entry_ptr -> fx_dir_entry_cluster;
 8014640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_cluster =
 8014644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014646:	f8c3 2944 	str.w	r2, [r3, #2372]	; 0x944

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 801464a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801464c:	f893 3810 	ldrb.w	r3, [r3, #2064]	; 0x810
 8014650:	2b00      	cmp	r3, #0
 8014652:	d056      	beq.n	8014702 <_fx_directory_exFAT_unicode_entry_write+0xac2>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8014654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014656:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 801465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801465c:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8014660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014664:	4299      	cmp	r1, r3
 8014666:	bf08      	it	eq
 8014668:	4290      	cmpeq	r0, r2
 801466a:	d14a      	bne.n	8014702 <_fx_directory_exFAT_unicode_entry_write+0xac2>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 801466c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801466e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014672:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8014676:	429a      	cmp	r2, r3
 8014678:	d143      	bne.n	8014702 <_fx_directory_exFAT_unicode_entry_write+0xac2>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 801467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801467c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801467e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014680:	f8c3 26bc 	str.w	r2, [r3, #1724]	; 0x6bc
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8014684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014686:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801468a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801468c:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8014690:	e9c1 2300 	strd	r2, r3, [r1]
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8014694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014696:	7f1a      	ldrb	r2, [r3, #28]
 8014698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801469a:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 801469e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146a4:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 80146a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80146ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146ae:	f8c3 26b8 	str.w	r2, [r3, #1720]	; 0x6b8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 80146b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146b4:	7f5a      	ldrb	r2, [r3, #29]
 80146b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146b8:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 80146bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146be:	7f9a      	ldrb	r2, [r3, #30]
 80146c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146c2:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 80146c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146c8:	6a1a      	ldr	r2, [r3, #32]
 80146ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146cc:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 80146d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146d6:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac

            media_ptr -> fx_media_last_found_entry.fx_dir_entry_dont_use_fat =    entry_ptr -> fx_dir_entry_dont_use_fat;
 80146da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146dc:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 80146e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146e2:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_type =            entry_ptr -> fx_dir_entry_type;
 80146e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146e8:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 80146ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146ee:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_available_file_size = entry_ptr -> fx_dir_entry_available_file_size;
 80146f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146f4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80146f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80146fa:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80146fe:	e9c1 2300 	strd	r2, r3, [r1]
        }
    }
#endif

    /* Return success to the caller.  */
    return(status);
 8014702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8014704:	4618      	mov	r0, r3
 8014706:	37a8      	adds	r7, #168	; 0xa8
 8014708:	46bd      	mov	sp, r7
 801470a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801470e:	bf00      	nop

08014710 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8014710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014714:	b0a4      	sub	sp, #144	; 0x90
 8014716:	af04      	add	r7, sp, #16
 8014718:	6278      	str	r0, [r7, #36]	; 0x24
 801471a:	6239      	str	r1, [r7, #32]
 801471c:	61fa      	str	r2, [r7, #28]
FX_INT_SAVE_AREA


#ifdef FX_ENABLE_EXFAT
    /* Check if media format is exFAT.  */
    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 801471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014720:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8014724:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8014728:	2b07      	cmp	r3, #7
 801472a:	d106      	bne.n	801473a <_fx_directory_free_search+0x2a>
    {

        /* Call exFAT specific function.  */
        return(_fx_directory_exFAT_free_search(media_ptr, directory_ptr, entry_ptr));
 801472c:	69fa      	ldr	r2, [r7, #28]
 801472e:	6a39      	ldr	r1, [r7, #32]
 8014730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014732:	f7fe ffa3 	bl	801367c <_fx_directory_exFAT_free_search>
 8014736:	4603      	mov	r3, r0
 8014738:	e3e9      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8014740:	1c5a      	adds	r2, r3, #1
 8014742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014744:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 8014748:	2300      	movs	r3, #0
 801474a:	66bb      	str	r3, [r7, #104]	; 0x68
 801474c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801474e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	2200      	movs	r2, #0
 8014754:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	2b2e      	cmp	r3, #46	; 0x2e
 801475e:	d107      	bne.n	8014770 <_fx_directory_free_search+0x60>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	3301      	adds	r3, #1
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	2b2e      	cmp	r3, #46	; 0x2e
 801476a:	d101      	bne.n	8014770 <_fx_directory_free_search+0x60>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 801476c:	230c      	movs	r3, #12
 801476e:	e3ce      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8014770:	2300      	movs	r3, #0
 8014772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014774:	2300      	movs	r3, #0
 8014776:	67bb      	str	r3, [r7, #120]	; 0x78
 8014778:	e115      	b.n	80149a6 <_fx_directory_free_search+0x296>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 801477a:	69fb      	ldr	r3, [r7, #28]
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014780:	4413      	add	r3, r2
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	2b40      	cmp	r3, #64	; 0x40
 8014786:	d907      	bls.n	8014798 <_fx_directory_free_search+0x88>
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801478e:	4413      	add	r3, r2
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b5a      	cmp	r3, #90	; 0x5a
 8014794:	f240 80fd 	bls.w	8014992 <_fx_directory_free_search+0x282>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801479e:	4413      	add	r3, r2
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b2f      	cmp	r3, #47	; 0x2f
 80147a4:	d907      	bls.n	80147b6 <_fx_directory_free_search+0xa6>
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147ac:	4413      	add	r3, r2
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	2b39      	cmp	r3, #57	; 0x39
 80147b2:	f240 80f0 	bls.w	8014996 <_fx_directory_free_search+0x286>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147bc:	4413      	add	r3, r2
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b60      	cmp	r3, #96	; 0x60
 80147c2:	d90a      	bls.n	80147da <_fx_directory_free_search+0xca>
 80147c4:	69fb      	ldr	r3, [r7, #28]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147ca:	4413      	add	r3, r2
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	2b7a      	cmp	r3, #122	; 0x7a
 80147d0:	d803      	bhi.n	80147da <_fx_directory_free_search+0xca>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	2201      	movs	r2, #1
 80147d6:	615a      	str	r2, [r3, #20]
 80147d8:	e0e2      	b.n	80149a0 <_fx_directory_free_search+0x290>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147e0:	4413      	add	r3, r2
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b20      	cmp	r3, #32
 80147e6:	d103      	bne.n	80147f0 <_fx_directory_free_search+0xe0>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	2201      	movs	r2, #1
 80147ec:	615a      	str	r2, [r3, #20]
 80147ee:	e0d7      	b.n	80149a0 <_fx_directory_free_search+0x290>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147f6:	4413      	add	r3, r2
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	2b2e      	cmp	r3, #46	; 0x2e
 80147fc:	d110      	bne.n	8014820 <_fx_directory_free_search+0x110>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 80147fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014800:	2b00      	cmp	r3, #0
 8014802:	d109      	bne.n	8014818 <_fx_directory_free_search+0x108>
            {
                /* First dot, remember where it was.  */
                j = i;
 8014804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014806:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Determine if this is a leading dot.  */
                if (i == 0)
 8014808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801480a:	2b00      	cmp	r3, #0
 801480c:	f040 80c8 	bne.w	80149a0 <_fx_directory_free_search+0x290>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	2201      	movs	r2, #1
 8014814:	615a      	str	r2, [r3, #20]
 8014816:	e0c3      	b.n	80149a0 <_fx_directory_free_search+0x290>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2201      	movs	r2, #1
 801481c:	615a      	str	r2, [r3, #20]
 801481e:	e0bf      	b.n	80149a0 <_fx_directory_free_search+0x290>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014826:	4413      	add	r3, r2
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	2be5      	cmp	r3, #229	; 0xe5
 801482c:	d103      	bne.n	8014836 <_fx_directory_free_search+0x126>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	2201      	movs	r2, #1
 8014832:	615a      	str	r2, [r3, #20]
 8014834:	e0b4      	b.n	80149a0 <_fx_directory_free_search+0x290>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801483c:	4413      	add	r3, r2
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	b25b      	sxtb	r3, r3
 8014842:	2b00      	cmp	r3, #0
 8014844:	f2c0 80a9 	blt.w	801499a <_fx_directory_free_search+0x28a>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801484e:	4413      	add	r3, r2
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	2b7e      	cmp	r3, #126	; 0x7e
 8014854:	f000 80a3 	beq.w	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801485e:	4413      	add	r3, r2
 8014860:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 8014862:	2b2d      	cmp	r3, #45	; 0x2d
 8014864:	f000 809b 	beq.w	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801486e:	4413      	add	r3, r2
 8014870:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8014872:	2b5f      	cmp	r3, #95	; 0x5f
 8014874:	f000 8093 	beq.w	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801487e:	4413      	add	r3, r2
 8014880:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8014882:	2b7d      	cmp	r3, #125	; 0x7d
 8014884:	f000 808b 	beq.w	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801488e:	4413      	add	r3, r2
 8014890:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8014892:	2b7b      	cmp	r3, #123	; 0x7b
 8014894:	f000 8083 	beq.w	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801489e:	4413      	add	r3, r2
 80148a0:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 80148a2:	2b28      	cmp	r3, #40	; 0x28
 80148a4:	d07b      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148ac:	4413      	add	r3, r2
 80148ae:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 80148b0:	2b29      	cmp	r3, #41	; 0x29
 80148b2:	d074      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148ba:	4413      	add	r3, r2
 80148bc:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 80148be:	2b60      	cmp	r3, #96	; 0x60
 80148c0:	d06d      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148c8:	4413      	add	r3, r2
 80148ca:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 80148cc:	2b27      	cmp	r3, #39	; 0x27
 80148ce:	d066      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148d6:	4413      	add	r3, r2
 80148d8:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80148da:	2b21      	cmp	r3, #33	; 0x21
 80148dc:	d05f      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148e4:	4413      	add	r3, r2
 80148e6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 80148e8:	2b23      	cmp	r3, #35	; 0x23
 80148ea:	d058      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148f2:	4413      	add	r3, r2
 80148f4:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 80148f6:	2b24      	cmp	r3, #36	; 0x24
 80148f8:	d051      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014900:	4413      	add	r3, r2
 8014902:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 8014904:	2b26      	cmp	r3, #38	; 0x26
 8014906:	d04a      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801490e:	4413      	add	r3, r2
 8014910:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 8014912:	2b40      	cmp	r3, #64	; 0x40
 8014914:	d043      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8014916:	69fb      	ldr	r3, [r7, #28]
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801491c:	4413      	add	r3, r2
 801491e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8014920:	2b5e      	cmp	r3, #94	; 0x5e
 8014922:	d03c      	beq.n	801499e <_fx_directory_free_search+0x28e>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801492a:	4413      	add	r3, r2
 801492c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 801492e:	2b25      	cmp	r3, #37	; 0x25
 8014930:	d035      	beq.n	801499e <_fx_directory_free_search+0x28e>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014938:	4413      	add	r3, r2
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	2b2b      	cmp	r3, #43	; 0x2b
 801493e:	d022      	beq.n	8014986 <_fx_directory_free_search+0x276>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014946:	4413      	add	r3, r2
 8014948:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 801494a:	2b2c      	cmp	r3, #44	; 0x2c
 801494c:	d01b      	beq.n	8014986 <_fx_directory_free_search+0x276>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014954:	4413      	add	r3, r2
 8014956:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8014958:	2b3b      	cmp	r3, #59	; 0x3b
 801495a:	d014      	beq.n	8014986 <_fx_directory_free_search+0x276>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014962:	4413      	add	r3, r2
 8014964:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 8014966:	2b3d      	cmp	r3, #61	; 0x3d
 8014968:	d00d      	beq.n	8014986 <_fx_directory_free_search+0x276>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014970:	4413      	add	r3, r2
 8014972:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 8014974:	2b5b      	cmp	r3, #91	; 0x5b
 8014976:	d006      	beq.n	8014986 <_fx_directory_free_search+0x276>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801497e:	4413      	add	r3, r2
 8014980:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8014982:	2b5d      	cmp	r3, #93	; 0x5d
 8014984:	d103      	bne.n	801498e <_fx_directory_free_search+0x27e>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	2201      	movs	r2, #1
 801498a:	615a      	str	r2, [r3, #20]
 801498c:	e008      	b.n	80149a0 <_fx_directory_free_search+0x290>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 801498e:	230c      	movs	r3, #12
 8014990:	e2bd      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
            continue;
 8014992:	bf00      	nop
 8014994:	e004      	b.n	80149a0 <_fx_directory_free_search+0x290>
            continue;
 8014996:	bf00      	nop
 8014998:	e002      	b.n	80149a0 <_fx_directory_free_search+0x290>
            continue;
 801499a:	bf00      	nop
 801499c:	e000      	b.n	80149a0 <_fx_directory_free_search+0x290>
            continue;
 801499e:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 80149a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80149a2:	3301      	adds	r3, #1
 80149a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80149ac:	4413      	add	r3, r2
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f47f aee2 	bne.w	801477a <_fx_directory_free_search+0x6a>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 80149b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d007      	beq.n	80149cc <_fx_directory_free_search+0x2bc>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 80149bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80149be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149c0:	1ad3      	subs	r3, r2, r3
 80149c2:	2b04      	cmp	r3, #4
 80149c4:	d902      	bls.n	80149cc <_fx_directory_free_search+0x2bc>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	2201      	movs	r2, #1
 80149ca:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 80149cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80149ce:	2b0c      	cmp	r3, #12
 80149d0:	d813      	bhi.n	80149fa <_fx_directory_free_search+0x2ea>
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	695b      	ldr	r3, [r3, #20]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d10f      	bne.n	80149fa <_fx_directory_free_search+0x2ea>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 80149da:	2301      	movs	r3, #1
 80149dc:	673b      	str	r3, [r7, #112]	; 0x70

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 80149de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149e0:	2b08      	cmp	r3, #8
 80149e2:	d804      	bhi.n	80149ee <_fx_directory_free_search+0x2de>
 80149e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80149e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	2b08      	cmp	r3, #8
 80149ec:	d922      	bls.n	8014a34 <_fx_directory_free_search+0x324>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	2201      	movs	r2, #1
 80149f2:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 80149f4:	2302      	movs	r3, #2
 80149f6:	673b      	str	r3, [r7, #112]	; 0x70
        if ((j >= 9) || ((i - j) >= 9))
 80149f8:	e01c      	b.n	8014a34 <_fx_directory_free_search+0x324>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 80149fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80149fc:	4b93      	ldr	r3, [pc, #588]	; (8014c4c <_fx_directory_free_search+0x53c>)
 80149fe:	fba3 2301 	umull	r2, r3, r3, r1
 8014a02:	089a      	lsrs	r2, r3, #2
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	4413      	add	r3, r2
 8014a0e:	1aca      	subs	r2, r1, r3
 8014a10:	2a00      	cmp	r2, #0
 8014a12:	d107      	bne.n	8014a24 <_fx_directory_free_search+0x314>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 8014a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014a16:	4a8d      	ldr	r2, [pc, #564]	; (8014c4c <_fx_directory_free_search+0x53c>)
 8014a18:	fba2 2303 	umull	r2, r3, r2, r3
 8014a1c:	089b      	lsrs	r3, r3, #2
 8014a1e:	3301      	adds	r3, #1
 8014a20:	673b      	str	r3, [r7, #112]	; 0x70
 8014a22:	e008      	b.n	8014a36 <_fx_directory_free_search+0x326>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8014a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014a26:	4a89      	ldr	r2, [pc, #548]	; (8014c4c <_fx_directory_free_search+0x53c>)
 8014a28:	fba2 2303 	umull	r2, r3, r2, r3
 8014a2c:	089b      	lsrs	r3, r3, #2
 8014a2e:	3302      	adds	r3, #2
 8014a30:	673b      	str	r3, [r7, #112]	; 0x70
 8014a32:	e000      	b.n	8014a36 <_fx_directory_free_search+0x326>
        if ((j >= 9) || ((i - j) >= 9))
 8014a34:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8014a36:	6a3b      	ldr	r3, [r7, #32]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d00c      	beq.n	8014a5a <_fx_directory_free_search+0x34a>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014a46:	4613      	mov	r3, r2
 8014a48:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 8014a4a:	6a3b      	ldr	r3, [r7, #32]
 8014a4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8014a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a50:	2200      	movs	r2, #0
 8014a52:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 8014a54:	2302      	movs	r3, #2
 8014a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a58:	e007      	b.n	8014a6a <_fx_directory_free_search+0x35a>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8014a60:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8014a62:	2300      	movs	r3, #0
 8014a64:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 8014a66:	2300      	movs	r3, #0
 8014a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 8014a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a6c:	647b      	str	r3, [r7, #68]	; 0x44
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 8014a6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a78:	f7fd f9ea 	bl	8011e50 <_fx_directory_entry_read>
 8014a7c:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 8014a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d001      	beq.n	8014a88 <_fx_directory_free_search+0x378>
        {
            return(status);
 8014a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a86:	e242      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	2be5      	cmp	r3, #229	; 0xe5
 8014a90:	d103      	bne.n	8014a9a <_fx_directory_free_search+0x38a>
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	791b      	ldrb	r3, [r3, #4]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d004      	beq.n	8014aa4 <_fx_directory_free_search+0x394>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d15a      	bne.n	8014b5a <_fx_directory_free_search+0x44a>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 8014aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	d91a      	bls.n	8014ae0 <_fx_directory_free_search+0x3d0>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d115      	bne.n	8014ae0 <_fx_directory_free_search+0x3d0>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	681a      	ldr	r2, [r3, #0]
 8014abe:	23e5      	movs	r3, #229	; 0xe5
 8014ac0:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	1c5a      	adds	r2, r3, #1
 8014ac8:	2300      	movs	r3, #0
 8014aca:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8014acc:	69f9      	ldr	r1, [r7, #28]
 8014ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ad0:	f7fd f9d2 	bl	8011e78 <_fx_directory_entry_write>
 8014ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if(status != FX_SUCCESS)
 8014ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d001      	beq.n	8014ae0 <_fx_directory_free_search+0x3d0>
                    {  
                        return(status);
 8014adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ade:	e216      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 8014ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d109      	bne.n	8014afc <_fx_directory_free_search+0x3ec>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	647b      	str	r3, [r7, #68]	; 0x44
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8014af2:	4613      	mov	r3, r2
 8014af4:	66fb      	str	r3, [r7, #108]	; 0x6c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014afa:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 8014afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	3301      	adds	r3, #1
 8014b04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d829      	bhi.n	8014b5e <_fx_directory_free_search+0x44e>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8014b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	461c      	mov	r4, r3
 8014b10:	4615      	mov	r5, r2
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014b1c:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	2200      	movs	r2, #0
 8014b22:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	2200      	movs	r2, #0
 8014b28:	779a      	strb	r2, [r3, #30]

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8014b2a:	4b49      	ldr	r3, [pc, #292]	; (8014c50 <_fx_directory_free_search+0x540>)
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8014b32:	4b48      	ldr	r3, [pc, #288]	; (8014c54 <_fx_directory_free_search+0x544>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8014b3a:	4b46      	ldr	r3, [pc, #280]	; (8014c54 <_fx_directory_free_search+0x544>)
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	629a      	str	r2, [r3, #40]	; 0x28

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 8014b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d103      	bne.n	8014b50 <_fx_directory_free_search+0x440>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	615a      	str	r2, [r3, #20]
 8014b4e:	e002      	b.n	8014b56 <_fx_directory_free_search+0x446>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	2201      	movs	r2, #1
 8014b54:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 8014b56:	2300      	movs	r3, #0
 8014b58:	e1d9      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 8014b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b5c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Move to the next entry.  */
        directory_index++;
 8014b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b60:	3301      	adds	r3, #1
 8014b62:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 8014b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	f200 81ca 	bhi.w	8014f02 <_fx_directory_free_search+0x7f2>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8014b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b70:	015a      	lsls	r2, r3, #5
 8014b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b76:	4413      	add	r3, r2
 8014b78:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 8014b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8014b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b82:	643b      	str	r3, [r7, #64]	; 0x40

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8014b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b8c:	4413      	add	r3, r2
 8014b8e:	1e5a      	subs	r2, r3, #1
 8014b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b92:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8014b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b9a:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 8014b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d105      	bne.n	8014bae <_fx_directory_free_search+0x49e>
 8014ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f000 81aa 	beq.w	8014f02 <_fx_directory_free_search+0x7f2>
 8014bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb0:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8014bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	f200 81a3 	bhi.w	8014f02 <_fx_directory_free_search+0x7f2>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	65bb      	str	r3, [r7, #88]	; 0x58
                total_clusters =     media_ptr -> fx_media_total_clusters;
 8014bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
                last_cluster =       0;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	657b      	str	r3, [r7, #84]	; 0x54
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8014bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bcc:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8014bd0:	667b      	str	r3, [r7, #100]	; 0x64
                clusters =           clusters_needed;
 8014bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Loop to find the needed clusters.  */
                while (clusters)
 8014bd6:	e107      	b.n	8014de8 <_fx_directory_free_search+0x6d8>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 8014bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	653b      	str	r3, [r7, #80]	; 0x50
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 8014bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d101      	bne.n	8014be8 <_fx_directory_free_search+0x4d8>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 8014be4:	230a      	movs	r3, #10
 8014be6:	e192      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8014be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014bec:	461a      	mov	r2, r3
 8014bee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bf2:	f004 fd98 	bl	8019726 <_fx_utility_FAT_entry_read>
 8014bf6:	63f8      	str	r0, [r7, #60]	; 0x3c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 8014bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d001      	beq.n	8014c02 <_fx_directory_free_search+0x4f2>
                        {

                            /* Return the bad status.  */
                            return(status);
 8014bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c00:	e185      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 8014c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c04:	3b01      	subs	r3, #1
 8014c06:	65fb      	str	r3, [r7, #92]	; 0x5c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 8014c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d111      	bne.n	8014c32 <_fx_directory_free_search+0x522>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8014c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c10:	1c5a      	adds	r2, r3, #1
 8014c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c14:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c22:	3302      	adds	r3, #2
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d317      	bcc.n	8014c58 <_fx_directory_free_search+0x548>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	2202      	movs	r2, #2
 8014c2c:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
                            }

                            /* Break this loop.  */
                            break;
 8014c30:	e012      	b.n	8014c58 <_fx_directory_free_search+0x548>
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 8014c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c34:	3301      	adds	r3, #1
 8014c36:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8014c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c3c:	3302      	adds	r3, #2
 8014c3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d3cc      	bcc.n	8014bde <_fx_directory_free_search+0x4ce>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 8014c44:	2302      	movs	r3, #2
 8014c46:	667b      	str	r3, [r7, #100]	; 0x64
                        if (!total_clusters)
 8014c48:	e7c9      	b.n	8014bde <_fx_directory_free_search+0x4ce>
 8014c4a:	bf00      	nop
 8014c4c:	4ec4ec4f 	.word	0x4ec4ec4f
 8014c50:	2000d22c 	.word	0x2000d22c
 8014c54:	2000d228 	.word	0x2000d228
                            break;
 8014c58:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8014c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c62:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 8014c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c66:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8014c6a:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8014c6e:	440b      	add	r3, r1
 8014c70:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 8014c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c74:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8014c78:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8014c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	613b      	str	r3, [r7, #16]
 8014c80:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8014c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c84:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8014c86:	2303      	movs	r3, #3
 8014c88:	9302      	str	r3, [sp, #8]
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	9301      	str	r3, [sp, #4]
 8014c8e:	9200      	str	r2, [sp, #0]
 8014c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c96:	f007 f8cf 	bl	801be38 <_fx_utility_logical_sector_read>
 8014c9a:	63f8      	str	r0, [r7, #60]	; 0x3c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 8014c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d001      	beq.n	8014ca6 <_fx_directory_free_search+0x596>
                    {

                        /* Return the error status.  */
                        return(status);
 8014ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca4:	e133      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8014ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	677b      	str	r3, [r7, #116]	; 0x74
                    i =  0;
 8014cac:	2300      	movs	r3, #0
 8014cae:	67fb      	str	r3, [r7, #124]	; 0x7c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8014cb0:	e008      	b.n	8014cc4 <_fx_directory_free_search+0x5b4>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 8014cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 8014cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cba:	3304      	adds	r3, #4
 8014cbc:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 8014cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d3f1      	bcc.n	8014cb2 <_fx_directory_free_search+0x5a2>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8014cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	60bb      	str	r3, [r7, #8]
 8014cd4:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd8:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8014cda:	2303      	movs	r3, #3
 8014cdc:	9302      	str	r3, [sp, #8]
 8014cde:	2301      	movs	r3, #1
 8014ce0:	9301      	str	r3, [sp, #4]
 8014ce2:	9200      	str	r2, [sp, #0]
 8014ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cea:	f007 fb39 	bl	801c360 <_fx_utility_logical_sector_write>
 8014cee:	63f8      	str	r0, [r7, #60]	; 0x3c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 8014cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d001      	beq.n	8014cfa <_fx_directory_free_search+0x5ea>
                    {

                        /* Return the error code.  */
                        return(status);
 8014cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf8:	e109      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 8014cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d95a      	bls.n	8014db6 <_fx_directory_free_search+0x6a6>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 8014d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d02:	3301      	adds	r3, #1
 8014d04:	2200      	movs	r2, #0
 8014d06:	603b      	str	r3, [r7, #0]
 8014d08:	607a      	str	r2, [r7, #4]
 8014d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d0c:	3b01      	subs	r3, #1
 8014d0e:	2200      	movs	r2, #0
 8014d10:	4698      	mov	r8, r3
 8014d12:	4691      	mov	r9, r2
 8014d14:	2301      	movs	r3, #1
 8014d16:	9302      	str	r3, [sp, #8]
 8014d18:	e9cd 8900 	strd	r8, r9, [sp]
 8014d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d22:	f006 fe72 	bl	801ba0a <_fx_utility_logical_sector_flush>
 8014d26:	63f8      	str	r0, [r7, #60]	; 0x3c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 8014d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <_fx_directory_free_search+0x622>
                        {

                            /* Return the error code.  */
                            return(status);
 8014d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d30:	e0ed      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 8014d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d34:	3b01      	subs	r3, #1
 8014d36:	643b      	str	r3, [r7, #64]	; 0x40
                        while (sectors)
 8014d38:	e03a      	b.n	8014db0 <_fx_directory_free_search+0x6a0>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8014d40:	1c5a      	adds	r2, r3, #1
 8014d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d44:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8014d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8014d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d52:	2290      	movs	r2, #144	; 0x90
 8014d54:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8014d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5a:	689a      	ldr	r2, [r3, #8]
 8014d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5e:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8014d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d66:	441a      	add	r2, r3
 8014d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6a:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
                            media_ptr -> fx_media_driver_sectors =          1;
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d70:	2201      	movs	r2, #1
 8014d72:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8014d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d78:	2203      	movs	r2, #3
 8014d7a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8014d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d80:	2201      	movs	r2, #1
 8014d82:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8014d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d88:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8014d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d8e:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8014d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d92:	2200      	movs	r2, #0
 8014d94:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8014d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9a:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <_fx_directory_free_search+0x69a>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 8014da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da4:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8014da8:	e0b1      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 8014daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dac:	3b01      	subs	r3, #1
 8014dae:	643b      	str	r3, [r7, #64]	; 0x40
                        while (sectors)
 8014db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d1c1      	bne.n	8014d3a <_fx_directory_free_search+0x62a>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 8014db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d101      	bne.n	8014dc0 <_fx_directory_free_search+0x6b0>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 8014dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014dbe:	65bb      	str	r3, [r7, #88]	; 0x58
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 8014dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00a      	beq.n	8014ddc <_fx_directory_free_search+0x6cc>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8014dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014dcc:	f004 fef1 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8014dd0:	63f8      	str	r0, [r7, #60]	; 0x3c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 8014dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d001      	beq.n	8014ddc <_fx_directory_free_search+0x6cc>
                        {

                            /* Return the bad status.  */
                            return(status);
 8014dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dda:	e098      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 8014ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014dde:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8014de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014de2:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8014de6:	667b      	str	r3, [r7, #100]	; 0x64
                while (clusters)
 8014de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f47f aef4 	bne.w	8014bd8 <_fx_directory_free_search+0x4c8>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8014df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8014df6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e00:	f004 fed7 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8014e04:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8014e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d001      	beq.n	8014e10 <_fx_directory_free_search+0x700>
                {

                    /* Return the bad status.  */
                    return(status);
 8014e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e0e:	e07e      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 8014e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d003      	beq.n	8014e1e <_fx_directory_free_search+0x70e>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 8014e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8014e1c:	e003      	b.n	8014e26 <_fx_directory_free_search+0x716>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014e24:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	657b      	str	r3, [r7, #84]	; 0x54
                i =  0;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8014e2e:	e021      	b.n	8014e74 <_fx_directory_free_search+0x764>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 8014e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014e34:	461a      	mov	r2, r3
 8014e36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e3a:	f004 fc74 	bl	8019726 <_fx_utility_FAT_entry_read>
 8014e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
                    i++;
 8014e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014e42:	3301      	adds	r3, #1
 8014e44:	67fb      	str	r3, [r7, #124]	; 0x7c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 8014e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d001      	beq.n	8014e50 <_fx_directory_free_search+0x740>
                    {

                        /* Return the error status.  */
                        return(status);
 8014e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e4e:	e05e      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 8014e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d908      	bls.n	8014e68 <_fx_directory_free_search+0x758>
 8014e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d004      	beq.n	8014e68 <_fx_directory_free_search+0x758>
 8014e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d901      	bls.n	8014e6c <_fx_directory_free_search+0x75c>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 8014e68:	2303      	movs	r3, #3
 8014e6a:	e050      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 8014e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e6e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 8014e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e72:	663b      	str	r3, [r7, #96]	; 0x60
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8014e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e76:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8014e7a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8014e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d3d5      	bcc.n	8014e30 <_fx_directory_free_search+0x720>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8014e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e86:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 8014e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e8c:	1ad2      	subs	r2, r2, r3
 8014e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e90:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8014e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e9c:	fb03 f202 	mul.w	r2, r3, r2
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ea4:	fb02 f303 	mul.w	r3, r2, r3
 8014ea8:	095b      	lsrs	r3, r3, #5
 8014eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014eac:	4413      	add	r3, r2
 8014eae:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	2be5      	cmp	r3, #229	; 0xe5
 8014eb8:	d103      	bne.n	8014ec2 <_fx_directory_free_search+0x7b2>
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	791b      	ldrb	r3, [r3, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <_fx_directory_free_search+0x7b6>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 8014ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ec4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8014ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ec8:	2200      	movs	r2, #0
 8014eca:	469a      	mov	sl, r3
 8014ecc:	4693      	mov	fp, r2
 8014ece:	6a3b      	ldr	r3, [r7, #32]
 8014ed0:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d006      	beq.n	8014eec <_fx_directory_free_search+0x7dc>
 8014ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d103      	bne.n	8014eec <_fx_directory_free_search+0x7dc>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ee8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 8014eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ef2:	f004 fe5e 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8014ef6:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8014ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d001      	beq.n	8014f02 <_fx_directory_free_search+0x7f2>
                {

                    /* Return the error status.  */
                    return(status);
 8014efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f00:	e005      	b.n	8014f0e <_fx_directory_free_search+0x7fe>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 8014f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f06:	429a      	cmp	r2, r3
 8014f08:	f63f adb1 	bhi.w	8014a6e <_fx_directory_free_search+0x35e>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 8014f0c:	230a      	movs	r3, #10
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3780      	adds	r7, #128	; 0x80
 8014f12:	46bd      	mov	sp, r7
 8014f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014f18 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	2200      	movs	r2, #0
 8014f26:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	2b5c      	cmp	r3, #92	; 0x5c
 8014f2e:	d003      	beq.n	8014f38 <_fx_directory_name_extract+0x20>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	2b2f      	cmp	r3, #47	; 0x2f
 8014f36:	d106      	bne.n	8014f46 <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 8014f3e:	e002      	b.n	8014f46 <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	3301      	adds	r3, #1
 8014f44:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b20      	cmp	r3, #32
 8014f4c:	d0f8      	beq.n	8014f40 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 8014f52:	e015      	b.n	8014f80 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	2b5c      	cmp	r3, #92	; 0x5c
 8014f5a:	d017      	beq.n	8014f8c <_fx_directory_name_extract+0x74>
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	2b2f      	cmp	r3, #47	; 0x2f
 8014f62:	d013      	beq.n	8014f8c <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	2bff      	cmp	r3, #255	; 0xff
 8014f68:	d00f      	beq.n	8014f8a <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	1c5a      	adds	r2, r3, #1
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	6839      	ldr	r1, [r7, #0]
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	440a      	add	r2, r1
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	781b      	ldrb	r3, [r3, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1e5      	bne.n	8014f54 <_fx_directory_name_extract+0x3c>
 8014f88:	e000      	b.n	8014f8c <_fx_directory_name_extract+0x74>
            break;
 8014f8a:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 8014f8c:	683a      	ldr	r2, [r7, #0]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	4413      	add	r3, r2
 8014f92:	2200      	movs	r2, #0
 8014f94:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00b      	beq.n	8014fb4 <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 8014fa2:	e007      	b.n	8014fb4 <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 8014fa4:	683a      	ldr	r2, [r7, #0]
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	4413      	add	r3, r2
 8014faa:	2200      	movs	r2, #0
 8014fac:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	3b01      	subs	r3, #1
 8014fb2:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 8014fb4:	683a      	ldr	r2, [r7, #0]
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	4413      	add	r3, r2
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	2b20      	cmp	r3, #32
 8014fbe:	d0f1      	beq.n	8014fa4 <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 8014fcc:	687b      	ldr	r3, [r7, #4]
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3714      	adds	r7, #20
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr

08014fda <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 8014fda:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014fde:	b0ca      	sub	sp, #296	; 0x128
 8014fe0:	af02      	add	r7, sp, #8
 8014fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8014fe4:	62b9      	str	r1, [r7, #40]	; 0x28
 8014fe6:	627a      	str	r2, [r7, #36]	; 0x24
 8014fe8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014fec:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8014ff0:	6013      	str	r3, [r2, #0]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
CHAR         *original_name =  name_ptr;
 8014ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#endif
#ifdef FX_ENABLE_EXFAT
USHORT        hash = 0;
 8015004:	2300      	movs	r3, #0
 8015006:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 801500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500c:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8015010:	1c5a      	adds	r2, r3, #1
 8015012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015014:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 8015018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801501a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 801501e:	3324      	adds	r3, #36	; 0x24
 8015020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8015024:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015028:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d007      	beq.n	8015042 <_fx_directory_search+0x68>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 8015032:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015036:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	681a      	ldr	r2, [r3, #0]
 801503e:	2300      	movs	r3, #0
 8015040:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 8015042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	2b5c      	cmp	r3, #92	; 0x5c
 8015048:	d003      	beq.n	8015052 <_fx_directory_search+0x78>
 801504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	2b2f      	cmp	r3, #47	; 0x2f
 8015050:	d103      	bne.n	801505a <_fx_directory_search+0x80>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 8015052:	2300      	movs	r3, #0
 8015054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8015058:	e01b      	b.n	8015092 <_fx_directory_search+0xb8>
                search_dir_ptr =  FX_NULL;
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 801505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505c:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d012      	beq.n	801508c <_fx_directory_search+0xb2>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 8015066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015068:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801506c:	f503 6111 	add.w	r1, r3, #2320	; 0x910
 8015070:	2388      	movs	r3, #136	; 0x88
 8015072:	461a      	mov	r2, r3
 8015074:	f008 fd36 	bl	801dae4 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 8015078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507a:	f603 1398 	addw	r3, r3, #2456	; 0x998
 801507e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 8015082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801508a:	e002      	b.n	8015092 <_fx_directory_search+0xb8>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 801508c:	2300      	movs	r3, #0
 801508e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8015092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015094:	f893 3810 	ldrb.w	r3, [r3, #2064]	; 0x810
 8015098:	2b00      	cmp	r3, #0
 801509a:	f000 81c7 	beq.w	801542c <_fx_directory_search+0x452>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 801509e:	2300      	movs	r3, #0
 80150a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 80150a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	2b5c      	cmp	r3, #92	; 0x5c
 80150aa:	d02d      	beq.n	8015108 <_fx_directory_search+0x12e>
 80150ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	2b2f      	cmp	r3, #47	; 0x2f
 80150b2:	d14c      	bne.n	801514e <_fx_directory_search+0x174>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 80150b4:	e028      	b.n	8015108 <_fx_directory_search+0x12e>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 80150b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80150bc:	4413      	add	r3, r2
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                beta =   media_ptr -> fx_media_last_found_name[v];
 80150c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80150ca:	4413      	add	r3, r2
 80150cc:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 80150d6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80150da:	2b5c      	cmp	r3, #92	; 0x5c
 80150dc:	d102      	bne.n	80150e4 <_fx_directory_search+0x10a>
                {
                    alpha =  '/';
 80150de:	232f      	movs	r3, #47	; 0x2f
 80150e0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                }
                if (beta == '\\')
 80150e4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80150e8:	2b5c      	cmp	r3, #92	; 0x5c
 80150ea:	d102      	bne.n	80150f2 <_fx_directory_search+0x118>
                {
                    beta =  '/';
 80150ec:	232f      	movs	r3, #47	; 0x2f
 80150ee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                }

                /* Is the name the same?  */
                if (alpha != beta)
 80150f2:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 80150f6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d110      	bne.n	8015120 <_fx_directory_search+0x146>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 80150fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015102:	3301      	adds	r3, #1
 8015104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8015108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801510c:	2bfe      	cmp	r3, #254	; 0xfe
 801510e:	d808      	bhi.n	8015122 <_fx_directory_search+0x148>
 8015110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015116:	4413      	add	r3, r2
 8015118:	781b      	ldrb	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1cb      	bne.n	80150b6 <_fx_directory_search+0xdc>
 801511e:	e000      	b.n	8015122 <_fx_directory_search+0x148>
                    break;
 8015120:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8015122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015128:	4413      	add	r3, r2
 801512a:	7819      	ldrb	r1, [r3, #0]
 801512c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015132:	4413      	add	r3, r2
 8015134:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	4299      	cmp	r1, r3
 801513c:	d003      	beq.n	8015146 <_fx_directory_search+0x16c>
            {
                match =  FX_FALSE;
 801513e:	2300      	movs	r3, #0
 8015140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8015144:	e0cd      	b.n	80152e2 <_fx_directory_search+0x308>
            }
            else
            {
                match =  FX_TRUE;
 8015146:	2301      	movs	r3, #1
 8015148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 801514c:	e0c9      	b.n	80152e2 <_fx_directory_search+0x308>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 801514e:	2301      	movs	r3, #1
 8015150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 8015154:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015158:	2b00      	cmp	r3, #0
 801515a:	d043      	beq.n	80151e4 <_fx_directory_search+0x20a>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 801515c:	e029      	b.n	80151b2 <_fx_directory_search+0x1d8>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 801515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015164:	4413      	add	r3, r2
 8015166:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                    beta =   path_ptr[v];
 8015170:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015178:	4413      	add	r3, r2
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 8015180:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8015184:	2b5c      	cmp	r3, #92	; 0x5c
 8015186:	d102      	bne.n	801518e <_fx_directory_search+0x1b4>
                    {
                        alpha =  '/';
 8015188:	232f      	movs	r3, #47	; 0x2f
 801518a:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                    }
                    if (beta == '\\')
 801518e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8015192:	2b5c      	cmp	r3, #92	; 0x5c
 8015194:	d102      	bne.n	801519c <_fx_directory_search+0x1c2>
                    {
                        beta =  '/';
 8015196:	232f      	movs	r3, #47	; 0x2f
 8015198:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 801519c:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 80151a0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d111      	bne.n	80151cc <_fx_directory_search+0x1f2>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80151a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80151ac:	3301      	adds	r3, #1
 80151ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80151b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80151b6:	2bfe      	cmp	r3, #254	; 0xfe
 80151b8:	d809      	bhi.n	80151ce <_fx_directory_search+0x1f4>
 80151ba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80151be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80151c2:	4413      	add	r3, r2
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1c9      	bne.n	801515e <_fx_directory_search+0x184>
 80151ca:	e000      	b.n	80151ce <_fx_directory_search+0x1f4>
                        break;
 80151cc:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 80151ce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80151d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80151d6:	4413      	add	r3, r2
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d002      	beq.n	80151e4 <_fx_directory_search+0x20a>
                {
                    match =  FX_FALSE;
 80151de:	2300      	movs	r3, #0
 80151e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 80151e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d07a      	beq.n	80152e2 <_fx_directory_search+0x308>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 80151ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80151f2:	4413      	add	r3, r2
 80151f4:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	2b5c      	cmp	r3, #92	; 0x5c
 80151fc:	d00c      	beq.n	8015218 <_fx_directory_search+0x23e>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 80151fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015204:	4413      	add	r3, r2
 8015206:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801520a:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 801520c:	2b2f      	cmp	r3, #47	; 0x2f
 801520e:	d003      	beq.n	8015218 <_fx_directory_search+0x23e>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 8015210:	2300      	movs	r3, #0
 8015212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015216:	e004      	b.n	8015222 <_fx_directory_search+0x248>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 8015218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801521c:	3301      	adds	r3, #1
 801521e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 8015222:	2300      	movs	r3, #0
 8015224:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8015228:	e02d      	b.n	8015286 <_fx_directory_search+0x2ac>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 801522a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801522c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015230:	4413      	add	r3, r2
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 8015238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801523e:	4413      	add	r3, r2
 8015240:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 801524a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 801524e:	2b5c      	cmp	r3, #92	; 0x5c
 8015250:	d102      	bne.n	8015258 <_fx_directory_search+0x27e>
                    {
                        alpha =  '/';
 8015252:	232f      	movs	r3, #47	; 0x2f
 8015254:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                    }
                    if (beta == '\\')
 8015258:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801525c:	2b5c      	cmp	r3, #92	; 0x5c
 801525e:	d102      	bne.n	8015266 <_fx_directory_search+0x28c>
                    {
                        beta =  '/';
 8015260:	232f      	movs	r3, #47	; 0x2f
 8015262:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 8015266:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 801526a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801526e:	429a      	cmp	r2, r3
 8015270:	d119      	bne.n	80152a6 <_fx_directory_search+0x2cc>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 8015272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015276:	3301      	adds	r3, #1
 8015278:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    j++;
 801527c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015280:	3301      	adds	r3, #1
 8015282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8015286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801528a:	2bfe      	cmp	r3, #254	; 0xfe
 801528c:	d80c      	bhi.n	80152a8 <_fx_directory_search+0x2ce>
 801528e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015290:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015294:	4413      	add	r3, r2
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d005      	beq.n	80152a8 <_fx_directory_search+0x2ce>
 801529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d1c2      	bne.n	801522a <_fx_directory_search+0x250>
 80152a4:	e000      	b.n	80152a8 <_fx_directory_search+0x2ce>
                        break;
 80152a6:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 80152a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80152ac:	2bff      	cmp	r3, #255	; 0xff
 80152ae:	d903      	bls.n	80152b8 <_fx_directory_search+0x2de>
                {
                    match = FX_FALSE;
 80152b0:	2300      	movs	r3, #0
 80152b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80152b6:	e014      	b.n	80152e2 <_fx_directory_search+0x308>
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 80152b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d010      	beq.n	80152e2 <_fx_directory_search+0x308>
 80152c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80152c6:	4413      	add	r3, r2
 80152c8:	7819      	ldrb	r1, [r3, #0]
 80152ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80152d0:	4413      	add	r3, r2
 80152d2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	4299      	cmp	r1, r3
 80152da:	d002      	beq.n	80152e2 <_fx_directory_search+0x308>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 80152dc:	2300      	movs	r3, #0
 80152de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 80152e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 80a0 	beq.w	801542c <_fx_directory_search+0x452>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 80152f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f8:	4610      	mov	r0, r2
 80152fa:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80152fe:	2288      	movs	r2, #136	; 0x88
 8015300:	4619      	mov	r1, r3
 8015302:	f008 fbef 	bl	801dae4 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 8015306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015308:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801530c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 801530e:	2300      	movs	r3, #0
 8015310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015314:	e01d      	b.n	8015352 <_fx_directory_search+0x378>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 8015316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801531a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801531e:	4413      	add	r3, r2
 8015320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015322:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015326:	440a      	add	r2, r1
 8015328:	f502 62e2 	add.w	r2, r2, #1808	; 0x710
 801532c:	7812      	ldrb	r2, [r2, #0]
 801532e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 8015330:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015338:	4413      	add	r3, r2
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d103      	bne.n	8015348 <_fx_directory_search+0x36e>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8015340:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015344:	2bfe      	cmp	r3, #254	; 0xfe
 8015346:	d909      	bls.n	801535c <_fx_directory_search+0x382>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8015348:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801534c:	3301      	adds	r3, #1
 801534e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015352:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015356:	2bff      	cmp	r3, #255	; 0xff
 8015358:	d9dd      	bls.n	8015316 <_fx_directory_search+0x33c>
 801535a:	e000      	b.n	801535e <_fx_directory_search+0x384>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 801535c:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 801535e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015362:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d04d      	beq.n	8015408 <_fx_directory_search+0x42e>
 801536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536e:	f8d3 35f8 	ldr.w	r3, [r3, #1528]	; 0x5f8
 8015372:	2b00      	cmp	r3, #0
 8015374:	d048      	beq.n	8015408 <_fx_directory_search+0x42e>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8015376:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801537a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 8015386:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801538a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015392:	4610      	mov	r0, r2
 8015394:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8015398:	2288      	movs	r2, #136	; 0x88
 801539a:	4619      	mov	r1, r3
 801539c:	f008 fba2 	bl	801dae4 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80153a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80153a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80153ae:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 80153b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 80153b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80153ba:	2300      	movs	r3, #0
 80153bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80153c0:	e01c      	b.n	80153fc <_fx_directory_search+0x422>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80153c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80153c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80153ca:	441a      	add	r2, r3
 80153cc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80153d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80153d4:	440b      	add	r3, r1
 80153d6:	7812      	ldrb	r2, [r2, #0]
 80153d8:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 80153da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80153de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80153e2:	4413      	add	r3, r2
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d103      	bne.n	80153f2 <_fx_directory_search+0x418>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 80153ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80153ee:	2bfe      	cmp	r3, #254	; 0xfe
 80153f0:	d909      	bls.n	8015406 <_fx_directory_search+0x42c>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80153f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80153f6:	3301      	adds	r3, #1
 80153f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80153fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015400:	2bff      	cmp	r3, #255	; 0xff
 8015402:	d9de      	bls.n	80153c2 <_fx_directory_search+0x3e8>
 8015404:	e000      	b.n	8015408 <_fx_directory_search+0x42e>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 8015406:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 8015408:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801540c:	2b00      	cmp	r3, #0
 801540e:	d004      	beq.n	801541a <_fx_directory_search+0x440>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 8015410:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015414:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015418:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 801541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541c:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 8015420:	1c5a      	adds	r2, r3, #1
 8015422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015424:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 8015428:	2300      	movs	r3, #0
 801542a:	e352      	b.n	8015ad2 <_fx_directory_search+0xaf8>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 801542c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801542e:	2300      	movs	r3, #0
 8015430:	f882 3810 	strb.w	r3, [r2, #2064]	; 0x810
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 8015434:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015438:	2b00      	cmp	r3, #0
 801543a:	d003      	beq.n	8015444 <_fx_directory_search+0x46a>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 801543c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015442:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8015444:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8015448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801544a:	f7ff fd65 	bl	8014f18 <_fx_directory_name_extract>
 801544e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8015450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015454:	2b00      	cmp	r3, #0
 8015456:	f000 80e5 	beq.w	8015624 <_fx_directory_search+0x64a>
        {
#ifdef FX_ENABLE_EXFAT
            if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 801545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015460:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015464:	2b07      	cmp	r3, #7
 8015466:	d10e      	bne.n	8015486 <_fx_directory_search+0x4ac>
            {
                directory_size = search_dir_ptr -> fx_dir_entry_file_size / FX_DIR_ENTRY_SIZE;
 8015468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801546c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015470:	f04f 0000 	mov.w	r0, #0
 8015474:	f04f 0100 	mov.w	r1, #0
 8015478:	0950      	lsrs	r0, r2, #5
 801547a:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 801547e:	0959      	lsrs	r1, r3, #5
 8015480:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
 8015484:	e07f      	b.n	8015586 <_fx_directory_search+0x5ac>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8015486:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801548a:	2300      	movs	r3, #0
 801548c:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 801548e:	2300      	movs	r3, #0
 8015490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 8015494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801549a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                while (cluster < media_ptr -> fx_media_fat_reserved)
 801549e:	e02b      	b.n	80154f8 <_fx_directory_search+0x51e>
                {

                    /* Increment the cluster count.  */
                    i++;
 80154a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154a4:	3301      	adds	r3, #1
 80154a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80154aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80154ae:	461a      	mov	r2, r3
 80154b0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80154b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154b6:	f004 f936 	bl	8019726 <_fx_utility_FAT_entry_read>
 80154ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 80154be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d002      	beq.n	80154cc <_fx_directory_search+0x4f2>
                    {

                        /* Return the bad status.  */
                        return(status);
 80154c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154ca:	e302      	b.n	8015ad2 <_fx_directory_search+0xaf8>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 80154cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d90b      	bls.n	80154ec <_fx_directory_search+0x512>
 80154d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80154d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80154dc:	4293      	cmp	r3, r2
 80154de:	d005      	beq.n	80154ec <_fx_directory_search+0x512>
 80154e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80154e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d201      	bcs.n	80154f0 <_fx_directory_search+0x516>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 80154ec:	2303      	movs	r3, #3
 80154ee:	e2f0      	b.n	8015ad2 <_fx_directory_search+0xaf8>
                    }

                    cluster = next_cluster;
 80154f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80154f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80154f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fa:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80154fe:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8015502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015506:	4293      	cmp	r3, r2
 8015508:	d3ca      	bcc.n	80154a0 <_fx_directory_search+0x4c6>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 801550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801550e:	2200      	movs	r2, #0
 8015510:	469a      	mov	sl, r3
 8015512:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8015514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015516:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801551a:	2200      	movs	r2, #0
 801551c:	613b      	str	r3, [r7, #16]
 801551e:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8015520:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015524:	4603      	mov	r3, r0
 8015526:	fb03 f20b 	mul.w	r2, r3, fp
 801552a:	460b      	mov	r3, r1
 801552c:	fb0a f303 	mul.w	r3, sl, r3
 8015530:	4413      	add	r3, r2
 8015532:	4602      	mov	r2, r0
 8015534:	fbaa 4502 	umull	r4, r5, sl, r2
 8015538:	442b      	add	r3, r5
 801553a:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 801553c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015540:	2200      	movs	r2, #0
 8015542:	60bb      	str	r3, [r7, #8]
 8015544:	60fa      	str	r2, [r7, #12]
 8015546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801554a:	4603      	mov	r3, r0
 801554c:	fb03 f205 	mul.w	r2, r3, r5
 8015550:	460b      	mov	r3, r1
 8015552:	fb04 f303 	mul.w	r3, r4, r3
 8015556:	4413      	add	r3, r2
 8015558:	4602      	mov	r2, r0
 801555a:	fba4 8902 	umull	r8, r9, r4, r2
 801555e:	444b      	add	r3, r9
 8015560:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8015562:	f04f 0200 	mov.w	r2, #0
 8015566:	f04f 0300 	mov.w	r3, #0
 801556a:	ea4f 1258 	mov.w	r2, r8, lsr #5
 801556e:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 8015572:	ea4f 1359 	mov.w	r3, r9, lsr #5
 8015576:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 801557a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801557e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8015582:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 8015586:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801558a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d053      	beq.n	801563c <_fx_directory_search+0x662>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8015594:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015598:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 80155a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80155a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80155b2:	4610      	mov	r0, r2
 80155b4:	4619      	mov	r1, r3
 80155b6:	2388      	movs	r3, #136	; 0x88
 80155b8:	461a      	mov	r2, r3
 80155ba:	f008 fa93 	bl	801dae4 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80155be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80155c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80155cc:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 80155ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80155d8:	2300      	movs	r3, #0
 80155da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80155de:	e01c      	b.n	801561a <_fx_directory_search+0x640>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80155e0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80155e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80155e8:	18d1      	adds	r1, r2, r3
 80155ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80155ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80155f2:	441a      	add	r2, r3
 80155f4:	780b      	ldrb	r3, [r1, #0]
 80155f6:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 80155f8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80155fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015600:	4413      	add	r3, r2
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d103      	bne.n	8015610 <_fx_directory_search+0x636>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8015608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801560c:	2bfe      	cmp	r3, #254	; 0xfe
 801560e:	d914      	bls.n	801563a <_fx_directory_search+0x660>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8015610:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015614:	3301      	adds	r3, #1
 8015616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801561a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801561e:	2bff      	cmp	r3, #255	; 0xff
 8015620:	d9de      	bls.n	80155e0 <_fx_directory_search+0x606>
 8015622:	e00b      	b.n	801563c <_fx_directory_search+0x662>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8015624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015626:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 801562a:	2200      	movs	r2, #0
 801562c:	603b      	str	r3, [r7, #0]
 801562e:	607a      	str	r2, [r7, #4]
 8015630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015634:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8015638:	e000      	b.n	801563c <_fx_directory_search+0x662>
                            break;
 801563a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 801563c:	2300      	movs	r3, #0
 801563e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        found =  FX_FALSE;
 8015642:	2300      	movs	r3, #0
 8015644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801564e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015652:	2b07      	cmp	r3, #7
 8015654:	d106      	bne.n	8015664 <_fx_directory_search+0x68a>
        {

            /* Get name hash.  */
            hash =  _fx_utility_exFAT_name_hash_get(name);
 8015656:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 801565a:	f005 fd7c 	bl	801b156 <_fx_utility_exFAT_name_hash_get>
 801565e:	4603      	mov	r3, r0
 8015660:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        do
        {

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
 8015664:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8015668:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015670:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8015674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015676:	f7fc fbbf 	bl	8011df8 <_fx_directory_entry_read_ex>
 801567a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
#endif /* FX_ENABLE_EXFAT */

            i++;
 801567e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015682:	3301      	adds	r3, #1
 8015684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 8015688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801568c:	2b00      	cmp	r3, #0
 801568e:	d002      	beq.n	8015696 <_fx_directory_search+0x6bc>
            {
                return(status);
 8015690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015694:	e21d      	b.n	8015ad2 <_fx_directory_search+0xaf8>
            }

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
 8015696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015698:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801569c:	2b00      	cmp	r3, #0
 801569e:	f000 80c9 	beq.w	8015834 <_fx_directory_search+0x85a>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	7f1b      	ldrb	r3, [r3, #28]
 80156a6:	f003 0308 	and.w	r3, r3, #8
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	f040 80ac 	bne.w	8015808 <_fx_directory_search+0x82e>
                continue;
            }

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
 80156b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80156b6:	2b85      	cmp	r3, #133	; 0x85
 80156b8:	f040 80a8 	bne.w	801580c <_fx_directory_search+0x832>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 80156bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80156c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 80156cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 80156d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80156e0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80156e4:	2b60      	cmp	r3, #96	; 0x60
 80156e6:	d908      	bls.n	80156fa <_fx_directory_search+0x720>
 80156e8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80156ec:	2b7a      	cmp	r3, #122	; 0x7a
 80156ee:	d804      	bhi.n	80156fa <_fx_directory_search+0x720>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 80156f0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80156f4:	3b20      	subs	r3, #32
 80156f6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80156fa:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80156fe:	2b60      	cmp	r3, #96	; 0x60
 8015700:	d908      	bls.n	8015714 <_fx_directory_search+0x73a>
 8015702:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8015706:	2b7a      	cmp	r3, #122	; 0x7a
 8015708:	d804      	bhi.n	8015714 <_fx_directory_search+0x73a>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 801570a:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 801570e:	3b20      	subs	r3, #32
 8015710:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 8015714:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8015718:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 801571c:	429a      	cmp	r2, r3
 801571e:	d10f      	bne.n	8015740 <_fx_directory_search+0x766>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 8015720:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015724:	3301      	adds	r3, #1
 8015726:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
                dir_name_ptr++;
 801572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801572e:	3301      	adds	r3, #1
 8015730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            } while (*dir_name_ptr);
 8015734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d1c6      	bne.n	80156cc <_fx_directory_search+0x6f2>
 801573e:	e000      	b.n	8015742 <_fx_directory_search+0x768>
                    break;
 8015740:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8015742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10b      	bne.n	8015764 <_fx_directory_search+0x78a>
 801574c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015750:	781a      	ldrb	r2, [r3, #0]
 8015752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	429a      	cmp	r2, r3
 801575a:	d103      	bne.n	8015764 <_fx_directory_search+0x78a>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 801575c:	2301      	movs	r3, #1
 801575e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015762:	e054      	b.n	801580e <_fx_directory_search+0x834>
            }
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8015764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015766:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801576a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 801576e:	2b07      	cmp	r3, #7
 8015770:	d04d      	beq.n	801580e <_fx_directory_search+0x834>
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
 8015772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015774:	791b      	ldrb	r3, [r3, #4]
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8015776:	2b00      	cmp	r3, #0
 8015778:	d049      	beq.n	801580e <_fx_directory_search+0x834>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 801577a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801577e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 8015782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015784:	3304      	adds	r3, #4
 8015786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 801578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 8015794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 801579e:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80157a2:	2b60      	cmp	r3, #96	; 0x60
 80157a4:	d908      	bls.n	80157b8 <_fx_directory_search+0x7de>
 80157a6:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80157aa:	2b7a      	cmp	r3, #122	; 0x7a
 80157ac:	d804      	bhi.n	80157b8 <_fx_directory_search+0x7de>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80157ae:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80157b2:	3b20      	subs	r3, #32
 80157b4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 80157b8:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 80157bc:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d10f      	bne.n	80157e4 <_fx_directory_search+0x80a>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 80157c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80157c8:	3301      	adds	r3, #1
 80157ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
                    dir_name_ptr++;
 80157ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80157d2:	3301      	adds	r3, #1
 80157d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                } while (*dir_name_ptr);
 80157d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d1d3      	bne.n	801578a <_fx_directory_search+0x7b0>
 80157e2:	e000      	b.n	80157e6 <_fx_directory_search+0x80c>
                        break;
 80157e4:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80157e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d10e      	bne.n	801580e <_fx_directory_search+0x834>
 80157f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80157f4:	781a      	ldrb	r2, [r3, #0]
 80157f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d106      	bne.n	801580e <_fx_directory_search+0x834>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 8015800:	2301      	movs	r3, #1
 8015802:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015806:	e002      	b.n	801580e <_fx_directory_search+0x834>
                continue;
 8015808:	bf00      	nop
 801580a:	e000      	b.n	801580e <_fx_directory_search+0x834>
                continue;
 801580c:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 801580e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015812:	2200      	movs	r2, #0
 8015814:	61bb      	str	r3, [r7, #24]
 8015816:	61fa      	str	r2, [r7, #28]
 8015818:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801581c:	69b9      	ldr	r1, [r7, #24]
 801581e:	4291      	cmp	r1, r2
 8015820:	69f9      	ldr	r1, [r7, #28]
 8015822:	eb71 0303 	sbcs.w	r3, r1, r3
 8015826:	d206      	bcs.n	8015836 <_fx_directory_search+0x85c>
 8015828:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801582c:	2b00      	cmp	r3, #0
 801582e:	f43f af19 	beq.w	8015664 <_fx_directory_search+0x68a>
 8015832:	e000      	b.n	8015836 <_fx_directory_search+0x85c>
                break;
 8015834:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 8015836:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801583a:	2b00      	cmp	r3, #0
 801583c:	d101      	bne.n	8015842 <_fx_directory_search+0x868>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 801583e:	2304      	movs	r3, #4
 8015840:	e147      	b.n	8015ad2 <_fx_directory_search+0xaf8>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8015842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015844:	7f1b      	ldrb	r3, [r3, #28]
 8015846:	f003 0310 	and.w	r3, r3, #16
 801584a:	2b00      	cmp	r3, #0
 801584c:	d066      	beq.n	801591c <_fx_directory_search+0x942>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 801584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015850:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015854:	4619      	mov	r1, r3
 8015856:	2388      	movs	r3, #136	; 0x88
 8015858:	461a      	mov	r2, r3
 801585a:	f008 f943 	bl	801dae4 <memcpy>
            search_dir_ptr =  &search_dir;
 801585e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015862:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8015866:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801586a:	2300      	movs	r3, #0
 801586c:	6513      	str	r3, [r2, #80]	; 0x50

            /* Now determine if the new search directory is the root
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
 801586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015874:	2b00      	cmp	r3, #0
 8015876:	d156      	bne.n	8015926 <_fx_directory_search+0x94c>
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
 8015878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801587e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015882:	2b07      	cmp	r3, #7
 8015884:	d04f      	beq.n	8015926 <_fx_directory_search+0x94c>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8015886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	2300      	movs	r3, #0
 801588e:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 8015890:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015894:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d03a      	beq.n	8015914 <_fx_directory_search+0x93a>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 801589e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80158a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 80158ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80158b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80158bc:	4610      	mov	r0, r2
 80158be:	4619      	mov	r1, r3
 80158c0:	2388      	movs	r3, #136	; 0x88
 80158c2:	461a      	mov	r2, r3
 80158c4:	f008 f90e 	bl	801dae4 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80158c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80158cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80158d6:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 80158d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80158e2:	2300      	movs	r3, #0
 80158e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80158e8:	e010      	b.n	801590c <_fx_directory_search+0x932>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 80158ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80158ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80158f2:	18d1      	adds	r1, r2, r3
 80158f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80158f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80158fc:	441a      	add	r2, r3
 80158fe:	780b      	ldrb	r3, [r1, #0]
 8015900:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8015902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015906:	3301      	adds	r3, #1
 8015908:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801590c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015910:	2bff      	cmp	r3, #255	; 0xff
 8015912:	d9ea      	bls.n	80158ea <_fx_directory_search+0x910>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 8015914:	2300      	movs	r3, #0
 8015916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801591a:	e004      	b.n	8015926 <_fx_directory_search+0x94c>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 801591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591e:	2b00      	cmp	r3, #0
 8015920:	d001      	beq.n	8015926 <_fx_directory_search+0x94c>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 8015922:	2304      	movs	r3, #4
 8015924:	e0d5      	b.n	8015ad2 <_fx_directory_search+0xaf8>
            }
        }
    } while (name_ptr);
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015928:	2b00      	cmp	r3, #0
 801592a:	f47f ad83 	bne.w	8015434 <_fx_directory_search+0x45a>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 801592e:	2300      	movs	r3, #0
 8015930:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8015934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	2b5c      	cmp	r3, #92	; 0x5c
 801593c:	d028      	beq.n	8015990 <_fx_directory_search+0x9b6>
 801593e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	2b2f      	cmp	r3, #47	; 0x2f
 8015946:	d023      	beq.n	8015990 <_fx_directory_search+0x9b6>
 8015948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801594c:	2b00      	cmp	r3, #0
 801594e:	d01f      	beq.n	8015990 <_fx_directory_search+0x9b6>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8015950:	e012      	b.n	8015978 <_fx_directory_search+0x99e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8015952:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801595a:	4413      	add	r3, r2
 801595c:	7819      	ldrb	r1, [r3, #0]
 801595e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015964:	4413      	add	r3, r2
 8015966:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801596a:	460a      	mov	r2, r1
 801596c:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 801596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015972:	3301      	adds	r3, #1
 8015974:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8015978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801597c:	2bfe      	cmp	r3, #254	; 0xfe
 801597e:	d807      	bhi.n	8015990 <_fx_directory_search+0x9b6>
 8015980:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015988:	4413      	add	r3, r2
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1e0      	bne.n	8015952 <_fx_directory_search+0x978>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 8015990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	2b5c      	cmp	r3, #92	; 0x5c
 8015998:	d012      	beq.n	80159c0 <_fx_directory_search+0x9e6>
 801599a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	2b2f      	cmp	r3, #47	; 0x2f
 80159a2:	d00d      	beq.n	80159c0 <_fx_directory_search+0x9e6>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 80159a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159a8:	2bfe      	cmp	r3, #254	; 0xfe
 80159aa:	d809      	bhi.n	80159c0 <_fx_directory_search+0x9e6>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 80159ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159b0:	1c5a      	adds	r2, r3, #1
 80159b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80159b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159b8:	4413      	add	r3, r2
 80159ba:	222f      	movs	r2, #47	; 0x2f
 80159bc:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 80159c0:	2300      	movs	r3, #0
 80159c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 80159c6:	e017      	b.n	80159f8 <_fx_directory_search+0xa1e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 80159c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80159cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80159d0:	4413      	add	r3, r2
 80159d2:	7819      	ldrb	r1, [r3, #0]
 80159d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159da:	4413      	add	r3, r2
 80159dc:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80159e0:	460a      	mov	r2, r1
 80159e2:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 80159e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159e8:	3301      	adds	r3, #1
 80159ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        j++;
 80159ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80159f2:	3301      	adds	r3, #1
 80159f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 80159f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159fc:	2bff      	cmp	r3, #255	; 0xff
 80159fe:	d807      	bhi.n	8015a10 <_fx_directory_search+0xa36>
 8015a00:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8015a04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015a08:	4413      	add	r3, r2
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d1db      	bne.n	80159c8 <_fx_directory_search+0x9ee>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 8015a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a14:	2bff      	cmp	r3, #255	; 0xff
 8015a16:	d808      	bhi.n	8015a2a <_fx_directory_search+0xa50>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8015a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a1e:	4413      	add	r3, r2
 8015a20:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8015a24:	2200      	movs	r2, #0
 8015a26:	701a      	strb	r2, [r3, #0]
 8015a28:	e003      	b.n	8015a32 <_fx_directory_search+0xa58>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8015a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 8015a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00e      	beq.n	8015a58 <_fx_directory_search+0xa7e>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8015a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8015a40:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8015a44:	4611      	mov	r1, r2
 8015a46:	2288      	movs	r2, #136	; 0x88
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f008 f84b 	bl	801dae4 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 8015a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a50:	2201      	movs	r2, #1
 8015a52:	f8c3 25f8 	str.w	r2, [r3, #1528]	; 0x5f8
 8015a56:	e003      	b.n	8015a60 <_fx_directory_search+0xa86>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	f8c3 25f8 	str.w	r2, [r3, #1528]	; 0x5f8
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 8015a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a64:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8015a68:	4611      	mov	r1, r2
 8015a6a:	2288      	movs	r2, #136	; 0x88
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f008 f839 	bl	801dae4 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 8015a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a74:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015a84:	e01e      	b.n	8015ac4 <_fx_directory_search+0xaea>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 8015a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015a8e:	4413      	add	r3, r2
 8015a90:	7819      	ldrb	r1, [r3, #0]
 8015a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015a98:	4413      	add	r3, r2
 8015a9a:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8015a9e:	460a      	mov	r2, r1
 8015aa0:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015aaa:	4413      	add	r3, r2
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d103      	bne.n	8015aba <_fx_directory_search+0xae0>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8015ab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ab6:	2bfe      	cmp	r3, #254	; 0xfe
 8015ab8:	d909      	bls.n	8015ace <_fx_directory_search+0xaf4>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8015aba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015abe:	3301      	adds	r3, #1
 8015ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015ac4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ac8:	2bff      	cmp	r3, #255	; 0xff
 8015aca:	d9dc      	bls.n	8015a86 <_fx_directory_search+0xaac>
 8015acc:	e000      	b.n	8015ad0 <_fx_directory_search+0xaf6>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 8015ace:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 8015ad0:	2300      	movs	r3, #0
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08015ae0 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4a3a      	ldr	r2, [pc, #232]	; (8015bd8 <_fx_file_close+0xf8>)
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d001      	beq.n	8015af6 <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8015af2:	2307      	movs	r3, #7
 8015af4:	e06c      	b.n	8015bd0 <_fx_file_close+0xf0>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015afa:	60bb      	str	r3, [r7, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	f8d3 355c 	ldr.w	r3, [r3, #1372]	; 0x55c
 8015b02:	1c5a      	adds	r2, r3, #1
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d104      	bne.n	8015b1e <_fx_file_close+0x3e>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	2200      	movs	r2, #0
 8015b18:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8015b1c:	e014      	b.n	8015b48 <_fx_file_close+0x68>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8015b26:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 8015b2c:	687a      	ldr	r2, [r7, #4]
 8015b2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8015b30:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d104      	bne.n	8015b48 <_fx_file_close+0x68>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8015b4e:	1e5a      	subs	r2, r3, #1
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	4a20      	ldr	r2, [pc, #128]	; (8015bdc <_fx_file_close+0xfc>)
 8015b5a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d134      	bne.n	8015bce <_fx_file_close+0xee>
        (file_ptr -> fx_file_modified))
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d030      	beq.n	8015bce <_fx_file_close+0xee>

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8015b6c:	4b1c      	ldr	r3, [pc, #112]	; (8015be0 <_fx_file_close+0x100>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8015b76:	4b1b      	ldr	r3, [pc, #108]	; (8015be4 <_fx_file_close+0x104>)
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8015b80:	4b18      	ldr	r3, [pc, #96]	; (8015be4 <_fx_file_close+0x104>)
 8015b82:	681a      	ldr	r2, [r3, #0]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

        /* Write the directory entry to the media.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015b9c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015ba0:	2b07      	cmp	r3, #7
 8015ba2:	d108      	bne.n	8015bb6 <_fx_file_close+0xd6>
        {
            status = _fx_directory_exFAT_entry_write(
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	3368      	adds	r3, #104	; 0x68
 8015ba8:	2202      	movs	r2, #2
 8015baa:	4619      	mov	r1, r3
 8015bac:	68b8      	ldr	r0, [r7, #8]
 8015bae:	f7fd fd4f 	bl	8013650 <_fx_directory_exFAT_entry_write>
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	e006      	b.n	8015bc4 <_fx_file_close+0xe4>
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	3368      	adds	r3, #104	; 0x68
 8015bba:	4619      	mov	r1, r3
 8015bbc:	68b8      	ldr	r0, [r7, #8]
 8015bbe:	f7fc f95b 	bl	8011e78 <_fx_directory_entry_write>
 8015bc2:	60f8      	str	r0, [r7, #12]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d001      	beq.n	8015bce <_fx_file_close+0xee>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Error writing the directory.  */
            return(status);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	e000      	b.n	8015bd0 <_fx_file_close+0xf0>

    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8015bce:	2300      	movs	r3, #0
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3710      	adds	r7, #16
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}
 8015bd8:	46494c45 	.word	0x46494c45
 8015bdc:	46494c43 	.word	0x46494c43
 8015be0:	2000d22c 	.word	0x2000d22c
 8015be4:	2000d228 	.word	0x2000d228

08015be8 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8015be8:	b590      	push	{r4, r7, lr}
 8015bea:	b0d1      	sub	sp, #324	; 0x144
 8015bec:	af02      	add	r7, sp, #8
 8015bee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015bf6:	6018      	str	r0, [r3, #0]
 8015bf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bfc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8015c00:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 8015c02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 8015c20:	2300      	movs	r3, #0
 8015c22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    work_ptr =  (CHAR *)file_name;
 8015c26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while (*work_ptr)
 8015c34:	e020      	b.n	8015c78 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8015c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8015c3e:	d004      	beq.n	8015c4a <_fx_file_create+0x62>
 8015c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c44:	781b      	ldrb	r3, [r3, #0]
 8015c46:	2b2f      	cmp	r3, #47	; 0x2f
 8015c48:	d103      	bne.n	8015c52 <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8015c50:	e00d      	b.n	8015c6e <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8015c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	2b20      	cmp	r3, #32
 8015c5a:	d103      	bne.n	8015c64 <_fx_file_create+0x7c>
 8015c5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d004      	beq.n	8015c6e <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 8015c64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015c68:	3301      	adds	r3, #1
 8015c6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        }

        /* Move to the next character.  */
        work_ptr++;
 8015c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c72:	3301      	adds	r3, #1
 8015c74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while (*work_ptr)
 8015c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1d9      	bne.n	8015c36 <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8015c82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d003      	beq.n	8015c92 <_fx_file_create+0xaa>
 8015c8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015c8e:	2bff      	cmp	r3, #255	; 0xff
 8015c90:	d901      	bls.n	8015c96 <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 8015c92:	230c      	movs	r3, #12
 8015c94:	e15c      	b.n	8015f50 <_fx_file_create+0x368>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8015c96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8015ca4:	3324      	adds	r3, #36	; 0x24
 8015ca6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8015cae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cb2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8015cbc:	3324      	adds	r3, #36	; 0x24
 8015cbe:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8015cc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cca:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    search_directory.fx_dir_entry_short_name[0] = 0;
 8015cd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cda:	2200      	movs	r2, #0
 8015cdc:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8015cde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ce2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	4a9c      	ldr	r2, [pc, #624]	; (8015f5c <_fx_file_create+0x374>)
 8015cec:	4293      	cmp	r3, r2
 8015cee:	d001      	beq.n	8015cf4 <_fx_file_create+0x10c>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8015cf0:	2311      	movs	r3, #17
 8015cf2:	e12d      	b.n	8015f50 <_fx_file_create+0x368>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8015cf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cf8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d001      	beq.n	8015d0a <_fx_file_create+0x122>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8015d06:	2323      	movs	r3, #35	; 0x23
 8015d08:	e122      	b.n	8015f50 <_fx_file_create+0x368>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 8015d0a:	f107 0408 	add.w	r4, r7, #8
 8015d0e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8015d12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d16:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 8015d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d1e:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8015d22:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	4623      	mov	r3, r4
 8015d2a:	6809      	ldr	r1, [r1, #0]
 8015d2c:	6800      	ldr	r0, [r0, #0]
 8015d2e:	f7ff f954 	bl	8014fda <_fx_directory_search>
 8015d32:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 8015d36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d101      	bne.n	8015d42 <_fx_file_create+0x15a>

        /* Release media protection.  */
        FX_UNPROTECT

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 8015d3e:	230b      	movs	r3, #11
 8015d40:	e106      	b.n	8015f50 <_fx_file_create+0x368>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 8015d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015d46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7ff f8e3 	bl	8014f18 <_fx_directory_name_extract>
 8015d52:	4603      	mov	r3, r0
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d001      	beq.n	8015d5c <_fx_file_create+0x174>
        /* Release media protection.  */
        FX_UNPROTECT

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 8015d58:	230d      	movs	r3, #13
 8015d5a:	e0f9      	b.n	8015f50 <_fx_file_create+0x368>
    }

#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015d5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015d6a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015d6e:	2b07      	cmp	r3, #7
 8015d70:	d11d      	bne.n	8015dae <_fx_file_create+0x1c6>
    {
        if (((dir_entry.fx_dir_entry_name[0] == '.') && (dir_entry.fx_dir_entry_name[1] == 0)) ||
 8015d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	2b2e      	cmp	r3, #46	; 0x2e
 8015d7a:	d105      	bne.n	8015d88 <_fx_file_create+0x1a0>
 8015d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d80:	3301      	adds	r3, #1
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d010      	beq.n	8015daa <_fx_file_create+0x1c2>
            ((dir_entry.fx_dir_entry_name[0] == '.') && (dir_entry.fx_dir_entry_name[1] == '.') && (dir_entry.fx_dir_entry_name[2] == 0)))
 8015d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d8c:	781b      	ldrb	r3, [r3, #0]
        if (((dir_entry.fx_dir_entry_name[0] == '.') && (dir_entry.fx_dir_entry_name[1] == 0)) ||
 8015d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8015d90:	d10d      	bne.n	8015dae <_fx_file_create+0x1c6>
            ((dir_entry.fx_dir_entry_name[0] == '.') && (dir_entry.fx_dir_entry_name[1] == '.') && (dir_entry.fx_dir_entry_name[2] == 0)))
 8015d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d96:	3301      	adds	r3, #1
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8015d9c:	d107      	bne.n	8015dae <_fx_file_create+0x1c6>
 8015d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015da2:	3302      	adds	r3, #2
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d101      	bne.n	8015dae <_fx_file_create+0x1c6>

            /* Release media protection.  */
            FX_UNPROTECT

            /* We don't need '.' or '..' for exFAT */
            return(FX_ALREADY_CREATED);
 8015daa:	230b      	movs	r3, #11
 8015dac:	e0d0      	b.n	8015f50 <_fx_file_create+0x368>
        }
    }

    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
 8015dae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015db6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015dba:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 8015dbe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8015dc2:	f107 0108 	add.w	r1, r7, #8
 8015dc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015dca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015dce:	6818      	ldr	r0, [r3, #0]
 8015dd0:	f7fe fc9e 	bl	8014710 <_fx_directory_free_search>
 8015dd4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8015dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d002      	beq.n	8015de6 <_fx_file_create+0x1fe>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return the error code.  */
        return(status);
 8015de0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015de4:	e0b4      	b.n	8015f50 <_fx_file_create+0x368>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 8015de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015dea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015dee:	4611      	mov	r1, r2
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7ff f891 	bl	8014f18 <_fx_directory_name_extract>

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8015df6:	4b5a      	ldr	r3, [pc, #360]	; (8015f60 <_fx_file_create+0x378>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8015dfe:	4b59      	ldr	r3, [pc, #356]	; (8015f64 <_fx_file_create+0x37c>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8015e06:	2320      	movs	r3, #32
 8015e08:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 8015e0c:	f04f 0200 	mov.w	r2, #0
 8015e10:	f04f 0300 	mov.w	r3, #0
 8015e14:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

#ifdef FX_ENABLE_EXFAT
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
 8015e18:	f04f 0200 	mov.w	r2, #0
 8015e1c:	f04f 0300 	mov.w	r3, #0
 8015e20:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 8015e24:	2300      	movs	r3, #0
 8015e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8015e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	2b2e      	cmp	r3, #46	; 0x2e
 8015e32:	d106      	bne.n	8015e42 <_fx_file_create+0x25a>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8015e34:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8015e38:	f043 0302 	orr.w	r3, r3, #2
 8015e3c:	b2db      	uxtb	r3, r3
 8015e3e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    }

#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015e42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e46:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015e50:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015e54:	2b07      	cmp	r3, #7
 8015e56:	d152      	bne.n	8015efe <_fx_file_create+0x316>
    {

        /* Don't use FAT by default.  */
        dir_entry.fx_dir_entry_dont_use_fat = (CHAR)(((search_directory.fx_dir_entry_dont_use_fat & 1) << 1) | 1);
 8015e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015e60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	b25b      	sxtb	r3, r3
 8015e68:	f003 0302 	and.w	r3, r3, #2
 8015e6c:	b25b      	sxtb	r3, r3
 8015e6e:	f043 0301 	orr.w	r3, r3, #1
 8015e72:	b25b      	sxtb	r3, r3
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100

        if (search_directory.fx_dir_entry_name[0])
 8015e7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d03c      	beq.n	8015f04 <_fx_file_create+0x31c>
        {

            /* Not root directory.  */
            /* Copy the date and time from the actual sub-directory.  */
            search_directory.fx_dir_entry_time = dir_entry.fx_dir_entry_time;
 8015e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015e96:	62da      	str	r2, [r3, #44]	; 0x2c
            search_directory.fx_dir_entry_date = dir_entry.fx_dir_entry_date;
 8015e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015e9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ea4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Check if the directory size has changed.  */
            if (search_directory.fx_dir_entry_file_size == dir_size)
 8015ea6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015eae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015eb2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8015eb6:	4299      	cmp	r1, r3
 8015eb8:	bf08      	it	eq
 8015eba:	4290      	cmpeq	r0, r2
 8015ebc:	d10c      	bne.n	8015ed8 <_fx_file_create+0x2f0>
            {

                /* Not changed, we need only update time stamps.  */
                status = _fx_directory_exFAT_entry_write(media_ptr, &search_directory, UPDATE_FILE);
 8015ebe:	f107 0108 	add.w	r1, r7, #8
 8015ec2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ec6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015eca:	2201      	movs	r2, #1
 8015ecc:	6818      	ldr	r0, [r3, #0]
 8015ece:	f7fd fbbf 	bl	8013650 <_fx_directory_exFAT_entry_write>
 8015ed2:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8015ed6:	e00b      	b.n	8015ef0 <_fx_file_create+0x308>
            }
            else
            {

                /* Directory size changed, update time stamps and the stream size.  */
                status = _fx_directory_exFAT_entry_write(media_ptr, &search_directory, UPDATE_STREAM);
 8015ed8:	f107 0108 	add.w	r1, r7, #8
 8015edc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ee0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015ee4:	2202      	movs	r2, #2
 8015ee6:	6818      	ldr	r0, [r3, #0]
 8015ee8:	f7fd fbb2 	bl	8013650 <_fx_directory_exFAT_entry_write>
 8015eec:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
            }

            /* Check for a bad status.  */
            if (status != FX_SUCCESS)
 8015ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d005      	beq.n	8015f04 <_fx_file_create+0x31c>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Return the bad status.  */
                return(status);
 8015ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015efc:	e028      	b.n	8015f50 <_fx_file_create+0x368>
            }
        }
    }
    else
    {
        dir_entry.fx_dir_entry_dont_use_fat = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
    }
#endif /* FX_ENABLE_EXFAT */

    /* Now write out the directory entry.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015f04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015f08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015f12:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015f16:	2b07      	cmp	r3, #7
 8015f18:	d10c      	bne.n	8015f34 <_fx_file_create+0x34c>
    {
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
 8015f1a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8015f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015f22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015f26:	2204      	movs	r2, #4
 8015f28:	6818      	ldr	r0, [r3, #0]
 8015f2a:	f7fd fb91 	bl	8013650 <_fx_directory_exFAT_entry_write>
 8015f2e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8015f32:	e00b      	b.n	8015f4c <_fx_file_create+0x364>
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8015f34:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8015f38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015f3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015f40:	4611      	mov	r1, r2
 8015f42:	6818      	ldr	r0, [r3, #0]
 8015f44:	f7fb ff98 	bl	8011e78 <_fx_directory_entry_write>
 8015f48:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

    /* Release media protection.  */
    FX_UNPROTECT

    /* File create is complete, return status.  */
    return(status);
 8015f4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd90      	pop	{r4, r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	4d454449 	.word	0x4d454449
 8015f60:	2000d22c 	.word	0x2000d22c
 8015f64:	2000d228 	.word	0x2000d228

08015f68 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8015f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015f6c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8015f70:	af02      	add	r7, sp, #8
 8015f72:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 8015f76:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8015f7a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8015f7e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8015f88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	4bc3      	ldr	r3, [pc, #780]	; (801629c <_fx_file_open+0x334>)
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d002      	beq.n	8015f9a <_fx_file_open+0x32>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8015f94:	2311      	movs	r3, #17
 8015f96:	f000 bdbc 	b.w	8016b12 <_fx_file_open+0xbaa>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 8015f9a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8015f9e:	f8d3 3568 	ldr.w	r3, [r3, #1384]	; 0x568
 8015fa2:	1c5a      	adds	r2, r3, #1
 8015fa4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8015fa8:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 8015fac:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4

    /* Determine the type of FAT and setup variables accordingly.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8015fb6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8015fba:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015fbe:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015fc2:	2b07      	cmp	r3, #7
 8015fc4:	d107      	bne.n	8015fd6 <_fx_file_open+0x6e>
    {
        fat_last        = FX_LAST_CLUSTER_exFAT;
 8015fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        not_a_file_attr = FX_DIRECTORY;
 8015fce:	2310      	movs	r3, #16
 8015fd0:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8015fd4:	e015      	b.n	8016002 <_fx_file_open+0x9a>
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
 8015fd6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8015fda:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8015fde:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8015fe2:	2b0b      	cmp	r3, #11
 8015fe4:	d106      	bne.n	8015ff4 <_fx_file_open+0x8c>
#else
    if (media_ptr -> fx_media_32_bit_FAT)
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 8015fe6:	4bae      	ldr	r3, [pc, #696]	; (80162a0 <_fx_file_open+0x338>)
 8015fe8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8015fec:	2318      	movs	r3, #24
 8015fee:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8015ff2:	e006      	b.n	8016002 <_fx_file_open+0x9a>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 8015ff4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8015ff8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8015ffc:	2318      	movs	r3, #24
 8015ffe:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8016002:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8016006:	2b02      	cmp	r3, #2
 8016008:	d106      	bne.n	8016018 <_fx_file_open+0xb0>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 801600a:	2300      	movs	r3, #0
 801600c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 8016010:	2301      	movs	r3, #1
 8016012:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8016016:	e002      	b.n	801601e <_fx_file_open+0xb6>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 8016018:	2300      	movs	r3, #0
 801601a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

    /* Protect against other threads accessing the media.  */
    FX_PROTECT

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 801601e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016022:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8016026:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801602a:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 801602c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016030:	2300      	movs	r3, #0
 8016032:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8016036:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801603a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801603e:	2300      	movs	r3, #0
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	2300      	movs	r3, #0
 8016044:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8016048:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 801604c:	f7fe ffc5 	bl	8014fda <_fx_directory_search>
 8016050:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8016054:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8016058:	2b00      	cmp	r3, #0
 801605a:	d003      	beq.n	8016064 <_fx_file_open+0xfc>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return the error code.  */
        return(status);
 801605c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8016060:	f000 bd57 	b.w	8016b12 <_fx_file_open+0xbaa>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8016064:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016068:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 801606c:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8016070:	4013      	ands	r3, r2
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d002      	beq.n	801607e <_fx_file_open+0x116>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 8016078:	2305      	movs	r3, #5
 801607a:	f000 bd4a 	b.w	8016b12 <_fx_file_open+0xbaa>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 801607e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8016082:	2b01      	cmp	r3, #1
 8016084:	d14c      	bne.n	8016120 <_fx_file_open+0x1b8>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 8016086:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801608a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801608e:	2b00      	cmp	r3, #0
 8016090:	d002      	beq.n	8016098 <_fx_file_open+0x130>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 8016092:	2323      	movs	r3, #35	; 0x23
 8016094:	f000 bd3d 	b.w	8016b12 <_fx_file_open+0xbaa>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8016098:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801609c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80160a0:	f003 0301 	and.w	r3, r3, #1
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <_fx_file_open+0x146>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 80160a8:	2306      	movs	r3, #6
 80160aa:	f000 bd32 	b.w	8016b12 <_fx_file_open+0xbaa>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 80160ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80160b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80160b6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 80160ba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80160be:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80160c2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        while (open_count)
 80160c6:	e027      	b.n	8016118 <_fx_file_open+0x1b0>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 80160c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80160cc:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 80160d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80160d4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 80160d8:	4299      	cmp	r1, r3
 80160da:	bf08      	it	eq
 80160dc:	4290      	cmpeq	r0, r2
 80160de:	d111      	bne.n	8016104 <_fx_file_open+0x19c>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 80160e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80160e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 80160e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80160ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d107      	bne.n	8016104 <_fx_file_open+0x19c>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 80160f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80160f8:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d102      	bne.n	8016104 <_fx_file_open+0x19c>

                /* Release media protection.  */
                FX_UNPROTECT

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 80160fe:	2306      	movs	r3, #6
 8016100:	f000 bd07 	b.w	8016b12 <_fx_file_open+0xbaa>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8016104:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801610a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            open_count--;
 801610e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016112:	3b01      	subs	r3, #1
 8016114:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        while (open_count)
 8016118:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801611c:	2b00      	cmp	r3, #0
 801611e:	d1d3      	bne.n	80160c8 <_fx_file_open+0x160>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8016120:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016128:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 801612c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016130:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8016134:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016138:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801613c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 801613e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016142:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016146:	fb02 f303 	mul.w	r3, r2, r3
 801614a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    file_ptr -> fx_file_current_physical_cluster =  0;
 801614e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016152:	2300      	movs	r3, #0
 8016154:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8016156:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801615a:	2b00      	cmp	r3, #0
 801615c:	d102      	bne.n	8016164 <_fx_file_open+0x1fc>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 801615e:	2302      	movs	r3, #2
 8016160:	f000 bcd7 	b.w	8016b12 <_fx_file_open+0xbaa>
    }

    last_cluster =      0;
 8016164:	2300      	movs	r3, #0
 8016166:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    cluster_count =     0;
 801616a:	2300      	movs	r3, #0
 801616c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 8016170:	2301      	movs	r3, #1
 8016172:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 8016176:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801617a:	2301      	movs	r3, #1
 801617c:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 801617e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8016182:	2b00      	cmp	r3, #0
 8016184:	f000 808e 	beq.w	80162a4 <_fx_file_open+0x33c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8016188:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801618c:	2200      	movs	r2, #0
 801618e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8016192:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8016196:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 801619a:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 801619e:	4641      	mov	r1, r8
 80161a0:	eb11 0a02 	adds.w	sl, r1, r2
 80161a4:	4649      	mov	r1, r9
 80161a6:	eb41 0b03 	adc.w	fp, r1, r3
 80161aa:	f11a 33ff 	adds.w	r3, sl, #4294967295
 80161ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80161b2:	f14b 33ff 	adc.w	r3, fp, #4294967295
 80161b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80161ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80161be:	2200      	movs	r2, #0
 80161c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80161c4:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80161c8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80161cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80161d0:	f7ea fdae 	bl	8000d30 <__aeabi_uldivmod>
 80161d4:	4602      	mov	r2, r0
 80161d6:	460b      	mov	r3, r1
 80161d8:	4610      	mov	r0, r2
 80161da:	4619      	mov	r1, r3
 80161dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80161e0:	2200      	movs	r2, #0
 80161e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80161e6:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80161ea:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80161ee:	4643      	mov	r3, r8
 80161f0:	fb03 f201 	mul.w	r2, r3, r1
 80161f4:	464b      	mov	r3, r9
 80161f6:	fb00 f303 	mul.w	r3, r0, r3
 80161fa:	4413      	add	r3, r2
 80161fc:	4642      	mov	r2, r8
 80161fe:	fba0 4502 	umull	r4, r5, r0, r2
 8016202:	442b      	add	r3, r5
 8016204:	461d      	mov	r5, r3
 8016206:	e9c7 4580 	strd	r4, r5, [r7, #512]	; 0x200
 801620a:	e9c7 4580 	strd	r4, r5, [r7, #512]	; 0x200

#ifdef FX_ENABLE_EXFAT
        if (bytes_remaining && (file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1))
 801620e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8016212:	4313      	orrs	r3, r2
 8016214:	f000 824d 	beq.w	80166b2 <_fx_file_open+0x74a>
 8016218:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801621c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8016220:	f003 0301 	and.w	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	f000 8244 	beq.w	80166b2 <_fx_file_open+0x74a>
        {
            cluster_count =
                (ULONG)((file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size + bytes_per_cluster - 1) /
 801622a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801622e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8016232:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8016236:	2000      	movs	r0, #0
 8016238:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 801623c:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 8016240:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8016244:	4621      	mov	r1, r4
 8016246:	1851      	adds	r1, r2, r1
 8016248:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 801624c:	4629      	mov	r1, r5
 801624e:	eb43 0101 	adc.w	r1, r3, r1
 8016252:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8016256:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 801625a:	460b      	mov	r3, r1
 801625c:	3b01      	subs	r3, #1
 801625e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8016262:	4613      	mov	r3, r2
 8016264:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016268:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801626c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016270:	2200      	movs	r2, #0
 8016272:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8016276:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 801627a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801627e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8016282:	f7ea fd55 	bl	8000d30 <__aeabi_uldivmod>
 8016286:	4602      	mov	r2, r0
 8016288:	460b      	mov	r3, r1
            cluster_count =
 801628a:	4613      	mov	r3, r2
 801628c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
                        bytes_per_cluster);
            file_ptr -> fx_file_consecutive_cluster = cluster_count;
 8016290:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016294:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8016298:	6193      	str	r3, [r2, #24]
 801629a:	e20a      	b.n	80166b2 <_fx_file_open+0x74a>
 801629c:	4d454449 	.word	0x4d454449
 80162a0:	0ffffff8 	.word	0x0ffffff8
    {
#ifdef FX_ENABLE_EXFAT

        /* File is open for writing... walk the FAT chain to position to the end.  */

        if (bytes_remaining && (file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1))
 80162a4:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80162a8:	4313      	orrs	r3, r2
 80162aa:	f000 8197 	beq.w	80165dc <_fx_file_open+0x674>
 80162ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80162b2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80162b6:	f003 0301 	and.w	r3, r3, #1
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	f000 818e 	beq.w	80165dc <_fx_file_open+0x674>
        {
            cluster_count =
                (ULONG)((file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size + bytes_per_cluster - 1) /
 80162c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80162c4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80162c8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80162cc:	2000      	movs	r0, #0
 80162ce:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80162d2:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 80162d6:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80162da:	4621      	mov	r1, r4
 80162dc:	1851      	adds	r1, r2, r1
 80162de:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80162e2:	4629      	mov	r1, r5
 80162e4:	eb43 0101 	adc.w	r1, r3, r1
 80162e8:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80162ec:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	; 0x150
 80162f0:	460b      	mov	r3, r1
 80162f2:	3b01      	subs	r3, #1
 80162f4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80162f8:	4613      	mov	r3, r2
 80162fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 80162fe:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8016302:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016306:	2200      	movs	r2, #0
 8016308:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801630c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8016310:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016314:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016318:	f7ea fd0a 	bl	8000d30 <__aeabi_uldivmod>
 801631c:	4602      	mov	r2, r0
 801631e:	460b      	mov	r3, r1
            cluster_count =
 8016320:	4613      	mov	r3, r2
 8016322:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
                        bytes_per_cluster);

            last_cluster = cluster + cluster_count - 1;
 8016326:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801632a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801632e:	4413      	add	r3, r2
 8016330:	3b01      	subs	r3, #1
 8016332:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

            file_ptr -> fx_file_consecutive_cluster = cluster_count;
 8016336:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801633a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801633e:	6193      	str	r3, [r2, #24]

            file_ptr -> fx_file_current_physical_cluster = last_cluster;
 8016340:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016344:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8016348:	6213      	str	r3, [r2, #32]

            file_ptr -> fx_file_current_relative_cluster = cluster_count - 1;
 801634a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801634e:	1e5a      	subs	r2, r3, #1
 8016350:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016354:	635a      	str	r2, [r3, #52]	; 0x34

            bytes_remaining %= bytes_per_cluster;
 8016356:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801635a:	2200      	movs	r2, #0
 801635c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016360:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8016364:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8016368:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801636c:	f7ea fce0 	bl	8000d30 <__aeabi_uldivmod>
 8016370:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8

            if (!bytes_remaining)
 8016374:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8016378:	4313      	orrs	r3, r2
 801637a:	d121      	bne.n	80163c0 <_fx_file_open+0x458>
            {
                if (file_ptr -> fx_file_dir_entry.fx_dir_entry_available_file_size >
 801637c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016380:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
                    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size)
 8016384:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016388:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
                if (file_ptr -> fx_file_dir_entry.fx_dir_entry_available_file_size >
 801638c:	4282      	cmp	r2, r0
 801638e:	418b      	sbcs	r3, r1
 8016390:	d20d      	bcs.n	80163ae <_fx_file_open+0x446>
                {
                    file_ptr -> fx_file_current_physical_cluster = last_cluster + 1;
 8016392:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8016396:	1c5a      	adds	r2, r3, #1
 8016398:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801639c:	621a      	str	r2, [r3, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 801639e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80163a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163a4:	1c5a      	adds	r2, r3, #1
 80163a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80163aa:	635a      	str	r2, [r3, #52]	; 0x34
 80163ac:	e008      	b.n	80163c0 <_fx_file_open+0x458>
                }
                else
                {
                    bytes_remaining = bytes_per_cluster;
 80163ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80163b2:	2200      	movs	r2, #0
 80163b4:	613b      	str	r3, [r7, #16]
 80163b6:	617a      	str	r2, [r7, #20]
 80163b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80163bc:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
                }
            }

            bytes_available =
                (ULONG)((file_ptr -> fx_file_dir_entry.fx_dir_entry_available_file_size + bytes_per_cluster - 1) /
 80163c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80163c4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 80163c8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80163cc:	2000      	movs	r0, #0
 80163ce:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80163d2:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 80163d6:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80163da:	4621      	mov	r1, r4
 80163dc:	1851      	adds	r1, r2, r1
 80163de:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 80163e2:	4629      	mov	r1, r5
 80163e4:	eb43 0101 	adc.w	r1, r3, r1
 80163e8:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 80163ec:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80163f0:	460b      	mov	r3, r1
 80163f2:	3b01      	subs	r3, #1
 80163f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80163f8:	4613      	mov	r3, r2
 80163fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 80163fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8016402:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016406:	2200      	movs	r2, #0
 8016408:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801640c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8016410:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8016414:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8016418:	f7ea fc8a 	bl	8000d30 <__aeabi_uldivmod>
 801641c:	4602      	mov	r2, r0
 801641e:	460b      	mov	r3, r1
            bytes_available =
 8016420:	2300      	movs	r3, #0
 8016422:	60ba      	str	r2, [r7, #8]
 8016424:	60fb      	str	r3, [r7, #12]
 8016426:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801642a:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
                        bytes_per_cluster);
            bytes_available *= bytes_per_cluster;
 801642e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016432:	2200      	movs	r2, #0
 8016434:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8016438:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801643c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8016440:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8016444:	4622      	mov	r2, r4
 8016446:	fb02 f203 	mul.w	r2, r2, r3
 801644a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801644e:	4629      	mov	r1, r5
 8016450:	fb01 f303 	mul.w	r3, r1, r3
 8016454:	441a      	add	r2, r3
 8016456:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801645a:	4621      	mov	r1, r4
 801645c:	fba3 1301 	umull	r1, r3, r3, r1
 8016460:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016464:	460b      	mov	r3, r1
 8016466:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801646a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801646e:	18d3      	adds	r3, r2, r3
 8016470:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016474:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016478:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
 801647c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
 8016480:	e117      	b.n	80166b2 <_fx_file_open+0x74a>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8016482:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8016486:	3301      	adds	r3, #1
 8016488:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 801648c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8016490:	461a      	mov	r2, r3
 8016492:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8016496:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 801649a:	f003 f944 	bl	8019726 <_fx_utility_FAT_entry_read>
 801649e:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 80164a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d002      	beq.n	80164b0 <_fx_file_open+0x548>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the error status.  */
                    return(status);
 80164aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80164ae:	e330      	b.n	8016b12 <_fx_file_open+0xbaa>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 80164b0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80164b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80164b8:	4293      	cmp	r3, r2
 80164ba:	d006      	beq.n	80164ca <_fx_file_open+0x562>
 80164bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80164c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80164c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80164c6:	4293      	cmp	r3, r2
 80164c8:	d901      	bls.n	80164ce <_fx_file_open+0x566>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 80164ca:	2303      	movs	r3, #3
 80164cc:	e321      	b.n	8016b12 <_fx_file_open+0xbaa>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 80164ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80164d2:	1c5a      	adds	r2, r3, #1
 80164d4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80164d8:	429a      	cmp	r2, r3
 80164da:	d10b      	bne.n	80164f4 <_fx_file_open+0x58c>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 80164dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d00a      	beq.n	80164fa <_fx_file_open+0x592>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 80164e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80164e8:	699b      	ldr	r3, [r3, #24]
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80164f0:	619a      	str	r2, [r3, #24]
 80164f2:	e002      	b.n	80164fa <_fx_file_open+0x592>
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 80164f4:	2300      	movs	r3, #0
 80164f6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 80164fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80164fe:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

                /* Setup for the next cluster.  */
                cluster =  contents;
 8016502:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8016506:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 801650a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801650e:	2200      	movs	r2, #0
 8016510:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8016514:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8016518:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 801651c:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8016520:	4621      	mov	r1, r4
 8016522:	4291      	cmp	r1, r2
 8016524:	4629      	mov	r1, r5
 8016526:	eb71 0303 	sbcs.w	r3, r1, r3
 801652a:	d216      	bcs.n	801655a <_fx_file_open+0x5f2>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 801652c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016530:	2200      	movs	r2, #0
 8016532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8016536:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801653a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 801653e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8016542:	4621      	mov	r1, r4
 8016544:	1a51      	subs	r1, r2, r1
 8016546:	6039      	str	r1, [r7, #0]
 8016548:	4629      	mov	r1, r5
 801654a:	eb63 0301 	sbc.w	r3, r3, r1
 801654e:	607b      	str	r3, [r7, #4]
 8016550:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016554:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
 8016558:	e040      	b.n	80165dc <_fx_file_open+0x674>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 801655a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801655e:	6a1b      	ldr	r3, [r3, #32]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d13b      	bne.n	80165dc <_fx_file_open+0x674>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8016564:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016568:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801656c:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 801656e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8016572:	1e5a      	subs	r2, r3, #1
 8016574:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016578:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 801657a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801657e:	2200      	movs	r2, #0
 8016580:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016584:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8016588:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 801658c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8016590:	4621      	mov	r1, r4
 8016592:	4628      	mov	r0, r5
 8016594:	4283      	cmp	r3, r0
 8016596:	bf08      	it	eq
 8016598:	428a      	cmpeq	r2, r1
 801659a:	d11f      	bne.n	80165dc <_fx_file_open+0x674>
 801659c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	d91b      	bls.n	80165dc <_fx_file_open+0x674>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80165a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80165a8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80165ac:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80165b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80165b4:	4293      	cmp	r3, r2
 80165b6:	d211      	bcs.n	80165dc <_fx_file_open+0x674>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 80165b8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80165bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80165c0:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 80165c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80165c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165c8:	1c5a      	adds	r2, r3, #1
 80165ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80165ce:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 80165d0:	f04f 0200 	mov.w	r2, #0
 80165d4:	f04f 0300 	mov.w	r3, #0
 80165d8:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80165dc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d90a      	bls.n	80165fa <_fx_file_open+0x692>
 80165e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80165e8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80165ec:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80165f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80165f4:	4293      	cmp	r3, r2
 80165f6:	f4ff af44 	bcc.w	8016482 <_fx_file_open+0x51a>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 80165fa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80165fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016600:	2200      	movs	r2, #0
 8016602:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8016606:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 801660a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801660e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8016612:	2200      	movs	r2, #0
 8016614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8016618:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 801661c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8016620:	462b      	mov	r3, r5
 8016622:	e9d7 ab3a 	ldrd	sl, fp, [r7, #232]	; 0xe8
 8016626:	4652      	mov	r2, sl
 8016628:	fb02 f203 	mul.w	r2, r2, r3
 801662c:	465b      	mov	r3, fp
 801662e:	4621      	mov	r1, r4
 8016630:	fb01 f303 	mul.w	r3, r1, r3
 8016634:	4413      	add	r3, r2
 8016636:	4622      	mov	r2, r4
 8016638:	4651      	mov	r1, sl
 801663a:	fba2 8901 	umull	r8, r9, r2, r1
 801663e:	444b      	add	r3, r9
 8016640:	4699      	mov	r9, r3
                ((ULONG64)cluster_count);
 8016642:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8016646:	2200      	movs	r2, #0
 8016648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801664c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8016650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8016654:	4603      	mov	r3, r0
 8016656:	fb03 f209 	mul.w	r2, r3, r9
 801665a:	460b      	mov	r3, r1
 801665c:	fb08 f303 	mul.w	r3, r8, r3
 8016660:	4413      	add	r3, r2
 8016662:	4602      	mov	r2, r0
 8016664:	fba8 1202 	umull	r1, r2, r8, r2
 8016668:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 801666c:	460a      	mov	r2, r1
 801666e:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 8016672:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8016676:	4413      	add	r3, r2
 8016678:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 801667c:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8016680:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
 8016684:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8016688:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801668c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8016690:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8016694:	4282      	cmp	r2, r0
 8016696:	418b      	sbcs	r3, r1
 8016698:	d309      	bcc.n	80166ae <_fx_file_open+0x746>
 801669a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d007      	beq.n	80166b2 <_fx_file_open+0x74a>
                ((cluster_count) && (contents < fat_last)))
 80166a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80166a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80166aa:	4293      	cmp	r3, r2
 80166ac:	d901      	bls.n	80166b2 <_fx_file_open+0x74a>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 80166ae:	2308      	movs	r3, #8
 80166b0:	e22f      	b.n	8016b12 <_fx_file_open+0xbaa>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 80166b2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80166b6:	4bae      	ldr	r3, [pc, #696]	; (8016970 <_fx_file_open+0xa08>)
 80166b8:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 80166ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80166be:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80166c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80166c6:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 80166c8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80166cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80166d0:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 80166d2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80166d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80166da:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 80166dc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80166e0:	2300      	movs	r3, #0
 80166e2:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 80166e4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80166e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80166ec:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 80166ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80166f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80166f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80166fa:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 80166fc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016700:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8016704:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8016706:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801670a:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 801670e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016712:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 8016716:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 801671a:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 801671e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8016722:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016726:	2300      	movs	r3, #0
 8016728:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 801672c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8016730:	2b00      	cmp	r3, #0
 8016732:	d165      	bne.n	8016800 <_fx_file_open+0x898>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8016734:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016738:	695a      	ldr	r2, [r3, #20]
 801673a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801673e:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 8016740:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016744:	2200      	movs	r2, #0
 8016746:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016748:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801674c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8016750:	2200      	movs	r2, #0
 8016752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 801675a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801675e:	695b      	ldr	r3, [r3, #20]
 8016760:	3b02      	subs	r3, #2
 8016762:	2200      	movs	r2, #0
 8016764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016768:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801676c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016770:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8016774:	2200      	movs	r2, #0
 8016776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801677a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 801677e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8016782:	462b      	mov	r3, r5
 8016784:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8016788:	4642      	mov	r2, r8
 801678a:	fb02 f203 	mul.w	r2, r2, r3
 801678e:	464b      	mov	r3, r9
 8016790:	4621      	mov	r1, r4
 8016792:	fb01 f303 	mul.w	r3, r1, r3
 8016796:	4413      	add	r3, r2
 8016798:	4622      	mov	r2, r4
 801679a:	4641      	mov	r1, r8
 801679c:	fba2 1201 	umull	r1, r2, r2, r1
 80167a0:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80167a4:	460a      	mov	r2, r1
 80167a6:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 80167aa:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80167ae:	4413      	add	r3, r2
 80167b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80167b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80167b8:	4623      	mov	r3, r4
 80167ba:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80167be:	4602      	mov	r2, r0
 80167c0:	189b      	adds	r3, r3, r2
 80167c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80167c6:	460b      	mov	r3, r1
 80167c8:	462a      	mov	r2, r5
 80167ca:	eb42 0303 	adc.w	r3, r2, r3
 80167ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80167d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80167d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80167da:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 80167de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80167e2:	2200      	movs	r2, #0
 80167e4:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 80167e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80167ea:	2200      	movs	r2, #0
 80167ec:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 80167ee:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80167f2:	f04f 0200 	mov.w	r2, #0
 80167f6:	f04f 0300 	mov.w	r3, #0
 80167fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80167fe:	e148      	b.n	8016a92 <_fx_file_open+0xb2a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 8016800:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016804:	2200      	movs	r2, #0
 8016806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801680a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801680e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8016812:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8016816:	4621      	mov	r1, r4
 8016818:	4628      	mov	r0, r5
 801681a:	4283      	cmp	r3, r0
 801681c:	bf08      	it	eq
 801681e:	428a      	cmpeq	r2, r1
 8016820:	f040 80a8 	bne.w	8016974 <_fx_file_open+0xa0c>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016824:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016828:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801682c:	2200      	movs	r2, #0
 801682e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016832:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8016836:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801683a:	6a1b      	ldr	r3, [r3, #32]
 801683c:	2200      	movs	r2, #0
 801683e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016842:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8016846:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801684a:	460b      	mov	r3, r1
 801684c:	3b02      	subs	r3, #2
 801684e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016852:	4613      	mov	r3, r2
 8016854:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 801685c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016860:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8016864:	2200      	movs	r2, #0
 8016866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801686a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 801686e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8016872:	462b      	mov	r3, r5
 8016874:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8016878:	4642      	mov	r2, r8
 801687a:	fb02 f203 	mul.w	r2, r2, r3
 801687e:	464b      	mov	r3, r9
 8016880:	4621      	mov	r1, r4
 8016882:	fb01 f303 	mul.w	r3, r1, r3
 8016886:	4413      	add	r3, r2
 8016888:	4622      	mov	r2, r4
 801688a:	4641      	mov	r1, r8
 801688c:	fba2 1201 	umull	r1, r2, r2, r1
 8016890:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8016894:	460a      	mov	r2, r1
 8016896:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 801689a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801689e:	4413      	add	r3, r2
 80168a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80168a4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80168a8:	4623      	mov	r3, r4
 80168aa:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80168ae:	4602      	mov	r2, r0
 80168b0:	189b      	adds	r3, r3, r2
 80168b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80168b6:	460b      	mov	r3, r1
 80168b8:	462a      	mov	r2, r5
 80168ba:	eb42 0303 	adc.w	r3, r2, r3
 80168be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 80168c2:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80168c6:	1e51      	subs	r1, r2, #1
 80168c8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80168cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80168d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80168d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80168d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168da:	2200      	movs	r2, #0
 80168dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80168e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80168e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80168e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80168ec:	f7ea fa20 	bl	8000d30 <__aeabi_uldivmod>
 80168f0:	4602      	mov	r2, r0
 80168f2:	460b      	mov	r3, r1
 80168f4:	2300      	movs	r3, #0
 80168f6:	67ba      	str	r2, [r7, #120]	; 0x78
 80168f8:	67fb      	str	r3, [r7, #124]	; 0x7c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80168fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80168fe:	4623      	mov	r3, r4
 8016900:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8016904:	4602      	mov	r2, r0
 8016906:	189b      	adds	r3, r3, r2
 8016908:	673b      	str	r3, [r7, #112]	; 0x70
 801690a:	460b      	mov	r3, r1
 801690c:	462a      	mov	r2, r5
 801690e:	eb42 0303 	adc.w	r3, r2, r3
 8016912:	677b      	str	r3, [r7, #116]	; 0x74
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016914:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016918:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801691c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8016920:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8016924:	1e51      	subs	r1, r2, #1
 8016926:	66b9      	str	r1, [r7, #104]	; 0x68
 8016928:	f143 33ff 	adc.w	r3, r3, #4294967295
 801692c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801692e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016934:	2200      	movs	r2, #0
 8016936:	663b      	str	r3, [r7, #96]	; 0x60
 8016938:	667a      	str	r2, [r7, #100]	; 0x64
 801693a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801693e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016942:	f7ea f9f5 	bl	8000d30 <__aeabi_uldivmod>
 8016946:	4602      	mov	r2, r0
 8016948:	460b      	mov	r3, r1
 801694a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801694e:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016950:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016954:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8016958:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 801695c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8016960:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016966:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801696a:	631a      	str	r2, [r3, #48]	; 0x30
 801696c:	e091      	b.n	8016a92 <_fx_file_open+0xb2a>
 801696e:	bf00      	nop
 8016970:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016974:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016978:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801697c:	2200      	movs	r2, #0
 801697e:	65bb      	str	r3, [r7, #88]	; 0x58
 8016980:	65fa      	str	r2, [r7, #92]	; 0x5c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8016982:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016986:	6a1b      	ldr	r3, [r3, #32]
 8016988:	2200      	movs	r2, #0
 801698a:	653b      	str	r3, [r7, #80]	; 0x50
 801698c:	657a      	str	r2, [r7, #84]	; 0x54
 801698e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8016992:	460b      	mov	r3, r1
 8016994:	3b02      	subs	r3, #2
 8016996:	64bb      	str	r3, [r7, #72]	; 0x48
 8016998:	4613      	mov	r3, r2
 801699a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801699e:	64fb      	str	r3, [r7, #76]	; 0x4c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80169a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80169a4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80169a8:	2200      	movs	r2, #0
 80169aa:	643b      	str	r3, [r7, #64]	; 0x40
 80169ac:	647a      	str	r2, [r7, #68]	; 0x44
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80169ae:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80169b2:	462b      	mov	r3, r5
 80169b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80169b8:	4642      	mov	r2, r8
 80169ba:	fb02 f203 	mul.w	r2, r2, r3
 80169be:	464b      	mov	r3, r9
 80169c0:	4621      	mov	r1, r4
 80169c2:	fb01 f303 	mul.w	r3, r1, r3
 80169c6:	4413      	add	r3, r2
 80169c8:	4622      	mov	r2, r4
 80169ca:	4641      	mov	r1, r8
 80169cc:	fba2 1201 	umull	r1, r2, r2, r1
 80169d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80169d4:	460a      	mov	r2, r1
 80169d6:	f8c7 21b0 	str.w	r2, [r7, #432]	; 0x1b0
 80169da:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80169de:	4413      	add	r3, r2
 80169e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80169e4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80169e8:	4623      	mov	r3, r4
 80169ea:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 80169ee:	4602      	mov	r2, r0
 80169f0:	189b      	adds	r3, r3, r2
 80169f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80169f4:	460b      	mov	r3, r1
 80169f6:	462a      	mov	r2, r5
 80169f8:	eb42 0303 	adc.w	r3, r2, r3
 80169fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 80169fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a04:	2200      	movs	r2, #0
 8016a06:	633b      	str	r3, [r7, #48]	; 0x30
 8016a08:	637a      	str	r2, [r7, #52]	; 0x34
 8016a0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016a0e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8016a12:	f7ea f98d 	bl	8000d30 <__aeabi_uldivmod>
 8016a16:	4602      	mov	r2, r0
 8016a18:	460b      	mov	r3, r1
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8016a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016a20:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8016a24:	4623      	mov	r3, r4
 8016a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016a2a:	4602      	mov	r2, r0
 8016a2c:	189b      	adds	r3, r3, r2
 8016a2e:	623b      	str	r3, [r7, #32]
 8016a30:	460b      	mov	r3, r1
 8016a32:	462a      	mov	r2, r5
 8016a34:	eb42 0303 	adc.w	r3, r2, r3
 8016a38:	627b      	str	r3, [r7, #36]	; 0x24
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016a3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016a3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016a42:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8016a46:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	61bb      	str	r3, [r7, #24]
 8016a50:	61fa      	str	r2, [r7, #28]
 8016a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016a56:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8016a5a:	f7ea f969 	bl	8000d30 <__aeabi_uldivmod>
 8016a5e:	4602      	mov	r2, r0
 8016a60:	460b      	mov	r3, r1
 8016a62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016a66:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016a68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016a6c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8016a70:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8016a74:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8016a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016a7c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8016a80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8016a82:	fbb3 f1f2 	udiv	r1, r3, r2
 8016a86:	fb01 f202 	mul.w	r2, r1, r2
 8016a8a:	1a9a      	subs	r2, r3, r2
 8016a8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016a90:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 8016a92:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016a96:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d01f      	beq.n	8016ade <_fx_file_open+0xb76>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 8016a9e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016aa2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8016aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016aa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 8016aac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016ab0:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8016ab4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016ab8:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 8016aba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8016abe:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016ac2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 8016ac4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016ac8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8016acc:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 8016ace:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016ad2:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 8016ad6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016ada:	65da      	str	r2, [r3, #92]	; 0x5c
 8016adc:	e00f      	b.n	8016afe <_fx_file_open+0xb96>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 8016ade:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016ae2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016ae6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 8016aea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016aee:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016af2:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 8016af4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8016af8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016afc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 8016afe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016b02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8016b06:	1c5a      	adds	r2, r3, #1
 8016b08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016b0c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    /* Release media protection.  */
    FX_UNPROTECT

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b1e:	bf00      	nop

08016b20 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8016b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016b24:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8016b28:	af04      	add	r7, sp, #16
 8016b2a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8016b2e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8016b32:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016b36:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	4be1      	ldr	r3, [pc, #900]	; (8016ec4 <_fx_file_write+0x3a4>)
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	d002      	beq.n	8016b48 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8016b42:	2307      	movs	r3, #7
 8016b44:	f000 bfe5 	b.w	8017b12 <_fx_file_write+0xff2>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8016b48:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b4e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 8016b52:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016b56:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016b60:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
#endif


#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8016b64:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016b68:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8016b6c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8016b70:	2b07      	cmp	r3, #7
 8016b72:	d012      	beq.n	8016b9a <_fx_file_write+0x7a>
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
 8016b74:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016b78:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016b7c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8016b80:	2000      	movs	r0, #0
 8016b82:	460c      	mov	r4, r1
 8016b84:	4605      	mov	r5, r0
 8016b86:	eb12 0804 	adds.w	r8, r2, r4
 8016b8a:	eb43 0905 	adc.w	r9, r3, r5
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8016b8e:	f1b9 0f01 	cmp.w	r9, #1
 8016b92:	d302      	bcc.n	8016b9a <_fx_file_write+0x7a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 8016b94:	230a      	movs	r3, #10
 8016b96:	f000 bfbc 	b.w	8017b12 <_fx_file_write+0xff2>

    /* Protect against other threads accessing the media.  */
    FX_PROTECT

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8016b9a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016b9e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d002      	beq.n	8016bac <_fx_file_write+0x8c>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8016ba6:	2323      	movs	r3, #35	; 0x23
 8016ba8:	f000 bfb3 	b.w	8017b12 <_fx_file_write+0xff2>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8016bac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016bb0:	689b      	ldr	r3, [r3, #8]
 8016bb2:	2b01      	cmp	r3, #1
 8016bb4:	d002      	beq.n	8016bbc <_fx_file_write+0x9c>
        /* Release media protection.  */
        FX_UNPROTECT

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 8016bb6:	2306      	movs	r3, #6
 8016bb8:	f000 bfab 	b.w	8017b12 <_fx_file_write+0xff2>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016bbc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8016bc2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016bc6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016bca:	fb02 f303 	mul.w	r3, r2, r3
 8016bce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8016bd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d102      	bne.n	8016be0 <_fx_file_write+0xc0>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8016bda:	2302      	movs	r3, #2
 8016bdc:	f000 bf99 	b.w	8017b12 <_fx_file_write+0xff2>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 8016be0:	2300      	movs	r3, #0
 8016be2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 8016be6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016bea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016bee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016bf2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016bf6:	ebb0 0a02 	subs.w	sl, r0, r2
 8016bfa:	eb61 0b03 	sbc.w	fp, r1, r3
 8016bfe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016c02:	2200      	movs	r2, #0
 8016c04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8016c08:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8016c0c:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 8016c10:	460b      	mov	r3, r1
 8016c12:	459a      	cmp	sl, r3
 8016c14:	4613      	mov	r3, r2
 8016c16:	eb7b 0303 	sbcs.w	r3, fp, r3
 8016c1a:	f080 8390 	bcs.w	801733e <_fx_file_write+0x81e>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016c1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8016c22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016c26:	4413      	add	r3, r2
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8016c30:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8016c34:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016c38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8016c3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016c40:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016c44:	1a84      	subs	r4, r0, r2
 8016c46:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8016c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8016c4e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8016c52:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8016c56:	4623      	mov	r3, r4
 8016c58:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016c5c:	4602      	mov	r2, r0
 8016c5e:	189b      	adds	r3, r3, r2
 8016c60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8016c64:	460b      	mov	r3, r1
 8016c66:	462a      	mov	r2, r5
 8016c68:	eb42 0303 	adc.w	r3, r2, r3
 8016c6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8016c70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016c74:	2200      	movs	r2, #0
 8016c76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016c7a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8016c7e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016c82:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8016c86:	f7ea f853 	bl	8000d30 <__aeabi_uldivmod>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016c8e:	4613      	mov	r3, r2
 8016c90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 8016c94:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016c98:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 8016c9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d902      	bls.n	8016caa <_fx_file_write+0x18a>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 8016ca4:	230a      	movs	r3, #10
 8016ca6:	f000 bf34 	b.w	8017b12 <_fx_file_write+0xff2>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8016caa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016cae:	691a      	ldr	r2, [r3, #16]
 8016cb0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016cb4:	441a      	add	r2, r3
 8016cb6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016cba:	611a      	str	r2, [r3, #16]

        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8016cbc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016cc0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8016cc4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8016cc8:	2b07      	cmp	r3, #7
 8016cca:	d044      	beq.n	8016d56 <_fx_file_write+0x236>
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
 8016ccc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016cd0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016cd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016cd8:	2200      	movs	r2, #0
 8016cda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8016cde:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8016ce2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8016cec:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016cf0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8016cf4:	464b      	mov	r3, r9
 8016cf6:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 8016cfa:	4652      	mov	r2, sl
 8016cfc:	fb02 f203 	mul.w	r2, r2, r3
 8016d00:	465b      	mov	r3, fp
 8016d02:	4644      	mov	r4, r8
 8016d04:	fb04 f303 	mul.w	r3, r4, r3
 8016d08:	4413      	add	r3, r2
 8016d0a:	4642      	mov	r2, r8
 8016d0c:	4654      	mov	r4, sl
 8016d0e:	fba2 4204 	umull	r4, r2, r2, r4
 8016d12:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8016d16:	4622      	mov	r2, r4
 8016d18:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8016d1c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8016d20:	4413      	add	r3, r2
 8016d22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8016d26:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8016d2a:	4623      	mov	r3, r4
 8016d2c:	18c3      	adds	r3, r0, r3
 8016d2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8016d32:	462b      	mov	r3, r5
 8016d34:	eb41 0303 	adc.w	r3, r1, r3
 8016d38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
 8016d3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8016d40:	2b01      	cmp	r3, #1
 8016d42:	d308      	bcc.n	8016d56 <_fx_file_write+0x236>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 8016d44:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8016d48:	f04f 32ff 	mov.w	r2, #4294967295
 8016d4c:	f04f 0300 	mov.w	r3, #0
 8016d50:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8016d54:	e03d      	b.n	8016dd2 <_fx_file_write+0x2b2>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 8016d56:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016d5a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016d5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016d62:	2200      	movs	r2, #0
 8016d64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8016d68:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8016d6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016d70:	2200      	movs	r2, #0
 8016d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8016d76:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8016d7a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8016d7e:	464b      	mov	r3, r9
 8016d80:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 8016d84:	4652      	mov	r2, sl
 8016d86:	fb02 f203 	mul.w	r2, r2, r3
 8016d8a:	465b      	mov	r3, fp
 8016d8c:	4644      	mov	r4, r8
 8016d8e:	fb04 f303 	mul.w	r3, r4, r3
 8016d92:	4413      	add	r3, r2
 8016d94:	4642      	mov	r2, r8
 8016d96:	4654      	mov	r4, sl
 8016d98:	fba2 4204 	umull	r4, r2, r2, r4
 8016d9c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8016da0:	4622      	mov	r2, r4
 8016da2:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8016da6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8016daa:	4413      	add	r3, r2
 8016dac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8016db0:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8016db4:	4623      	mov	r3, r4
 8016db6:	18c3      	adds	r3, r0, r3
 8016db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8016dbc:	462b      	mov	r3, r5
 8016dbe:	eb41 0303 	adc.w	r3, r1, r3
 8016dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 8016dc6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016dca:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8016dce:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 8016dd2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016dd6:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 8016dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016dde:	1ad2      	subs	r2, r2, r3
 8016de0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016de4:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 8016de8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 8016df2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016df6:	69db      	ldr	r3, [r3, #28]
 8016df8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8016dfc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016e00:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8016e04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

        /* Loop to find the needed clusters.  */
        while (clusters)
 8016e08:	e250      	b.n	80172ac <_fx_file_write+0x78c>
        {

            /* Decrease the cluster count.  */
            clusters--;
 8016e0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016e0e:	3b01      	subs	r3, #1
 8016e10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
#ifdef FX_ENABLE_EXFAT
            if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8016e14:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016e18:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8016e1c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8016e20:	2b07      	cmp	r3, #7
 8016e22:	f040 80b3 	bne.w	8016f8c <_fx_file_write+0x46c>
            {

                /* Find a free cluster.  */
                if (file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1)
 8016e26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016e2a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8016e2e:	f003 0301 	and.w	r3, r3, #1
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	f000 8095 	beq.w	8016f62 <_fx_file_write+0x442>
                {

                    if (last_cluster)
 8016e38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	f000 8082 	beq.w	8016f46 <_fx_file_write+0x426>
                    {

                        cluster_state = FX_EXFAT_BITMAP_CLUSTER_OCCUPIED;
 8016e42:	2301      	movs	r3, #1
 8016e44:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
                        FAT_index = last_cluster + 1;
 8016e48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

                        if (FAT_index < media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 8016e52:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e58:	1c9a      	adds	r2, r3, #2
 8016e5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e5e:	429a      	cmp	r2, r3
 8016e60:	d912      	bls.n	8016e88 <_fx_file_write+0x368>
                        {

                            /* Get the state of the cluster.  */
                            status = _fx_utility_exFAT_cluster_state_get(media_ptr, FAT_index, &cluster_state);
 8016e62:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8016e66:	f207 13a7 	addw	r3, r7, #423	; 0x1a7
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016e70:	f003 ff86 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 8016e74:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

                            if (status != FX_SUCCESS)
 8016e78:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d003      	beq.n	8016e88 <_fx_file_write+0x368>

                                /* Release media protection.  */
                                FX_UNPROTECT

                                /* Return the bad status.  */
                                return(status);
 8016e80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016e84:	f000 be45 	b.w	8017b12 <_fx_file_write+0xff2>
                            }
                        }

                        /* Check if we still can do not use FAT.  */
                        if (cluster_state == FX_EXFAT_BITMAP_CLUSTER_FREE)
 8016e88:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d107      	bne.n	8016ea0 <_fx_file_write+0x380>
                        {

                            /* Clusters are still consecutive.  */
                            file_ptr -> fx_file_consecutive_cluster++;
 8016e90:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016e94:	699b      	ldr	r3, [r3, #24]
 8016e96:	1c5a      	adds	r2, r3, #1
 8016e98:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016e9c:	619a      	str	r2, [r3, #24]
 8016e9e:	e06d      	b.n	8016f7c <_fx_file_write+0x45c>
                        }
                        else
                        {

                            /* Now we should use FAT.  */
                            file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat &= (CHAR)0xfe; /* Clear bit 0.  */
 8016ea0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016ea4:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8016ea8:	f023 0301 	bic.w	r3, r3, #1
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8016eb2:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8

                            /* Build FAT chain.  */
                            for (i = file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster; i < last_cluster; ++i)
 8016eb6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016ebe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8016ec2:	e01a      	b.n	8016efa <_fx_file_write+0x3da>
 8016ec4:	46494c45 	.word	0x46494c45
                            {

                                status = _fx_utility_FAT_entry_write(media_ptr, i, i + 1);
 8016ec8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016ecc:	3301      	adds	r3, #1
 8016ece:	461a      	mov	r2, r3
 8016ed0:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8016ed4:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016ed8:	f002 fe6b 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8016edc:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

                                if (status != FX_SUCCESS)
 8016ee0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d003      	beq.n	8016ef0 <_fx_file_write+0x3d0>

                                    /* Release media protection.  */
                                    FX_UNPROTECT

                                    /* Return the bad status.  */
                                    return(status);
 8016ee8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016eec:	f000 be11 	b.w	8017b12 <_fx_file_write+0xff2>
                            for (i = file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster; i < last_cluster; ++i)
 8016ef0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8016efa:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8016efe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d3e0      	bcc.n	8016ec8 <_fx_file_write+0x3a8>
                                }
                            }

                            /* Write the last cluster FAT entry.  */
                            status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FX_LAST_CLUSTER_exFAT);
 8016f06:	f04f 32ff 	mov.w	r2, #4294967295
 8016f0a:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8016f0e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016f12:	f002 fe4e 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8016f16:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
                            if (status != FX_SUCCESS)
 8016f1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d003      	beq.n	8016f2a <_fx_file_write+0x40a>

                                /* Release media protection.  */
                                FX_UNPROTECT

                                /* Return the bad status.  */
                                return(status);
 8016f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016f26:	f000 bdf4 	b.w	8017b12 <_fx_file_write+0xff2>
                            }

                            /* Find free cluster from exFAT media.  */
                            status = _fx_utility_exFAT_bitmap_free_cluster_find(media_ptr,
 8016f2a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016f2e:	f8d3 14b0 	ldr.w	r1, [r3, #1200]	; 0x4b0
 8016f32:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8016f36:	461a      	mov	r2, r3
 8016f38:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016f3c:	f003 fd36 	bl	801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>
 8016f40:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
 8016f44:	e01a      	b.n	8016f7c <_fx_file_write+0x45c>
                    }
                    else
                    {

                        /* Find the first cluster for file.  */
                        status = _fx_utility_exFAT_bitmap_free_cluster_find(media_ptr,
 8016f46:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016f4a:	f8d3 14b0 	ldr.w	r1, [r3, #1200]	; 0x4b0
 8016f4e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8016f52:	461a      	mov	r2, r3
 8016f54:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016f58:	f003 fd28 	bl	801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>
 8016f5c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
 8016f60:	e00c      	b.n	8016f7c <_fx_file_write+0x45c>
                }
                else
                {

                    /* Find free cluster from exFAT media.  */
                    status = _fx_utility_exFAT_bitmap_free_cluster_find(media_ptr,
 8016f62:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016f66:	f8d3 14b0 	ldr.w	r1, [r3, #1200]	; 0x4b0
 8016f6a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8016f6e:	461a      	mov	r2, r3
 8016f70:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016f74:	f003 fd1a 	bl	801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>
 8016f78:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
                                                                        media_ptr -> fx_media_cluster_search_start,
                                                                        &FAT_index);
                }

                if (status != FX_SUCCESS)
 8016f7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d04f      	beq.n	8017024 <_fx_file_write+0x504>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the bad status.  */
                    return(status);
 8016f84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016f88:	f000 bdc3 	b.w	8017b12 <_fx_file_write+0xff2>
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 8016f8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d102      	bne.n	8016f9a <_fx_file_write+0x47a>
                        /* Release media protection.  */
                        FX_UNPROTECT

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 8016f94:	230a      	movs	r3, #10
 8016f96:	f000 bdbc 	b.w	8017b12 <_fx_file_write+0xff2>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8016f9a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8016f9e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016fa8:	f002 fbbd 	bl	8019726 <_fx_utility_FAT_entry_read>
 8016fac:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 8016fb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d003      	beq.n	8016fc0 <_fx_file_write+0x4a0>

                        /* Release media protection.  */
                        FX_UNPROTECT

                        /* Return the bad status.  */
                        return(status);
 8016fb8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016fbc:	f000 bda9 	b.w	8017b12 <_fx_file_write+0xff2>
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 8016fc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8016fc4:	3b01      	subs	r3, #1
 8016fc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 8016fca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d116      	bne.n	8017000 <_fx_file_write+0x4e0>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8016fd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016fd6:	1c5a      	adds	r2, r3, #1
 8016fd8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016fdc:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8016fe0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016fe4:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8016fe8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fee:	3302      	adds	r3, #2
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d316      	bcc.n	8017022 <_fx_file_write+0x502>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8016ff4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	f8c2 34b0 	str.w	r3, [r2, #1200]	; 0x4b0
                        }

                        /* Break this loop.  */
                        break;
 8016ffe:	e010      	b.n	8017022 <_fx_file_write+0x502>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 8017000:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017004:	3301      	adds	r3, #1
 8017006:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801700a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017010:	1c9a      	adds	r2, r3, #2
 8017012:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017016:	429a      	cmp	r2, r3
 8017018:	d8b8      	bhi.n	8016f8c <_fx_file_write+0x46c>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 801701a:	2302      	movs	r3, #2
 801701c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
                    if (!total_clusters)
 8017020:	e7b4      	b.n	8016f8c <_fx_file_write+0x46c>
                        break;
 8017022:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 8017024:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8017028:	2b00      	cmp	r3, #0
 801702a:	d103      	bne.n	8017034 <_fx_file_write+0x514>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 801702c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017030:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 8017034:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8017038:	2b00      	cmp	r3, #0
 801703a:	f000 8094 	beq.w	8017166 <_fx_file_write+0x646>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 801703e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017042:	69da      	ldr	r2, [r3, #28]
 8017044:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8017048:	4293      	cmp	r3, r2
 801704a:	d012      	beq.n	8017072 <_fx_file_write+0x552>
                {
#ifdef FX_ENABLE_EXFAT
                    if (!(file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1)
 801704c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017050:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8017054:	f003 0301 	and.w	r3, r3, #1
 8017058:	2b00      	cmp	r3, #0
 801705a:	d10a      	bne.n	8017072 <_fx_file_write+0x552>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 801705c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017060:	461a      	mov	r2, r3
 8017062:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8017066:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801706a:	f002 fda2 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 801706e:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8017072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017076:	2b00      	cmp	r3, #0
 8017078:	d003      	beq.n	8017082 <_fx_file_write+0x562>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the bad status.  */
                    return(status);
 801707a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801707e:	f000 bd48 	b.w	8017b12 <_fx_file_write+0xff2>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 8017082:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8017088:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801708c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017090:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 8017092:	429a      	cmp	r2, r3
 8017094:	f0c0 80d0 	bcc.w	8017238 <_fx_file_write+0x718>
                    (file_ptr -> fx_file_current_logical_offset >=
 8017098:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801709c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 801709e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80170a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80170a4:	429a      	cmp	r2, r3
 80170a6:	f0c0 80c7 	bcc.w	8017238 <_fx_file_write+0x718>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 80170aa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80170ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80170b2:	621a      	str	r2, [r3, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 80170b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80170b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170ba:	1c5a      	adds	r2, r3, #1
 80170bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80170c0:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 80170c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80170c6:	2300      	movs	r3, #0
 80170c8:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80170ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80170ce:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80170d2:	2200      	movs	r2, #0
 80170d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80170d8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 80170dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80170e0:	3b02      	subs	r3, #2
 80170e2:	2200      	movs	r2, #0
 80170e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80170e8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80170ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80170f0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80170f4:	2200      	movs	r2, #0
 80170f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80170fa:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 80170fe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8017102:	462b      	mov	r3, r5
 8017104:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8017108:	4642      	mov	r2, r8
 801710a:	fb02 f203 	mul.w	r2, r2, r3
 801710e:	464b      	mov	r3, r9
 8017110:	4621      	mov	r1, r4
 8017112:	fb01 f303 	mul.w	r3, r1, r3
 8017116:	4413      	add	r3, r2
 8017118:	4622      	mov	r2, r4
 801711a:	4641      	mov	r1, r8
 801711c:	fba2 1201 	umull	r1, r2, r2, r1
 8017120:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8017124:	460a      	mov	r2, r1
 8017126:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 801712a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801712e:	4413      	add	r3, r2
 8017130:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017134:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8017138:	4623      	mov	r3, r4
 801713a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 801713e:	4602      	mov	r2, r0
 8017140:	189b      	adds	r3, r3, r2
 8017142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017146:	462b      	mov	r3, r5
 8017148:	460a      	mov	r2, r1
 801714a:	4153      	adcs	r3, r2
 801714c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017150:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017154:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8017158:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 801715c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017160:	2300      	movs	r3, #0
 8017162:	6313      	str	r3, [r2, #48]	; 0x30
 8017164:	e068      	b.n	8017238 <_fx_file_write+0x718>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 8017166:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801716a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801716e:	615a      	str	r2, [r3, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8017170:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8017174:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017178:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 801717a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801717e:	2300      	movs	r3, #0
 8017180:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017182:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017186:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801718a:	2200      	movs	r2, #0
 801718c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017190:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017194:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017198:	3b02      	subs	r3, #2
 801719a:	2200      	movs	r2, #0
 801719c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80171a0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80171a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80171a8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80171ac:	2200      	movs	r2, #0
 80171ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80171b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 80171b6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80171ba:	462b      	mov	r3, r5
 80171bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80171c0:	4642      	mov	r2, r8
 80171c2:	fb02 f203 	mul.w	r2, r2, r3
 80171c6:	464b      	mov	r3, r9
 80171c8:	4621      	mov	r1, r4
 80171ca:	fb01 f303 	mul.w	r3, r1, r3
 80171ce:	4413      	add	r3, r2
 80171d0:	4622      	mov	r2, r4
 80171d2:	4641      	mov	r1, r8
 80171d4:	fba2 1201 	umull	r1, r2, r2, r1
 80171d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80171dc:	460a      	mov	r2, r1
 80171de:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80171e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80171e6:	4413      	add	r3, r2
 80171e8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80171ec:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80171f0:	4623      	mov	r3, r4
 80171f2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80171f6:	4602      	mov	r2, r0
 80171f8:	189b      	adds	r3, r3, r2
 80171fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80171fe:	462b      	mov	r3, r5
 8017200:	460a      	mov	r2, r1
 8017202:	4153      	adcs	r3, r2
 8017204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017208:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801720c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8017210:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 8017214:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017218:	2300      	movs	r3, #0
 801721a:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 801721c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017220:	f04f 0200 	mov.w	r2, #0
 8017224:	f04f 0300 	mov.w	r3, #0
 8017228:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 801722c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8017230:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            }
#ifdef FX_ENABLE_EXFAT
            if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8017238:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801723c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8017240:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8017244:	2b07      	cmp	r3, #7
 8017246:	d127      	bne.n	8017298 <_fx_file_write+0x778>
            {

                /* Update Bitmap */
                status = _fx_utility_exFAT_cluster_state_set(media_ptr, FAT_index, FX_EXFAT_BITMAP_CLUSTER_OCCUPIED);
 8017248:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801724c:	2201      	movs	r2, #1
 801724e:	4619      	mov	r1, r3
 8017250:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8017254:	f003 fdd3 	bl	801adfe <_fx_utility_exFAT_cluster_state_set>
 8017258:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

                if (status !=  FX_SUCCESS)
 801725c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017260:	2b00      	cmp	r3, #0
 8017262:	d003      	beq.n	801726c <_fx_file_write+0x74c>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the bad status.  */
                    return(status);
 8017264:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017268:	f000 bc53 	b.w	8017b12 <_fx_file_write+0xff2>
                }

                /* Move cluster search pointer forward. */
                media_ptr -> fx_media_cluster_search_start = FAT_index + 1;
 801726c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017270:	1c5a      	adds	r2, r3, #1
 8017272:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017276:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

                /* Determine if this needs to be wrapped. */
                if (media_ptr -> fx_media_cluster_search_start >= media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 801727a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801727e:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8017282:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017288:	3302      	adds	r3, #2
 801728a:	429a      	cmp	r2, r3
 801728c:	d304      	bcc.n	8017298 <_fx_file_write+0x778>
                {

                    /* Wrap the search to the beginning FAT entry. */
                    media_ptr -> fx_media_cluster_search_start = FX_FAT_ENTRY_START;
 801728e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8017292:	2302      	movs	r3, #2
 8017294:	f8c2 34b0 	str.w	r3, [r2, #1200]	; 0x4b0
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 8017298:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801729c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80172a0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80172a4:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80172a8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        while (clusters)
 80172ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f47f adaa 	bne.w	8016e0a <_fx_file_write+0x2ea>
        }
#ifdef FX_ENABLE_EXFAT
        if (!(file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1)
 80172b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80172ba:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80172be:	f003 0301 	and.w	r3, r3, #1
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d116      	bne.n	80172f4 <_fx_file_write+0x7d4>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80172c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80172ca:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80172ce:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80172d2:	461a      	mov	r2, r3
 80172d4:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 80172d8:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80172dc:	f002 fc69 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 80172e0:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 80172e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d003      	beq.n	80172f4 <_fx_file_write+0x7d4>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Return the bad status.  */
                return(status);
 80172ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80172f0:	f000 bc0f 	b.w	8017b12 <_fx_file_write+0xff2>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 80172f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80172f8:	69db      	ldr	r3, [r3, #28]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d01a      	beq.n	8017334 <_fx_file_write+0x814>
        {
#ifdef FX_ENABLE_EXFAT
            if (!(file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1))
 80172fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017302:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8017306:	f003 0301 	and.w	r3, r3, #1
 801730a:	2b00      	cmp	r3, #0
 801730c:	d112      	bne.n	8017334 <_fx_file_write+0x814>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 801730e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017312:	69db      	ldr	r3, [r3, #28]
 8017314:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8017318:	4619      	mov	r1, r3
 801731a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801731e:	f002 fc48 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8017322:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8017326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801732a:	2b00      	cmp	r3, #0
 801732c:	d002      	beq.n	8017334 <_fx_file_write+0x814>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the bad status.  */
                    return(status);
 801732e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017332:	e3ee      	b.n	8017b12 <_fx_file_write+0xff2>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 8017334:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017338:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801733c:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 801733e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 8017344:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 801734a:	429a      	cmp	r2, r3
 801734c:	d31b      	bcc.n	8017386 <_fx_file_write+0x866>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 801734e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017352:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8017356:	1c51      	adds	r1, r2, #1
 8017358:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801735c:	f143 0300 	adc.w	r3, r3, #0
 8017360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017364:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801736c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 8017370:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017376:	1c5a      	adds	r2, r3, #1
 8017378:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801737c:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 801737e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017382:	2300      	movs	r3, #0
 8017384:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 8017386:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801738a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 801738e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8017392:	2200      	movs	r2, #0
 8017394:	613b      	str	r3, [r7, #16]
 8017396:	617a      	str	r2, [r7, #20]
 8017398:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801739c:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 80173a0:	e291      	b.n	80178c6 <_fx_file_write+0xda6>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80173a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80173a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d111      	bne.n	80173d0 <_fx_file_write+0x8b0>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 80173ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80173b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173b2:	2200      	movs	r2, #0
 80173b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80173b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80173bc:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80173c0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80173c4:	4621      	mov	r1, r4
 80173c6:	428a      	cmp	r2, r1
 80173c8:	4629      	mov	r1, r5
 80173ca:	418b      	sbcs	r3, r1
 80173cc:	f080 8088 	bcs.w	80174e0 <_fx_file_write+0x9c0>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 80173d0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80173d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 80173d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80173dc:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 80173de:	2304      	movs	r3, #4
 80173e0:	9302      	str	r3, [sp, #8]
 80173e2:	2301      	movs	r3, #1
 80173e4:	9301      	str	r3, [sp, #4]
 80173e6:	9200      	str	r2, [sp, #0]
 80173e8:	4602      	mov	r2, r0
 80173ea:	460b      	mov	r3, r1
 80173ec:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80173f0:	f004 fd22 	bl	801be38 <_fx_utility_logical_sector_read>
 80173f4:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 80173f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d002      	beq.n	8017406 <_fx_file_write+0x8e6>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Return the error status.  */
                return(status);
 8017400:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017404:	e385      	b.n	8017b12 <_fx_file_write+0xff2>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8017406:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801740a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 801740c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8017412:	1ad3      	subs	r3, r2, r3
 8017414:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 8017418:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801741c:	2200      	movs	r2, #0
 801741e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017422:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8017426:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 801742a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801742e:	4621      	mov	r1, r4
 8017430:	428a      	cmp	r2, r1
 8017432:	4629      	mov	r1, r5
 8017434:	418b      	sbcs	r3, r1
 8017436:	d203      	bcs.n	8017440 <_fx_file_write+0x920>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 8017438:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801743c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 8017440:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017444:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 8017446:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 801744c:	4413      	add	r3, r2
 801744e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8017452:	4619      	mov	r1, r3
 8017454:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 8017458:	f005 f8eb 	bl	801c632 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 801745c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017460:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8017464:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017468:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 801746a:	2304      	movs	r3, #4
 801746c:	9302      	str	r3, [sp, #8]
 801746e:	2301      	movs	r3, #1
 8017470:	9301      	str	r3, [sp, #4]
 8017472:	9200      	str	r2, [sp, #0]
 8017474:	4602      	mov	r2, r0
 8017476:	460b      	mov	r3, r1
 8017478:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801747c:	f004 ff70 	bl	801c360 <_fx_utility_logical_sector_write>
 8017480:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 8017484:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017488:	2b00      	cmp	r3, #0
 801748a:	d002      	beq.n	8017492 <_fx_file_write+0x972>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Return the error status.  */
                return(status);
 801748c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017490:	e33f      	b.n	8017b12 <_fx_file_write+0xff2>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8017492:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017498:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801749c:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 801749e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80174a2:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 80174a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80174a8:	2200      	movs	r2, #0
 80174aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80174ae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80174b2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80174b6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80174ba:	4621      	mov	r1, r4
 80174bc:	1a51      	subs	r1, r2, r1
 80174be:	60b9      	str	r1, [r7, #8]
 80174c0:	4629      	mov	r1, r5
 80174c2:	eb63 0301 	sbc.w	r3, r3, r1
 80174c6:	60fb      	str	r3, [r7, #12]
 80174c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80174cc:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 80174d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80174d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80174d8:	4413      	add	r3, r2
 80174da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80174de:	e111      	b.n	8017704 <_fx_file_write+0xbe4>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80174e0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80174e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174e6:	2200      	movs	r2, #0
 80174e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80174ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80174f0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80174f4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80174f8:	f7e9 fc1a 	bl	8000d30 <__aeabi_uldivmod>
 80174fc:	4602      	mov	r2, r0
 80174fe:	460b      	mov	r3, r1
 8017500:	4613      	mov	r3, r2
 8017502:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8017506:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801750a:	6a1b      	ldr	r3, [r3, #32]
 801750c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8017510:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8017514:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8017518:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801751c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8017520:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8017526:	1ad3      	subs	r3, r2, r3
 8017528:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801752c:	e047      	b.n	80175be <_fx_file_write+0xa9e>
            {
#ifdef FX_ENABLE_EXFAT
                if (file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1)
 801752e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017532:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8017536:	f003 0301 	and.w	r3, r3, #1
 801753a:	2b00      	cmp	r3, #0
 801753c:	d005      	beq.n	801754a <_fx_file_write+0xa2a>
                {
                    cluster++;
 801753e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8017542:	3301      	adds	r3, #1
 8017544:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8017548:	e030      	b.n	80175ac <_fx_file_write+0xa8c>
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 801754a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801754e:	461a      	mov	r2, r3
 8017550:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8017554:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8017558:	f002 f8e5 	bl	8019726 <_fx_utility_FAT_entry_read>
 801755c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8017560:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10d      	bne.n	8017584 <_fx_file_write+0xa64>
 8017568:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801756c:	2b01      	cmp	r3, #1
 801756e:	d909      	bls.n	8017584 <_fx_file_write+0xa64>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8017570:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017574:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8017578:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 801757c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8017580:	429a      	cmp	r2, r3
 8017582:	d208      	bcs.n	8017596 <_fx_file_write+0xa76>

                        /* Release media protection.  */
                        FX_UNPROTECT

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8017584:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017588:	2b00      	cmp	r3, #0
 801758a:	d002      	beq.n	8017592 <_fx_file_write+0xa72>
                        {
                            return(status);
 801758c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017590:	e2bf      	b.n	8017b12 <_fx_file_write+0xff2>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8017592:	2308      	movs	r3, #8
 8017594:	e2bd      	b.n	8017b12 <_fx_file_write+0xff2>
                        }
                    }

                    if (next_cluster != cluster + 1)
 8017596:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801759a:	1c5a      	adds	r2, r3, #1
 801759c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d113      	bne.n	80175cc <_fx_file_write+0xaac>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 80175a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80175a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80175ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80175b0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80175b4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80175b8:	4413      	add	r3, r2
 80175ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80175be:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80175c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d3b1      	bcc.n	801752e <_fx_file_write+0xa0e>
 80175ca:	e000      	b.n	80175ce <_fx_file_write+0xaae>
                        break;
 80175cc:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 80175ce:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80175d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d203      	bcs.n	80175e2 <_fx_file_write+0xac2>
            {
                sectors = i;
 80175da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80175de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80175e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80175e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80175ea:	2304      	movs	r3, #4
 80175ec:	9302      	str	r3, [sp, #8]
 80175ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80175f2:	9301      	str	r3, [sp, #4]
 80175f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80175f8:	9300      	str	r3, [sp, #0]
 80175fa:	4602      	mov	r2, r0
 80175fc:	460b      	mov	r3, r1
 80175fe:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8017602:	f004 fead 	bl	801c360 <_fx_utility_logical_sector_write>
 8017606:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 801760a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801760e:	2b00      	cmp	r3, #0
 8017610:	d002      	beq.n	8017618 <_fx_file_write+0xaf8>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Return the error status.  */
                return(status);
 8017612:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8017616:	e27c      	b.n	8017b12 <_fx_file_write+0xff2>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 8017618:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801761c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 8017620:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017624:	3b01      	subs	r3, #1
 8017626:	2200      	movs	r2, #0
 8017628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801762c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 8017630:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8017634:	4623      	mov	r3, r4
 8017636:	18c3      	adds	r3, r0, r3
 8017638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801763c:	462b      	mov	r3, r5
 801763e:	eb41 0303 	adc.w	r3, r1, r3
 8017642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 8017646:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801764a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801764e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8017652:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017656:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8017658:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801765c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801765e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017662:	4413      	add	r3, r2
 8017664:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8017666:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801766a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801766e:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8017672:	18ca      	adds	r2, r1, r3
 8017674:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017678:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 801767a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801767e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017680:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017684:	4413      	add	r3, r2
 8017686:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8017688:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801768c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 8017690:	fbb1 f3f2 	udiv	r3, r1, r2
 8017694:	fb02 f303 	mul.w	r3, r2, r3
 8017698:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 801769a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801769e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 80176a0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80176a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 80176a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80176aa:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 80176ac:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80176b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80176b4:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80176b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80176ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80176bc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80176c0:	fb02 f303 	mul.w	r3, r2, r3
 80176c4:	2200      	movs	r2, #0
 80176c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80176ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 80176ce:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80176d2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80176d6:	4621      	mov	r1, r4
 80176d8:	1a51      	subs	r1, r2, r1
 80176da:	6039      	str	r1, [r7, #0]
 80176dc:	4629      	mov	r1, r5
 80176de:	eb63 0301 	sbc.w	r3, r3, r1
 80176e2:	607b      	str	r3, [r7, #4]
 80176e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80176e8:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80176ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80176f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80176f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80176f6:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 80176fa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80176fe:	4413      	add	r3, r2
 8017700:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 8017704:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 801770a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 8017710:	429a      	cmp	r2, r3
 8017712:	f0c0 80d8 	bcc.w	80178c6 <_fx_file_write+0xda6>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 8017716:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 801771a:	4313      	orrs	r3, r2
 801771c:	d11f      	bne.n	801775e <_fx_file_write+0xc3e>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 801771e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017722:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017726:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 801772a:	2000      	movs	r0, #0
 801772c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8017730:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8017734:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8017738:	4621      	mov	r1, r4
 801773a:	1851      	adds	r1, r2, r1
 801773c:	67b9      	str	r1, [r7, #120]	; 0x78
 801773e:	4629      	mov	r1, r5
 8017740:	414b      	adcs	r3, r1
 8017742:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 8017744:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017748:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 801774c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8017750:	4621      	mov	r1, r4
 8017752:	4291      	cmp	r1, r2
 8017754:	4629      	mov	r1, r5
 8017756:	eb71 0303 	sbcs.w	r3, r1, r3
 801775a:	f080 80ba 	bcs.w	80178d2 <_fx_file_write+0xdb2>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 801775e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017764:	1c5a      	adds	r2, r3, #1
 8017766:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801776a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 801776c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 8017772:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017776:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
            if (file_ptr -> fx_file_current_relative_sector >=
 801777a:	429a      	cmp	r2, r3
 801777c:	f0c0 8090 	bcc.w	80178a0 <_fx_file_write+0xd80>
            {

                /* Yes, we need to move to the next cluster.  */
#ifdef FX_ENABLE_EXFAT
                if (file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat & 1)
 8017780:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017784:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8017788:	f003 0301 	and.w	r3, r3, #1
 801778c:	2b00      	cmp	r3, #0
 801778e:	d006      	beq.n	801779e <_fx_file_write+0xc7e>
                {

                    next_cluster = file_ptr -> fx_file_current_physical_cluster + 1;
 8017790:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017794:	6a1b      	ldr	r3, [r3, #32]
 8017796:	3301      	adds	r3, #1
 8017798:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 801779c:	e026      	b.n	80177ec <_fx_file_write+0xccc>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 801779e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177a2:	6a19      	ldr	r1, [r3, #32]
 80177a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80177a8:	461a      	mov	r2, r3
 80177aa:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80177ae:	f001 ffba 	bl	8019726 <_fx_utility_FAT_entry_read>
 80177b2:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80177b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d10d      	bne.n	80177da <_fx_file_write+0xcba>
 80177be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d909      	bls.n	80177da <_fx_file_write+0xcba>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 80177c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80177ca:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80177ce:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80177d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d208      	bcs.n	80177ec <_fx_file_write+0xccc>

                        /* Release media protection.  */
                        FX_UNPROTECT

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 80177da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d002      	beq.n	80177e8 <_fx_file_write+0xcc8>
                        {
                            return(status);
 80177e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80177e6:	e194      	b.n	8017b12 <_fx_file_write+0xff2>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 80177e8:	2308      	movs	r3, #8
 80177ea:	e192      	b.n	8017b12 <_fx_file_write+0xff2>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 80177ec:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80177f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177f4:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 80177f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017802:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017804:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017808:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801780c:	2200      	movs	r2, #0
 801780e:	673b      	str	r3, [r7, #112]	; 0x70
 8017810:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017812:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017816:	2200      	movs	r2, #0
 8017818:	66bb      	str	r3, [r7, #104]	; 0x68
 801781a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801781c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8017820:	460b      	mov	r3, r1
 8017822:	3b02      	subs	r3, #2
 8017824:	663b      	str	r3, [r7, #96]	; 0x60
 8017826:	4613      	mov	r3, r2
 8017828:	f143 33ff 	adc.w	r3, r3, #4294967295
 801782c:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801782e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017832:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017836:	2200      	movs	r2, #0
 8017838:	65bb      	str	r3, [r7, #88]	; 0x58
 801783a:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 801783c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8017840:	462b      	mov	r3, r5
 8017842:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8017846:	4642      	mov	r2, r8
 8017848:	fb02 f203 	mul.w	r2, r2, r3
 801784c:	464b      	mov	r3, r9
 801784e:	4621      	mov	r1, r4
 8017850:	fb01 f303 	mul.w	r3, r1, r3
 8017854:	4413      	add	r3, r2
 8017856:	4622      	mov	r2, r4
 8017858:	4641      	mov	r1, r8
 801785a:	fba2 1201 	umull	r1, r2, r2, r1
 801785e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8017862:	460a      	mov	r2, r1
 8017864:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8017868:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801786c:	4413      	add	r3, r2
 801786e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017872:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8017876:	4623      	mov	r3, r4
 8017878:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 801787c:	4602      	mov	r2, r0
 801787e:	189b      	adds	r3, r3, r2
 8017880:	653b      	str	r3, [r7, #80]	; 0x50
 8017882:	462b      	mov	r3, r5
 8017884:	460a      	mov	r2, r1
 8017886:	4153      	adcs	r3, r2
 8017888:	657b      	str	r3, [r7, #84]	; 0x54
 801788a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801788e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8017892:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 8017896:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801789a:	2300      	movs	r3, #0
 801789c:	6393      	str	r3, [r2, #56]	; 0x38
 801789e:	e00e      	b.n	80178be <_fx_file_write+0xd9e>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 80178a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80178a8:	1c51      	adds	r1, r2, #1
 80178aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80178ac:	f143 0300 	adc.w	r3, r3, #0
 80178b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80178b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80178ba:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 80178be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80178c2:	2300      	movs	r3, #0
 80178c4:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 80178c6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80178ca:	4313      	orrs	r3, r2
 80178cc:	f47f ad69 	bne.w	80173a2 <_fx_file_write+0x882>
 80178d0:	e000      	b.n	80178d4 <_fx_file_write+0xdb4>
                break;
 80178d2:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 80178d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80178dc:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80178e0:	2000      	movs	r0, #0
 80178e2:	6439      	str	r1, [r7, #64]	; 0x40
 80178e4:	6478      	str	r0, [r7, #68]	; 0x44
 80178e6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80178ea:	4621      	mov	r1, r4
 80178ec:	1851      	adds	r1, r2, r1
 80178ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80178f0:	4629      	mov	r1, r5
 80178f2:	eb43 0101 	adc.w	r1, r3, r1
 80178f6:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 80178f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8017900:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 8017904:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017908:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 801790c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017910:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 8017914:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017918:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 801791c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017920:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 8017924:	4290      	cmp	r0, r2
 8017926:	eb71 0303 	sbcs.w	r3, r1, r3
 801792a:	f080 80e0 	bcs.w	8017aee <_fx_file_write+0xfce>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 801792e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017932:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017936:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 801793a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 801793e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017942:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8017946:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 801794a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801794e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8017952:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        while (open_count)
 8017956:	e0c5      	b.n	8017ae4 <_fx_file_write+0xfc4>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 8017958:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801795c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017960:	429a      	cmp	r2, r3
 8017962:	f000 80b5 	beq.w	8017ad0 <_fx_file_write+0xfb0>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8017966:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801796a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 801796e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017972:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 8017976:	4299      	cmp	r1, r3
 8017978:	bf08      	it	eq
 801797a:	4290      	cmpeq	r0, r2
 801797c:	f040 80a8 	bne.w	8017ad0 <_fx_file_write+0xfb0>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8017980:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017984:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 8017988:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801798c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8017990:	429a      	cmp	r2, r3
 8017992:	f040 809d 	bne.w	8017ad0 <_fx_file_write+0xfb0>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8017996:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801799a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801799e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80179a2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 80179a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80179ae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80179b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 80179b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179ba:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80179be:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80179c2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 80179c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179ca:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80179ce:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80179d2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 80179d6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80179de:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80179e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 80179e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179ea:	69da      	ldr	r2, [r3, #28]
 80179ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80179f0:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 80179f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80179fa:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80179fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 8017a02:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017a06:	691b      	ldr	r3, [r3, #16]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d161      	bne.n	8017ad0 <_fx_file_write+0xfb0>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 8017a0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a10:	691a      	ldr	r2, [r3, #16]
 8017a12:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017a16:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8017a18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a1c:	695a      	ldr	r2, [r3, #20]
 8017a1e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017a22:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 8017a24:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017a28:	2200      	movs	r2, #0
 8017a2a:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017a2c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017a30:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8017a34:	2200      	movs	r2, #0
 8017a36:	633b      	str	r3, [r7, #48]	; 0x30
 8017a38:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8017a3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a3e:	695b      	ldr	r3, [r3, #20]
 8017a40:	3b02      	subs	r3, #2
 8017a42:	2200      	movs	r2, #0
 8017a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a46:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017a48:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017a4c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017a50:	2200      	movs	r2, #0
 8017a52:	623b      	str	r3, [r7, #32]
 8017a54:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8017a56:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8017a5a:	462b      	mov	r3, r5
 8017a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017a60:	4642      	mov	r2, r8
 8017a62:	fb02 f203 	mul.w	r2, r2, r3
 8017a66:	464b      	mov	r3, r9
 8017a68:	4621      	mov	r1, r4
 8017a6a:	fb01 f303 	mul.w	r3, r1, r3
 8017a6e:	4413      	add	r3, r2
 8017a70:	4622      	mov	r2, r4
 8017a72:	4641      	mov	r1, r8
 8017a74:	fba2 1201 	umull	r1, r2, r2, r1
 8017a78:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8017a7c:	460a      	mov	r2, r1
 8017a7e:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8017a82:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017a86:	4413      	add	r3, r2
 8017a88:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017a8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8017a90:	4623      	mov	r3, r4
 8017a92:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8017a96:	4602      	mov	r2, r0
 8017a98:	189b      	adds	r3, r3, r2
 8017a9a:	61bb      	str	r3, [r7, #24]
 8017a9c:	462b      	mov	r3, r5
 8017a9e:	460a      	mov	r2, r1
 8017aa0:	4153      	adcs	r3, r2
 8017aa2:	61fb      	str	r3, [r7, #28]
 8017aa4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017aa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017aac:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 8017ab0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 8017ab8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017abc:	2200      	movs	r2, #0
 8017abe:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 8017ac0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8017ac4:	f04f 0200 	mov.w	r2, #0
 8017ac8:	f04f 0300 	mov.w	r3, #0
 8017acc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8017ad0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ad6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            open_count--;
 8017ada:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        while (open_count)
 8017ae4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	f47f af35 	bne.w	8017958 <_fx_file_write+0xe38>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 8017aee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017af2:	2201      	movs	r2, #1
 8017af4:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 8017af6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017afa:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d006      	beq.n	8017b10 <_fx_file_write+0xff0>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 8017b02:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b06:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8017b0a:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8017b0e:	4798      	blx	r3

    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 8017b10:	2300      	movs	r3, #0
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017b1e:	bf00      	nop

08017b20 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b084      	sub	sp, #16
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8017b2e:	1c5a      	adds	r2, r3, #1
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	4a2b      	ldr	r2, [pc, #172]	; (8017be8 <_fx_media_abort+0xc8>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d001      	beq.n	8017b44 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8017b40:	2311      	movs	r3, #17
 8017b42:	e04c      	b.n	8017bde <_fx_media_abort+0xbe>

    /* Protect against other threads accessing the media.  */
    FX_PROTECT

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8017b4a:	60fb      	str	r3, [r7, #12]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8017b52:	60bb      	str	r3, [r7, #8]
    while (open_count)
 8017b54:	e008      	b.n	8017b68 <_fx_media_abort+0x48>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	4a24      	ldr	r2, [pc, #144]	; (8017bec <_fx_media_abort+0xcc>)
 8017b5a:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b60:	60bb      	str	r3, [r7, #8]
        open_count--;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	3b01      	subs	r3, #1
 8017b66:	60fb      	str	r3, [r7, #12]
    while (open_count)
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d1f3      	bne.n	8017b56 <_fx_media_abort+0x36>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2203      	movs	r2, #3
 8017b72:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2290      	movs	r2, #144	; 0x90
 8017b7a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	4798      	blx	r3

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8017b88:	4b19      	ldr	r3, [pc, #100]	; (8017bf0 <_fx_media_abort+0xd0>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d103      	bne.n	8017b98 <_fx_media_abort+0x78>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 8017b90:	4b18      	ldr	r3, [pc, #96]	; (8017bf4 <_fx_media_abort+0xd4>)
 8017b92:	2200      	movs	r2, #0
 8017b94:	601a      	str	r2, [r3, #0]
 8017b96:	e019      	b.n	8017bcc <_fx_media_abort+0xac>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
            media_ptr -> fx_media_opened_previous;
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8017ba4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
            media_ptr -> fx_media_opened_next;
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	f8d2 2500 	ldr.w	r2, [r2, #1280]	; 0x500
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8017bb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 8017bb8:	4b0e      	ldr	r3, [pc, #56]	; (8017bf4 <_fx_media_abort+0xd4>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d104      	bne.n	8017bcc <_fx_media_abort+0xac>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8017bc8:	4a0a      	ldr	r2, [pc, #40]	; (8017bf4 <_fx_media_abort+0xd4>)
 8017bca:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 8017bcc:	4b08      	ldr	r3, [pc, #32]	; (8017bf0 <_fx_media_abort+0xd0>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	3b01      	subs	r3, #1
 8017bd2:	4a07      	ldr	r2, [pc, #28]	; (8017bf0 <_fx_media_abort+0xd0>)
 8017bd4:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	4a07      	ldr	r2, [pc, #28]	; (8017bf8 <_fx_media_abort+0xd8>)
 8017bda:	601a      	str	r2, [r3, #0]
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8017bdc:	2300      	movs	r3, #0
}
 8017bde:	4618      	mov	r0, r3
 8017be0:	3710      	adds	r7, #16
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}
 8017be6:	bf00      	nop
 8017be8:	4d454449 	.word	0x4d454449
 8017bec:	46494c41 	.word	0x46494c41
 8017bf0:	2000d224 	.word	0x2000d224
 8017bf4:	2000d220 	.word	0x2000d220
 8017bf8:	4d454441 	.word	0x4d454441

08017bfc <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8017bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c00:	b08c      	sub	sp, #48	; 0x30
 8017c02:	af00      	add	r7, sp, #0
 8017c04:	6278      	str	r0, [r7, #36]	; 0x24

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8017c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c08:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8017c0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8017c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c10:	330b      	adds	r3, #11
 8017c12:	4618      	mov	r0, r3
 8017c14:	f001 fcd4 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017c18:	4602      	mov	r2, r0
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8017c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	f040 8138 	bne.w	8017e98 <_fx_media_boot_info_extract+0x29c>
#ifdef FX_ENABLE_EXFAT
    {
        /* Treat as exFAT volume.  */
        /* Extract the number of bytes per sector.  */
        media_ptr -> fx_media_exfat_bytes_per_sector_shift = boot_sector[FX_EF_BYTE_PER_SECTOR_SHIFT];
 8017c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c2a:	336c      	adds	r3, #108	; 0x6c
 8017c2c:	781b      	ldrb	r3, [r3, #0]
 8017c2e:	461a      	mov	r2, r3
 8017c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c32:	655a      	str	r2, [r3, #84]	; 0x54

        /* exFAT requires minimal value 9 (512 bytes) and maximum value 12(4096 bytes) for bytes_per_sector_shift */
        if((media_ptr -> fx_media_exfat_bytes_per_sector_shift < 9) || (media_ptr -> fx_media_exfat_bytes_per_sector_shift > 12))
 8017c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017c38:	2b08      	cmp	r3, #8
 8017c3a:	d903      	bls.n	8017c44 <_fx_media_boot_info_extract+0x48>
 8017c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017c40:	2b0c      	cmp	r3, #12
 8017c42:	d901      	bls.n	8017c48 <_fx_media_boot_info_extract+0x4c>
        {
            return(FX_MEDIA_INVALID);
 8017c44:	2302      	movs	r3, #2
 8017c46:	e1c5      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_bytes_per_sector = (UINT)(1 << media_ptr -> fx_media_exfat_bytes_per_sector_shift);
 8017c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017c4c:	2201      	movs	r2, #1
 8017c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c52:	461a      	mov	r2, r3
 8017c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c56:	629a      	str	r2, [r3, #40]	; 0x28

        /* Validate bytes per sector value: no more than bitmap cache size */
        if (media_ptr -> fx_media_bytes_per_sector > sizeof(media_ptr -> fx_media_exfat_bitmap_cache))
 8017c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c60:	d901      	bls.n	8017c66 <_fx_media_boot_info_extract+0x6a>
        {
            return(FX_NOT_ENOUGH_MEMORY);
 8017c62:	2391      	movs	r3, #145	; 0x91
 8017c64:	e1b6      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_total_sectors = _fx_utility_64_unsigned_read(&boot_sector[FX_EF_VOLUME_LENGTH]);
 8017c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c68:	3348      	adds	r3, #72	; 0x48
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f001 fd0e 	bl	801968c <_fx_utility_64_unsigned_read>
 8017c70:	4602      	mov	r2, r0
 8017c72:	460b      	mov	r3, r1
 8017c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8017c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017c80:	4313      	orrs	r3, r2
 8017c82:	d101      	bne.n	8017c88 <_fx_media_boot_info_extract+0x8c>
        {
            return(FX_MEDIA_INVALID);
 8017c84:	2302      	movs	r3, #2
 8017c86:	e1a5      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_reserved_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_FAT_OFFSET]);
 8017c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c8a:	3350      	adds	r3, #80	; 0x50
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f001 fcbf 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017c92:	4602      	mov	r2, r0
 8017c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c96:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
        if (media_ptr -> fx_media_reserved_sectors == 0)
 8017c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9c:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d101      	bne.n	8017ca8 <_fx_media_boot_info_extract+0xac>
        {
            return(FX_MEDIA_INVALID);
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	e195      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_FAT_LENGTH]);
 8017ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017caa:	3354      	adds	r3, #84	; 0x54
 8017cac:	4618      	mov	r0, r3
 8017cae:	f001 fcaf 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb6:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8017cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d101      	bne.n	8017cc8 <_fx_media_boot_info_extract+0xcc>
        {
            return(FX_MEDIA_INVALID);
 8017cc4:	2302      	movs	r3, #2
 8017cc6:	e185      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_data_sector_start = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_CLUSTER_HEAP_OFFSET]);
 8017cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cca:	3358      	adds	r3, #88	; 0x58
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f001 fc9f 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
        if (media_ptr -> fx_media_data_sector_start == 0)
 8017cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cdc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d101      	bne.n	8017ce8 <_fx_media_boot_info_extract+0xec>
        {
            return(FX_MEDIA_INVALID);
 8017ce4:	2302      	movs	r3, #2
 8017ce6:	e175      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_total_clusters = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_CLUSTER_COUNT]);
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	335c      	adds	r3, #92	; 0x5c
 8017cec:	4618      	mov	r0, r3
 8017cee:	f001 fc8f 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf6:	641a      	str	r2, [r3, #64]	; 0x40
        if (media_ptr -> fx_media_total_clusters == 0)
 8017cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d101      	bne.n	8017d04 <_fx_media_boot_info_extract+0x108>
        {
            return(FX_MEDIA_INVALID);
 8017d00:	2302      	movs	r3, #2
 8017d02:	e167      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_exfat_sector_per_clusters_shift = boot_sector[FX_EF_SECTOR_PER_CLUSTER_SHIFT];
 8017d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d06:	336d      	adds	r3, #109	; 0x6d
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0e:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_exfat_sector_per_clusters_shift > 25 - media_ptr -> fx_media_exfat_bytes_per_sector_shift)
 8017d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d18:	f1c3 0319 	rsb	r3, r3, #25
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d901      	bls.n	8017d24 <_fx_media_boot_info_extract+0x128>
        {
            return(FX_MEDIA_INVALID);
 8017d20:	2302      	movs	r3, #2
 8017d22:	e157      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }
        media_ptr -> fx_media_sectors_per_cluster = (UINT)(1 << media_ptr -> fx_media_exfat_sector_per_clusters_shift);
 8017d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d28:	2201      	movs	r2, #1
 8017d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8017d2e:	461a      	mov	r2, r3
 8017d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d32:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484

        media_ptr -> fx_media_number_of_FATs = boot_sector[FX_EF_NUMBER_OF_FATS];
 8017d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d38:	336e      	adds	r3, #110	; 0x6e
 8017d3a:	781b      	ldrb	r3, [r3, #0]
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d40:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8017d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d46:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d101      	bne.n	8017d52 <_fx_media_boot_info_extract+0x156>
        {
            return(FX_MEDIA_INVALID);
 8017d4e:	2302      	movs	r3, #2
 8017d50:	e140      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        media_ptr -> fx_media_root_cluster_32    = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_FIRST_CLUSTER_OF_ROOT_DIR]);
 8017d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d54:	3360      	adds	r3, #96	; 0x60
 8017d56:	4618      	mov	r0, r3
 8017d58:	f001 fc5a 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017d5c:	4602      	mov	r2, r0
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        /* Root cluster starts from at least FX_FAT_ENTRY_START (2), or higher. */
        if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8017d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d66:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8017d6a:	2b01      	cmp	r3, #1
 8017d6c:	d801      	bhi.n	8017d72 <_fx_media_boot_info_extract+0x176>
        {
            return(FX_MEDIA_INVALID);
 8017d6e:	2302      	movs	r3, #2
 8017d70:	e130      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Overflow check. */
        if (((ULONG64)media_ptr -> fx_media_data_sector_start +
 8017d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d74:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8017d78:	2200      	movs	r2, #0
 8017d7a:	61bb      	str	r3, [r7, #24]
 8017d7c:	61fa      	str	r2, [r7, #28]
             (ULONG64)(media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8017d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d80:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8017d84:	3b02      	subs	r3, #2
 8017d86:	2200      	movs	r2, #0
 8017d88:	469a      	mov	sl, r3
 8017d8a:	4693      	mov	fp, r2
             media_ptr -> fx_media_sectors_per_cluster) > 0xFFFFFFFF)
 8017d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017d92:	2200      	movs	r2, #0
 8017d94:	4698      	mov	r8, r3
 8017d96:	4691      	mov	r9, r2
             (ULONG64)(media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8017d98:	fb08 f20b 	mul.w	r2, r8, fp
 8017d9c:	fb0a f309 	mul.w	r3, sl, r9
 8017da0:	4413      	add	r3, r2
 8017da2:	fbaa 4508 	umull	r4, r5, sl, r8
 8017da6:	442b      	add	r3, r5
 8017da8:	461d      	mov	r5, r3
        if (((ULONG64)media_ptr -> fx_media_data_sector_start +
 8017daa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017dae:	460b      	mov	r3, r1
 8017db0:	191b      	adds	r3, r3, r4
 8017db2:	613b      	str	r3, [r7, #16]
 8017db4:	4613      	mov	r3, r2
 8017db6:	eb45 0303 	adc.w	r3, r5, r3
 8017dba:	617b      	str	r3, [r7, #20]
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	d301      	bcc.n	8017dc6 <_fx_media_boot_info_extract+0x1ca>
        {

            /* Return the invalid media error status.  */
            return(FX_MEDIA_INVALID);
 8017dc2:	2302      	movs	r3, #2
 8017dc4:	e106      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Calculate logical number of root dir sector.  */
        media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8017dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
            (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8017dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dce:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8017dd2:	3b02      	subs	r3, #2
            media_ptr -> fx_media_sectors_per_cluster;
 8017dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017dd6:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
            (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8017dda:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8017dde:	441a      	add	r2, r3
 8017de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478

        media_ptr -> fx_media_exfat_volume_serial_number  = _fx_utility_32_unsigned_read(&boot_sector[FX_EF_VOLUME_SERIAL_NUMBER]);
 8017de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de8:	3364      	adds	r3, #100	; 0x64
 8017dea:	4618      	mov	r0, r3
 8017dec:	f001 fc10 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017df0:	4602      	mov	r2, r0
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	645a      	str	r2, [r3, #68]	; 0x44

        media_ptr -> fx_media_exfat_file_system_revision  = _fx_utility_16_unsigned_read(&boot_sector[FX_EF_FILE_SYSTEM_REVISION]);
 8017df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df8:	3368      	adds	r3, #104	; 0x68
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f001 fbe0 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017e00:	4602      	mov	r2, r0
 8017e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e04:	649a      	str	r2, [r3, #72]	; 0x48

        media_ptr -> fx_media_exfat_volume_flag          = _fx_utility_16_unsigned_read(&boot_sector[FX_EF_VOLUME_FLAGS]);
 8017e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e08:	336a      	adds	r3, #106	; 0x6a
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f001 fbd8 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017e10:	4602      	mov	r2, r0
 8017e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e14:	64da      	str	r2, [r3, #76]	; 0x4c

        media_ptr -> fx_media_number_of_FATs = boot_sector[FX_EF_NUMBER_OF_FATS];
 8017e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e18:	336e      	adds	r3, #110	; 0x6e
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e20:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

        if (0 == media_ptr -> fx_media_number_of_FATs)
 8017e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e26:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d101      	bne.n	8017e32 <_fx_media_boot_info_extract+0x236>
        {
            return(FX_MEDIA_INVALID);
 8017e2e:	2302      	movs	r3, #2
 8017e30:	e0d0      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_EF_PARTITION_OFFSET]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_EF_PARTITION_OFFSET]);
 8017e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e34:	3340      	adds	r3, #64	; 0x40
 8017e36:	4618      	mov	r0, r3
 8017e38:	f001 fbea 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e40:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
#endif

        media_ptr -> fx_media_exfat_drive_select       = boot_sector[FX_EF_DRIVE_SELECT];
 8017e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e46:	336f      	adds	r3, #111	; 0x6f
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	b29a      	uxth	r2, r3
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        media_ptr -> fx_media_exfat_percent_in_use       = boot_sector[FX_EF_PERCENT_IN_USE];
 8017e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e54:	3370      	adds	r3, #112	; 0x70
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        media_ptr -> fx_media_12_bit_FAT = FX_FALSE;
 8017e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e62:	2200      	movs	r2, #0
 8017e64:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
        media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8017e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        /* Legacy code support:
           We will use fx_media_FAT_type for determine FAT type instead of
           fx_media_12_bit_FAT and fx_media_32_bit_FAT.  */
        media_ptr -> fx_media_12_bit_FAT = FX_FALSE;
 8017e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e72:	2200      	movs	r2, #0
 8017e74:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
        media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        media_ptr -> fx_media_FAT_type = FX_exFAT;
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8017e86:	2207      	movs	r2, #7
 8017e88:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8

        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
 8017e8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e90:	f003 f80f 	bl	801aeb2 <_fx_utility_exFAT_geometry_check>
 8017e94:	4603      	mov	r3, r0
 8017e96:	e09d      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8017e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9a:	3318      	adds	r3, #24
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f001 fb8f 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017ea2:	4602      	mov	r2, r0
 8017ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8017ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eaa:	331a      	adds	r3, #26
 8017eac:	4618      	mov	r0, r3
 8017eae:	f001 fb87 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	3313      	adds	r3, #19
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f001 fb7f 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	60bb      	str	r3, [r7, #8]
 8017ec8:	60fa      	str	r2, [r7, #12]
 8017eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ecc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8017ed0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017eda:	4313      	orrs	r3, r2
 8017edc:	d10d      	bne.n	8017efa <_fx_media_boot_info_extract+0x2fe>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8017ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee0:	3320      	adds	r3, #32
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f001 fb94 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	2200      	movs	r2, #0
 8017eec:	603b      	str	r3, [r7, #0]
 8017eee:	607a      	str	r2, [r7, #4]
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017ef6:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 8017efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017f00:	4313      	orrs	r3, r2
 8017f02:	d101      	bne.n	8017f08 <_fx_media_boot_info_extract+0x30c>
        {
            return(FX_MEDIA_INVALID);
 8017f04:	2302      	movs	r3, #2
 8017f06:	e065      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 8017f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0a:	330e      	adds	r3, #14
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f001 fb57 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017f12:	4602      	mov	r2, r0
 8017f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f16:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
        if (media_ptr -> fx_media_reserved_sectors == 0)
 8017f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1c:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d101      	bne.n	8017f28 <_fx_media_boot_info_extract+0x32c>
        {
            return(FX_MEDIA_INVALID);
 8017f24:	2302      	movs	r3, #2
 8017f26:	e055      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 8017f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f2a:	330d      	adds	r3, #13
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	461a      	mov	r2, r3
 8017f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f32:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8017f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f38:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d101      	bne.n	8017f44 <_fx_media_boot_info_extract+0x348>
        {
            return(FX_MEDIA_INVALID);
 8017f40:	2302      	movs	r3, #2
 8017f42:	e047      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8017f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f46:	3316      	adds	r3, #22
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f001 fb39 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f52:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8017f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f58:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d108      	bne.n	8017f72 <_fx_media_boot_info_extract+0x376>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 8017f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f62:	3324      	adds	r3, #36	; 0x24
 8017f64:	4618      	mov	r0, r3
 8017f66:	f001 fb53 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017f6a:	4602      	mov	r2, r0
 8017f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6e:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8017f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f74:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d101      	bne.n	8017f80 <_fx_media_boot_info_extract+0x384>
        {
            return(FX_MEDIA_INVALID);
 8017f7c:	2302      	movs	r3, #2
 8017f7e:	e029      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8017f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f82:	3310      	adds	r3, #16
 8017f84:	781b      	ldrb	r3, [r3, #0]
 8017f86:	461a      	mov	r2, r3
 8017f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f8a:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8017f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f90:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d101      	bne.n	8017f9c <_fx_media_boot_info_extract+0x3a0>
        {
            return(FX_BOOT_ERROR);
 8017f98:	2301      	movs	r3, #1
 8017f9a:	e01b      	b.n	8017fd4 <_fx_media_boot_info_extract+0x3d8>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 8017f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9e:	331c      	adds	r3, #28
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f001 fb35 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017fa6:	4602      	mov	r2, r0
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 8017fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb0:	3311      	adds	r3, #17
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f001 fb04 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8017fb8:	4602      	mov	r2, r0
 8017fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fbc:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8017fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc2:	332c      	adds	r3, #44	; 0x2c
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f001 fb23 	bl	8019610 <_fx_utility_32_unsigned_read>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fce:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 8017fd2:	2300      	movs	r3, #0
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3730      	adds	r7, #48	; 0x30
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08017fe0 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08c      	sub	sp, #48	; 0x30
 8017fe4:	af04      	add	r7, sp, #16
 8017fe6:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a9b      	ldr	r2, [pc, #620]	; (801825c <_fx_media_close+0x27c>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d001      	beq.n	8017ff6 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8017ff2:	2311      	movs	r3, #17
 8017ff4:	e19a      	b.n	801832c <_fx_media_close+0x34c>
    /* Protect against other threads accessing the media.  */
    FX_PROTECT

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8017ffc:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8018004:	61bb      	str	r3, [r7, #24]
    while (open_count)
 8018006:	e042      	b.n	801808e <_fx_media_close+0xae>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8018008:	69bb      	ldr	r3, [r7, #24]
 801800a:	689b      	ldr	r3, [r3, #8]
 801800c:	2b01      	cmp	r3, #1
 801800e:	d135      	bne.n	801807c <_fx_media_close+0x9c>
            (file_ptr -> fx_file_modified))
 8018010:	69bb      	ldr	r3, [r7, #24]
 8018012:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8018014:	2b00      	cmp	r3, #0
 8018016:	d031      	beq.n	801807c <_fx_media_close+0x9c>

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8018018:	4b91      	ldr	r3, [pc, #580]	; (8018260 <_fx_media_close+0x280>)
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	69bb      	ldr	r3, [r7, #24]
 801801e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8018022:	4b90      	ldr	r3, [pc, #576]	; (8018264 <_fx_media_close+0x284>)
 8018024:	681a      	ldr	r2, [r3, #0]
 8018026:	69bb      	ldr	r3, [r7, #24]
 8018028:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 801802c:	69bb      	ldr	r3, [r7, #24]
 801802e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8018032:	69b9      	ldr	r1, [r7, #24]
 8018034:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

            /* Write the directory entry to the media.  */
#ifdef FX_ENABLE_EXFAT
            if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801803e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8018042:	2b07      	cmp	r3, #7
 8018044:	d108      	bne.n	8018058 <_fx_media_close+0x78>
            {

                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
 8018046:	69bb      	ldr	r3, [r7, #24]
 8018048:	3368      	adds	r3, #104	; 0x68
 801804a:	2202      	movs	r2, #2
 801804c:	4619      	mov	r1, r3
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f7fb fafe 	bl	8013650 <_fx_directory_exFAT_entry_write>
 8018054:	6178      	str	r0, [r7, #20]
 8018056:	e006      	b.n	8018066 <_fx_media_close+0x86>
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8018058:	69bb      	ldr	r3, [r7, #24]
 801805a:	3368      	adds	r3, #104	; 0x68
 801805c:	4619      	mov	r1, r3
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7f9 ff0a 	bl	8011e78 <_fx_directory_entry_write>
 8018064:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d004      	beq.n	8018076 <_fx_media_close+0x96>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f7ff fd57 	bl	8017b20 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 8018072:	2390      	movs	r3, #144	; 0x90
 8018074:	e15a      	b.n	801832c <_fx_media_close+0x34c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 8018076:	69bb      	ldr	r3, [r7, #24]
 8018078:	2200      	movs	r2, #0
 801807a:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 801807c:	69bb      	ldr	r3, [r7, #24]
 801807e:	4a7a      	ldr	r2, [pc, #488]	; (8018268 <_fx_media_close+0x288>)
 8018080:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 8018082:	69bb      	ldr	r3, [r7, #24]
 8018084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018086:	61bb      	str	r3, [r7, #24]
        open_count--;
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	3b01      	subs	r3, #1
 801808c:	61fb      	str	r3, [r7, #28]
    while (open_count)
 801808e:	69fb      	ldr	r3, [r7, #28]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d1b9      	bne.n	8018008 <_fx_media_close+0x28>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f001 fe85 	bl	8019da4 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 801809a:	6878      	ldr	r0, [r7, #4]
 801809c:	f002 fa02 	bl	801a4a4 <_fx_utility_FAT_map_flush>

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type == FX_exFAT) &&
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80180a6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80180aa:	2b07      	cmp	r3, #7
 80180ac:	d107      	bne.n	80180be <_fx_media_close+0xde>
        (FX_TRUE == media_ptr -> fx_media_exfat_bitmap_cache_dirty))
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
    if ((media_ptr -> fx_media_FAT_type == FX_exFAT) &&
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d102      	bne.n	80180be <_fx_media_close+0xde>
    {

        /* Flush bitmap.  */
        _fx_utility_exFAT_bitmap_flush(media_ptr);
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f002 fc30 	bl	801a91e <_fx_utility_exFAT_bitmap_flush>
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80180c4:	2100      	movs	r1, #0
 80180c6:	9102      	str	r1, [sp, #8]
 80180c8:	e9cd 2300 	strd	r2, r3, [sp]
 80180cc:	f04f 0201 	mov.w	r2, #1
 80180d0:	f04f 0300 	mov.w	r3, #0
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f003 fc98 	bl	801ba0a <_fx_utility_logical_sector_flush>
 80180da:	6178      	str	r0, [r7, #20]

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d004      	beq.n	80180ec <_fx_media_close+0x10c>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f7ff fd1c 	bl	8017b20 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 80180e8:	2390      	movs	r3, #144	; 0x90
 80180ea:	e11f      	b.n	801832c <_fx_media_close+0x34c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f000 80c4 	beq.w	8018280 <_fx_media_close+0x2a0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8018104:	429a      	cmp	r2, r3
 8018106:	f000 80bb 	beq.w	8018280 <_fx_media_close+0x2a0>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 8018110:	2b00      	cmp	r3, #0
 8018112:	f040 80b5 	bne.w	8018280 <_fx_media_close+0x2a0>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	69db      	ldr	r3, [r3, #28]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	613b      	str	r3, [r7, #16]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	69d9      	ldr	r1, [r3, #28]
 8018122:	f04f 32ff 	mov.w	r2, #4294967295
 8018126:	f04f 33ff 	mov.w	r3, #4294967295
 801812a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	69db      	ldr	r3, [r3, #28]
 8018132:	2200      	movs	r2, #0
 8018134:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2200      	movs	r2, #0
 801813a:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	2290      	movs	r2, #144	; 0x90
 8018142:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	693a      	ldr	r2, [r7, #16]
 801814a:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
        media_ptr -> fx_media_driver_sectors =          1;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2201      	movs	r2, #1
 801815e:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	2203      	movs	r2, #3
 8018166:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8018170:	1c5a      	adds	r2, r3, #1
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8018188:	2b00      	cmp	r3, #0
 801818a:	d004      	beq.n	8018196 <_fx_media_close+0x1b6>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7ff fcc7 	bl	8017b20 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 8018192:	2390      	movs	r3, #144	; 0x90
 8018194:	e0ca      	b.n	801832c <_fx_media_close+0x34c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 801819c:	613b      	str	r3, [r7, #16]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 801819e:	6938      	ldr	r0, [r7, #16]
 80181a0:	f001 fa36 	bl	8019610 <_fx_utility_32_unsigned_read>
 80181a4:	60f8      	str	r0, [r7, #12]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	4a30      	ldr	r2, [pc, #192]	; (801826c <_fx_media_close+0x28c>)
 80181aa:	4293      	cmp	r3, r2
 80181ac:	d168      	bne.n	8018280 <_fx_media_close+0x2a0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80181b4:	4618      	mov	r0, r3
 80181b6:	f001 fa2b 	bl	8019610 <_fx_utility_32_unsigned_read>
 80181ba:	60f8      	str	r0, [r7, #12]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	4a2c      	ldr	r2, [pc, #176]	; (8018270 <_fx_media_close+0x290>)
 80181c0:	4293      	cmp	r3, r2
 80181c2:	d15d      	bne.n	8018280 <_fx_media_close+0x2a0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80181d0:	4619      	mov	r1, r3
 80181d2:	4610      	mov	r0, r2
 80181d4:	f001 fa39 	bl	801964a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80181e4:	4619      	mov	r1, r3
 80181e6:	4610      	mov	r0, r2
 80181e8:	f001 fa2f 	bl	801964a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2201      	movs	r2, #1
 80181f0:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2290      	movs	r2, #144	; 0x90
 80181f8:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	693a      	ldr	r2, [r7, #16]
 8018200:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
                media_ptr -> fx_media_driver_sectors =          1;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2201      	movs	r2, #1
 8018214:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2203      	movs	r2, #3
 801821c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2201      	movs	r2, #1
 8018224:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801822e:	1c5a      	adds	r2, r3, #1
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2200      	movs	r2, #0
 8018244:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801824e:	2b00      	cmp	r3, #0
 8018250:	d010      	beq.n	8018274 <_fx_media_close+0x294>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7ff fc64 	bl	8017b20 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 8018258:	2390      	movs	r3, #144	; 0x90
 801825a:	e067      	b.n	801832c <_fx_media_close+0x34c>
 801825c:	4d454449 	.word	0x4d454449
 8018260:	2000d22c 	.word	0x2000d22c
 8018264:	2000d228 	.word	0x2000d228
 8018268:	46494c43 	.word	0x46494c43
 801826c:	41615252 	.word	0x41615252
 8018270:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8018286:	1c5a      	adds	r2, r3, #1
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	2202      	movs	r2, #2
 8018292:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2290      	movs	r2, #144	; 0x90
 801829a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2208      	movs	r2, #8
 80182ac:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2290      	movs	r2, #144	; 0x90
 80182b4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	4798      	blx	r3

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 80182c2:	4b1c      	ldr	r3, [pc, #112]	; (8018334 <_fx_media_close+0x354>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b01      	cmp	r3, #1
 80182c8:	d103      	bne.n	80182d2 <_fx_media_close+0x2f2>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 80182ca:	4b1b      	ldr	r3, [pc, #108]	; (8018338 <_fx_media_close+0x358>)
 80182cc:	2200      	movs	r2, #0
 80182ce:	601a      	str	r2, [r3, #0]
 80182d0:	e019      	b.n	8018306 <_fx_media_close+0x326>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
            media_ptr -> fx_media_opened_previous;
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80182de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
            media_ptr -> fx_media_opened_next;
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	f8d2 2500 	ldr.w	r2, [r2, #1280]	; 0x500
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 80182ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 80182f2:	4b11      	ldr	r3, [pc, #68]	; (8018338 <_fx_media_close+0x358>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	687a      	ldr	r2, [r7, #4]
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d104      	bne.n	8018306 <_fx_media_close+0x326>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8018302:	4a0d      	ldr	r2, [pc, #52]	; (8018338 <_fx_media_close+0x358>)
 8018304:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 8018306:	4b0b      	ldr	r3, [pc, #44]	; (8018334 <_fx_media_close+0x354>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	3b01      	subs	r3, #1
 801830c:	4a09      	ldr	r2, [pc, #36]	; (8018334 <_fx_media_close+0x354>)
 801830e:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	4a0a      	ldr	r2, [pc, #40]	; (801833c <_fx_media_close+0x35c>)
 8018314:	601a      	str	r2, [r3, #0]
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 801831c:	2b00      	cmp	r3, #0
 801831e:	d004      	beq.n	801832a <_fx_media_close+0x34a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 801832a:	2300      	movs	r3, #0
}
 801832c:	4618      	mov	r0, r3
 801832e:	3720      	adds	r7, #32
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	2000d224 	.word	0x2000d224
 8018338:	2000d220 	.word	0x2000d220
 801833c:	4d454443 	.word	0x4d454443

08018340 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b08c      	sub	sp, #48	; 0x30
 8018344:	af04      	add	r7, sp, #16
 8018346:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8d3 358c 	ldr.w	r3, [r3, #1420]	; 0x58c
 801834e:	1c5a      	adds	r2, r3, #1
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	4aa8      	ldr	r2, [pc, #672]	; (80185fc <_fx_media_flush+0x2bc>)
 801835c:	4293      	cmp	r3, r2
 801835e:	d001      	beq.n	8018364 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8018360:	2311      	movs	r3, #17
 8018362:	e146      	b.n	80185f2 <_fx_media_flush+0x2b2>

    /* Protect against other threads accessing the media.  */
    FX_PROTECT

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801836a:	2b00      	cmp	r3, #0
 801836c:	d001      	beq.n	8018372 <_fx_media_flush+0x32>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 801836e:	2323      	movs	r3, #35	; 0x23
 8018370:	e13f      	b.n	80185f2 <_fx_media_flush+0x2b2>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8018378:	61bb      	str	r3, [r7, #24]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8018380:	617b      	str	r3, [r7, #20]
    while (open_count)
 8018382:	e03c      	b.n	80183fe <_fx_media_flush+0xbe>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	2b01      	cmp	r3, #1
 801838a:	d132      	bne.n	80183f2 <_fx_media_flush+0xb2>
            (file_ptr -> fx_file_modified))
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8018390:	2b00      	cmp	r3, #0
 8018392:	d02e      	beq.n	80183f2 <_fx_media_flush+0xb2>

            /* Protect against update.  */
            FX_DISABLE_INTS

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8018394:	4b9a      	ldr	r3, [pc, #616]	; (8018600 <_fx_media_flush+0x2c0>)
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 801839e:	4b99      	ldr	r3, [pc, #612]	; (8018604 <_fx_media_flush+0x2c4>)
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80183ae:	6979      	ldr	r1, [r7, #20]
 80183b0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

            /* Write the directory entry to the media.  */
#ifdef FX_ENABLE_EXFAT
            if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80183ba:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80183be:	2b07      	cmp	r3, #7
 80183c0:	d108      	bne.n	80183d4 <_fx_media_flush+0x94>
            {
                status = _fx_directory_exFAT_entry_write(
 80183c2:	697b      	ldr	r3, [r7, #20]
 80183c4:	3368      	adds	r3, #104	; 0x68
 80183c6:	2202      	movs	r2, #2
 80183c8:	4619      	mov	r1, r3
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f7fb f940 	bl	8013650 <_fx_directory_exFAT_entry_write>
 80183d0:	61f8      	str	r0, [r7, #28]
 80183d2:	e006      	b.n	80183e2 <_fx_media_flush+0xa2>
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	3368      	adds	r3, #104	; 0x68
 80183d8:	4619      	mov	r1, r3
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	f7f9 fd4c 	bl	8011e78 <_fx_directory_entry_write>
 80183e0:	61f8      	str	r0, [r7, #28]
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 80183e2:	69fb      	ldr	r3, [r7, #28]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d001      	beq.n	80183ec <_fx_media_flush+0xac>

                /* Release media protection.  */
                FX_UNPROTECT

                /* Error writing the directory.  */
                return(status);
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	e102      	b.n	80185f2 <_fx_media_flush+0x2b2>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	2200      	movs	r2, #0
 80183f0:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183f6:	617b      	str	r3, [r7, #20]
        open_count--;
 80183f8:	69bb      	ldr	r3, [r7, #24]
 80183fa:	3b01      	subs	r3, #1
 80183fc:	61bb      	str	r3, [r7, #24]
    while (open_count)
 80183fe:	69bb      	ldr	r3, [r7, #24]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d1bf      	bne.n	8018384 <_fx_media_flush+0x44>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f001 fccd 	bl	8019da4 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f002 f84a 	bl	801a4a4 <_fx_utility_FAT_map_flush>

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type == FX_exFAT) &&
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018416:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 801841a:	2b07      	cmp	r3, #7
 801841c:	d107      	bne.n	801842e <_fx_media_flush+0xee>
        (FX_TRUE == media_ptr -> fx_media_exfat_bitmap_cache_dirty))
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
    if ((media_ptr -> fx_media_FAT_type == FX_exFAT) &&
 8018424:	2b01      	cmp	r3, #1
 8018426:	d102      	bne.n	801842e <_fx_media_flush+0xee>
    {

        /* Flush bitmap.  */
        _fx_utility_exFAT_bitmap_flush(media_ptr);
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f002 fa78 	bl	801a91e <_fx_utility_exFAT_bitmap_flush>
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018434:	2100      	movs	r1, #0
 8018436:	9102      	str	r1, [sp, #8]
 8018438:	e9cd 2300 	strd	r2, r3, [sp]
 801843c:	f04f 0201 	mov.w	r2, #1
 8018440:	f04f 0300 	mov.w	r3, #0
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f003 fae0 	bl	801ba0a <_fx_utility_logical_sector_flush>
 801844a:	61f8      	str	r0, [r7, #28]

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d001      	beq.n	8018456 <_fx_media_flush+0x116>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Error writing the directory.  */
        return(status);
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	e0cd      	b.n	80185f2 <_fx_media_flush+0x2b2>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801845c:	2b00      	cmp	r3, #0
 801845e:	f000 80ac 	beq.w	80185ba <_fx_media_flush+0x27a>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 801846e:	429a      	cmp	r2, r3
 8018470:	f000 80a3 	beq.w	80185ba <_fx_media_flush+0x27a>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	69db      	ldr	r3, [r3, #28]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	613b      	str	r3, [r7, #16]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	69d9      	ldr	r1, [r3, #28]
 8018480:	f04f 32ff 	mov.w	r2, #4294967295
 8018484:	f04f 33ff 	mov.w	r3, #4294967295
 8018488:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	69db      	ldr	r3, [r3, #28]
 8018490:	2200      	movs	r2, #0
 8018492:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	2290      	movs	r2, #144	; 0x90
 80184a0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	693a      	ldr	r2, [r7, #16]
 80184a8:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
        media_ptr -> fx_media_driver_sectors =          1;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2201      	movs	r2, #1
 80184bc:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2203      	movs	r2, #3
 80184c4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 80184ce:	1c5a      	adds	r2, r3, #1
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d001      	beq.n	80184ee <_fx_media_flush+0x1ae>

            /* Release media protection.  */
            FX_UNPROTECT

            /* Return the error status.  */
            return(FX_IO_ERROR);
 80184ea:	2390      	movs	r3, #144	; 0x90
 80184ec:	e081      	b.n	80185f2 <_fx_media_flush+0x2b2>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80184f4:	613b      	str	r3, [r7, #16]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 80184f6:	6938      	ldr	r0, [r7, #16]
 80184f8:	f001 f88a 	bl	8019610 <_fx_utility_32_unsigned_read>
 80184fc:	60f8      	str	r0, [r7, #12]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	4a41      	ldr	r2, [pc, #260]	; (8018608 <_fx_media_flush+0x2c8>)
 8018502:	4293      	cmp	r3, r2
 8018504:	d159      	bne.n	80185ba <_fx_media_flush+0x27a>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801850c:	4618      	mov	r0, r3
 801850e:	f001 f87f 	bl	8019610 <_fx_utility_32_unsigned_read>
 8018512:	60f8      	str	r0, [r7, #12]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	4a3d      	ldr	r2, [pc, #244]	; (801860c <_fx_media_flush+0x2cc>)
 8018518:	4293      	cmp	r3, r2
 801851a:	d14e      	bne.n	80185ba <_fx_media_flush+0x27a>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8018528:	4619      	mov	r1, r3
 801852a:	4610      	mov	r0, r2
 801852c:	f001 f88d 	bl	801964a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 801853c:	4619      	mov	r1, r3
 801853e:	4610      	mov	r0, r2
 8018540:	f001 f883 	bl	801964a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2201      	movs	r2, #1
 8018548:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	2290      	movs	r2, #144	; 0x90
 8018550:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	693a      	ldr	r2, [r7, #16]
 8018558:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
                media_ptr -> fx_media_driver_sectors =          1;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2201      	movs	r2, #1
 801856c:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2203      	movs	r2, #3
 8018574:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2201      	movs	r2, #1
 801857c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8018586:	1c5a      	adds	r2, r3, #1
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2200      	movs	r2, #0
 801859c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d001      	beq.n	80185ae <_fx_media_flush+0x26e>

                    /* Release media protection.  */
                    FX_UNPROTECT

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 80185aa:	2390      	movs	r3, #144	; 0x90
 80185ac:	e021      	b.n	80185f2 <_fx_media_flush+0x2b2>
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 80185c0:	1c5a      	adds	r2, r3, #1
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2202      	movs	r2, #2
 80185cc:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2290      	movs	r2, #144	; 0x90
 80185d4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d001      	beq.n	80185f0 <_fx_media_flush+0x2b0>

        /* Release media protection.  */
        FX_UNPROTECT

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 80185ec:	2390      	movs	r3, #144	; 0x90
 80185ee:	e000      	b.n	80185f2 <_fx_media_flush+0x2b2>

    /* Release media protection.  */
    FX_UNPROTECT

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80185f0:	2300      	movs	r3, #0
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3720      	adds	r7, #32
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	4d454449 	.word	0x4d454449
 8018600:	2000d22c 	.word	0x2000d22c
 8018604:	2000d228 	.word	0x2000d228
 8018608:	41615252 	.word	0x41615252
 801860c:	61417272 	.word	0x61417272

08018610 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8018610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018614:	b096      	sub	sp, #88	; 0x58
 8018616:	af04      	add	r7, sp, #16
 8018618:	60f8      	str	r0, [r7, #12]
 801861a:	60b9      	str	r1, [r7, #8]
 801861c:	607a      	str	r2, [r7, #4]
 801861e:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8018620:	4bbb      	ldr	r3, [pc, #748]	; (8018910 <_fx_media_open+0x300>)
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	4bbb      	ldr	r3, [pc, #748]	; (8018914 <_fx_media_open+0x304>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	431a      	orrs	r2, r3
 801862a:	4bbb      	ldr	r3, [pc, #748]	; (8018918 <_fx_media_open+0x308>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	4313      	orrs	r3, r2
 8018630:	2b00      	cmp	r3, #0
 8018632:	d003      	beq.n	801863c <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 8018634:	4bb9      	ldr	r3, [pc, #740]	; (801891c <_fx_media_open+0x30c>)
 8018636:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 8018638:	2b00      	cmp	r3, #0
 801863a:	d102      	bne.n	8018642 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 801863c:	2322      	movs	r3, #34	; 0x22
 801863e:	f000 bdcb 	b.w	80191d8 <_fx_media_open+0xbc8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	68ba      	ldr	r2, [r7, #8]
 8018646:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018654:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801865a:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018662:	461a      	mov	r2, r3
 8018664:	2300      	movs	r3, #0
 8018666:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
    media_ptr -> fx_media_FAT_type =                    0;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018670:	2200      	movs	r2, #0
 8018672:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 8018676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018678:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	2200      	movs	r2, #0
 801867e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    media_ptr -> fx_media_directory_attributes_sets =  0;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	2200      	movs	r2, #0
 8018686:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    media_ptr -> fx_media_directory_creates =  0;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	2200      	movs	r2, #0
 801868e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    media_ptr -> fx_media_directory_default_gets =  0;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	2200      	movs	r2, #0
 8018696:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    media_ptr -> fx_media_directory_default_sets =  0;
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	2200      	movs	r2, #0
 801869e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    media_ptr -> fx_media_directory_deletes =  0;
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2200      	movs	r2, #0
 80186a6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	2200      	movs	r2, #0
 80186ae:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2200      	movs	r2, #0
 80186b6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    media_ptr -> fx_media_directory_information_gets =  0;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2200      	movs	r2, #0
 80186be:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    media_ptr -> fx_media_directory_local_path_clears =  0;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	2200      	movs	r2, #0
 80186c6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    media_ptr -> fx_media_directory_local_path_gets =  0;
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	2200      	movs	r2, #0
 80186ce:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    media_ptr -> fx_media_directory_local_path_restores =  0;
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	2200      	movs	r2, #0
 80186d6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    media_ptr -> fx_media_directory_local_path_sets =  0;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	2200      	movs	r2, #0
 80186de:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    media_ptr -> fx_media_directory_name_tests =  0;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	2200      	movs	r2, #0
 80186e6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2200      	movs	r2, #0
 80186ee:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2200      	movs	r2, #0
 80186f6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    media_ptr -> fx_media_directory_renames =  0;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    media_ptr -> fx_media_file_allocates =  0;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2200      	movs	r2, #0
 8018706:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    media_ptr -> fx_media_file_attributes_reads =  0;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2200      	movs	r2, #0
 801870e:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_file_attributes_sets =  0;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	2200      	movs	r2, #0
 8018716:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2200      	movs	r2, #0
 801871e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    media_ptr -> fx_media_file_closes =  0;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2200      	movs	r2, #0
 8018726:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    media_ptr -> fx_media_file_creates =  0;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2200      	movs	r2, #0
 801872e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    media_ptr -> fx_media_file_deletes =  0;
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2200      	movs	r2, #0
 8018736:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    media_ptr -> fx_media_file_opens =  0;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2200      	movs	r2, #0
 801873e:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    media_ptr -> fx_media_file_reads =  0;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2200      	movs	r2, #0
 8018746:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    media_ptr -> fx_media_file_relative_seeks =  0;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	2200      	movs	r2, #0
 801874e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    media_ptr -> fx_media_file_renames =  0;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	2200      	movs	r2, #0
 8018756:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
    media_ptr -> fx_media_file_seeks =  0;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2200      	movs	r2, #0
 801875e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    media_ptr -> fx_media_file_truncates =  0;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2200      	movs	r2, #0
 8018766:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
    media_ptr -> fx_media_file_truncate_releases =  0;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2200      	movs	r2, #0
 801876e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
    media_ptr -> fx_media_file_writes =  0;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2200      	movs	r2, #0
 8018776:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    media_ptr -> fx_media_aborts =  0;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2200      	movs	r2, #0
 801877e:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
    media_ptr -> fx_media_flushes =  0;
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2200      	movs	r2, #0
 8018786:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    media_ptr -> fx_media_reads =  0;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2200      	movs	r2, #0
 801878e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
    media_ptr -> fx_media_writes =  0;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	2200      	movs	r2, #0
 8018796:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
    media_ptr -> fx_media_directory_entry_reads =  0;
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	2200      	movs	r2, #0
 801879e:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
    media_ptr -> fx_media_directory_entry_writes =  0;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	2200      	movs	r2, #0
 80187a6:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
    media_ptr -> fx_media_directory_searches =  0;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	2200      	movs	r2, #0
 80187ae:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	2200      	movs	r2, #0
 80187b6:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	2200      	movs	r2, #0
 80187be:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
    media_ptr -> fx_media_fat_entry_reads =  0;
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2200      	movs	r2, #0
 80187c6:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
    media_ptr -> fx_media_fat_entry_writes =  0;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2200      	movs	r2, #0
 80187ce:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2200      	movs	r2, #0
 80187d6:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2200      	movs	r2, #0
 80187de:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	2200      	movs	r2, #0
 80187e6:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	2200      	movs	r2, #0
 80187ee:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
    media_ptr -> fx_media_fat_cache_flushes =  0;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2200      	movs	r2, #0
 80187f6:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
    media_ptr -> fx_media_fat_sector_reads =  0;
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2200      	movs	r2, #0
 80187fe:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
    media_ptr -> fx_media_fat_sector_writes =  0;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	2200      	movs	r2, #0
 8018806:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
    media_ptr -> fx_media_logical_sector_reads =  0;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	2200      	movs	r2, #0
 801880e:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
    media_ptr -> fx_media_logical_sector_writes =  0;
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	2200      	movs	r2, #0
 8018816:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	2200      	movs	r2, #0
 801881e:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	2200      	movs	r2, #0
 8018826:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
    media_ptr -> fx_media_driver_read_requests =  0;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	2200      	movs	r2, #0
 801882e:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
    media_ptr -> fx_media_driver_write_requests =  0;
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2200      	movs	r2, #0
 8018836:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2200      	movs	r2, #0
 801883e:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2200      	movs	r2, #0
 8018846:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	2200      	movs	r2, #0
 801884e:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    media_ptr -> fx_media_driver_flush_requests =  0;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2200      	movs	r2, #0
 8018856:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2204      	movs	r2, #4
 801885e:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2290      	movs	r2, #144	; 0x90
 8018866:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	683a      	ldr	r2, [r7, #0]
 801886e:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2200      	movs	r2, #0
 8018876:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	2200      	movs	r2, #0
 801887e:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	2200      	movs	r2, #0
 8018886:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018890:	68f8      	ldr	r0, [r7, #12]
 8018892:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801889a:	2b00      	cmp	r3, #0
 801889c:	d002      	beq.n	80188a4 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 801889e:	2390      	movs	r3, #144	; 0x90
 80188a0:	f000 bc9a 	b.w	80191d8 <_fx_media_open+0xbc8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80188aa:	1c5a      	adds	r2, r3, #1
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	2205      	movs	r2, #5
 80188b6:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2290      	movs	r2, #144	; 0x90
 80188be:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80188c6:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    media_ptr -> fx_media_driver_sectors =          1;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	2201      	movs	r2, #1
 80188ce:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2201      	movs	r2, #1
 80188d6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80188e0:	68f8      	ldr	r0, [r7, #12]
 80188e2:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d018      	beq.n	8018920 <_fx_media_open+0x310>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	2208      	movs	r2, #8
 80188f2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2290      	movs	r2, #144	; 0x90
 80188fa:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018904:	68f8      	ldr	r0, [r7, #12]
 8018906:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 8018908:	2301      	movs	r3, #1
 801890a:	f000 bc65 	b.w	80191d8 <_fx_media_open+0xbc8>
 801890e:	bf00      	nop
 8018910:	2000d238 	.word	0x2000d238
 8018914:	2000d23c 	.word	0x2000d23c
 8018918:	2000d240 	.word	0x2000d240
 801891c:	20000010 	.word	0x20000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 8018920:	68f8      	ldr	r0, [r7, #12]
 8018922:	f7ff f96b 	bl	8017bfc <_fx_media_boot_info_extract>
 8018926:	4603      	mov	r3, r0
 8018928:	2b00      	cmp	r3, #0
 801892a:	d00f      	beq.n	801894c <_fx_media_open+0x33c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	2208      	movs	r2, #8
 8018930:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	2290      	movs	r2, #144	; 0x90
 8018938:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018942:	68f8      	ldr	r0, [r7, #12]
 8018944:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 8018946:	2302      	movs	r3, #2
 8018948:	f000 bc46 	b.w	80191d8 <_fx_media_open+0xbc8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8018952:	3330      	adds	r3, #48	; 0x30
 8018954:	4618      	mov	r0, r3
 8018956:	f000 fe33 	bl	80195c0 <_fx_utility_16_unsigned_read>
 801895a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018962:	429a      	cmp	r2, r3
 8018964:	d20f      	bcs.n	8018986 <_fx_media_open+0x376>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	2208      	movs	r2, #8
 801896a:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	2290      	movs	r2, #144	; 0x90
 8018972:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 8018980:	2321      	movs	r3, #33	; 0x21
 8018982:	f000 bc29 	b.w	80191d8 <_fx_media_open+0xbc8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801898a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801898c:	fbb2 f2f3 	udiv	r2, r2, r3
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	695b      	ldr	r3, [r3, #20]
 8018998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801899c:	d903      	bls.n	80189a6 <_fx_media_open+0x396>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80189a4:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	695b      	ldr	r3, [r3, #20]
 80189aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 80189b2:	3328      	adds	r3, #40	; 0x28
 80189b4:	637b      	str	r3, [r7, #52]	; 0x34
    while (i--)
 80189b6:	e01c      	b.n	80189f2 <_fx_media_open+0x3e2>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 80189b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80189bc:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 80189be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80189c0:	f04f 32ff 	mov.w	r2, #4294967295
 80189c4:	f04f 33ff 	mov.w	r3, #4294967295
 80189c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 80189cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ce:	2200      	movs	r2, #0
 80189d0:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 80189d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189d4:	2200      	movs	r2, #0
 80189d6:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 80189d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189da:	f103 0218 	add.w	r2, r3, #24
 80189de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189e0:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 80189e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189e4:	3318      	adds	r3, #24
 80189e6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80189ee:	4413      	add	r3, r2
 80189f0:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 80189f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189f4:	1e5a      	subs	r2, r3, #1
 80189f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d1dd      	bne.n	80189b8 <_fx_media_open+0x3a8>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 80189fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189fe:	3b18      	subs	r3, #24
 8018a00:	637b      	str	r3, [r7, #52]	; 0x34
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8018a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a04:	2200      	movs	r2, #0
 8018a06:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 8018a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a0a:	1e5a      	subs	r2, r3, #1
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8018a16:	3328      	adds	r3, #40	; 0x28
 8018a18:	68fa      	ldr	r2, [r7, #12]
 8018a1a:	61d3      	str	r3, [r2, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	2200      	movs	r2, #0
 8018a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	695b      	ldr	r3, [r3, #20]
 8018a2c:	2b0f      	cmp	r3, #15
 8018a2e:	d91a      	bls.n	8018a66 <_fx_media_open+0x456>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	695a      	ldr	r2, [r3, #20]
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	695b      	ldr	r3, [r3, #20]
 8018a38:	3b01      	subs	r3, #1
 8018a3a:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	6959      	ldr	r1, [r3, #20]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	695b      	ldr	r3, [r3, #20]
 8018a44:	3b01      	subs	r3, #1
 8018a46:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d10c      	bne.n	8018a66 <_fx_media_open+0x456>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2201      	movs	r2, #1
 8018a50:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	695b      	ldr	r3, [r3, #20]
 8018a56:	089b      	lsrs	r3, r3, #2
 8018a58:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 8018a5a:	68fa      	ldr	r2, [r7, #12]
 8018a5c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 8018a60:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8018a64:	e002      	b.n	8018a6c <_fx_media_open+0x45c>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	2200      	movs	r2, #0
 8018a6a:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018a70:	e023      	b.n	8018aba <_fx_media_open+0x4aa>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 8018a72:	68f9      	ldr	r1, [r7, #12]
 8018a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018a76:	4613      	mov	r3, r2
 8018a78:	005b      	lsls	r3, r3, #1
 8018a7a:	4413      	add	r3, r2
 8018a7c:	009b      	lsls	r3, r3, #2
 8018a7e:	440b      	add	r3, r1
 8018a80:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8018a84:	2200      	movs	r2, #0
 8018a86:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8018a88:	68f9      	ldr	r1, [r7, #12]
 8018a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018a8c:	4613      	mov	r3, r2
 8018a8e:	005b      	lsls	r3, r3, #1
 8018a90:	4413      	add	r3, r2
 8018a92:	009b      	lsls	r3, r3, #2
 8018a94:	440b      	add	r3, r1
 8018a96:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8018a9e:	68f9      	ldr	r1, [r7, #12]
 8018aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	005b      	lsls	r3, r3, #1
 8018aa6:	4413      	add	r3, r2
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	440b      	add	r3, r1
 8018aac:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 8018ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018ac0:	d3d7      	bcc.n	8018a72 <_fx_media_open+0x462>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018ac6:	e00a      	b.n	8018ade <_fx_media_open+0x4ce>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8018ac8:	68fa      	ldr	r2, [r7, #12]
 8018aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018acc:	4413      	add	r3, r2
 8018ace:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 8018ad2:	3320      	adds	r3, #32
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8018ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ada:	3301      	adds	r3, #1
 8018adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ae4:	d3f0      	bcc.n	8018ac8 <_fx_media_open+0x4b8>
    }
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018aec:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8018af0:	2b07      	cmp	r3, #7
 8018af2:	f000 80b9 	beq.w	8018c68 <_fx_media_open+0x658>
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	f8d3 2474 	ldr.w	r2, [r3, #1140]	; 0x474
            (media_ptr -> fx_media_number_of_FATs *
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
             media_ptr -> fx_media_sectors_per_FAT);
 8018b02:	68f9      	ldr	r1, [r7, #12]
 8018b04:	f8d1 1488 	ldr.w	r1, [r1, #1160]	; 0x488
            (media_ptr -> fx_media_number_of_FATs *
 8018b08:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8018b0c:	441a      	add	r2, r3
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8018b1a:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8018b20:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018b22:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018b28:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	f8d3 2478 	ldr.w	r2, [r3, #1144]	; 0x478
            media_ptr -> fx_media_root_sectors;
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8018b3e:	441a      	add	r2, r3
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018b4c:	68f9      	ldr	r1, [r7, #12]
 8018b4e:	f8d1 1480 	ldr.w	r1, [r1, #1152]	; 0x480
 8018b52:	2000      	movs	r0, #0
 8018b54:	460c      	mov	r4, r1
 8018b56:	4605      	mov	r5, r0
 8018b58:	ebb2 0804 	subs.w	r8, r2, r4
 8018b5c:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8018b66:	2200      	movs	r2, #0
 8018b68:	469a      	mov	sl, r3
 8018b6a:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8018b6c:	4652      	mov	r2, sl
 8018b6e:	465b      	mov	r3, fp
 8018b70:	4640      	mov	r0, r8
 8018b72:	4649      	mov	r1, r9
 8018b74:	f7e8 f8dc 	bl	8000d30 <__aeabi_uldivmod>
 8018b78:	4602      	mov	r2, r0
 8018b7a:	460b      	mov	r3, r1
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b84:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	d822      	bhi.n	8018bd2 <_fx_media_open+0x5c2>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	2201      	movs	r2, #1
 8018b90:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	2200      	movs	r2, #0
 8018b98:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018ba2:	2201      	movs	r2, #1
 8018ba4:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	2200      	movs	r2, #0
 8018bac:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8018bbc:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018bc6:	461a      	mov	r2, r3
 8018bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018bcc:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8018bd0:	e05a      	b.n	8018c88 <_fx_media_open+0x678>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bd6:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d822      	bhi.n	8018c24 <_fx_media_open+0x614>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2200      	movs	r2, #0
 8018be2:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2200      	movs	r2, #0
 8018bea:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018bf4:	2204      	movs	r2, #4
 8018bf6:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c08:	461a      	mov	r2, r3
 8018c0a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8018c0e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c18:	461a      	mov	r2, r3
 8018c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c1e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8018c22:	e031      	b.n	8018c88 <_fx_media_open+0x678>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2200      	movs	r2, #0
 8018c28:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	2201      	movs	r2, #1
 8018c30:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT32;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c3a:	220b      	movs	r2, #11
 8018c3c:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c44:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c4e:	461a      	mov	r2, r3
 8018c50:	4bad      	ldr	r3, [pc, #692]	; (8018f08 <_fx_media_open+0x8f8>)
 8018c52:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c5c:	461a      	mov	r2, r3
 8018c5e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8018c62:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8018c66:	e00f      	b.n	8018c88 <_fx_media_open+0x678>
    }
    else
    {

        /* Set FAT last and FAT reserved. */
        media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_exFAT;
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c6e:	461a      	mov	r2, r3
 8018c70:	f06f 0307 	mvn.w	r3, #7
 8018c74:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
        media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_exFAT;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c7e:	461a      	mov	r2, r3
 8018c80:	f04f 33ff 	mov.w	r3, #4294967295
 8018c84:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
#endif /* FX_ENABLE_EXFAT */

    /* Determine if a 32-bit FAT is present. If so, calculate the size of the root directory (since
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	d006      	beq.n	8018ca0 <_fx_media_open+0x690>
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018c98:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
 8018c9c:	2b07      	cmp	r3, #7
 8018c9e:	d16c      	bne.n	8018d7a <_fx_media_open+0x76a>
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
#endif /* FX_ENABLE_EXFAT */
    {
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d116      	bne.n	8018cd8 <_fx_media_open+0x6c8>
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	d801      	bhi.n	8018cb8 <_fx_media_open+0x6a8>
            {
                return(FX_MEDIA_INVALID);
 8018cb4:	2302      	movs	r3, #2
 8018cb6:	e28f      	b.n	80191d8 <_fx_media_open+0xbc8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8018cc4:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 8018cc6:	68f9      	ldr	r1, [r7, #12]
 8018cc8:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8018ccc:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8018cd0:	441a      	add	r2, r3
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8018ce2:	647b      	str	r3, [r7, #68]	; 0x44
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018ce4:	f107 0310 	add.w	r3, r7, #16
 8018ce8:	461a      	mov	r2, r3
 8018cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018cec:	68f8      	ldr	r0, [r7, #12]
 8018cee:	f000 fd1a 	bl	8019726 <_fx_utility_FAT_entry_read>
 8018cf2:	62b8      	str	r0, [r7, #40]	; 0x28
            i++;
 8018cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8018cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d00e      	beq.n	8018d1e <_fx_media_open+0x70e>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2208      	movs	r2, #8
 8018d04:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2290      	movs	r2, #144	; 0x90
 8018d0c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018d16:	68f8      	ldr	r0, [r7, #12]
 8018d18:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018d1a:	2303      	movs	r3, #3
 8018d1c:	e25c      	b.n	80191d8 <_fx_media_open+0xbc8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 8018d1e:	693b      	ldr	r3, [r7, #16]
 8018d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d004      	beq.n	8018d30 <_fx_media_open+0x720>
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d90e      	bls.n	8018d4e <_fx_media_open+0x73e>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2208      	movs	r2, #8
 8018d34:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	2290      	movs	r2, #144	; 0x90
 8018d3c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018d46:	68f8      	ldr	r0, [r7, #12]
 8018d48:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018d4a:	2303      	movs	r3, #3
 8018d4c:	e244      	b.n	80191d8 <_fx_media_open+0xbc8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	4a6e      	ldr	r2, [pc, #440]	; (8018f0c <_fx_media_open+0x8fc>)
 8018d52:	4293      	cmp	r3, r2
 8018d54:	d802      	bhi.n	8018d5c <_fx_media_open+0x74c>
            {
                break;
            }
            cluster_number = FAT_entry;
 8018d56:	693b      	ldr	r3, [r7, #16]
 8018d58:	647b      	str	r3, [r7, #68]	; 0x44
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018d5a:	e7c3      	b.n	8018ce4 <_fx_media_open+0x6d4>
                break;
 8018d5c:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8018d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018d66:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8018d6a:	68fa      	ldr	r2, [r7, #12]
 8018d6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018d6e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8018d72:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2200      	movs	r2, #0
 8018d86:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	f000 8097 	beq.w	8018ec4 <_fx_media_open+0x8b4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	69db      	ldr	r3, [r3, #28]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	69d9      	ldr	r1, [r3, #28]
 8018da2:	f04f 32ff 	mov.w	r2, #4294967295
 8018da6:	f04f 33ff 	mov.w	r3, #4294967295
 8018daa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	69db      	ldr	r3, [r3, #28]
 8018db2:	2200      	movs	r2, #0
 8018db4:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	2200      	movs	r2, #0
 8018dba:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	2290      	movs	r2, #144	; 0x90
 8018dc2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dca:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
        media_ptr -> fx_media_driver_sectors =          1;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2201      	movs	r2, #1
 8018dde:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	2203      	movs	r2, #3
 8018de6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8018df0:	1c5a      	adds	r2, r3, #1
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018dfe:	68f8      	ldr	r0, [r7, #12]
 8018e00:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d157      	bne.n	8018ebc <_fx_media_open+0x8ac>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8018e12:	627b      	str	r3, [r7, #36]	; 0x24

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8018e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e16:	f000 fbfb 	bl	8019610 <_fx_utility_32_unsigned_read>
 8018e1a:	6238      	str	r0, [r7, #32]

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 8018e1c:	6a3b      	ldr	r3, [r7, #32]
 8018e1e:	4a3c      	ldr	r2, [pc, #240]	; (8018f10 <_fx_media_open+0x900>)
 8018e20:	4293      	cmp	r3, r2
 8018e22:	d146      	bne.n	8018eb2 <_fx_media_open+0x8a2>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8018e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f000 fbf0 	bl	8019610 <_fx_utility_32_unsigned_read>
 8018e30:	6238      	str	r0, [r7, #32]

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 8018e32:	6a3b      	ldr	r3, [r7, #32]
 8018e34:	4a37      	ldr	r2, [pc, #220]	; (8018f14 <_fx_media_open+0x904>)
 8018e36:	4293      	cmp	r3, r2
 8018e38:	d136      	bne.n	8018ea8 <_fx_media_open+0x898>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8018e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018e40:	4618      	mov	r0, r3
 8018e42:	f000 fbe5 	bl	8019610 <_fx_utility_32_unsigned_read>
 8018e46:	4602      	mov	r2, r0
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018e60:	4618      	mov	r0, r3
 8018e62:	f000 fbd5 	bl	8019610 <_fx_utility_32_unsigned_read>
 8018e66:	4602      	mov	r2, r0
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	d80c      	bhi.n	8018e96 <_fx_media_open+0x886>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e86:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	d804      	bhi.n	8018e96 <_fx_media_open+0x886>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8018e92:	2b01      	cmp	r3, #1
 8018e94:	d816      	bhi.n	8018ec4 <_fx_media_open+0x8b4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	2200      	movs	r2, #0
 8018e9a:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
                        media_ptr -> fx_media_cluster_search_start =  0;
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 8018ea6:	e00d      	b.n	8018ec4 <_fx_media_open+0x8b4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 8018eb0:	e008      	b.n	8018ec4 <_fx_media_open+0x8b4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 8018eba:	e003      	b.n	8018ec4 <_fx_media_open+0x8b4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d041      	beq.n	8018f52 <_fx_media_open+0x942>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 8018ece:	2302      	movs	r3, #2
 8018ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8018ed2:	e037      	b.n	8018f44 <_fx_media_open+0x934>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018ed4:	f107 0310 	add.w	r3, r7, #16
 8018ed8:	461a      	mov	r2, r3
 8018eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018edc:	68f8      	ldr	r0, [r7, #12]
 8018ede:	f000 fc22 	bl	8019726 <_fx_utility_FAT_entry_read>
 8018ee2:	62b8      	str	r0, [r7, #40]	; 0x28

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8018ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d016      	beq.n	8018f18 <_fx_media_open+0x908>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	2208      	movs	r2, #8
 8018eee:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2290      	movs	r2, #144	; 0x90
 8018ef6:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018f00:	68f8      	ldr	r0, [r7, #12]
 8018f02:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018f04:	2303      	movs	r3, #3
 8018f06:	e167      	b.n	80191d8 <_fx_media_open+0xbc8>
 8018f08:	0ffffff0 	.word	0x0ffffff0
 8018f0c:	0fffffef 	.word	0x0fffffef
 8018f10:	41615252 	.word	0x41615252
 8018f14:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 8018f18:	693b      	ldr	r3, [r7, #16]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d10f      	bne.n	8018f3e <_fx_media_open+0x92e>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8018f24:	1c5a      	adds	r2, r3, #1
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d103      	bne.n	8018f3e <_fx_media_open+0x92e>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018f3a:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
             cluster_number++)
 8018f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f40:	3301      	adds	r3, #1
 8018f42:	647b      	str	r3, [r7, #68]	; 0x44
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f48:	3302      	adds	r3, #2
 8018f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d3c1      	bcc.n	8018ed4 <_fx_media_open+0x8c4>
 8018f50:	e0d8      	b.n	8019104 <_fx_media_open+0xaf4>
                }
            }
        }
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	f040 80c0 	bne.w	80190de <_fx_media_open+0xace>
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8018f64:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8018f68:	2b07      	cmp	r3, #7
 8018f6a:	f000 80b8 	beq.w	80190de <_fx_media_open+0xace>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018f74:	2101      	movs	r1, #1
 8018f76:	9102      	str	r1, [sp, #8]
 8018f78:	e9cd 2300 	strd	r2, r3, [sp]
 8018f7c:	f04f 0201 	mov.w	r2, #1
 8018f80:	f04f 0300 	mov.w	r3, #0
 8018f84:	68f8      	ldr	r0, [r7, #12]
 8018f86:	f002 fd40 	bl	801ba0a <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f8e:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 8018f90:	2300      	movs	r3, #0
 8018f92:	647b      	str	r3, [r7, #68]	; 0x44
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8018f94:	2300      	movs	r3, #0
 8018f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018f98:	e099      	b.n	80190ce <_fx_media_open+0xabe>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8018fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018fa2:	4413      	add	r3, r2
 8018fa4:	61fb      	str	r3, [r7, #28]

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8018fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fae:	1ad3      	subs	r3, r2, r3
 8018fb0:	643b      	str	r3, [r7, #64]	; 0x40

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	695b      	ldr	r3, [r3, #20]
 8018fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d902      	bls.n	8018fc2 <_fx_media_open+0x9b2>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	695b      	ldr	r3, [r3, #20]
 8018fc0:	643b      	str	r3, [r7, #64]	; 0x40
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	2290      	movs	r2, #144	; 0x90
 8018fce:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	689a      	ldr	r2, [r3, #8]
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	69fa      	ldr	r2, [r7, #28]
 8018fe0:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018fe8:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	2202      	movs	r2, #2
 8018ff0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8018ffa:	68f8      	ldr	r0, [r7, #12]
 8018ffc:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8019004:	2b00      	cmp	r3, #0
 8019006:	d00e      	beq.n	8019026 <_fx_media_open+0xa16>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	2208      	movs	r2, #8
 801900c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2290      	movs	r2, #144	; 0x90
 8019014:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801901e:	68f8      	ldr	r0, [r7, #12]
 8019020:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8019022:	2303      	movs	r3, #3
 8019024:	e0d8      	b.n	80191d8 <_fx_media_open+0xbc8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801902a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801902c:	fb02 f303 	mul.w	r3, r2, r3
 8019030:	61bb      	str	r3, [r7, #24]

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 8019032:	2300      	movs	r3, #0
 8019034:	63bb      	str	r3, [r7, #56]	; 0x38
 8019036:	e041      	b.n	80190bc <_fx_media_open+0xaac>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801903e:	2b00      	cmp	r3, #0
 8019040:	d009      	beq.n	8019056 <_fx_media_open+0xa46>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	689a      	ldr	r2, [r3, #8]
 8019046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019048:	4413      	add	r3, r2
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 801904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019050:	3304      	adds	r3, #4
 8019052:	63bb      	str	r3, [r7, #56]	; 0x38
 8019054:	e011      	b.n	801907a <_fx_media_open+0xa6a>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	689a      	ldr	r2, [r3, #8]
 801905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801905c:	4413      	add	r3, r2
 801905e:	781b      	ldrb	r3, [r3, #0]
 8019060:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	689a      	ldr	r2, [r3, #8]
 8019066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019068:	3301      	adds	r3, #1
 801906a:	4413      	add	r3, r2
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8019070:	430b      	orrs	r3, r1
 8019072:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 8019074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019076:	3302      	adds	r3, #2
 8019078:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d10f      	bne.n	80190a0 <_fx_media_open+0xa90>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8019086:	1c5a      	adds	r2, r3, #1
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8019094:	2b00      	cmp	r3, #0
 8019096:	d103      	bne.n	80190a0 <_fx_media_open+0xa90>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801909c:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 80190a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190a2:	3301      	adds	r3, #1
 80190a4:	647b      	str	r3, [r7, #68]	; 0x44

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190aa:	3302      	adds	r3, #2
 80190ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d304      	bcc.n	80190bc <_fx_media_open+0xaac>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80190b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80190ba:	e003      	b.n	80190c4 <_fx_media_open+0xab4>
            for (j = 0; j < bytes_in_buffer;)
 80190bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190be:	69bb      	ldr	r3, [r7, #24]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d3b9      	bcc.n	8019038 <_fx_media_open+0xa28>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	695b      	ldr	r3, [r3, #20]
 80190c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80190ca:	4413      	add	r3, r2
 80190cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80190d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80190d6:	429a      	cmp	r2, r3
 80190d8:	f4ff af5f 	bcc.w	8018f9a <_fx_media_open+0x98a>
    else if ((media_ptr -> fx_media_available_clusters == 0)
 80190dc:	e012      	b.n	8019104 <_fx_media_open+0xaf4>
                }
            }
        }
    }
#ifdef FX_ENABLE_EXFAT
    else if (media_ptr -> fx_media_FAT_type == FX_exFAT)
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80190e4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80190e8:	2b07      	cmp	r3, #7
 80190ea:	d10b      	bne.n	8019104 <_fx_media_open+0xaf4>
    {
        status = _fx_utility_exFAT_bitmap_initialize(media_ptr);
 80190ec:	68f8      	ldr	r0, [r7, #12]
 80190ee:	f001 fcab 	bl	801aa48 <_fx_utility_exFAT_bitmap_initialize>
 80190f2:	62b8      	str	r0, [r7, #40]	; 0x28

        if ((FX_SUCCESS         != status)  &&
 80190f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d004      	beq.n	8019104 <_fx_media_open+0xaf4>
 80190fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fc:	2b0a      	cmp	r3, #10
 80190fe:	d001      	beq.n	8019104 <_fx_media_open+0xaf4>
            (FX_NO_MORE_SPACE   != status))
        {
            return(status);
 8019100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019102:	e069      	b.n	80191d8 <_fx_media_open+0xbc8>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 801910a:	2b00      	cmp	r3, #0
 801910c:	d103      	bne.n	8019116 <_fx_media_open+0xb06>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	2202      	movs	r2, #2
 8019112:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	f603 2298 	addw	r2, r3, #2712	; 0xa98
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2200      	movs	r2, #0
 8019126:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8019130:	2200      	movs	r2, #0
 8019132:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	2200      	movs	r2, #0
 8019138:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	2200      	movs	r2, #0
 8019140:	f883 2a97 	strb.w	r2, [r3, #2711]	; 0xa97
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	2200      	movs	r2, #0
 8019148:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	2200      	movs	r2, #0
 8019150:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	2200      	movs	r2, #0
 8019158:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    media_ptr -> fx_media_opened_file_count =     0;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	2200      	movs	r2, #0
 8019160:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	4a1f      	ldr	r2, [pc, #124]	; (80191e4 <_fx_media_open+0xbd4>)
 8019168:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 801916a:	4b1f      	ldr	r3, [pc, #124]	; (80191e8 <_fx_media_open+0xbd8>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d017      	beq.n	80191a2 <_fx_media_open+0xb92>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8019172:	4b1d      	ldr	r3, [pc, #116]	; (80191e8 <_fx_media_open+0xbd8>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801917a:	617b      	str	r3, [r7, #20]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 801917c:	4b1a      	ldr	r3, [pc, #104]	; (80191e8 <_fx_media_open+0xbd8>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	68fa      	ldr	r2, [r7, #12]
 8019182:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        tail_ptr -> fx_media_opened_next =  media_ptr;
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	68fa      	ldr	r2, [r7, #12]
 801918a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	697a      	ldr	r2, [r7, #20]
 8019192:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8019196:	4b14      	ldr	r3, [pc, #80]	; (80191e8 <_fx_media_open+0xbd8>)
 8019198:	681a      	ldr	r2, [r3, #0]
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80191a0:	e00a      	b.n	80191b8 <_fx_media_open+0xba8>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 80191a2:	4a11      	ldr	r2, [pc, #68]	; (80191e8 <_fx_media_open+0xbd8>)
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	68fa      	ldr	r2, [r7, #12]
 80191ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        media_ptr -> fx_media_opened_previous = media_ptr;
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	68fa      	ldr	r2, [r7, #12]
 80191b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 80191b8:	4b0c      	ldr	r3, [pc, #48]	; (80191ec <_fx_media_open+0xbdc>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	3301      	adds	r3, #1
 80191be:	4a0b      	ldr	r2, [pc, #44]	; (80191ec <_fx_media_open+0xbdc>)
 80191c0:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d004      	beq.n	80191d6 <_fx_media_open+0xbc6>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80191d2:	68f8      	ldr	r0, [r7, #12]
 80191d4:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 80191d6:	2300      	movs	r3, #0
}
 80191d8:	4618      	mov	r0, r3
 80191da:	3748      	adds	r7, #72	; 0x48
 80191dc:	46bd      	mov	sp, r7
 80191de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80191e2:	bf00      	nop
 80191e4:	4d454449 	.word	0x4d454449
 80191e8:	2000d220 	.word	0x2000d220
 80191ec:	2000d224 	.word	0x2000d224

080191f0 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 80191f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80191f4:	b090      	sub	sp, #64	; 0x40
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	60f8      	str	r0, [r7, #12]
 80191fa:	60b9      	str	r1, [r7, #8]
 80191fc:	607a      	str	r2, [r7, #4]
 80191fe:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 8019204:	2300      	movs	r3, #0
 8019206:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 8019208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	2be9      	cmp	r3, #233	; 0xe9
 801920e:	d00a      	beq.n	8019226 <_fx_partition_offset_calculate+0x36>
 8019210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	2beb      	cmp	r3, #235	; 0xeb
 8019216:	f040 80a8 	bne.w	801936a <_fx_partition_offset_calculate+0x17a>
 801921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801921c:	3302      	adds	r3, #2
 801921e:	781b      	ldrb	r3, [r3, #0]
 8019220:	2b90      	cmp	r3, #144	; 0x90
 8019222:	f040 80a2 	bne.w	801936a <_fx_partition_offset_calculate+0x17a>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 8019226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019228:	3316      	adds	r3, #22
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d118      	bne.n	8019262 <_fx_partition_offset_calculate+0x72>
 8019230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019232:	3317      	adds	r3, #23
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d113      	bne.n	8019262 <_fx_partition_offset_calculate+0x72>
 801923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801923c:	3324      	adds	r3, #36	; 0x24
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d10e      	bne.n	8019262 <_fx_partition_offset_calculate+0x72>
 8019244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019246:	3325      	adds	r3, #37	; 0x25
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d109      	bne.n	8019262 <_fx_partition_offset_calculate+0x72>
 801924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019250:	3326      	adds	r3, #38	; 0x26
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d104      	bne.n	8019262 <_fx_partition_offset_calculate+0x72>
 8019258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801925a:	3327      	adds	r3, #39	; 0x27
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d05a      	beq.n	8019318 <_fx_partition_offset_calculate+0x128>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 8019262:	f04f 0200 	mov.w	r2, #0
 8019266:	f04f 0300 	mov.w	r3, #0
 801926a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 801926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019270:	3313      	adds	r3, #19
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d104      	bne.n	8019282 <_fx_partition_offset_calculate+0x92>
 8019278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801927a:	3314      	adds	r3, #20
 801927c:	781b      	ldrb	r3, [r3, #0]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d00d      	beq.n	801929e <_fx_partition_offset_calculate+0xae>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 8019282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019284:	3314      	adds	r3, #20
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	021b      	lsls	r3, r3, #8
 801928a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801928c:	3213      	adds	r2, #19
 801928e:	7812      	ldrb	r2, [r2, #0]
 8019290:	4313      	orrs	r3, r2
 8019292:	2200      	movs	r2, #0
 8019294:	4698      	mov	r8, r3
 8019296:	4691      	mov	r9, r2
 8019298:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 801929c:	e02a      	b.n	80192f4 <_fx_partition_offset_calculate+0x104>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 801929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192a0:	3320      	adds	r3, #32
 80192a2:	781b      	ldrb	r3, [r3, #0]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d10e      	bne.n	80192c6 <_fx_partition_offset_calculate+0xd6>
 80192a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192aa:	3321      	adds	r3, #33	; 0x21
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d109      	bne.n	80192c6 <_fx_partition_offset_calculate+0xd6>
 80192b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192b4:	3322      	adds	r3, #34	; 0x22
 80192b6:	781b      	ldrb	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d104      	bne.n	80192c6 <_fx_partition_offset_calculate+0xd6>
 80192bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192be:	3323      	adds	r3, #35	; 0x23
 80192c0:	781b      	ldrb	r3, [r3, #0]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d016      	beq.n	80192f4 <_fx_partition_offset_calculate+0x104>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 80192c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192c8:	3323      	adds	r3, #35	; 0x23
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 80192ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d0:	3322      	adds	r3, #34	; 0x22
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 80192d6:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 80192d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192da:	3321      	adds	r3, #33	; 0x21
 80192dc:	781b      	ldrb	r3, [r3, #0]
 80192de:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 80192e0:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 80192e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192e4:	3220      	adds	r2, #32
 80192e6:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 80192e8:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 80192ea:	2200      	movs	r2, #0
 80192ec:	461c      	mov	r4, r3
 80192ee:	4615      	mov	r5, r2
 80192f0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 80192f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80192f8:	4313      	orrs	r3, r2
 80192fa:	d036      	beq.n	801936a <_fx_partition_offset_calculate+0x17a>
            {

                if (partition_start != FX_NULL)
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d002      	beq.n	8019308 <_fx_partition_offset_calculate+0x118>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	2200      	movs	r2, #0
 8019306:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d002      	beq.n	8019314 <_fx_partition_offset_calculate+0x124>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 801930e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 8019314:	2300      	movs	r3, #0
 8019316:	e05b      	b.n	80193d0 <_fx_partition_offset_calculate+0x1e0>
            }
        }
#ifdef FX_ENABLE_EXFAT
        /* See if there are good values for sectors per exFAT.  */
        else if (partition_sector_ptr[0x0b] == 0 && partition_sector_ptr[0x0c] == 0)
 8019318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801931a:	330b      	adds	r3, #11
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d123      	bne.n	801936a <_fx_partition_offset_calculate+0x17a>
 8019322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019324:	330c      	adds	r3, #12
 8019326:	781b      	ldrb	r3, [r3, #0]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d11e      	bne.n	801936a <_fx_partition_offset_calculate+0x17a>
        {
            /* There are values for sectors per exFAT.  */

            /* Calculate the total sectors.  */
            total_sectors = _fx_utility_64_unsigned_read(&partition_sector_ptr[FX_EF_VOLUME_LENGTH]);
 801932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801932e:	3348      	adds	r3, #72	; 0x48
 8019330:	4618      	mov	r0, r3
 8019332:	f000 f9ab 	bl	801968c <_fx_utility_64_unsigned_read>
 8019336:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 801933a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801933e:	4313      	orrs	r3, r2
 8019340:	d013      	beq.n	801936a <_fx_partition_offset_calculate+0x17a>
            {

                if (partition_start != FX_NULL)
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d002      	beq.n	801934e <_fx_partition_offset_calculate+0x15e>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2200      	movs	r2, #0
 801934c:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d008      	beq.n	8019366 <_fx_partition_offset_calculate+0x176>
                {

                    if (total_sectors > 0xFFFFFFFF)
 8019354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8019358:	2b01      	cmp	r3, #1
 801935a:	d301      	bcc.n	8019360 <_fx_partition_offset_calculate+0x170>
                    {

                        /* Overflow. Just return not found. */
                        return(FX_NOT_FOUND);
 801935c:	2304      	movs	r3, #4
 801935e:	e037      	b.n	80193d0 <_fx_partition_offset_calculate+0x1e0>
                    }

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 8019360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 8019366:	2300      	movs	r3, #0
 8019368:	e032      	b.n	80193d0 <_fx_partition_offset_calculate+0x1e0>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 801936a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801936c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	2b55      	cmp	r3, #85	; 0x55
 8019374:	d105      	bne.n	8019382 <_fx_partition_offset_calculate+0x192>
 8019376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019378:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	2baa      	cmp	r3, #170	; 0xaa
 8019380:	d001      	beq.n	8019386 <_fx_partition_offset_calculate+0x196>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 8019382:	2304      	movs	r3, #4
 8019384:	e024      	b.n	80193d0 <_fx_partition_offset_calculate+0x1e0>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 8019386:	f107 0110 	add.w	r1, r7, #16
 801938a:	f107 0014 	add.w	r0, r7, #20
 801938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019390:	2200      	movs	r2, #0
 8019392:	f000 f822 	bl	80193da <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	68ba      	ldr	r2, [r7, #8]
 801939a:	429a      	cmp	r2, r3
 801939c:	d301      	bcc.n	80193a2 <_fx_partition_offset_calculate+0x1b2>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 801939e:	2304      	movs	r3, #4
 80193a0:	e016      	b.n	80193d0 <_fx_partition_offset_calculate+0x1e0>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d007      	beq.n	80193b8 <_fx_partition_offset_calculate+0x1c8>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 80193a8:	68bb      	ldr	r3, [r7, #8]
 80193aa:	00db      	lsls	r3, r3, #3
 80193ac:	3340      	adds	r3, #64	; 0x40
 80193ae:	443b      	add	r3, r7
 80193b0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d007      	beq.n	80193ce <_fx_partition_offset_calculate+0x1de>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	00db      	lsls	r3, r3, #3
 80193c2:	3340      	adds	r3, #64	; 0x40
 80193c4:	443b      	add	r3, r7
 80193c6:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 80193ce:	2300      	movs	r3, #0
}
 80193d0:	4618      	mov	r0, r3
 80193d2:	3740      	adds	r7, #64	; 0x40
 80193d4:	46bd      	mov	sp, r7
 80193d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080193da <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 80193da:	b480      	push	{r7}
 80193dc:	b089      	sub	sp, #36	; 0x24
 80193de:	af00      	add	r7, sp, #0
 80193e0:	60f8      	str	r0, [r7, #12]
 80193e2:	60b9      	str	r1, [r7, #8]
 80193e4:	607a      	str	r2, [r7, #4]
 80193e6:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 80193ec:	f44f 73df 	mov.w	r3, #446	; 0x1be
 80193f0:	61fb      	str	r3, [r7, #28]
 80193f2:	e06f      	b.n	80194d4 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 80193f4:	69fb      	ldr	r3, [r7, #28]
 80193f6:	3304      	adds	r3, #4
 80193f8:	683a      	ldr	r2, [r7, #0]
 80193fa:	4413      	add	r3, r2
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d10e      	bne.n	8019420 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	00db      	lsls	r3, r3, #3
 8019408:	68fa      	ldr	r2, [r7, #12]
 801940a:	4413      	add	r3, r2
 801940c:	2200      	movs	r2, #0
 801940e:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	00db      	lsls	r3, r3, #3
 8019416:	68fa      	ldr	r2, [r7, #12]
 8019418:	4413      	add	r3, r2
 801941a:	2200      	movs	r2, #0
 801941c:	605a      	str	r2, [r3, #4]
 801941e:	e051      	b.n	80194c4 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 8019420:	69fb      	ldr	r3, [r7, #28]
 8019422:	3308      	adds	r3, #8
 8019424:	683a      	ldr	r2, [r7, #0]
 8019426:	4413      	add	r3, r2
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 801942c:	69fb      	ldr	r3, [r7, #28]
 801942e:	3309      	adds	r3, #9
 8019430:	683a      	ldr	r2, [r7, #0]
 8019432:	4413      	add	r3, r2
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	021b      	lsls	r3, r3, #8
 8019438:	697a      	ldr	r2, [r7, #20]
 801943a:	4313      	orrs	r3, r2
 801943c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 801943e:	69fb      	ldr	r3, [r7, #28]
 8019440:	330a      	adds	r3, #10
 8019442:	683a      	ldr	r2, [r7, #0]
 8019444:	4413      	add	r3, r2
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	041b      	lsls	r3, r3, #16
 801944a:	697a      	ldr	r2, [r7, #20]
 801944c:	4313      	orrs	r3, r2
 801944e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8019450:	69fb      	ldr	r3, [r7, #28]
 8019452:	330b      	adds	r3, #11
 8019454:	683a      	ldr	r2, [r7, #0]
 8019456:	4413      	add	r3, r2
 8019458:	781b      	ldrb	r3, [r3, #0]
 801945a:	061b      	lsls	r3, r3, #24
 801945c:	697a      	ldr	r2, [r7, #20]
 801945e:	4313      	orrs	r3, r2
 8019460:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	00db      	lsls	r3, r3, #3
 8019468:	68fa      	ldr	r2, [r7, #12]
 801946a:	4413      	add	r3, r2
 801946c:	6979      	ldr	r1, [r7, #20]
 801946e:	69ba      	ldr	r2, [r7, #24]
 8019470:	440a      	add	r2, r1
 8019472:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 8019474:	69fb      	ldr	r3, [r7, #28]
 8019476:	330c      	adds	r3, #12
 8019478:	683a      	ldr	r2, [r7, #0]
 801947a:	4413      	add	r3, r2
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 8019480:	69fb      	ldr	r3, [r7, #28]
 8019482:	330d      	adds	r3, #13
 8019484:	683a      	ldr	r2, [r7, #0]
 8019486:	4413      	add	r3, r2
 8019488:	781b      	ldrb	r3, [r3, #0]
 801948a:	021b      	lsls	r3, r3, #8
 801948c:	697a      	ldr	r2, [r7, #20]
 801948e:	4313      	orrs	r3, r2
 8019490:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	330e      	adds	r3, #14
 8019496:	683a      	ldr	r2, [r7, #0]
 8019498:	4413      	add	r3, r2
 801949a:	781b      	ldrb	r3, [r3, #0]
 801949c:	041b      	lsls	r3, r3, #16
 801949e:	697a      	ldr	r2, [r7, #20]
 80194a0:	4313      	orrs	r3, r2
 80194a2:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	330f      	adds	r3, #15
 80194a8:	683a      	ldr	r2, [r7, #0]
 80194aa:	4413      	add	r3, r2
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	061b      	lsls	r3, r3, #24
 80194b0:	697a      	ldr	r2, [r7, #20]
 80194b2:	4313      	orrs	r3, r2
 80194b4:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 80194b6:	68bb      	ldr	r3, [r7, #8]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	00db      	lsls	r3, r3, #3
 80194bc:	68fa      	ldr	r2, [r7, #12]
 80194be:	4413      	add	r3, r2
 80194c0:	697a      	ldr	r2, [r7, #20]
 80194c2:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	1c5a      	adds	r2, r3, #1
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	3310      	adds	r3, #16
 80194d2:	61fb      	str	r3, [r7, #28]
 80194d4:	69fb      	ldr	r3, [r7, #28]
 80194d6:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80194da:	d98b      	bls.n	80193f4 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 80194dc:	2300      	movs	r3, #0
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3724      	adds	r7, #36	; 0x24
 80194e2:	46bd      	mov	sp, r7
 80194e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e8:	4770      	bx	lr
	...

080194ec <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 80194ec:	b480      	push	{r7}
 80194ee:	af00      	add	r7, sp, #0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 80194f0:	4b2a      	ldr	r3, [pc, #168]	; (801959c <_fx_system_initialize+0xb0>)
 80194f2:	2200      	movs	r2, #0
 80194f4:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 80194f6:	4b2a      	ldr	r3, [pc, #168]	; (80195a0 <_fx_system_initialize+0xb4>)
 80194f8:	2200      	movs	r2, #0
 80194fa:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 80194fc:	4b29      	ldr	r3, [pc, #164]	; (80195a4 <_fx_system_initialize+0xb8>)
 80194fe:	f644 2221 	movw	r2, #18977	; 0x4a21
 8019502:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8019504:	4b28      	ldr	r3, [pc, #160]	; (80195a8 <_fx_system_initialize+0xbc>)
 8019506:	2200      	movs	r2, #0
 8019508:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 801950a:	4b28      	ldr	r3, [pc, #160]	; (80195ac <_fx_system_initialize+0xc0>)
 801950c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019510:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8019512:	4b27      	ldr	r3, [pc, #156]	; (80195b0 <_fx_system_initialize+0xc4>)
 8019514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019518:	601a      	str	r2, [r3, #0]
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 801951a:	4b26      	ldr	r3, [pc, #152]	; (80195b4 <_fx_system_initialize+0xc8>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8019522:	4a24      	ldr	r2, [pc, #144]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019524:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8019526:	4b23      	ldr	r3, [pc, #140]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801952e:	4a21      	ldr	r2, [pc, #132]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019530:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LAST_NAME_LEN & 0xFF)) << 24);
    }

#ifdef FX_NO_TIMER
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 10);
 8019532:	4b20      	ldr	r3, [pc, #128]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801953a:	4a1e      	ldr	r2, [pc, #120]	; (80195b4 <_fx_system_initialize+0xc8>)
 801953c:	6013      	str	r3, [r2, #0]
#endif
#ifdef FX_SINGLE_THREAD
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 9);
 801953e:	4b1d      	ldr	r3, [pc, #116]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019546:	4a1b      	ldr	r2, [pc, #108]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019548:	6013      	str	r3, [r2, #0]
#endif
#ifdef FX_RENAME_PATH_INHERIT
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 3);
#endif
#ifdef FX_NO_LOCAL_PATH
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 2);
 801954a:	4b1a      	ldr	r3, [pc, #104]	; (80195b4 <_fx_system_initialize+0xc8>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	f043 0304 	orr.w	r3, r3, #4
 8019552:	4a18      	ldr	r2, [pc, #96]	; (80195b4 <_fx_system_initialize+0xc8>)
 8019554:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 8019556:	4b18      	ldr	r3, [pc, #96]	; (80195b8 <_fx_system_initialize+0xcc>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801955e:	4a16      	ldr	r2, [pc, #88]	; (80195b8 <_fx_system_initialize+0xcc>)
 8019560:	6013      	str	r3, [r2, #0]
    }
    if (FX_FAT_MAP_SIZE > 0xFF)
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
 8019562:	4b15      	ldr	r3, [pc, #84]	; (80195b8 <_fx_system_initialize+0xcc>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 801956a:	4a13      	ldr	r2, [pc, #76]	; (80195b8 <_fx_system_initialize+0xcc>)
 801956c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
    }
    if (FX_MAX_FAT_CACHE > 0xFF)
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
 801956e:	4b12      	ldr	r3, [pc, #72]	; (80195b8 <_fx_system_initialize+0xcc>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8019576:	4a10      	ldr	r2, [pc, #64]	; (80195b8 <_fx_system_initialize+0xcc>)
 8019578:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 801957a:	4b10      	ldr	r3, [pc, #64]	; (80195bc <_fx_system_initialize+0xd0>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8019582:	4a0e      	ldr	r2, [pc, #56]	; (80195bc <_fx_system_initialize+0xd0>)
 8019584:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8019586:	4b0d      	ldr	r3, [pc, #52]	; (80195bc <_fx_system_initialize+0xd0>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 801958e:	4a0b      	ldr	r2, [pc, #44]	; (80195bc <_fx_system_initialize+0xd0>)
 8019590:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 8019592:	bf00      	nop
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr
 801959c:	2000d220 	.word	0x2000d220
 80195a0:	2000d224 	.word	0x2000d224
 80195a4:	2000d228 	.word	0x2000d228
 80195a8:	2000d22c 	.word	0x2000d22c
 80195ac:	2000d230 	.word	0x2000d230
 80195b0:	2000d234 	.word	0x2000d234
 80195b4:	2000d238 	.word	0x2000d238
 80195b8:	2000d23c 	.word	0x2000d23c
 80195bc:	2000d240 	.word	0x2000d240

080195c0 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 80195c0:	b480      	push	{r7}
 80195c2:	b085      	sub	sp, #20
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	3301      	adds	r3, #1
 80195cc:	781b      	ldrb	r3, [r3, #0]
 80195ce:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80195d4:	4313      	orrs	r3, r2
 80195d6:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 80195d8:	68fb      	ldr	r3, [r7, #12]
}
 80195da:	4618      	mov	r0, r3
 80195dc:	3714      	adds	r7, #20
 80195de:	46bd      	mov	sp, r7
 80195e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e4:	4770      	bx	lr

080195e6 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 80195e6:	b480      	push	{r7}
 80195e8:	b083      	sub	sp, #12
 80195ea:	af00      	add	r7, sp, #0
 80195ec:	6078      	str	r0, [r7, #4]
 80195ee:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	b2da      	uxtb	r2, r3
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	0a1a      	lsrs	r2, r3, #8
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	3301      	adds	r3, #1
 8019600:	b2d2      	uxtb	r2, r2
 8019602:	701a      	strb	r2, [r3, #0]
}
 8019604:	bf00      	nop
 8019606:	370c      	adds	r7, #12
 8019608:	46bd      	mov	sp, r7
 801960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960e:	4770      	bx	lr

08019610 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 8019610:	b480      	push	{r7}
 8019612:	b085      	sub	sp, #20
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	3303      	adds	r3, #3
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	3302      	adds	r3, #2
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8019628:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	3301      	adds	r3, #1
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8019632:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8019638:	4313      	orrs	r3, r2
 801963a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 801963c:	68fb      	ldr	r3, [r7, #12]
}
 801963e:	4618      	mov	r0, r3
 8019640:	3714      	adds	r7, #20
 8019642:	46bd      	mov	sp, r7
 8019644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019648:	4770      	bx	lr

0801964a <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 801964a:	b480      	push	{r7}
 801964c:	b083      	sub	sp, #12
 801964e:	af00      	add	r7, sp, #0
 8019650:	6078      	str	r0, [r7, #4]
 8019652:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	b2da      	uxtb	r2, r3
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 801965c:	683b      	ldr	r3, [r7, #0]
 801965e:	0a1a      	lsrs	r2, r3, #8
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	3301      	adds	r3, #1
 8019664:	b2d2      	uxtb	r2, r2
 8019666:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	0c1a      	lsrs	r2, r3, #16
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	3302      	adds	r3, #2
 8019670:	b2d2      	uxtb	r2, r2
 8019672:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	0e1a      	lsrs	r2, r3, #24
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	3303      	adds	r3, #3
 801967c:	b2d2      	uxtb	r2, r2
 801967e:	701a      	strb	r2, [r3, #0]
}
 8019680:	bf00      	nop
 8019682:	370c      	adds	r7, #12
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <_fx_utility_64_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG64  _fx_utility_64_unsigned_read(UCHAR *source_ptr)
{
 801968c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019690:	b086      	sub	sp, #24
 8019692:	af00      	add	r7, sp, #0
 8019694:	6078      	str	r0, [r7, #4]
ULONG64 value;
ULONG   upper_portion;
ULONG   lower_portion;


    lower_portion = _fx_utility_32_unsigned_read(source_ptr);
 8019696:	6878      	ldr	r0, [r7, #4]
 8019698:	f7ff ffba 	bl	8019610 <_fx_utility_32_unsigned_read>
 801969c:	6178      	str	r0, [r7, #20]
    upper_portion = _fx_utility_32_unsigned_read(source_ptr + sizeof(ULONG));
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	3304      	adds	r3, #4
 80196a2:	4618      	mov	r0, r3
 80196a4:	f7ff ffb4 	bl	8019610 <_fx_utility_32_unsigned_read>
 80196a8:	6138      	str	r0, [r7, #16]

    value =  ((ULONG64)upper_portion) << 32;
 80196aa:	693b      	ldr	r3, [r7, #16]
 80196ac:	2200      	movs	r2, #0
 80196ae:	469a      	mov	sl, r3
 80196b0:	4693      	mov	fp, r2
 80196b2:	f04f 0200 	mov.w	r2, #0
 80196b6:	f04f 0300 	mov.w	r3, #0
 80196ba:	4653      	mov	r3, sl
 80196bc:	2200      	movs	r2, #0
 80196be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    value |= (ULONG64)lower_portion;
 80196c2:	697b      	ldr	r3, [r7, #20]
 80196c4:	2200      	movs	r2, #0
 80196c6:	461c      	mov	r4, r3
 80196c8:	4615      	mov	r5, r2
 80196ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80196ce:	ea42 0804 	orr.w	r8, r2, r4
 80196d2:	ea43 0905 	orr.w	r9, r3, r5
 80196d6:	e9c7 8902 	strd	r8, r9, [r7, #8]

    /* Return 64-bit value to caller.  */
    return(value);
 80196da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80196de:	4610      	mov	r0, r2
 80196e0:	4619      	mov	r1, r3
 80196e2:	3718      	adds	r7, #24
 80196e4:	46bd      	mov	sp, r7
 80196e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080196ea <_fx_utility_64_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_64_unsigned_write(UCHAR *dest_ptr, ULONG64 value)
{
 80196ea:	b590      	push	{r4, r7, lr}
 80196ec:	b085      	sub	sp, #20
 80196ee:	af00      	add	r7, sp, #0
 80196f0:	60f8      	str	r0, [r7, #12]
 80196f2:	e9c7 2300 	strd	r2, r3, [r7]

    /* Store the ULONG64 into the destination with endian-awareness.  */
    _fx_utility_32_unsigned_write(dest_ptr, (ULONG)value);
 80196f6:	683b      	ldr	r3, [r7, #0]
 80196f8:	4619      	mov	r1, r3
 80196fa:	68f8      	ldr	r0, [r7, #12]
 80196fc:	f7ff ffa5 	bl	801964a <_fx_utility_32_unsigned_write>
    _fx_utility_32_unsigned_write(dest_ptr + sizeof(ULONG), (ULONG)(value >> 32));
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	1d1c      	adds	r4, r3, #4
 8019704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019708:	f04f 0200 	mov.w	r2, #0
 801970c:	f04f 0300 	mov.w	r3, #0
 8019710:	000a      	movs	r2, r1
 8019712:	2300      	movs	r3, #0
 8019714:	4613      	mov	r3, r2
 8019716:	4619      	mov	r1, r3
 8019718:	4620      	mov	r0, r4
 801971a:	f7ff ff96 	bl	801964a <_fx_utility_32_unsigned_write>
}
 801971e:	bf00      	nop
 8019720:	3714      	adds	r7, #20
 8019722:	46bd      	mov	sp, r7
 8019724:	bd90      	pop	{r4, r7, pc}

08019726 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8019726:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801972a:	b098      	sub	sp, #96	; 0x60
 801972c:	af04      	add	r7, sp, #16
 801972e:	61f8      	str	r0, [r7, #28]
 8019730:	61b9      	str	r1, [r7, #24]
 8019732:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	f8d3 35a8 	ldr.w	r3, [r3, #1448]	; 0x5a8
 801973a:	1c5a      	adds	r2, r3, #1
 801973c:	69fb      	ldr	r3, [r7, #28]
 801973e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8019742:	69fb      	ldr	r3, [r7, #28]
 8019744:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8019748:	1c5a      	adds	r2, r3, #1
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8019750:	69bb      	ldr	r3, [r7, #24]
 8019752:	b2db      	uxtb	r3, r3
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	643b      	str	r3, [r7, #64]	; 0x40

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8019758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801975a:	4613      	mov	r3, r2
 801975c:	005b      	lsls	r3, r3, #1
 801975e:	4413      	add	r3, r2
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8019766:	69fa      	ldr	r2, [r7, #28]
 8019768:	4413      	add	r3, r2
 801976a:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 801976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	69ba      	ldr	r2, [r7, #24]
 8019772:	429a      	cmp	r2, r3
 8019774:	d105      	bne.n	8019782 <_fx_utility_FAT_entry_read+0x5c>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8019776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019778:	685a      	ldr	r2, [r3, #4]
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801977e:	2300      	movs	r3, #0
 8019780:	e212      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8019782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019784:	330c      	adds	r3, #12
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	69ba      	ldr	r2, [r7, #24]
 801978a:	429a      	cmp	r2, r3
 801978c:	d11d      	bne.n	80197ca <_fx_utility_FAT_entry_read+0xa4>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 801978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019790:	330c      	adds	r3, #12
 8019792:	685a      	ldr	r2, [r3, #4]
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8019798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801979a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801979e:	ca07      	ldmia	r2, {r0, r1, r2}
 80197a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 80197a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197a8:	4614      	mov	r4, r2
 80197aa:	330c      	adds	r3, #12
 80197ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80197b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197b6:	330c      	adds	r3, #12
 80197b8:	461c      	mov	r4, r3
 80197ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80197c6:	2300      	movs	r3, #0
 80197c8:	e1ee      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 80197ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197cc:	3318      	adds	r3, #24
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	69ba      	ldr	r2, [r7, #24]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d127      	bne.n	8019826 <_fx_utility_FAT_entry_read+0x100>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 80197d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197d8:	3318      	adds	r3, #24
 80197da:	685a      	ldr	r2, [r3, #4]
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 80197e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80197e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 80197ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197f0:	4614      	mov	r4, r2
 80197f2:	3318      	adds	r3, #24
 80197f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80197fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197fe:	f103 0218 	add.w	r2, r3, #24
 8019802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019804:	4614      	mov	r4, r2
 8019806:	330c      	adds	r3, #12
 8019808:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801980c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8019810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019812:	330c      	adds	r3, #12
 8019814:	461c      	mov	r4, r3
 8019816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801981a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801981e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8019822:	2300      	movs	r3, #0
 8019824:	e1c0      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8019826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019828:	3324      	adds	r3, #36	; 0x24
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	69ba      	ldr	r2, [r7, #24]
 801982e:	429a      	cmp	r2, r3
 8019830:	d131      	bne.n	8019896 <_fx_utility_FAT_entry_read+0x170>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8019832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019834:	3324      	adds	r3, #36	; 0x24
 8019836:	685a      	ldr	r2, [r3, #4]
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 801983c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801983e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019842:	ca07      	ldmia	r2, {r0, r1, r2}
 8019844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8019848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801984a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801984c:	4614      	mov	r4, r2
 801984e:	3324      	adds	r3, #36	; 0x24
 8019850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801985a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801985e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019860:	4614      	mov	r4, r2
 8019862:	3318      	adds	r3, #24
 8019864:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 801986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801986e:	f103 0218 	add.w	r2, r3, #24
 8019872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019874:	4614      	mov	r4, r2
 8019876:	330c      	adds	r3, #12
 8019878:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801987c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8019880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019882:	330c      	adds	r3, #12
 8019884:	461c      	mov	r4, r3
 8019886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801988a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801988e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8019892:	2300      	movs	r3, #0
 8019894:	e188      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8019896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019898:	1cda      	adds	r2, r3, #3
 801989a:	69f9      	ldr	r1, [r7, #28]
 801989c:	4613      	mov	r3, r2
 801989e:	005b      	lsls	r3, r3, #1
 80198a0:	4413      	add	r3, r2
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	440b      	add	r3, r1
 80198a6:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d008      	beq.n	80198c2 <_fx_utility_FAT_entry_read+0x19c>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 80198b0:	69f8      	ldr	r0, [r7, #28]
 80198b2:	f000 fa77 	bl	8019da4 <_fx_utility_FAT_flush>
 80198b6:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 80198b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d001      	beq.n	80198c2 <_fx_utility_FAT_entry_read+0x19c>
        {

            /* Return error status.  */
            return(status);
 80198be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198c0:	e172      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 80198c2:	69fb      	ldr	r3, [r7, #28]
 80198c4:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80198c8:	1e5a      	subs	r2, r3, #1
 80198ca:	69fb      	ldr	r3, [r7, #28]
 80198cc:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 80198d0:	69fb      	ldr	r3, [r7, #28]
 80198d2:	f8d3 35b4 	ldr.w	r3, [r3, #1460]	; 0x5b4
 80198d6:	1c5a      	adds	r2, r3, #1
 80198d8:	69fb      	ldr	r3, [r7, #28]
 80198da:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 80198de:	69fb      	ldr	r3, [r7, #28]
 80198e0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	f000 80a9 	beq.w	8019a3c <_fx_utility_FAT_entry_read+0x316>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	005a      	lsls	r2, r3, #1
 80198ee:	69bb      	ldr	r3, [r7, #24]
 80198f0:	4413      	add	r3, r2
 80198f2:	085b      	lsrs	r3, r3, #1
 80198f4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80198fc:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019906:	4413      	add	r3, r2
 8019908:	633b      	str	r3, [r7, #48]	; 0x30

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990c:	2200      	movs	r2, #0
 801990e:	60bb      	str	r3, [r7, #8]
 8019910:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019912:	69fb      	ldr	r3, [r7, #28]
 8019914:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019916:	2202      	movs	r2, #2
 8019918:	9202      	str	r2, [sp, #8]
 801991a:	2201      	movs	r2, #1
 801991c:	9201      	str	r2, [sp, #4]
 801991e:	9300      	str	r3, [sp, #0]
 8019920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019924:	69f8      	ldr	r0, [r7, #28]
 8019926:	f002 fa87 	bl	801be38 <_fx_utility_logical_sector_read>
 801992a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 801992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801992e:	2b00      	cmp	r3, #0
 8019930:	d001      	beq.n	8019936 <_fx_utility_FAT_entry_read+0x210>
        {
            /* Return the error status.  */
            return(status);
 8019932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019934:	e138      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019936:	69fb      	ldr	r3, [r7, #28]
 8019938:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801993e:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8019940:	69fa      	ldr	r2, [r7, #28]
 8019942:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019944:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8019948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801994a:	1ad3      	subs	r3, r2, r3
 801994c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801994e:	69fb      	ldr	r3, [r7, #28]
 8019950:	689a      	ldr	r2, [r3, #8]
 8019952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019954:	4413      	add	r3, r2
 8019956:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 8019958:	69bb      	ldr	r3, [r7, #24]
 801995a:	f003 0301 	and.w	r3, r3, #1
 801995e:	2b00      	cmp	r3, #0
 8019960:	d030      	beq.n	80199c4 <_fx_utility_FAT_entry_read+0x29e>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8019962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019964:	781b      	ldrb	r3, [r3, #0]
 8019966:	091b      	lsrs	r3, r3, #4
 8019968:	b2db      	uxtb	r3, r3
 801996a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 801996c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801996e:	3301      	adds	r3, #1
 8019970:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019976:	3b01      	subs	r3, #1
 8019978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801997a:	429a      	cmp	r2, r3
 801997c:	d11b      	bne.n	80199b6 <_fx_utility_FAT_entry_read+0x290>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 801997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019980:	3301      	adds	r3, #1
 8019982:	633b      	str	r3, [r7, #48]	; 0x30
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019986:	2200      	movs	r2, #0
 8019988:	603b      	str	r3, [r7, #0]
 801998a:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801998c:	69fb      	ldr	r3, [r7, #28]
 801998e:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019990:	2202      	movs	r2, #2
 8019992:	9202      	str	r2, [sp, #8]
 8019994:	2201      	movs	r2, #1
 8019996:	9201      	str	r2, [sp, #4]
 8019998:	9300      	str	r3, [sp, #0]
 801999a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801999e:	69f8      	ldr	r0, [r7, #28]
 80199a0:	f002 fa4a 	bl	801be38 <_fx_utility_logical_sector_read>
 80199a4:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80199a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d001      	beq.n	80199b0 <_fx_utility_FAT_entry_read+0x28a>
                {

                    /* Return the error status.  */
                    return(status);
 80199ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199ae:	e0fb      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80199b0:	69fb      	ldr	r3, [r7, #28]
 80199b2:	689b      	ldr	r3, [r3, #8]
 80199b4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 80199b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80199b8:	781b      	ldrb	r3, [r3, #0]
 80199ba:	011b      	lsls	r3, r3, #4
 80199bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80199be:	4313      	orrs	r3, r2
 80199c0:	647b      	str	r3, [r7, #68]	; 0x44
 80199c2:	e02f      	b.n	8019a24 <_fx_utility_FAT_entry_read+0x2fe>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 80199c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80199c6:	781b      	ldrb	r3, [r3, #0]
 80199c8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 80199ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80199cc:	3301      	adds	r3, #1
 80199ce:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80199d0:	69fb      	ldr	r3, [r7, #28]
 80199d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199d4:	3b01      	subs	r3, #1
 80199d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199d8:	429a      	cmp	r2, r3
 80199da:	d11b      	bne.n	8019a14 <_fx_utility_FAT_entry_read+0x2ee>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 80199dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199de:	3301      	adds	r3, #1
 80199e0:	633b      	str	r3, [r7, #48]	; 0x30
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80199e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e4:	2200      	movs	r2, #0
 80199e6:	469a      	mov	sl, r3
 80199e8:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80199ee:	2202      	movs	r2, #2
 80199f0:	9202      	str	r2, [sp, #8]
 80199f2:	2201      	movs	r2, #1
 80199f4:	9201      	str	r2, [sp, #4]
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	4652      	mov	r2, sl
 80199fa:	465b      	mov	r3, fp
 80199fc:	69f8      	ldr	r0, [r7, #28]
 80199fe:	f002 fa1b 	bl	801be38 <_fx_utility_logical_sector_read>
 8019a02:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8019a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d001      	beq.n	8019a0e <_fx_utility_FAT_entry_read+0x2e8>
                {
                    return(status);
 8019a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a0c:	e0cc      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	689b      	ldr	r3, [r3, #8]
 8019a12:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8019a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	021b      	lsls	r3, r3, #8
 8019a1a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a20:	4313      	orrs	r3, r2
 8019a22:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 8019a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a26:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8019a2a:	d303      	bcc.n	8019a34 <_fx_utility_FAT_entry_read+0x30e>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 8019a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a2e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8019a32:	647b      	str	r3, [r7, #68]	; 0x44
        }

        *entry_ptr =  entry;
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a38:	601a      	str	r2, [r3, #0]
 8019a3a:	e093      	b.n	8019b64 <_fx_utility_FAT_entry_read+0x43e>
    }

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
 8019a3c:	69fb      	ldr	r3, [r7, #28]
 8019a3e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8019a42:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8019a46:	2b04      	cmp	r3, #4
 8019a48:	d13b      	bne.n	8019ac2 <_fx_utility_FAT_entry_read+0x39c>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8019a4a:	69bb      	ldr	r3, [r7, #24]
 8019a4c:	005b      	lsls	r3, r3, #1
 8019a4e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a56:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019a5a:	69fb      	ldr	r3, [r7, #28]
 8019a5c:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019a60:	4413      	add	r3, r2
 8019a62:	633b      	str	r3, [r7, #48]	; 0x30

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a66:	2200      	movs	r2, #0
 8019a68:	4698      	mov	r8, r3
 8019a6a:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019a6c:	69fb      	ldr	r3, [r7, #28]
 8019a6e:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a70:	2202      	movs	r2, #2
 8019a72:	9202      	str	r2, [sp, #8]
 8019a74:	2201      	movs	r2, #1
 8019a76:	9201      	str	r2, [sp, #4]
 8019a78:	9300      	str	r3, [sp, #0]
 8019a7a:	4642      	mov	r2, r8
 8019a7c:	464b      	mov	r3, r9
 8019a7e:	69f8      	ldr	r0, [r7, #28]
 8019a80:	f002 f9da 	bl	801be38 <_fx_utility_logical_sector_read>
 8019a84:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8019a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d001      	beq.n	8019a90 <_fx_utility_FAT_entry_read+0x36a>
        {

            /* Return the error code.  */
            return(status);
 8019a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a8e:	e08b      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8019a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a98:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8019a9a:	69fa      	ldr	r2, [r7, #28]
 8019a9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019a9e:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8019aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019aa4:	1ad3      	subs	r3, r2, r3
 8019aa6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8019aa8:	69fb      	ldr	r3, [r7, #28]
 8019aaa:	689a      	ldr	r2, [r3, #8]
 8019aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aae:	4413      	add	r3, r2
 8019ab0:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8019ab2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8019ab4:	f7ff fd84 	bl	80195c0 <_fx_utility_16_unsigned_read>
 8019ab8:	6478      	str	r0, [r7, #68]	; 0x44

        *entry_ptr =  entry;
 8019aba:	697b      	ldr	r3, [r7, #20]
 8019abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019abe:	601a      	str	r2, [r3, #0]
 8019ac0:	e050      	b.n	8019b64 <_fx_utility_FAT_entry_read+0x43e>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_FAT_type == FX_FAT32) ||
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8019ac8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8019acc:	2b0b      	cmp	r3, #11
 8019ace:	d006      	beq.n	8019ade <_fx_utility_FAT_entry_read+0x3b8>
             (media_ptr -> fx_media_FAT_type == FX_exFAT))
 8019ad0:	69fb      	ldr	r3, [r7, #28]
 8019ad2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8019ad6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    else if ((media_ptr -> fx_media_FAT_type == FX_FAT32) ||
 8019ada:	2b07      	cmp	r3, #7
 8019adc:	d142      	bne.n	8019b64 <_fx_utility_FAT_entry_read+0x43e>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 8019ade:	69bb      	ldr	r3, [r7, #24]
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019ae4:	69fb      	ldr	r3, [r7, #28]
 8019ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019aea:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019aee:	69fb      	ldr	r3, [r7, #28]
 8019af0:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019af4:	4413      	add	r3, r2
 8019af6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b02:	fb01 f202 	mul.w	r2, r1, r2
 8019b06:	1a9b      	subs	r3, r3, r2
 8019b08:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	461c      	mov	r4, r3
 8019b10:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019b16:	2202      	movs	r2, #2
 8019b18:	9202      	str	r2, [sp, #8]
 8019b1a:	2201      	movs	r2, #1
 8019b1c:	9201      	str	r2, [sp, #4]
 8019b1e:	9300      	str	r3, [sp, #0]
 8019b20:	4622      	mov	r2, r4
 8019b22:	462b      	mov	r3, r5
 8019b24:	69f8      	ldr	r0, [r7, #28]
 8019b26:	f002 f987 	bl	801be38 <_fx_utility_logical_sector_read>
 8019b2a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d001      	beq.n	8019b36 <_fx_utility_FAT_entry_read+0x410>
        {

            /* Return the error code.  */
            return(status);
 8019b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b34:	e038      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x482>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8019b36:	69fb      	ldr	r3, [r7, #28]
 8019b38:	689a      	ldr	r2, [r3, #8]
 8019b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b3c:	4413      	add	r3, r2
 8019b3e:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8019b40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8019b42:	f7ff fd65 	bl	8019610 <_fx_utility_32_unsigned_read>
 8019b46:	64f8      	str	r0, [r7, #76]	; 0x4c

#ifdef FX_ENABLE_EXFAT
        /* FAT32 uses 28 bit cluster addressing but  exFAT uses 32 bit.  */
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8019b4e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8019b52:	2b0b      	cmp	r3, #11
 8019b54:	d103      	bne.n	8019b5e <_fx_utility_FAT_entry_read+0x438>
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 8019b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8019b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019b62:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8019b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	3318      	adds	r3, #24
 8019b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8019b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b7a:	f103 0218 	add.w	r2, r3, #24
 8019b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b80:	4614      	mov	r4, r2
 8019b82:	330c      	adds	r3, #12
 8019b84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8019b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b8e:	330c      	adds	r3, #12
 8019b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019b92:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8019b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b9a:	69ba      	ldr	r2, [r7, #24]
 8019b9c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ba4:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8019ba6:	2300      	movs	r3, #0
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	3750      	adds	r7, #80	; 0x50
 8019bac:	46bd      	mov	sp, r7
 8019bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08019bb2 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8019bb2:	b590      	push	{r4, r7, lr}
 8019bb4:	b089      	sub	sp, #36	; 0x24
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	60f8      	str	r0, [r7, #12]
 8019bba:	60b9      	str	r1, [r7, #8]
 8019bbc:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	f8d3 35ac 	ldr.w	r3, [r3, #1452]	; 0x5ac
 8019bc4:	1c5a      	adds	r2, r3, #1
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8019bd2:	1c5a      	adds	r2, r3, #1
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8019bda:	68bb      	ldr	r3, [r7, #8]
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	009b      	lsls	r3, r3, #2
 8019be0:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8019be2:	69ba      	ldr	r2, [r7, #24]
 8019be4:	4613      	mov	r3, r2
 8019be6:	005b      	lsls	r3, r3, #1
 8019be8:	4413      	add	r3, r2
 8019bea:	009b      	lsls	r3, r3, #2
 8019bec:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8019bf0:	68fa      	ldr	r2, [r7, #12]
 8019bf2:	4413      	add	r3, r2
 8019bf4:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	61fb      	str	r3, [r7, #28]
 8019bfa:	e054      	b.n	8019ca6 <_fx_utility_FAT_entry_write+0xf4>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8019bfc:	69fa      	ldr	r2, [r7, #28]
 8019bfe:	4613      	mov	r3, r2
 8019c00:	005b      	lsls	r3, r3, #1
 8019c02:	4413      	add	r3, r2
 8019c04:	009b      	lsls	r3, r3, #2
 8019c06:	461a      	mov	r2, r3
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	68ba      	ldr	r2, [r7, #8]
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d145      	bne.n	8019ca0 <_fx_utility_FAT_entry_write+0xee>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8019c14:	69fa      	ldr	r2, [r7, #28]
 8019c16:	4613      	mov	r3, r2
 8019c18:	005b      	lsls	r3, r3, #1
 8019c1a:	4413      	add	r3, r2
 8019c1c:	009b      	lsls	r3, r3, #2
 8019c1e:	461a      	mov	r2, r3
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	4413      	add	r3, r2
 8019c24:	687a      	ldr	r2, [r7, #4]
 8019c26:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8019c28:	69fa      	ldr	r2, [r7, #28]
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	005b      	lsls	r3, r3, #1
 8019c2e:	4413      	add	r3, r2
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	461a      	mov	r2, r3
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	4413      	add	r3, r2
 8019c38:	2201      	movs	r2, #1
 8019c3a:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d02a      	beq.n	8019c9c <_fx_utility_FAT_entry_write+0xea>
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d127      	bne.n	8019c9c <_fx_utility_FAT_entry_write+0xea>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8019c52:	1c5a      	adds	r2, r3, #1
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	2206      	movs	r2, #6
 8019c5e:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	2290      	movs	r2, #144	; 0x90
 8019c66:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	3b02      	subs	r3, #2
 8019c74:	68f9      	ldr	r1, [r7, #12]
 8019c76:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
 8019c7a:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019c7e:	441a      	add	r2, r3
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8019c98:	68f8      	ldr	r0, [r7, #12]
 8019c9a:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	e07d      	b.n	8019d9c <_fx_utility_FAT_entry_write+0x1ea>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8019ca0:	69fb      	ldr	r3, [r7, #28]
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	61fb      	str	r3, [r7, #28]
 8019ca6:	69fb      	ldr	r3, [r7, #28]
 8019ca8:	2b03      	cmp	r3, #3
 8019caa:	d9a7      	bls.n	8019bfc <_fx_utility_FAT_entry_write+0x4a>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8019cb2:	1e5a      	subs	r2, r3, #1
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8019cc0:	1c5a      	adds	r2, r3, #1
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8019cc8:	69bb      	ldr	r3, [r7, #24]
 8019cca:	1cda      	adds	r2, r3, #3
 8019ccc:	68f9      	ldr	r1, [r7, #12]
 8019cce:	4613      	mov	r3, r2
 8019cd0:	005b      	lsls	r3, r3, #1
 8019cd2:	4413      	add	r3, r2
 8019cd4:	009b      	lsls	r3, r3, #2
 8019cd6:	440b      	add	r3, r1
 8019cd8:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	2b01      	cmp	r3, #1
 8019ce0:	d108      	bne.n	8019cf4 <_fx_utility_FAT_entry_write+0x142>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8019ce2:	68f8      	ldr	r0, [r7, #12]
 8019ce4:	f000 f85e 	bl	8019da4 <_fx_utility_FAT_flush>
 8019ce8:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8019cea:	693b      	ldr	r3, [r7, #16]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d001      	beq.n	8019cf4 <_fx_utility_FAT_entry_write+0x142>
        {

            /* No, return error status to caller.  */
            return(status);
 8019cf0:	693b      	ldr	r3, [r7, #16]
 8019cf2:	e053      	b.n	8019d9c <_fx_utility_FAT_entry_write+0x1ea>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8019cfa:	697b      	ldr	r3, [r7, #20]
 8019cfc:	4614      	mov	r4, r2
 8019cfe:	3318      	adds	r3, #24
 8019d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	f103 0218 	add.w	r2, r3, #24
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	4614      	mov	r4, r2
 8019d12:	330c      	adds	r3, #12
 8019d14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	330c      	adds	r3, #12
 8019d20:	697a      	ldr	r2, [r7, #20]
 8019d22:	ca07      	ldmia	r2, {r0, r1, r2}
 8019d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8019d28:	697b      	ldr	r3, [r7, #20]
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	68ba      	ldr	r2, [r7, #8]
 8019d32:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	687a      	ldr	r2, [r7, #4]
 8019d38:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d02a      	beq.n	8019d9a <_fx_utility_FAT_entry_write+0x1e8>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d127      	bne.n	8019d9a <_fx_utility_FAT_entry_write+0x1e8>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8019d50:	1c5a      	adds	r2, r3, #1
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	2206      	movs	r2, #6
 8019d5c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	2290      	movs	r2, #144	; 0x90
 8019d64:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	3b02      	subs	r3, #2
 8019d72:	68f9      	ldr	r1, [r7, #12]
 8019d74:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
 8019d78:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019d7c:	441a      	add	r2, r3
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8019d96:	68f8      	ldr	r0, [r7, #12]
 8019d98:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8019d9a:	2300      	movs	r3, #0
}
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	3724      	adds	r7, #36	; 0x24
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd90      	pop	{r4, r7, pc}

08019da4 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 8019da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019da8:	b09a      	sub	sp, #104	; 0x68
 8019daa:	af04      	add	r7, sp, #16
 8019dac:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8019dae:	69fb      	ldr	r3, [r7, #28]
 8019db0:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8019db4:	1c5a      	adds	r2, r3, #1
 8019db6:	69fb      	ldr	r3, [r7, #28]
 8019db8:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019dc0:	e365      	b.n	801a48e <_fx_utility_FAT_flush+0x6ea>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8019dc2:	69f9      	ldr	r1, [r7, #28]
 8019dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019dc6:	4613      	mov	r3, r2
 8019dc8:	005b      	lsls	r3, r3, #1
 8019dca:	4413      	add	r3, r2
 8019dcc:	009b      	lsls	r3, r3, #2
 8019dce:	440b      	add	r3, r1
 8019dd0:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f000 8353 	beq.w	801a482 <_fx_utility_FAT_flush+0x6de>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8019ddc:	69f9      	ldr	r1, [r7, #28]
 8019dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019de0:	4613      	mov	r3, r2
 8019de2:	005b      	lsls	r3, r3, #1
 8019de4:	4413      	add	r3, r2
 8019de6:	009b      	lsls	r3, r3, #2
 8019de8:	440b      	add	r3, r1
 8019dea:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
 8019df2:	69fb      	ldr	r3, [r7, #28]
 8019df4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8019df8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8019dfc:	2b01      	cmp	r3, #1
 8019dfe:	f040 8177 	bne.w	801a0f0 <_fx_utility_FAT_flush+0x34c>
        if (media_ptr -> fx_media_12_bit_FAT)
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8019e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e04:	005a      	lsls	r2, r3, #1
 8019e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e08:	4413      	add	r3, r2
 8019e0a:	085b      	lsrs	r3, r3, #1
 8019e0c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019e0e:	69fb      	ldr	r3, [r7, #28]
 8019e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019e14:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019e18:	69fb      	ldr	r3, [r7, #28]
 8019e1a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019e1e:	4413      	add	r3, r2
 8019e20:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 8019e22:	f04f 33ff 	mov.w	r3, #4294967295
 8019e26:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	461c      	mov	r4, r3
 8019e2e:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019e30:	69fb      	ldr	r3, [r7, #28]
 8019e32:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019e34:	2302      	movs	r3, #2
 8019e36:	9302      	str	r3, [sp, #8]
 8019e38:	2301      	movs	r3, #1
 8019e3a:	9301      	str	r3, [sp, #4]
 8019e3c:	9200      	str	r2, [sp, #0]
 8019e3e:	4622      	mov	r2, r4
 8019e40:	462b      	mov	r3, r5
 8019e42:	69f8      	ldr	r0, [r7, #28]
 8019e44:	f001 fff8 	bl	801be38 <_fx_utility_logical_sector_read>
 8019e48:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8019e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d001      	beq.n	8019e54 <_fx_utility_FAT_flush+0xb0>
                {

                    /* Return the error status.  */
                    return(status);
 8019e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e52:	e322      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 8019e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e5a:	d037      	beq.n	8019ecc <_fx_utility_FAT_flush+0x128>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	689b      	ldr	r3, [r3, #8]
 8019e60:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 8019e62:	69f9      	ldr	r1, [r7, #28]
 8019e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e66:	4613      	mov	r3, r2
 8019e68:	005b      	lsls	r3, r3, #1
 8019e6a:	4413      	add	r3, r2
 8019e6c:	009b      	lsls	r3, r3, #2
 8019e6e:	440b      	add	r3, r1
 8019e70:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8019e78:	69f9      	ldr	r1, [r7, #28]
 8019e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e7c:	4613      	mov	r3, r2
 8019e7e:	005b      	lsls	r3, r3, #1
 8019e80:	4413      	add	r3, r2
 8019e82:	009b      	lsls	r3, r3, #2
 8019e84:	440b      	add	r3, r1
 8019e86:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8019e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e90:	f003 0301 	and.w	r3, r3, #1
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d005      	beq.n	8019ea4 <_fx_utility_FAT_flush+0x100>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8019e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e9a:	091b      	lsrs	r3, r3, #4
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ea0:	7013      	strb	r3, [r2, #0]
 8019ea2:	e010      	b.n	8019ec6 <_fx_utility_FAT_flush+0x122>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8019ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea6:	781b      	ldrb	r3, [r3, #0]
 8019ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019eac:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8019eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb0:	b2da      	uxtb	r2, r3
 8019eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb4:	0a1b      	lsrs	r3, r3, #8
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	f003 030f 	and.w	r3, r3, #15
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ec4:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8019ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8019eca:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8019ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ece:	653b      	str	r3, [r7, #80]	; 0x50
 8019ed0:	e0a2      	b.n	801a018 <_fx_utility_FAT_flush+0x274>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8019ed2:	69f9      	ldr	r1, [r7, #28]
 8019ed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ed6:	4613      	mov	r3, r2
 8019ed8:	005b      	lsls	r3, r3, #1
 8019eda:	4413      	add	r3, r2
 8019edc:	009b      	lsls	r3, r3, #2
 8019ede:	440b      	add	r3, r1
 8019ee0:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f000 808c 	beq.w	801a004 <_fx_utility_FAT_flush+0x260>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8019eec:	69f9      	ldr	r1, [r7, #28]
 8019eee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ef0:	4613      	mov	r3, r2
 8019ef2:	005b      	lsls	r3, r3, #1
 8019ef4:	4413      	add	r3, r2
 8019ef6:	009b      	lsls	r3, r3, #2
 8019ef8:	440b      	add	r3, r1
 8019efa:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8019f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f04:	005a      	lsls	r2, r3, #1
 8019f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f08:	4413      	add	r3, r2
 8019f0a:	085b      	lsrs	r3, r3, #1
 8019f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019f0e:	69fb      	ldr	r3, [r7, #28]
 8019f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f14:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019f18:	69fb      	ldr	r3, [r7, #28]
 8019f1a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019f1e:	4413      	add	r3, r2
 8019f20:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 8019f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f26:	429a      	cmp	r2, r3
 8019f28:	d16e      	bne.n	801a008 <_fx_utility_FAT_flush+0x264>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8019f2a:	69f9      	ldr	r1, [r7, #28]
 8019f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f2e:	4613      	mov	r3, r2
 8019f30:	005b      	lsls	r3, r3, #1
 8019f32:	4413      	add	r3, r2
 8019f34:	009b      	lsls	r3, r3, #2
 8019f36:	440b      	add	r3, r1
 8019f38:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019f40:	69fb      	ldr	r3, [r7, #28]
 8019f42:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8019f46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f48:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8019f4a:	69fb      	ldr	r3, [r7, #28]
 8019f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019f4e:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8019f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f54:	1ad3      	subs	r3, r2, r3
 8019f56:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8019f58:	69fb      	ldr	r3, [r7, #28]
 8019f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f5c:	3b01      	subs	r3, #1
 8019f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f60:	429a      	cmp	r2, r3
 8019f62:	d101      	bne.n	8019f68 <_fx_utility_FAT_flush+0x1c4>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 8019f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f66:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	689a      	ldr	r2, [r3, #8]
 8019f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f6e:	4413      	add	r3, r2
 8019f70:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8019f72:	69f9      	ldr	r1, [r7, #28]
 8019f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f76:	4613      	mov	r3, r2
 8019f78:	005b      	lsls	r3, r3, #1
 8019f7a:	4413      	add	r3, r2
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	440b      	add	r3, r1
 8019f80:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8019f84:	2200      	movs	r2, #0
 8019f86:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8019f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f8a:	f003 0301 	and.w	r3, r3, #1
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d01b      	beq.n	8019fca <_fx_utility_FAT_flush+0x226>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 8019f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	f003 030f 	and.w	r3, r3, #15
 8019f9a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8019f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9e:	b2da      	uxtb	r2, r3
 8019fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa2:	b2db      	uxtb	r3, r3
 8019fa4:	011b      	lsls	r3, r3, #4
 8019fa6:	b2db      	uxtb	r3, r3
 8019fa8:	4313      	orrs	r3, r2
 8019faa:	b2db      	uxtb	r3, r3
 8019fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fae:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8019fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d029      	beq.n	801a00c <_fx_utility_FAT_flush+0x268>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 8019fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fba:	3301      	adds	r3, #1
 8019fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8019fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc0:	091b      	lsrs	r3, r3, #4
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fc6:	7013      	strb	r3, [r2, #0]
 8019fc8:	e023      	b.n	801a012 <_fx_utility_FAT_flush+0x26e>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8019fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fcc:	b2db      	uxtb	r3, r3
 8019fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fd0:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8019fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019fd6:	429a      	cmp	r2, r3
 8019fd8:	d01a      	beq.n	801a010 <_fx_utility_FAT_flush+0x26c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8019fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fdc:	3301      	adds	r3, #1
 8019fde:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8019fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe2:	781b      	ldrb	r3, [r3, #0]
 8019fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019fe8:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8019fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fec:	b2da      	uxtb	r2, r3
 8019fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff0:	0a1b      	lsrs	r3, r3, #8
 8019ff2:	b2db      	uxtb	r3, r3
 8019ff4:	f003 030f 	and.w	r3, r3, #15
 8019ff8:	b2db      	uxtb	r3, r3
 8019ffa:	4313      	orrs	r3, r2
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a000:	7013      	strb	r3, [r2, #0]
 801a002:	e006      	b.n	801a012 <_fx_utility_FAT_flush+0x26e>
                        continue;
 801a004:	bf00      	nop
 801a006:	e004      	b.n	801a012 <_fx_utility_FAT_flush+0x26e>
                        continue;
 801a008:	bf00      	nop
 801a00a:	e002      	b.n	801a012 <_fx_utility_FAT_flush+0x26e>
                            continue;
 801a00c:	bf00      	nop
 801a00e:	e000      	b.n	801a012 <_fx_utility_FAT_flush+0x26e>
                            continue;
 801a010:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a014:	3301      	adds	r3, #1
 801a016:	653b      	str	r3, [r7, #80]	; 0x50
 801a018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a01e:	f4ff af58 	bcc.w	8019ed2 <_fx_utility_FAT_flush+0x12e>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a024:	2200      	movs	r2, #0
 801a026:	4698      	mov	r8, r3
 801a028:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a02a:	69fb      	ldr	r3, [r7, #28]
 801a02c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a02e:	2302      	movs	r3, #2
 801a030:	9302      	str	r3, [sp, #8]
 801a032:	2301      	movs	r3, #1
 801a034:	9301      	str	r3, [sp, #4]
 801a036:	9200      	str	r2, [sp, #0]
 801a038:	4642      	mov	r2, r8
 801a03a:	464b      	mov	r3, r9
 801a03c:	69f8      	ldr	r0, [r7, #28]
 801a03e:	f002 f98f 	bl	801c360 <_fx_utility_logical_sector_write>
 801a042:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a046:	2b00      	cmp	r3, #0
 801a048:	d001      	beq.n	801a04e <_fx_utility_FAT_flush+0x2aa>
                {

                    /* Return the error status.  */
                    return(status);
 801a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a04c:	e225      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d106      	bne.n	801a06a <_fx_utility_FAT_flush+0x2c6>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a062:	0b1b      	lsrs	r3, r3, #12
 801a064:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a068:	e007      	b.n	801a07a <_fx_utility_FAT_flush+0x2d6>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801a06a:	69fb      	ldr	r3, [r7, #28]
 801a06c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a070:	0b1b      	lsrs	r3, r3, #12
 801a072:	b2db      	uxtb	r3, r3
 801a074:	3301      	adds	r3, #1
 801a076:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 801a07a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d101      	bne.n	801a086 <_fx_utility_FAT_flush+0x2e2>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 801a082:	2302      	movs	r3, #2
 801a084:	e209      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a086:	69fb      	ldr	r3, [r7, #28]
 801a088:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a08c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a08e:	1ad2      	subs	r2, r2, r3
 801a090:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a094:	fbb2 f3f3 	udiv	r3, r2, r3
 801a098:	08db      	lsrs	r3, r3, #3
 801a09a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a09c:	69fa      	ldr	r2, [r7, #28]
 801a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0a0:	4413      	add	r3, r2
 801a0a2:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a0a6:	3320      	adds	r3, #32
 801a0a8:	781b      	ldrb	r3, [r3, #0]
 801a0aa:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a0ac:	69fb      	ldr	r3, [r7, #28]
 801a0ae:	f8d3 2474 	ldr.w	r2, [r3, #1140]	; 0x474
 801a0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0b4:	1a9a      	subs	r2, r3, r2
 801a0b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0be:	f003 0207 	and.w	r2, r3, #7
 801a0c2:	2301      	movs	r3, #1
 801a0c4:	4093      	lsls	r3, r2
 801a0c6:	b25b      	sxtb	r3, r3
 801a0c8:	430b      	orrs	r3, r1
 801a0ca:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a0cc:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a0ce:	69fa      	ldr	r2, [r7, #28]
 801a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0d2:	4413      	add	r3, r2
 801a0d4:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a0d8:	3320      	adds	r3, #32
 801a0da:	460a      	mov	r2, r1
 801a0dc:	701a      	strb	r2, [r3, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 801a0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0e4:	f000 81cf 	beq.w	801a486 <_fx_utility_FAT_flush+0x6e2>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 801a0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a0ee:	e69b      	b.n	8019e28 <_fx_utility_FAT_flush+0x84>
                    break;
                }
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
 801a0f0:	69fb      	ldr	r3, [r7, #28]
 801a0f2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801a0f6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 801a0fa:	2b04      	cmp	r3, #4
 801a0fc:	f040 80dd 	bne.w	801a2ba <_fx_utility_FAT_flush+0x516>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 801a100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a102:	005b      	lsls	r3, r3, #1
 801a104:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a106:	69fb      	ldr	r3, [r7, #28]
 801a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a10a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a10c:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a110:	69fb      	ldr	r3, [r7, #28]
 801a112:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a116:	4413      	add	r3, r2
 801a118:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a11c:	2200      	movs	r2, #0
 801a11e:	469a      	mov	sl, r3
 801a120:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a122:	69fb      	ldr	r3, [r7, #28]
 801a124:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a126:	2302      	movs	r3, #2
 801a128:	9302      	str	r3, [sp, #8]
 801a12a:	2301      	movs	r3, #1
 801a12c:	9301      	str	r3, [sp, #4]
 801a12e:	9200      	str	r2, [sp, #0]
 801a130:	4652      	mov	r2, sl
 801a132:	465b      	mov	r3, fp
 801a134:	69f8      	ldr	r0, [r7, #28]
 801a136:	f001 fe7f 	bl	801be38 <_fx_utility_logical_sector_read>
 801a13a:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d001      	beq.n	801a146 <_fx_utility_FAT_flush+0x3a2>
            {

                /* Return the error status.  */
                return(status);
 801a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a144:	e1a9      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a148:	653b      	str	r3, [r7, #80]	; 0x50
 801a14a:	e059      	b.n	801a200 <_fx_utility_FAT_flush+0x45c>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801a14c:	69f9      	ldr	r1, [r7, #28]
 801a14e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a150:	4613      	mov	r3, r2
 801a152:	005b      	lsls	r3, r3, #1
 801a154:	4413      	add	r3, r2
 801a156:	009b      	lsls	r3, r3, #2
 801a158:	440b      	add	r3, r1
 801a15a:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d047      	beq.n	801a1f4 <_fx_utility_FAT_flush+0x450>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801a164:	69f9      	ldr	r1, [r7, #28]
 801a166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a168:	4613      	mov	r3, r2
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4413      	add	r3, r2
 801a16e:	009b      	lsls	r3, r3, #2
 801a170:	440b      	add	r3, r1
 801a172:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 801a17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a17c:	005b      	lsls	r3, r3, #1
 801a17e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a186:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a18a:	69fb      	ldr	r3, [r7, #28]
 801a18c:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a190:	4413      	add	r3, r2
 801a192:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 801a194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a198:	429a      	cmp	r2, r3
 801a19a:	d12d      	bne.n	801a1f8 <_fx_utility_FAT_flush+0x454>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a19c:	69fb      	ldr	r3, [r7, #28]
 801a19e:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a1a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1a4:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 801a1a6:	69fb      	ldr	r3, [r7, #28]
 801a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a1aa:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801a1ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801a1b4:	69fb      	ldr	r3, [r7, #28]
 801a1b6:	689a      	ldr	r2, [r3, #8]
 801a1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1ba:	4413      	add	r3, r2
 801a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801a1be:	69f9      	ldr	r1, [r7, #28]
 801a1c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1c2:	4613      	mov	r3, r2
 801a1c4:	005b      	lsls	r3, r3, #1
 801a1c6:	4413      	add	r3, r2
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	440b      	add	r3, r1
 801a1cc:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 801a1d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a1d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1d8:	f7ff fa05 	bl	80195e6 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801a1dc:	69f9      	ldr	r1, [r7, #28]
 801a1de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1e0:	4613      	mov	r3, r2
 801a1e2:	005b      	lsls	r3, r3, #1
 801a1e4:	4413      	add	r3, r2
 801a1e6:	009b      	lsls	r3, r3, #2
 801a1e8:	440b      	add	r3, r1
 801a1ea:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	601a      	str	r2, [r3, #0]
 801a1f2:	e002      	b.n	801a1fa <_fx_utility_FAT_flush+0x456>
                    continue;
 801a1f4:	bf00      	nop
 801a1f6:	e000      	b.n	801a1fa <_fx_utility_FAT_flush+0x456>
                    continue;
 801a1f8:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	653b      	str	r3, [r7, #80]	; 0x50
 801a200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a206:	d3a1      	bcc.n	801a14c <_fx_utility_FAT_flush+0x3a8>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a20a:	2200      	movs	r2, #0
 801a20c:	613b      	str	r3, [r7, #16]
 801a20e:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a210:	69fb      	ldr	r3, [r7, #28]
 801a212:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a214:	2302      	movs	r3, #2
 801a216:	9302      	str	r3, [sp, #8]
 801a218:	2301      	movs	r3, #1
 801a21a:	9301      	str	r3, [sp, #4]
 801a21c:	9200      	str	r2, [sp, #0]
 801a21e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a222:	69f8      	ldr	r0, [r7, #28]
 801a224:	f002 f89c 	bl	801c360 <_fx_utility_logical_sector_write>
 801a228:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d001      	beq.n	801a234 <_fx_utility_FAT_flush+0x490>
            {
                /* Return the error status.  */
                return(status);
 801a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a232:	e132      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a234:	69fb      	ldr	r3, [r7, #28]
 801a236:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a23a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d106      	bne.n	801a250 <_fx_utility_FAT_flush+0x4ac>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a242:	69fb      	ldr	r3, [r7, #28]
 801a244:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a248:	0b1b      	lsrs	r3, r3, #12
 801a24a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a24e:	e007      	b.n	801a260 <_fx_utility_FAT_flush+0x4bc>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 801a250:	69fb      	ldr	r3, [r7, #28]
 801a252:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a256:	0b1b      	lsrs	r3, r3, #12
 801a258:	b2db      	uxtb	r3, r3
 801a25a:	3301      	adds	r3, #1
 801a25c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a266:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a268:	1ad2      	subs	r2, r2, r3
 801a26a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a26e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a272:	08db      	lsrs	r3, r3, #3
 801a274:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a276:	69fa      	ldr	r2, [r7, #28]
 801a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a27a:	4413      	add	r3, r2
 801a27c:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a280:	3320      	adds	r3, #32
 801a282:	781b      	ldrb	r3, [r3, #0]
 801a284:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a286:	69fb      	ldr	r3, [r7, #28]
 801a288:	f8d3 2474 	ldr.w	r2, [r3, #1140]	; 0x474
 801a28c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a28e:	1a9a      	subs	r2, r3, r2
 801a290:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a294:	fbb2 f3f3 	udiv	r3, r2, r3
 801a298:	f003 0207 	and.w	r2, r3, #7
 801a29c:	2301      	movs	r3, #1
 801a29e:	4093      	lsls	r3, r2
 801a2a0:	b25b      	sxtb	r3, r3
 801a2a2:	430b      	orrs	r3, r1
 801a2a4:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a2a6:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a2a8:	69fa      	ldr	r2, [r7, #28]
 801a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2ac:	4413      	add	r3, r2
 801a2ae:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a2b2:	3320      	adds	r3, #32
 801a2b4:	460a      	mov	r2, r1
 801a2b6:	701a      	strb	r2, [r3, #0]
 801a2b8:	e0e6      	b.n	801a488 <_fx_utility_FAT_flush+0x6e4>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 801a2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a2bc:	009b      	lsls	r3, r3, #2
 801a2be:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a2c0:	69fb      	ldr	r3, [r7, #28]
 801a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a2c6:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a2ca:	69fb      	ldr	r3, [r7, #28]
 801a2cc:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a2d0:	4413      	add	r3, r2
 801a2d2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a2d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	60bb      	str	r3, [r7, #8]
 801a2da:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a2dc:	69fb      	ldr	r3, [r7, #28]
 801a2de:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a2e0:	2302      	movs	r3, #2
 801a2e2:	9302      	str	r3, [sp, #8]
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	9301      	str	r3, [sp, #4]
 801a2e8:	9200      	str	r2, [sp, #0]
 801a2ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a2ee:	69f8      	ldr	r0, [r7, #28]
 801a2f0:	f001 fda2 	bl	801be38 <_fx_utility_logical_sector_read>
 801a2f4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d001      	beq.n	801a300 <_fx_utility_FAT_flush+0x55c>
            {

                /* Return the error status.  */
                return(status);
 801a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2fe:	e0cc      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a302:	653b      	str	r3, [r7, #80]	; 0x50
 801a304:	e059      	b.n	801a3ba <_fx_utility_FAT_flush+0x616>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801a306:	69f9      	ldr	r1, [r7, #28]
 801a308:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a30a:	4613      	mov	r3, r2
 801a30c:	005b      	lsls	r3, r3, #1
 801a30e:	4413      	add	r3, r2
 801a310:	009b      	lsls	r3, r3, #2
 801a312:	440b      	add	r3, r1
 801a314:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d047      	beq.n	801a3ae <_fx_utility_FAT_flush+0x60a>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801a31e:	69f9      	ldr	r1, [r7, #28]
 801a320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a322:	4613      	mov	r3, r2
 801a324:	005b      	lsls	r3, r3, #1
 801a326:	4413      	add	r3, r2
 801a328:	009b      	lsls	r3, r3, #2
 801a32a:	440b      	add	r3, r1
 801a32c:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 801a334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a336:	009b      	lsls	r3, r3, #2
 801a338:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a33a:	69fb      	ldr	r3, [r7, #28]
 801a33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a33e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a340:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a344:	69fb      	ldr	r3, [r7, #28]
 801a346:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a34a:	4413      	add	r3, r2
 801a34c:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 801a34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a352:	429a      	cmp	r2, r3
 801a354:	d12d      	bne.n	801a3b2 <_fx_utility_FAT_flush+0x60e>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a35c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a35e:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 801a360:	69fb      	ldr	r3, [r7, #28]
 801a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a364:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801a368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a36a:	1ad3      	subs	r3, r2, r3
 801a36c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	689a      	ldr	r2, [r3, #8]
 801a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a374:	4413      	add	r3, r2
 801a376:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801a378:	69f9      	ldr	r1, [r7, #28]
 801a37a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a37c:	4613      	mov	r3, r2
 801a37e:	005b      	lsls	r3, r3, #1
 801a380:	4413      	add	r3, r2
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	440b      	add	r3, r1
 801a386:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 801a38e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a392:	f7ff f95a 	bl	801964a <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801a396:	69f9      	ldr	r1, [r7, #28]
 801a398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a39a:	4613      	mov	r3, r2
 801a39c:	005b      	lsls	r3, r3, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	009b      	lsls	r3, r3, #2
 801a3a2:	440b      	add	r3, r1
 801a3a4:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	601a      	str	r2, [r3, #0]
 801a3ac:	e002      	b.n	801a3b4 <_fx_utility_FAT_flush+0x610>
                    continue;
 801a3ae:	bf00      	nop
 801a3b0:	e000      	b.n	801a3b4 <_fx_utility_FAT_flush+0x610>
                    continue;
 801a3b2:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	653b      	str	r3, [r7, #80]	; 0x50
 801a3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a3c0:	d3a1      	bcc.n	801a306 <_fx_utility_FAT_flush+0x562>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a3c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	603b      	str	r3, [r7, #0]
 801a3c8:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a3ce:	2302      	movs	r3, #2
 801a3d0:	9302      	str	r3, [sp, #8]
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	9301      	str	r3, [sp, #4]
 801a3d6:	9200      	str	r2, [sp, #0]
 801a3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a3dc:	69f8      	ldr	r0, [r7, #28]
 801a3de:	f001 ffbf 	bl	801c360 <_fx_utility_logical_sector_write>
 801a3e2:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d001      	beq.n	801a3ee <_fx_utility_FAT_flush+0x64a>
            {

                /* Return the error status.  */
                return(status);
 801a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ec:	e055      	b.n	801a49a <_fx_utility_FAT_flush+0x6f6>
            }

#ifdef FX_ENABLE_EXFAT
            /* We are not using fx_media_fat_secondary_update_map for exFAT.  */
            if (media_ptr -> fx_media_FAT_type == FX_FAT32)
 801a3ee:	69fb      	ldr	r3, [r7, #28]
 801a3f0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801a3f4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 801a3f8:	2b0b      	cmp	r3, #11
 801a3fa:	d145      	bne.n	801a488 <_fx_utility_FAT_flush+0x6e4>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a3fc:	69fb      	ldr	r3, [r7, #28]
 801a3fe:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a406:	2b00      	cmp	r3, #0
 801a408:	d106      	bne.n	801a418 <_fx_utility_FAT_flush+0x674>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a40a:	69fb      	ldr	r3, [r7, #28]
 801a40c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a410:	0b1b      	lsrs	r3, r3, #12
 801a412:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a416:	e007      	b.n	801a428 <_fx_utility_FAT_flush+0x684>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a41e:	0b1b      	lsrs	r3, r3, #12
 801a420:	b2db      	uxtb	r3, r3
 801a422:	3301      	adds	r3, #1
 801a424:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a428:	69fb      	ldr	r3, [r7, #28]
 801a42a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a42e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a430:	1ad2      	subs	r2, r2, r3
 801a432:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a436:	fbb2 f3f3 	udiv	r3, r2, r3
 801a43a:	08db      	lsrs	r3, r3, #3
 801a43c:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a43e:	69fa      	ldr	r2, [r7, #28]
 801a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a442:	4413      	add	r3, r2
 801a444:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a448:	3320      	adds	r3, #32
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	f8d3 2474 	ldr.w	r2, [r3, #1140]	; 0x474
 801a454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a456:	1a9a      	subs	r2, r3, r2
 801a458:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a45c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a460:	f003 0207 	and.w	r2, r3, #7
 801a464:	2301      	movs	r3, #1
 801a466:	4093      	lsls	r3, r2
 801a468:	b25b      	sxtb	r3, r3
 801a46a:	430b      	orrs	r3, r1
 801a46c:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a46e:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a470:	69fa      	ldr	r2, [r7, #28]
 801a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a474:	4413      	add	r3, r2
 801a476:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a47a:	3320      	adds	r3, #32
 801a47c:	460a      	mov	r2, r1
 801a47e:	701a      	strb	r2, [r3, #0]
 801a480:	e002      	b.n	801a488 <_fx_utility_FAT_flush+0x6e4>
            continue;
 801a482:	bf00      	nop
 801a484:	e000      	b.n	801a488 <_fx_utility_FAT_flush+0x6e4>
                    break;
 801a486:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801a488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a48a:	3301      	adds	r3, #1
 801a48c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a494:	f4ff ac95 	bcc.w	8019dc2 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 801a498:	2300      	movs	r3, #0
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	3758      	adds	r7, #88	; 0x58
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a4a4 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 801a4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a4a8:	b092      	sub	sp, #72	; 0x48
 801a4aa:	af04      	add	r7, sp, #16
 801a4ac:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a4b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d106      	bne.n	801a4ca <_fx_utility_FAT_map_flush+0x26>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a4bc:	69fb      	ldr	r3, [r7, #28]
 801a4be:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a4c2:	0b1b      	lsrs	r3, r3, #12
 801a4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a4c8:	e007      	b.n	801a4da <_fx_utility_FAT_map_flush+0x36>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801a4ca:	69fb      	ldr	r3, [r7, #28]
 801a4cc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a4d0:	0b1b      	lsrs	r3, r3, #12
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	3301      	adds	r3, #1
 801a4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801a4da:	2300      	movs	r3, #0
 801a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4de:	e092      	b.n	801a606 <_fx_utility_FAT_map_flush+0x162>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 801a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e2:	08db      	lsrs	r3, r3, #3
 801a4e4:	69fa      	ldr	r2, [r7, #28]
 801a4e6:	4413      	add	r3, r2
 801a4e8:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a4ec:	3320      	adds	r3, #32
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f4:	f003 0307 	and.w	r3, r3, #7
 801a4f8:	fa42 f303 	asr.w	r3, r2, r3
 801a4fc:	f003 0301 	and.w	r3, r3, #1
 801a500:	2b00      	cmp	r3, #0
 801a502:	d07c      	beq.n	801a5fe <_fx_utility_FAT_map_flush+0x15a>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 801a504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a50a:	fb03 f202 	mul.w	r2, r3, r2
 801a50e:	69fb      	ldr	r3, [r7, #28]
 801a510:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a514:	4413      	add	r3, r2
 801a516:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 801a518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a51c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a51e:	4413      	add	r3, r2
 801a520:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 801a522:	69fb      	ldr	r3, [r7, #28]
 801a524:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a52e:	4413      	add	r3, r2
 801a530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a532:	429a      	cmp	r2, r3
 801a534:	d95e      	bls.n	801a5f4 <_fx_utility_FAT_map_flush+0x150>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 801a536:	69fb      	ldr	r3, [r7, #28]
 801a538:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801a53c:	69fb      	ldr	r3, [r7, #28]
 801a53e:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801a542:	4413      	add	r3, r2
 801a544:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 801a546:	e055      	b.n	801a5f4 <_fx_utility_FAT_map_flush+0x150>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a54a:	2200      	movs	r2, #0
 801a54c:	613b      	str	r3, [r7, #16]
 801a54e:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a550:	69fb      	ldr	r3, [r7, #28]
 801a552:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a554:	2302      	movs	r3, #2
 801a556:	9302      	str	r3, [sp, #8]
 801a558:	2301      	movs	r3, #1
 801a55a:	9301      	str	r3, [sp, #4]
 801a55c:	9200      	str	r2, [sp, #0]
 801a55e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a562:	69f8      	ldr	r0, [r7, #28]
 801a564:	f001 fc68 	bl	801be38 <_fx_utility_logical_sector_read>
 801a568:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a56a:	6a3b      	ldr	r3, [r7, #32]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d001      	beq.n	801a574 <_fx_utility_FAT_map_flush+0xd0>
            {
                /* Return the error status.  */
                return(status);
 801a570:	6a3b      	ldr	r3, [r7, #32]
 801a572:	e060      	b.n	801a636 <_fx_utility_FAT_map_flush+0x192>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 801a574:	69fb      	ldr	r3, [r7, #28]
 801a576:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 801a57a:	3b01      	subs	r3, #1
 801a57c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 801a57e:	e033      	b.n	801a5e8 <_fx_utility_FAT_map_flush+0x144>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 801a580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a582:	2200      	movs	r2, #0
 801a584:	60bb      	str	r3, [r7, #8]
 801a586:	60fa      	str	r2, [r7, #12]
 801a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a58a:	2200      	movs	r2, #0
 801a58c:	4698      	mov	r8, r3
 801a58e:	4691      	mov	r9, r2
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801a596:	2200      	movs	r2, #0
 801a598:	469a      	mov	sl, r3
 801a59a:	4693      	mov	fp, r2
 801a59c:	fb0a f209 	mul.w	r2, sl, r9
 801a5a0:	fb08 f30b 	mul.w	r3, r8, fp
 801a5a4:	4413      	add	r3, r2
 801a5a6:	fba8 450a 	umull	r4, r5, r8, sl
 801a5aa:	442b      	add	r3, r5
 801a5ac:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 801a5ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801a5b2:	460b      	mov	r3, r1
 801a5b4:	191b      	adds	r3, r3, r4
 801a5b6:	603b      	str	r3, [r7, #0]
 801a5b8:	4613      	mov	r3, r2
 801a5ba:	416b      	adcs	r3, r5
 801a5bc:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a5be:	69fb      	ldr	r3, [r7, #28]
 801a5c0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 801a5c2:	2302      	movs	r3, #2
 801a5c4:	9302      	str	r3, [sp, #8]
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	9301      	str	r3, [sp, #4]
 801a5ca:	9200      	str	r2, [sp, #0]
 801a5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a5d0:	69f8      	ldr	r0, [r7, #28]
 801a5d2:	f001 fec5 	bl	801c360 <_fx_utility_logical_sector_write>
 801a5d6:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801a5d8:	6a3b      	ldr	r3, [r7, #32]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d001      	beq.n	801a5e2 <_fx_utility_FAT_map_flush+0x13e>
                {

                    /* Return the error status.  */
                    return(status);
 801a5de:	6a3b      	ldr	r3, [r7, #32]
 801a5e0:	e029      	b.n	801a636 <_fx_utility_FAT_map_flush+0x192>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 801a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e4:	3b01      	subs	r3, #1
 801a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 801a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d1c8      	bne.n	801a580 <_fx_utility_FAT_map_flush+0xdc>
        for (; FAT_sector < last_sector; FAT_sector++)
 801a5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	637b      	str	r3, [r7, #52]	; 0x34
 801a5f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d3a5      	bcc.n	801a548 <_fx_utility_FAT_map_flush+0xa4>
 801a5fc:	e000      	b.n	801a600 <_fx_utility_FAT_map_flush+0x15c>
            continue;
 801a5fe:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a602:	3301      	adds	r3, #1
 801a604:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a60c:	f4ff af68 	bcc.w	801a4e0 <_fx_utility_FAT_map_flush+0x3c>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 801a610:	2300      	movs	r3, #0
 801a612:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a614:	e00a      	b.n	801a62c <_fx_utility_FAT_map_flush+0x188>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 801a616:	69fa      	ldr	r2, [r7, #28]
 801a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61a:	4413      	add	r3, r2
 801a61c:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 801a620:	3320      	adds	r3, #32
 801a622:	2200      	movs	r2, #0
 801a624:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 801a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a628:	3301      	adds	r3, #1
 801a62a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a62e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a632:	d3f0      	bcc.n	801a616 <_fx_utility_FAT_map_flush+0x172>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 801a634:	2300      	movs	r3, #0
}
 801a636:	4618      	mov	r0, r3
 801a638:	3738      	adds	r7, #56	; 0x38
 801a63a:	46bd      	mov	sp, r7
 801a63c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a640 <_fx_utility_exFAT_allocate_new_cluster>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_allocate_new_cluster(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr,
                                             ULONG *last_cluster, ULONG *cluster)
{
 801a640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a644:	b08c      	sub	sp, #48	; 0x30
 801a646:	af00      	add	r7, sp, #0
 801a648:	6178      	str	r0, [r7, #20]
 801a64a:	6139      	str	r1, [r7, #16]
 801a64c:	60fa      	str	r2, [r7, #12]
 801a64e:	60bb      	str	r3, [r7, #8]

UINT  status = FX_SUCCESS;
 801a650:	2300      	movs	r3, #0
 801a652:	62bb      	str	r3, [r7, #40]	; 0x28
ULONG cluster_count;
ULONG bytes_per_cluster;
ULONG i;
ULONG FAT_value = 0;
 801a654:	2300      	movs	r3, #0
 801a656:	61fb      	str	r3, [r7, #28]
UCHAR cluster_state = FX_EXFAT_BITMAP_CLUSTER_OCCUPIED;
 801a658:	2301      	movs	r3, #1
 801a65a:	76fb      	strb	r3, [r7, #27]


    /* Clear the last cluster number.  */
    *last_cluster = 0;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	2200      	movs	r2, #0
 801a660:	601a      	str	r2, [r3, #0]

    /* Check if we have any already allocated clusters.  */
    if (!directory_ptr || (directory_ptr -> fx_dir_entry_available_file_size > 0))
 801a662:	693b      	ldr	r3, [r7, #16]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d005      	beq.n	801a674 <_fx_utility_exFAT_allocate_new_cluster+0x34>
 801a668:	693b      	ldr	r3, [r7, #16]
 801a66a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 801a66e:	4313      	orrs	r3, r2
 801a670:	f000 80c4 	beq.w	801a7fc <_fx_utility_exFAT_allocate_new_cluster+0x1bc>
    {

        /* Calculate bytes per cluster.  */
        bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 801a678:	697a      	ldr	r2, [r7, #20]
 801a67a:	f8d2 2484 	ldr.w	r2, [r2, #1156]	; 0x484
        bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801a67e:	fb02 f303 	mul.w	r3, r2, r3
 801a682:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if FAT table is not used.  */
        if (directory_ptr && (directory_ptr -> fx_dir_entry_dont_use_fat & 1))
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d078      	beq.n	801a77c <_fx_utility_exFAT_allocate_new_cluster+0x13c>
 801a68a:	693b      	ldr	r3, [r7, #16]
 801a68c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801a690:	f003 0301 	and.w	r3, r3, #1
 801a694:	2b00      	cmp	r3, #0
 801a696:	d071      	beq.n	801a77c <_fx_utility_exFAT_allocate_new_cluster+0x13c>
        {

            /* Calculate the cluster count associated with the directory.  */
            cluster_count = (ULONG)((directory_ptr -> fx_dir_entry_available_file_size + bytes_per_cluster - 1) /
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 801a69e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a6a0:	2000      	movs	r0, #0
 801a6a2:	4688      	mov	r8, r1
 801a6a4:	4681      	mov	r9, r0
 801a6a6:	eb12 0408 	adds.w	r4, r2, r8
 801a6aa:	eb43 0509 	adc.w	r5, r3, r9
 801a6ae:	f114 3aff 	adds.w	sl, r4, #4294967295
 801a6b2:	f145 3bff 	adc.w	fp, r5, #4294967295
 801a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	603b      	str	r3, [r7, #0]
 801a6bc:	607a      	str	r2, [r7, #4]
 801a6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a6c2:	4650      	mov	r0, sl
 801a6c4:	4659      	mov	r1, fp
 801a6c6:	f7e6 fb33 	bl	8000d30 <__aeabi_uldivmod>
 801a6ca:	4602      	mov	r2, r0
 801a6cc:	460b      	mov	r3, r1
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	623b      	str	r3, [r7, #32]
                                    bytes_per_cluster);

            /* Calculate the next cluster and the last cluster.  */
            *cluster = directory_ptr -> fx_dir_entry_cluster + cluster_count;
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a6d6:	6a3b      	ldr	r3, [r7, #32]
 801a6d8:	441a      	add	r2, r3
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	601a      	str	r2, [r3, #0]
            *last_cluster = *cluster - 1;
 801a6de:	68bb      	ldr	r3, [r7, #8]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	1e5a      	subs	r2, r3, #1
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	601a      	str	r2, [r3, #0]

            /* Make sure the next cluster number don't exceed the total cluster number.  */
            if (*cluster < media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	681a      	ldr	r2, [r3, #0]
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6f0:	3302      	adds	r3, #2
 801a6f2:	429a      	cmp	r2, r3
 801a6f4:	d20d      	bcs.n	801a712 <_fx_utility_exFAT_allocate_new_cluster+0xd2>
            {

                /* Get cluster state.  */
                status = _fx_utility_exFAT_cluster_state_get(media_ptr, *cluster, &cluster_state);
 801a6f6:	68bb      	ldr	r3, [r7, #8]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	f107 021b 	add.w	r2, r7, #27
 801a6fe:	4619      	mov	r1, r3
 801a700:	6978      	ldr	r0, [r7, #20]
 801a702:	f000 fb3d 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 801a706:	62b8      	str	r0, [r7, #40]	; 0x28

                if (status != FX_SUCCESS)
 801a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d001      	beq.n	801a712 <_fx_utility_exFAT_allocate_new_cluster+0xd2>
                {

                    /* Return the bad status.  */
                    return(status);
 801a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a710:	e07e      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
                }
            }

            /* Is the next cluster free?  */
            if (cluster_state == FX_EXFAT_BITMAP_CLUSTER_FREE)
 801a712:	7efb      	ldrb	r3, [r7, #27]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d101      	bne.n	801a71c <_fx_utility_exFAT_allocate_new_cluster+0xdc>
            {

                /* Yes, so we still don't need to use FAT.  */
                return(FX_SUCCESS);
 801a718:	2300      	movs	r3, #0
 801a71a:	e079      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
            }

            /* Now we should use FAT. Clear the bit 0.  */
            directory_ptr -> fx_dir_entry_dont_use_fat &= (CHAR)0xfe;
 801a71c:	693b      	ldr	r3, [r7, #16]
 801a71e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801a722:	f023 0301 	bic.w	r3, r3, #1
 801a726:	b2da      	uxtb	r2, r3
 801a728:	693b      	ldr	r3, [r7, #16]
 801a72a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* Loop to build FAT chain.  */
            for (i = directory_ptr -> fx_dir_entry_cluster; i < *last_cluster; ++i)
 801a72e:	693b      	ldr	r3, [r7, #16]
 801a730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a732:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a734:	e00f      	b.n	801a756 <_fx_utility_exFAT_allocate_new_cluster+0x116>
            {

                /* Write the FAT entry.  */
                status = _fx_utility_FAT_entry_write(media_ptr, i, i + 1);
 801a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a738:	3301      	adds	r3, #1
 801a73a:	461a      	mov	r2, r3
 801a73c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a73e:	6978      	ldr	r0, [r7, #20]
 801a740:	f7ff fa37 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 801a744:	62b8      	str	r0, [r7, #40]	; 0x28
                if (status != FX_SUCCESS)
 801a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d001      	beq.n	801a750 <_fx_utility_exFAT_allocate_new_cluster+0x110>
                {

                    /* Return the bad status.  */
                    return(status);
 801a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a74e:	e05f      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
            for (i = directory_ptr -> fx_dir_entry_cluster; i < *last_cluster; ++i)
 801a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a752:	3301      	adds	r3, #1
 801a754:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d3ea      	bcc.n	801a736 <_fx_utility_exFAT_allocate_new_cluster+0xf6>
                }
            }

            /* Write last cluster entry.  */
            status = _fx_utility_FAT_entry_write(media_ptr, *last_cluster, FX_LAST_CLUSTER_exFAT);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	f04f 32ff 	mov.w	r2, #4294967295
 801a768:	4619      	mov	r1, r3
 801a76a:	6978      	ldr	r0, [r7, #20]
 801a76c:	f7ff fa21 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 801a770:	62b8      	str	r0, [r7, #40]	; 0x28

            if (status != FX_SUCCESS)
 801a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a774:	2b00      	cmp	r3, #0
 801a776:	d041      	beq.n	801a7fc <_fx_utility_exFAT_allocate_new_cluster+0x1bc>
            {

                /* Return the bad status.  */
                return(status);
 801a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a77a:	e049      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
        else
        {

            /* Find last cluster by walk through the FAT chain.  */
            /* See if we are in sub directory or the root directory. And set the start cluster.  */
            if (directory_ptr)
 801a77c:	693b      	ldr	r3, [r7, #16]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d004      	beq.n	801a78c <_fx_utility_exFAT_allocate_new_cluster+0x14c>
            {
                *cluster = directory_ptr -> fx_dir_entry_cluster;
 801a782:	693b      	ldr	r3, [r7, #16]
 801a784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	601a      	str	r2, [r3, #0]
 801a78a:	e004      	b.n	801a796 <_fx_utility_exFAT_allocate_new_cluster+0x156>
            }
            else
            {
                *cluster = media_ptr -> fx_media_root_cluster_32;
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	601a      	str	r2, [r3, #0]
            }

            /* Initialize loop variables.  */
            *last_cluster =  0;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	2200      	movs	r2, #0
 801a79a:	601a      	str	r2, [r3, #0]
            i =  0;
 801a79c:	2300      	movs	r3, #0
 801a79e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Follow the link of FAT entries.  */
            while ((*cluster >= FX_FAT_ENTRY_START) && (*cluster < FX_RESERVED_1_exFAT))
 801a7a0:	e023      	b.n	801a7ea <_fx_utility_exFAT_allocate_new_cluster+0x1aa>
            {

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, *cluster, &FAT_value);
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	f107 021c 	add.w	r2, r7, #28
 801a7aa:	4619      	mov	r1, r3
 801a7ac:	6978      	ldr	r0, [r7, #20]
 801a7ae:	f7fe ffba 	bl	8019726 <_fx_utility_FAT_entry_read>
 801a7b2:	62b8      	str	r0, [r7, #40]	; 0x28
                i++;
 801a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7b6:	3301      	adds	r3, #1
 801a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 801a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d001      	beq.n	801a7c4 <_fx_utility_exFAT_allocate_new_cluster+0x184>
                {

                    /* Return the error status.  */
                    return(status);
 801a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c2:	e025      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
                }

                /* Determine if the FAT read was invalid.  */
                if ((*cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	681a      	ldr	r2, [r3, #0]
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d004      	beq.n	801a7d8 <_fx_utility_exFAT_allocate_new_cluster+0x198>
 801a7ce:	697b      	ldr	r3, [r7, #20]
 801a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	d901      	bls.n	801a7dc <_fx_utility_exFAT_allocate_new_cluster+0x19c>
                {

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 801a7d8:	2303      	movs	r3, #3
 801a7da:	e019      	b.n	801a810 <_fx_utility_exFAT_allocate_new_cluster+0x1d0>
                }

                /* Save the last valid cluster.  */
                *last_cluster = *cluster;
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	681a      	ldr	r2, [r3, #0]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	601a      	str	r2, [r3, #0]

                /* Setup for the next cluster.  */
                *cluster =  FAT_value;
 801a7e4:	69fa      	ldr	r2, [r7, #28]
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	601a      	str	r2, [r3, #0]
            while ((*cluster >= FX_FAT_ENTRY_START) && (*cluster < FX_RESERVED_1_exFAT))
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	2b01      	cmp	r3, #1
 801a7f0:	d904      	bls.n	801a7fc <_fx_utility_exFAT_allocate_new_cluster+0x1bc>
 801a7f2:	68bb      	ldr	r3, [r7, #8]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	f113 0f09 	cmn.w	r3, #9
 801a7fa:	d9d2      	bls.n	801a7a2 <_fx_utility_exFAT_allocate_new_cluster+0x162>
            }
        }
    }

    /* Find free cluster from exFAT media.  */
    status =  _fx_utility_exFAT_bitmap_free_cluster_find(media_ptr,
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 801a802:	68ba      	ldr	r2, [r7, #8]
 801a804:	4619      	mov	r1, r3
 801a806:	6978      	ldr	r0, [r7, #20]
 801a808:	f000 f8d0 	bl	801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>
 801a80c:	62b8      	str	r0, [r7, #40]	; 0x28
                                                         media_ptr -> fx_media_cluster_search_start,
                                                         cluster);

    return(status);
 801a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801a810:	4618      	mov	r0, r3
 801a812:	3730      	adds	r7, #48	; 0x30
 801a814:	46bd      	mov	sp, r7
 801a816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a81a <_fx_utility_exFAT_bitmap_cache_prepare>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_bitmap_cache_prepare(FX_MEDIA *media_ptr, ULONG cluster)
{
 801a81a:	b580      	push	{r7, lr}
 801a81c:	b084      	sub	sp, #16
 801a81e:	af00      	add	r7, sp, #0
 801a820:	6078      	str	r0, [r7, #4]
 801a822:	6039      	str	r1, [r7, #0]

UINT status;


    /* Default the status to no more space.  */
    status = FX_NO_MORE_SPACE;
 801a824:	230a      	movs	r3, #10
 801a826:	60fb      	str	r3, [r7, #12]

    /* Make sure the cluster does not exceed the total count.  */
    if (cluster < media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a82c:	3302      	adds	r3, #2
 801a82e:	683a      	ldr	r2, [r7, #0]
 801a830:	429a      	cmp	r2, r3
 801a832:	d21a      	bcs.n	801a86a <_fx_utility_exFAT_bitmap_cache_prepare+0x50>
    {

        /* Check if the request cluster is already cached.  */
        if ((cluster >= media_ptr -> fx_media_exfat_bitmap_cache_start_cluster) &&
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 801a83a:	683a      	ldr	r2, [r7, #0]
 801a83c:	429a      	cmp	r2, r3
 801a83e:	d308      	bcc.n	801a852 <_fx_utility_exFAT_bitmap_cache_prepare+0x38>
            (cluster <= media_ptr -> fx_media_exfat_bitmap_cache_end_cluster))
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
        if ((cluster >= media_ptr -> fx_media_exfat_bitmap_cache_start_cluster) &&
 801a846:	683a      	ldr	r2, [r7, #0]
 801a848:	429a      	cmp	r2, r3
 801a84a:	d802      	bhi.n	801a852 <_fx_utility_exFAT_bitmap_cache_prepare+0x38>
        {

            /* Cluster already cached.  */
            status = FX_SUCCESS;
 801a84c:	2300      	movs	r3, #0
 801a84e:	60fb      	str	r3, [r7, #12]
 801a850:	e00b      	b.n	801a86a <_fx_utility_exFAT_bitmap_cache_prepare+0x50>
        {

            /* Need to Cache update.  */

            /* Flush previous cached data if required.  */
            if (FX_SUCCESS == (status = _fx_utility_exFAT_bitmap_flush(media_ptr)))
 801a852:	6878      	ldr	r0, [r7, #4]
 801a854:	f000 f863 	bl	801a91e <_fx_utility_exFAT_bitmap_flush>
 801a858:	60f8      	str	r0, [r7, #12]
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d104      	bne.n	801a86a <_fx_utility_exFAT_bitmap_cache_prepare+0x50>
            {

                /* Call utility function to update cache.  */
                status = _fx_utility_exFAT_bitmap_cache_update(media_ptr, cluster);
 801a860:	6839      	ldr	r1, [r7, #0]
 801a862:	6878      	ldr	r0, [r7, #4]
 801a864:	f000 f806 	bl	801a874 <_fx_utility_exFAT_bitmap_cache_update>
 801a868:	60f8      	str	r0, [r7, #12]
            }
        }
    }

    /* Return status.  */
    return(status);
 801a86a:	68fb      	ldr	r3, [r7, #12]
}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3710      	adds	r7, #16
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}

0801a874 <_fx_utility_exFAT_bitmap_cache_update>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT   _fx_utility_exFAT_bitmap_cache_update(FX_MEDIA *media_ptr, ULONG cluster)
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b082      	sub	sp, #8
 801a878:	af00      	add	r7, sp, #0
 801a87a:	6078      	str	r0, [r7, #4]
 801a87c:	6039      	str	r1, [r7, #0]

    /* Read exFAT bitmap to cache.  */
    cluster -= FX_FAT_ENTRY_START;
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	3b02      	subs	r3, #2
 801a882:	603b      	str	r3, [r7, #0]
    media_ptr -> fx_media_driver_request        =  FX_DRIVER_READ;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	2200      	movs	r2, #0
 801a888:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_buffer         =  (UCHAR *)media_ptr -> fx_media_exfat_bitmap_cache;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    media_ptr -> fx_media_driver_logical_sector =  media_ptr -> fx_media_exfat_bitmap_start_sector +
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
        (cluster >> media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
 801a8a4:	6839      	ldr	r1, [r7, #0]
 801a8a6:	fa21 f303 	lsr.w	r3, r1, r3
    media_ptr -> fx_media_driver_logical_sector =  media_ptr -> fx_media_exfat_bitmap_start_sector +
 801a8aa:	441a      	add	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
    media_ptr -> fx_media_driver_sectors        =  media_ptr -> fx_media_exfat_bitmap_cache_size_in_sectors;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
    media_ptr -> fx_media_driver_status         =  FX_IO_ERROR;
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	2290      	movs	r2, #144	; 0x90
 801a8c2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* Invoke the driver to read the FAT sectors.  */
    (media_ptr -> fx_media_driver_entry)(media_ptr);
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801a8cc:	6878      	ldr	r0, [r7, #4]
 801a8ce:	4798      	blx	r3

    /* Calculate new cached clusters.  */
    media_ptr -> fx_media_exfat_bitmap_cache_start_cluster =
        (ULONG)((media_ptr -> fx_media_driver_logical_sector - media_ptr -> fx_media_exfat_bitmap_start_sector) <<
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801a8dc:	1ad2      	subs	r2, r2, r3
                media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift) +
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
        (ULONG)((media_ptr -> fx_media_driver_logical_sector - media_ptr -> fx_media_exfat_bitmap_start_sector) <<
 801a8e4:	fa02 f303 	lsl.w	r3, r2, r3
                media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift) +
 801a8e8:	1c9a      	adds	r2, r3, #2
    media_ptr -> fx_media_exfat_bitmap_cache_start_cluster =
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
        FX_FAT_ENTRY_START;

    media_ptr -> fx_media_exfat_bitmap_cache_end_cluster = media_ptr -> fx_media_exfat_bitmap_cache_start_cluster +
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
        ((media_ptr -> fx_media_exfat_bitmap_cache_size_in_sectors << media_ptr -> fx_media_exfat_bytes_per_sector_shift) <<
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f8d3 1460 	ldr.w	r1, [r3, #1120]	; 0x460
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a900:	fa01 f303 	lsl.w	r3, r1, r3
 801a904:	00db      	lsls	r3, r3, #3
    media_ptr -> fx_media_exfat_bitmap_cache_end_cluster = media_ptr -> fx_media_exfat_bitmap_cache_start_cluster +
 801a906:	4413      	add	r3, r2
         BITS_PER_BYTE_SHIFT) - 1;
 801a908:	1e5a      	subs	r2, r3, #1
    media_ptr -> fx_media_exfat_bitmap_cache_end_cluster = media_ptr -> fx_media_exfat_bitmap_cache_start_cluster +
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468

    /* Return driver status.  */
    return(media_ptr -> fx_media_driver_status);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
}
 801a916:	4618      	mov	r0, r3
 801a918:	3708      	adds	r7, #8
 801a91a:	46bd      	mov	sp, r7
 801a91c:	bd80      	pop	{r7, pc}

0801a91e <_fx_utility_exFAT_bitmap_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_bitmap_flush(FX_MEDIA *media_ptr)
{
 801a91e:	b580      	push	{r7, lr}
 801a920:	b082      	sub	sp, #8
 801a922:	af00      	add	r7, sp, #0
 801a924:	6078      	str	r0, [r7, #4]

    /* Check if the bitmap cache is dirty.  */
    if (FX_TRUE == media_ptr -> fx_media_exfat_bitmap_cache_dirty)
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 801a92c:	2b01      	cmp	r3, #1
 801a92e:	d132      	bne.n	801a996 <_fx_utility_exFAT_bitmap_flush+0x78>
    {

        /* Write cached exFAT bitmap.  */
        media_ptr -> fx_media_driver_request =  FX_DRIVER_WRITE;
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2201      	movs	r2, #1
 801a934:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =   FX_IO_ERROR;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2290      	movs	r2, #144	; 0x90
 801a93c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer  =  (UCHAR *)media_ptr -> fx_media_exfat_bitmap_cache;
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
        media_ptr -> fx_media_driver_sectors =  media_ptr -> fx_media_exfat_bitmap_cache_size_in_sectors;
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8

        media_ptr -> fx_media_driver_logical_sector =  media_ptr -> fx_media_exfat_bitmap_start_sector +
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
            ((media_ptr -> fx_media_exfat_bitmap_cache_start_cluster - FX_FAT_ENTRY_START) >>
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 801a964:	1e99      	subs	r1, r3, #2
             media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
            ((media_ptr -> fx_media_exfat_bitmap_cache_start_cluster - FX_FAT_ENTRY_START) >>
 801a96c:	fa21 f303 	lsr.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =  media_ptr -> fx_media_exfat_bitmap_start_sector +
 801a970:	441a      	add	r2, r3
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

        /* Invoke the driver to write the bitmap sectors.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	4798      	blx	r3

        /* Determine if the write was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d108      	bne.n	801a99e <_fx_utility_exFAT_bitmap_flush+0x80>
        {

            /* Set bitmap cache dirty flag to false.  */
            media_ptr -> fx_media_exfat_bitmap_cache_dirty =  FX_FALSE;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2200      	movs	r2, #0
 801a990:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 801a994:	e003      	b.n	801a99e <_fx_utility_exFAT_bitmap_flush+0x80>
    }
    else
    {

        /* Initialize return status to success.  */
        media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	2200      	movs	r2, #0
 801a99a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    }

    return(media_ptr -> fx_media_driver_status);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
}
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	3708      	adds	r7, #8
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	bd80      	pop	{r7, pc}

0801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_bitmap_free_cluster_find(FX_MEDIA *media_ptr, ULONG search_start_cluster, ULONG *free_cluster)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b088      	sub	sp, #32
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	60f8      	str	r0, [r7, #12]
 801a9b4:	60b9      	str	r1, [r7, #8]
 801a9b6:	607a      	str	r2, [r7, #4]

UINT  status;
UCHAR cluster_state;
ULONG cluster = search_start_cluster;
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	61fb      	str	r3, [r7, #28]


    /* Search for a free cluster.  */
    while (cluster < media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 801a9bc:	e017      	b.n	801a9ee <_fx_utility_exFAT_bitmap_free_cluster_find+0x42>
    {

        /* Get the cluster state.  */
        status = _fx_utility_exFAT_cluster_state_get(media_ptr, cluster, &cluster_state);
 801a9be:	f107 0317 	add.w	r3, r7, #23
 801a9c2:	461a      	mov	r2, r3
 801a9c4:	69f9      	ldr	r1, [r7, #28]
 801a9c6:	68f8      	ldr	r0, [r7, #12]
 801a9c8:	f000 f9da 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 801a9cc:	61b8      	str	r0, [r7, #24]

        /* Check the status of the state get.  */
        if (status != FX_SUCCESS)
 801a9ce:	69bb      	ldr	r3, [r7, #24]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d001      	beq.n	801a9d8 <_fx_utility_exFAT_bitmap_free_cluster_find+0x2c>
        {

            /* Media error or out of total clusters number - stop searching.  */
            return(status);
 801a9d4:	69bb      	ldr	r3, [r7, #24]
 801a9d6:	e033      	b.n	801aa40 <_fx_utility_exFAT_bitmap_free_cluster_find+0x94>
        }

        /* Is this cluster free?  */
        if (cluster_state == FX_EXFAT_BITMAP_CLUSTER_FREE)
 801a9d8:	7dfb      	ldrb	r3, [r7, #23]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d104      	bne.n	801a9e8 <_fx_utility_exFAT_bitmap_free_cluster_find+0x3c>
        {

            /* Yes, finished the search.  */

            /* Return the cluster.  */
            *free_cluster = cluster;
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	69fa      	ldr	r2, [r7, #28]
 801a9e2:	601a      	str	r2, [r3, #0]

            /* Return success.  */
            return(FX_SUCCESS);
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	e02b      	b.n	801aa40 <_fx_utility_exFAT_bitmap_free_cluster_find+0x94>
        }

        /* Move to next cluster.  */
        cluster++;
 801a9e8:	69fb      	ldr	r3, [r7, #28]
 801a9ea:	3301      	adds	r3, #1
 801a9ec:	61fb      	str	r3, [r7, #28]
    while (cluster < media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START)
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9f2:	3302      	adds	r3, #2
 801a9f4:	69fa      	ldr	r2, [r7, #28]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d3e1      	bcc.n	801a9be <_fx_utility_exFAT_bitmap_free_cluster_find+0x12>
    }

    /* See if there is anything to search in the beginning.  */
    if (search_start_cluster > FX_FAT_ENTRY_START)
 801a9fa:	68bb      	ldr	r3, [r7, #8]
 801a9fc:	2b02      	cmp	r3, #2
 801a9fe:	d91e      	bls.n	801aa3e <_fx_utility_exFAT_bitmap_free_cluster_find+0x92>
    {

        /* Start at the beginning.  */
        cluster = FX_FAT_ENTRY_START;
 801aa00:	2302      	movs	r3, #2
 801aa02:	61fb      	str	r3, [r7, #28]

        /* Loop to search clusters.  */
        while (cluster < search_start_cluster)
 801aa04:	e017      	b.n	801aa36 <_fx_utility_exFAT_bitmap_free_cluster_find+0x8a>
        {

            /* Get the cluster state.  */
            status = _fx_utility_exFAT_cluster_state_get(media_ptr, cluster, &cluster_state);
 801aa06:	f107 0317 	add.w	r3, r7, #23
 801aa0a:	461a      	mov	r2, r3
 801aa0c:	69f9      	ldr	r1, [r7, #28]
 801aa0e:	68f8      	ldr	r0, [r7, #12]
 801aa10:	f000 f9b6 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 801aa14:	61b8      	str	r0, [r7, #24]
            if (status != FX_SUCCESS)
 801aa16:	69bb      	ldr	r3, [r7, #24]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d001      	beq.n	801aa20 <_fx_utility_exFAT_bitmap_free_cluster_find+0x74>
            {

                /* Media error or out of total clusters number - stop searching.  */
                return(status);
 801aa1c:	69bb      	ldr	r3, [r7, #24]
 801aa1e:	e00f      	b.n	801aa40 <_fx_utility_exFAT_bitmap_free_cluster_find+0x94>
            }

            /* Is this cluster free?  */
            if (cluster_state == FX_EXFAT_BITMAP_CLUSTER_FREE)
 801aa20:	7dfb      	ldrb	r3, [r7, #23]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d104      	bne.n	801aa30 <_fx_utility_exFAT_bitmap_free_cluster_find+0x84>
            {

                /* Yes, finished the search.  */

                /* Return the cluster.  */
                *free_cluster = cluster;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	69fa      	ldr	r2, [r7, #28]
 801aa2a:	601a      	str	r2, [r3, #0]

                /* Return success.  */
                return(FX_SUCCESS);
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	e007      	b.n	801aa40 <_fx_utility_exFAT_bitmap_free_cluster_find+0x94>
            }

            /* Move to the next cluster.  */
            cluster++;
 801aa30:	69fb      	ldr	r3, [r7, #28]
 801aa32:	3301      	adds	r3, #1
 801aa34:	61fb      	str	r3, [r7, #28]
        while (cluster < search_start_cluster)
 801aa36:	69fa      	ldr	r2, [r7, #28]
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	d3e3      	bcc.n	801aa06 <_fx_utility_exFAT_bitmap_free_cluster_find+0x5a>
        }
    }

    /* No more free clusters, return error.  */
    return(FX_NO_MORE_SPACE);
 801aa3e:	230a      	movs	r3, #10
}
 801aa40:	4618      	mov	r0, r3
 801aa42:	3720      	adds	r7, #32
 801aa44:	46bd      	mov	sp, r7
 801aa46:	bd80      	pop	{r7, pc}

0801aa48 <_fx_utility_exFAT_bitmap_initialize>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT   _fx_utility_exFAT_bitmap_initialize(FX_MEDIA *media_ptr)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b08a      	sub	sp, #40	; 0x28
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]
ULONG bitmap_size_in_sectors;
ULONG bitmap_total_size_in_bytes;


    /* Calculate exFAT bitmap size.  */
    bitmap_size_in_bytes =    DIVIDE_TO_CEILING(media_ptr -> fx_media_total_clusters, BITS_PER_BYTE);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa54:	3307      	adds	r3, #7
 801aa56:	08db      	lsrs	r3, r3, #3
 801aa58:	61fb      	str	r3, [r7, #28]
    bitmap_size_in_sectors =  DIVIDE_TO_CEILING(bitmap_size_in_bytes, media_ptr -> fx_media_bytes_per_sector);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801aa5e:	69fb      	ldr	r3, [r7, #28]
 801aa60:	4413      	add	r3, r2
 801aa62:	1e5a      	subs	r2, r3, #1
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa68:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa6c:	61bb      	str	r3, [r7, #24]

    /* Align bitmap size by sectors size.  */
    bitmap_total_size_in_bytes =  bitmap_size_in_sectors << media_ptr -> fx_media_exfat_bytes_per_sector_shift;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aa72:	69ba      	ldr	r2, [r7, #24]
 801aa74:	fa02 f303 	lsl.w	r3, r2, r3
 801aa78:	617b      	str	r3, [r7, #20]

    /* Set default bitMap cache size.  */
    bitmap_cache_size = media_ptr -> fx_media_bytes_per_sector * FX_EXFAT_BIT_MAP_NUM_OF_CACHED_SECTORS;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa7e:	623b      	str	r3, [r7, #32]

    /* Do not use the memory if it not required.  */
    if (bitmap_cache_size > bitmap_total_size_in_bytes)
 801aa80:	6a3a      	ldr	r2, [r7, #32]
 801aa82:	697b      	ldr	r3, [r7, #20]
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d901      	bls.n	801aa8c <_fx_utility_exFAT_bitmap_initialize+0x44>
    {

        /* Adjust the cache size.  */
        bitmap_cache_size =  bitmap_total_size_in_bytes;
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	623b      	str	r3, [r7, #32]
    }

    /* Try to find BitMap start sector.  */
    status = _fx_utility_exFAT_bitmap_start_sector_get(media_ptr, &media_ptr -> fx_media_exfat_bitmap_start_sector);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801aa92:	4619      	mov	r1, r3
 801aa94:	6878      	ldr	r0, [r7, #4]
 801aa96:	f000 f859 	bl	801ab4c <_fx_utility_exFAT_bitmap_start_sector_get>
 801aa9a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Did we get the starting sector?  */
    if (status == FX_SUCCESS)
 801aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d14f      	bne.n	801ab42 <_fx_utility_exFAT_bitmap_initialize+0xfa>
    {

        /* Yes, setup the media cache parameters.  */
        media_ptr -> fx_media_exfat_bitmap_cache_size_in_sectors  =
            bitmap_cache_size >> media_ptr -> fx_media_exfat_bytes_per_sector_shift;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aaa6:	6a3a      	ldr	r2, [r7, #32]
 801aaa8:	40da      	lsrs	r2, r3
        media_ptr -> fx_media_exfat_bitmap_cache_size_in_sectors  =
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

        media_ptr -> fx_media_exfat_bitmap_cache_dirty         =  FX_FALSE;
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	2200      	movs	r2, #0
 801aab4:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        media_ptr -> fx_media_exfat_bitmap_cache_start_cluster =  FX_FAT_ENTRY_START;
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	2202      	movs	r2, #2
 801aabc:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

        /* Calculate how many clusters mapped in the one sector.  */
        media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift =
            media_ptr -> fx_media_exfat_bytes_per_sector_shift +
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aac4:	1cda      	adds	r2, r3, #3
        media_ptr -> fx_media_exfat_bitmap_clusters_per_sector_shift =
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            BITS_PER_BYTE_SHIFT;

        /* Start at initial cluster.  */
        cluster =  FX_FAT_ENTRY_START;
 801aacc:	2302      	movs	r3, #2
 801aace:	613b      	str	r3, [r7, #16]

        /* Read first portion of BitMap.  */
        status = _fx_utility_exFAT_bitmap_cache_update(media_ptr, cluster);
 801aad0:	693b      	ldr	r3, [r7, #16]
 801aad2:	4619      	mov	r1, r3
 801aad4:	6878      	ldr	r0, [r7, #4]
 801aad6:	f7ff fecd 	bl	801a874 <_fx_utility_exFAT_bitmap_cache_update>
 801aada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Was the BitMap read successful?  */
        if (status == FX_SUCCESS)
 801aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d12f      	bne.n	801ab42 <_fx_utility_exFAT_bitmap_initialize+0xfa>
        {

            /* Find first free cluster.  */
            status = _fx_utility_exFAT_bitmap_free_cluster_find(media_ptr, cluster, &cluster);
 801aae2:	693b      	ldr	r3, [r7, #16]
 801aae4:	f107 0210 	add.w	r2, r7, #16
 801aae8:	4619      	mov	r1, r3
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f7ff ff5e 	bl	801a9ac <_fx_utility_exFAT_bitmap_free_cluster_find>
 801aaf0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Did we find a free cluster?  */
            if (status == FX_SUCCESS)
 801aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d124      	bne.n	801ab42 <_fx_utility_exFAT_bitmap_initialize+0xfa>
            {

                /* Save first free cluster number.  */
                media_ptr -> fx_media_cluster_search_start =  cluster;
 801aaf8:	693a      	ldr	r2, [r7, #16]
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0

                /* Calculate number of free clusters from first free cluster.  */
                while (cluster < media_ptr -> fx_media_total_clusters  + FX_FAT_ENTRY_START)
 801ab00:	e017      	b.n	801ab32 <_fx_utility_exFAT_bitmap_initialize+0xea>
                {

                    /* Get the state of the cluster.  */
                    status = _fx_utility_exFAT_cluster_state_get(media_ptr, cluster, &cluster_state);
 801ab02:	693b      	ldr	r3, [r7, #16]
 801ab04:	f107 020f 	add.w	r2, r7, #15
 801ab08:	4619      	mov	r1, r3
 801ab0a:	6878      	ldr	r0, [r7, #4]
 801ab0c:	f000 f938 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 801ab10:	6278      	str	r0, [r7, #36]	; 0x24

                    /* Was the state get successful?  */
                    if (status != FX_SUCCESS)
 801ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d113      	bne.n	801ab40 <_fx_utility_exFAT_bitmap_initialize+0xf8>
                        /* No, get out of the loop.  */
                        break;
                    }

                    /* Is the cluster free?  */
                    if (FX_EXFAT_BITMAP_CLUSTER_FREE == cluster_state)
 801ab18:	7bfb      	ldrb	r3, [r7, #15]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d106      	bne.n	801ab2c <_fx_utility_exFAT_bitmap_initialize+0xe4>
                    {

                        /* Yes, increment the available clusters.  */
                        media_ptr -> fx_media_available_clusters++;
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 801ab24:	1c5a      	adds	r2, r3, #1
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
                    }

                    /* Move to next cluster.  */
                    cluster++;
 801ab2c:	693b      	ldr	r3, [r7, #16]
 801ab2e:	3301      	adds	r3, #1
 801ab30:	613b      	str	r3, [r7, #16]
                while (cluster < media_ptr -> fx_media_total_clusters  + FX_FAT_ENTRY_START)
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab36:	1c9a      	adds	r2, r3, #2
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d8e1      	bhi.n	801ab02 <_fx_utility_exFAT_bitmap_initialize+0xba>
 801ab3e:	e000      	b.n	801ab42 <_fx_utility_exFAT_bitmap_initialize+0xfa>
                        break;
 801ab40:	bf00      	nop
            }
        }
    }

    /* Return status.  */
    return(status);
 801ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3728      	adds	r7, #40	; 0x28
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}

0801ab4c <_fx_utility_exFAT_bitmap_start_sector_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT   _fx_utility_exFAT_bitmap_start_sector_get(FX_MEDIA *media_ptr, ULONG *bitmap_started_sector)
{
 801ab4c:	b5b0      	push	{r4, r5, r7, lr}
 801ab4e:	b088      	sub	sp, #32
 801ab50:	af04      	add	r7, sp, #16
 801ab52:	6078      	str	r0, [r7, #4]
 801ab54:	6039      	str	r1, [r7, #0]
ULONG  sectors_count;
UCHAR *dir_entry_ptr;


    /* Initialize the sector count.  */
    sectors_count =  0;
 801ab56:	2300      	movs	r3, #0
 801ab58:	60fb      	str	r3, [r7, #12]

    /* Go through the first cluster of exFAT root directory. This cluster should
       contain BitMap allocation DirEntry */
    while (sectors_count < media_ptr -> fx_media_sectors_per_cluster)
 801ab5a:	e04f      	b.n	801abfc <_fx_utility_exFAT_bitmap_start_sector_get+0xb0>
    {

        /*  Will use read sector function with cache functionality since first cluster
            will be used by other services. */
        if (FX_SUCCESS != _fx_utility_logical_sector_read(media_ptr,
                                                          (ULONG64) (media_ptr -> fx_media_root_sector_start + sectors_count),
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	f8d3 2478 	ldr.w	r2, [r3, #1144]	; 0x478
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	4413      	add	r3, r2
        if (FX_SUCCESS != _fx_utility_logical_sector_read(media_ptr,
 801ab66:	2200      	movs	r2, #0
 801ab68:	461c      	mov	r4, r3
 801ab6a:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer,
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	689b      	ldr	r3, [r3, #8]
        if (FX_SUCCESS != _fx_utility_logical_sector_read(media_ptr,
 801ab70:	2204      	movs	r2, #4
 801ab72:	9202      	str	r2, [sp, #8]
 801ab74:	2201      	movs	r2, #1
 801ab76:	9201      	str	r2, [sp, #4]
 801ab78:	9300      	str	r3, [sp, #0]
 801ab7a:	4622      	mov	r2, r4
 801ab7c:	462b      	mov	r3, r5
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	f001 f95a 	bl	801be38 <_fx_utility_logical_sector_read>
 801ab84:	4603      	mov	r3, r0
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d13f      	bne.n	801ac0a <_fx_utility_exFAT_bitmap_start_sector_get+0xbe>
            /* Error reading the sector, get out of the loop.  */
            break;
        }

        /* Increment the sectors count.  */
        sectors_count++;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	3301      	adds	r3, #1
 801ab8e:	60fb      	str	r3, [r7, #12]

        /* Setup pointer to directory entry.  */
        dir_entry_ptr =  media_ptr -> fx_media_memory_buffer;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	689b      	ldr	r3, [r3, #8]
 801ab94:	60bb      	str	r3, [r7, #8]

        /* Go through the read buffer and try to find BitMap table directory entry.  */
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801ab96:	e029      	b.n	801abec <_fx_utility_exFAT_bitmap_start_sector_get+0xa0>
                                media_ptr -> fx_media_bytes_per_sector))
        {

            /* Determine if this entry is the bitmap allocation type.  */
            if (FX_EXFAT_DIR_ENTRY_TYPE_ALLOCATION_BITMAP == dir_entry_ptr[FX_EXFAT_ENTRY_TYPE])
 801ab98:	68bb      	ldr	r3, [r7, #8]
 801ab9a:	781b      	ldrb	r3, [r3, #0]
 801ab9c:	2b81      	cmp	r3, #129	; 0x81
 801ab9e:	d122      	bne.n	801abe6 <_fx_utility_exFAT_bitmap_start_sector_get+0x9a>
            {

                /* Yes, calculate BitMap table start sector.  */
                *bitmap_started_sector = media_ptr -> fx_media_data_sector_start +
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
                    (UINT)((dir_entry_ptr[FX_EXFAT_FIRST_CLUSTER] - FX_FAT_ENTRY_START) <<
 801aba6:	68ba      	ldr	r2, [r7, #8]
 801aba8:	3214      	adds	r2, #20
 801abaa:	7812      	ldrb	r2, [r2, #0]
 801abac:	1e91      	subs	r1, r2, #2
                                        media_ptr -> fx_media_exfat_sector_per_clusters_shift);
 801abae:	687a      	ldr	r2, [r7, #4]
 801abb0:	6d92      	ldr	r2, [r2, #88]	; 0x58
                    (UINT)((dir_entry_ptr[FX_EXFAT_FIRST_CLUSTER] - FX_FAT_ENTRY_START) <<
 801abb2:	fa01 f202 	lsl.w	r2, r1, r2
                *bitmap_started_sector = media_ptr -> fx_media_data_sector_start +
 801abb6:	441a      	add	r2, r3
 801abb8:	683b      	ldr	r3, [r7, #0]
 801abba:	601a      	str	r2, [r3, #0]

                /* Check FirstCluster and DataLength fields for error.  */
                if ((0 == *bitmap_started_sector) ||
 801abbc:	683b      	ldr	r3, [r7, #0]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d00c      	beq.n	801abde <_fx_utility_exFAT_bitmap_start_sector_get+0x92>
                    (media_ptr -> fx_media_total_clusters >
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
                     ((ULONG)_fx_utility_64_unsigned_read(&dir_entry_ptr[FX_EXFAT_DATA_LENGTH]) <<
 801abc8:	68bb      	ldr	r3, [r7, #8]
 801abca:	3318      	adds	r3, #24
 801abcc:	4618      	mov	r0, r3
 801abce:	f7fe fd5d 	bl	801968c <_fx_utility_64_unsigned_read>
 801abd2:	4602      	mov	r2, r0
 801abd4:	460b      	mov	r3, r1
 801abd6:	4613      	mov	r3, r2
 801abd8:	00db      	lsls	r3, r3, #3
                if ((0 == *bitmap_started_sector) ||
 801abda:	429c      	cmp	r4, r3
 801abdc:	d901      	bls.n	801abe2 <_fx_utility_exFAT_bitmap_start_sector_get+0x96>
                    BITS_PER_BYTE_SHIFT)))
                {

                    /* Media invalid - return error!  */
                    return(FX_MEDIA_INVALID);
 801abde:	2302      	movs	r3, #2
 801abe0:	e015      	b.n	801ac0e <_fx_utility_exFAT_bitmap_start_sector_get+0xc2>
                }

                /* Return success!  */
                return(FX_SUCCESS);
 801abe2:	2300      	movs	r3, #0
 801abe4:	e013      	b.n	801ac0e <_fx_utility_exFAT_bitmap_start_sector_get+0xc2>
            }
            else
            {

                /* Move to next directory entry.  */
                dir_entry_ptr +=  FX_EXFAT_DIR_ENTRY_SIZE;
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	3320      	adds	r3, #32
 801abea:	60bb      	str	r3, [r7, #8]
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	689a      	ldr	r2, [r3, #8]
                                media_ptr -> fx_media_bytes_per_sector))
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801abf4:	4413      	add	r3, r2
 801abf6:	68ba      	ldr	r2, [r7, #8]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d3cd      	bcc.n	801ab98 <_fx_utility_exFAT_bitmap_start_sector_get+0x4c>
    while (sectors_count < media_ptr -> fx_media_sectors_per_cluster)
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801ac02:	68fa      	ldr	r2, [r7, #12]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d3a9      	bcc.n	801ab5c <_fx_utility_exFAT_bitmap_start_sector_get+0x10>
 801ac08:	e000      	b.n	801ac0c <_fx_utility_exFAT_bitmap_start_sector_get+0xc0>
            break;
 801ac0a:	bf00      	nop
            }
        }
    }

    /* Return media invalid error.  */
    return(FX_MEDIA_INVALID);
 801ac0c:	2302      	movs	r3, #2
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3710      	adds	r7, #16
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bdb0      	pop	{r4, r5, r7, pc}

0801ac16 <_fx_utility_exFAT_cluster_free>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_cluster_free(FX_MEDIA *media_ptr, UCHAR *work_ptr)
{
 801ac16:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ac1a:	b08e      	sub	sp, #56	; 0x38
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	60f8      	str	r0, [r7, #12]
 801ac20:	60b9      	str	r1, [r7, #8]
ULONG   cluster;
ULONG64 data_length;
ULONG   clusters_released;
ULONG   clusters_count;
ULONG   bytes_per_cluster;
ULONG   contents = 0;
 801ac22:	2300      	movs	r3, #0
 801ac24:	617b      	str	r3, [r7, #20]
UCHAR   dont_use_fat;
UINT    status;


    /* Pickup the cluster to release. */
    cluster =       _fx_utility_32_unsigned_read(&(work_ptr[FX_EXFAT_FIRST_CLUSTER]));
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	3314      	adds	r3, #20
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f7fe fcf0 	bl	8019610 <_fx_utility_32_unsigned_read>
 801ac30:	6378      	str	r0, [r7, #52]	; 0x34

    /* Pickup the data length.  */
    data_length =   _fx_utility_64_unsigned_read(&(work_ptr[FX_EXFAT_DATA_LENGTH]));
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	3318      	adds	r3, #24
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7fe fd28 	bl	801968c <_fx_utility_64_unsigned_read>
 801ac3c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    /* Pickup the flag that determines if the FAT should be used.  */
    dont_use_fat =  (work_ptr[FX_EXFAT_SECOND_FLAG] >> 1) & 1;
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	3301      	adds	r3, #1
 801ac44:	781b      	ldrb	r3, [r3, #0]
 801ac46:	085b      	lsrs	r3, r3, #1
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	f003 0301 	and.w	r3, r3, #1
 801ac4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Default status to success.  */
    status =  FX_SUCCESS;
 801ac52:	2300      	movs	r3, #0
 801ac54:	623b      	str	r3, [r7, #32]

    /* Is the allocation possible flag cleared? Is there any allocated cluster for this entry?  */
    if (((work_ptr[FX_EXFAT_SECOND_FLAG] & FX_EXFAT_SECOND_FLAG_ALLOCATION_POSSIBLE_MASK) == 0) ||
 801ac56:	68bb      	ldr	r3, [r7, #8]
 801ac58:	3301      	adds	r3, #1
 801ac5a:	781b      	ldrb	r3, [r3, #0]
 801ac5c:	f003 0301 	and.w	r3, r3, #1
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d006      	beq.n	801ac72 <_fx_utility_exFAT_cluster_free+0x5c>
 801ac64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d003      	beq.n	801ac72 <_fx_utility_exFAT_cluster_free+0x5c>
        (cluster == 0) ||
 801ac6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ac6e:	4313      	orrs	r3, r2
 801ac70:	d101      	bne.n	801ac76 <_fx_utility_exFAT_cluster_free+0x60>
        (data_length == 0))
    {

        /* No cluster allocated to this entry, nothing to deallocate.  */
        return(FX_SUCCESS);
 801ac72:	2300      	movs	r3, #0
 801ac74:	e07f      	b.n	801ad76 <_fx_utility_exFAT_cluster_free+0x160>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 801ac7a:	68fa      	ldr	r2, [r7, #12]
 801ac7c:	f8d2 2484 	ldr.w	r2, [r2, #1156]	; 0x484
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801ac80:	fb02 f303 	mul.w	r3, r2, r3
 801ac84:	61fb      	str	r3, [r7, #28]

    /* Determine how many clusters.  */
    clusters_count =  (ULONG)((data_length + bytes_per_cluster - 1) / bytes_per_cluster - 1);
 801ac86:	69fb      	ldr	r3, [r7, #28]
 801ac88:	2200      	movs	r2, #0
 801ac8a:	4698      	mov	r8, r3
 801ac8c:	4691      	mov	r9, r2
 801ac8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ac92:	eb18 0402 	adds.w	r4, r8, r2
 801ac96:	eb49 0503 	adc.w	r5, r9, r3
 801ac9a:	f114 3aff 	adds.w	sl, r4, #4294967295
 801ac9e:	f145 3bff 	adc.w	fp, r5, #4294967295
 801aca2:	69fb      	ldr	r3, [r7, #28]
 801aca4:	2200      	movs	r2, #0
 801aca6:	603b      	str	r3, [r7, #0]
 801aca8:	607a      	str	r2, [r7, #4]
 801acaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 801acae:	4650      	mov	r0, sl
 801acb0:	4659      	mov	r1, fp
 801acb2:	f7e6 f83d 	bl	8000d30 <__aeabi_uldivmod>
 801acb6:	4602      	mov	r2, r0
 801acb8:	460b      	mov	r3, r1
 801acba:	4613      	mov	r3, r2
 801acbc:	3b01      	subs	r3, #1
 801acbe:	61bb      	str	r3, [r7, #24]

    /* Initialize released cluster count to 0.  */
    clusters_released = 0;
 801acc0:	2300      	movs	r3, #0
 801acc2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Follow the link of FAT entries.  */
    while ((cluster >= FX_FAT_ENTRY_START) && (cluster < FX_RESERVED_1_exFAT))
 801acc4:	e047      	b.n	801ad56 <_fx_utility_exFAT_cluster_free+0x140>
    {

        /* Increment the number of clusters released.  */
        clusters_released++;
 801acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc8:	3301      	adds	r3, #1
 801acca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the FAT chain is to be used.  */
        if (dont_use_fat)
 801accc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d00c      	beq.n	801acee <_fx_utility_exFAT_cluster_free+0xd8>
        {

            /* Yes, don't use the FAT chain.  */

            /* Check for file size range.  */
            if (clusters_released - 1 >= clusters_count)
 801acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acd6:	3b01      	subs	r3, #1
 801acd8:	69ba      	ldr	r2, [r7, #24]
 801acda:	429a      	cmp	r2, r3
 801acdc:	d803      	bhi.n	801ace6 <_fx_utility_exFAT_cluster_free+0xd0>
            {

                /* Set the next cluster to LAST to indicate it is the last cluster.  */
                contents =  FX_LAST_CLUSTER_exFAT;
 801acde:	f04f 33ff 	mov.w	r3, #4294967295
 801ace2:	617b      	str	r3, [r7, #20]
 801ace4:	e010      	b.n	801ad08 <_fx_utility_exFAT_cluster_free+0xf2>
            }
            else
            {

                /* The next cluster is just after the current cluster.  */
                contents =  cluster + 1;
 801ace6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ace8:	3301      	adds	r3, #1
 801acea:	617b      	str	r3, [r7, #20]
 801acec:	e00c      	b.n	801ad08 <_fx_utility_exFAT_cluster_free+0xf2>
        }
        else
        {

            /* Read the current cluster entry from the FAT.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 801acee:	f107 0314 	add.w	r3, r7, #20
 801acf2:	461a      	mov	r2, r3
 801acf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801acf6:	68f8      	ldr	r0, [r7, #12]
 801acf8:	f7fe fd15 	bl	8019726 <_fx_utility_FAT_entry_read>
 801acfc:	6238      	str	r0, [r7, #32]

            /* Check the return value.  */
            if (status != FX_SUCCESS)
 801acfe:	6a3b      	ldr	r3, [r7, #32]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d001      	beq.n	801ad08 <_fx_utility_exFAT_cluster_free+0xf2>
            {

                /* Return the error status.  */
                return(status);
 801ad04:	6a3b      	ldr	r3, [r7, #32]
 801ad06:	e036      	b.n	801ad76 <_fx_utility_exFAT_cluster_free+0x160>
            }
        }

        /* Check for data corruption.  */
        if ((cluster == contents) || (clusters_released > media_ptr -> fx_media_total_clusters))
 801ad08:	697b      	ldr	r3, [r7, #20]
 801ad0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad0c:	429a      	cmp	r2, r3
 801ad0e:	d004      	beq.n	801ad1a <_fx_utility_exFAT_cluster_free+0x104>
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d901      	bls.n	801ad1e <_fx_utility_exFAT_cluster_free+0x108>
        {

            /* Return the bad status.  */
            return(FX_FAT_READ_ERROR);
 801ad1a:	2303      	movs	r3, #3
 801ad1c:	e02b      	b.n	801ad76 <_fx_utility_exFAT_cluster_free+0x160>
        }

        /* Make the current cluster available.  */
        if (!dont_use_fat)
 801ad1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d10a      	bne.n	801ad3c <_fx_utility_exFAT_cluster_free+0x126>
        {

            /* Write the FAT to free the cluster.  */
            status = _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 801ad26:	2200      	movs	r2, #0
 801ad28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad2a:	68f8      	ldr	r0, [r7, #12]
 801ad2c:	f7fe ff41 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 801ad30:	6238      	str	r0, [r7, #32]

            /* Check the return value.  */
            if (status != FX_SUCCESS)
 801ad32:	6a3b      	ldr	r3, [r7, #32]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d001      	beq.n	801ad3c <_fx_utility_exFAT_cluster_free+0x126>
            {

                /* Return the error status.  */
                return(status);
 801ad38:	6a3b      	ldr	r3, [r7, #32]
 801ad3a:	e01c      	b.n	801ad76 <_fx_utility_exFAT_cluster_free+0x160>
            }
        }

        /* Set cluster state in the bitmap.  */
        status = _fx_utility_exFAT_cluster_state_set(media_ptr, cluster, FX_EXFAT_BITMAP_CLUSTER_FREE);
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad40:	68f8      	ldr	r0, [r7, #12]
 801ad42:	f000 f85c 	bl	801adfe <_fx_utility_exFAT_cluster_state_set>
 801ad46:	6238      	str	r0, [r7, #32]

        /* Check the return status.  */
        if (status != FX_SUCCESS)
 801ad48:	6a3b      	ldr	r3, [r7, #32]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d001      	beq.n	801ad52 <_fx_utility_exFAT_cluster_free+0x13c>
        {

            /* Return the bad status.  */
            return(status);
 801ad4e:	6a3b      	ldr	r3, [r7, #32]
 801ad50:	e011      	b.n	801ad76 <_fx_utility_exFAT_cluster_free+0x160>
        }

        /* Setup for the next cluster.  */
        cluster =  contents;
 801ad52:	697b      	ldr	r3, [r7, #20]
 801ad54:	637b      	str	r3, [r7, #52]	; 0x34
    while ((cluster >= FX_FAT_ENTRY_START) && (cluster < FX_RESERVED_1_exFAT))
 801ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad58:	2b01      	cmp	r3, #1
 801ad5a:	d903      	bls.n	801ad64 <_fx_utility_exFAT_cluster_free+0x14e>
 801ad5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad5e:	f113 0f09 	cmn.w	r3, #9
 801ad62:	d9b0      	bls.n	801acc6 <_fx_utility_exFAT_cluster_free+0xb0>
    }

    /* Update the free clusters in the media control block.  */
    media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters + clusters_released;
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 801ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad6c:	441a      	add	r2, r3
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac

    /* Return success.  */
    return(FX_SUCCESS);
 801ad74:	2300      	movs	r3, #0
}
 801ad76:	4618      	mov	r0, r3
 801ad78:	3738      	adds	r7, #56	; 0x38
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ad80 <_fx_utility_exFAT_cluster_state_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_cluster_state_get(FX_MEDIA *media_ptr, ULONG cluster, UCHAR *cluster_state)
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b088      	sub	sp, #32
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	60f8      	str	r0, [r7, #12]
 801ad88:	60b9      	str	r1, [r7, #8]
 801ad8a:	607a      	str	r2, [r7, #4]
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Prepare bitmap cache.  */
    status = _fx_utility_exFAT_bitmap_cache_prepare(media_ptr, cluster);
 801ad8c:	68b9      	ldr	r1, [r7, #8]
 801ad8e:	68f8      	ldr	r0, [r7, #12]
 801ad90:	f7ff fd43 	bl	801a81a <_fx_utility_exFAT_bitmap_cache_prepare>
 801ad94:	61f8      	str	r0, [r7, #28]

    /* Was it successful?  */
    if (status == FX_SUCCESS)
 801ad96:	69fb      	ldr	r3, [r7, #28]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d12b      	bne.n	801adf4 <_fx_utility_exFAT_cluster_state_get+0x74>
    {

        /* Calculate the bitmap offset.  */
        bitmap_offset = (UINT)(cluster - media_ptr -> fx_media_exfat_bitmap_cache_start_cluster) >> BITS_PER_BYTE_SHIFT;
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 801ada2:	68ba      	ldr	r2, [r7, #8]
 801ada4:	1ad3      	subs	r3, r2, r3
 801ada6:	08db      	lsrs	r3, r3, #3
 801ada8:	61bb      	str	r3, [r7, #24]

        /* Pickup the 8 cluster block.  */
        eight_clusters_block = *(media_ptr -> fx_media_exfat_bitmap_cache + bitmap_offset);
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801adb0:	69bb      	ldr	r3, [r7, #24]
 801adb2:	4413      	add	r3, r2
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	75fb      	strb	r3, [r7, #23]

        /* Check all 8 bits for 0x00 (all clusters in the block are free).  */
        if (eight_clusters_block == 0x00)
 801adb8:	7dfb      	ldrb	r3, [r7, #23]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d103      	bne.n	801adc6 <_fx_utility_exFAT_cluster_state_get+0x46>
        {

            /* Cluster is free, return state.  */
            *cluster_state = FX_EXFAT_BITMAP_CLUSTER_FREE;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	2200      	movs	r2, #0
 801adc2:	701a      	strb	r2, [r3, #0]
 801adc4:	e016      	b.n	801adf4 <_fx_utility_exFAT_cluster_state_get+0x74>
        }
        /* Check all 8 bits for 0xFF (all 8 clusters are occupied).  */
        else if (0xFF == eight_clusters_block)
 801adc6:	7dfb      	ldrb	r3, [r7, #23]
 801adc8:	2bff      	cmp	r3, #255	; 0xff
 801adca:	d103      	bne.n	801add4 <_fx_utility_exFAT_cluster_state_get+0x54>
        {

            /* Cluster is not free, return state.  */
            *cluster_state = FX_EXFAT_BITMAP_CLUSTER_OCCUPIED;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	2201      	movs	r2, #1
 801add0:	701a      	strb	r2, [r3, #0]
 801add2:	e00f      	b.n	801adf4 <_fx_utility_exFAT_cluster_state_get+0x74>
        }
        else
        {

            /* Check bit respondent for cluster state.  */
            cluster_shift = (UCHAR)((cluster - FX_FAT_ENTRY_START) % BITS_PER_BYTE);
 801add4:	68bb      	ldr	r3, [r7, #8]
 801add6:	3b02      	subs	r3, #2
 801add8:	b2db      	uxtb	r3, r3
 801adda:	f003 0307 	and.w	r3, r3, #7
 801adde:	75bb      	strb	r3, [r7, #22]

            *cluster_state = (eight_clusters_block >> cluster_shift) & 0x1;
 801ade0:	7dfa      	ldrb	r2, [r7, #23]
 801ade2:	7dbb      	ldrb	r3, [r7, #22]
 801ade4:	fa42 f303 	asr.w	r3, r2, r3
 801ade8:	b2db      	uxtb	r3, r3
 801adea:	f003 0301 	and.w	r3, r3, #1
 801adee:	b2da      	uxtb	r2, r3
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Return status.  */
    return(status);
 801adf4:	69fb      	ldr	r3, [r7, #28]
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	3720      	adds	r7, #32
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}

0801adfe <_fx_utility_exFAT_cluster_state_set>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_cluster_state_set(FX_MEDIA  *media_ptr, ULONG cluster, UCHAR new_cluster_state)
{
 801adfe:	b580      	push	{r7, lr}
 801ae00:	b088      	sub	sp, #32
 801ae02:	af00      	add	r7, sp, #0
 801ae04:	60f8      	str	r0, [r7, #12]
 801ae06:	60b9      	str	r1, [r7, #8]
 801ae08:	4613      	mov	r3, r2
 801ae0a:	71fb      	strb	r3, [r7, #7]
        return(_fx_fault_tolerant_add_bitmap_log(media_ptr, cluster, new_cluster_state));
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Get the state of the cluster?  */
    status =  _fx_utility_exFAT_cluster_state_get(media_ptr, cluster, &cluster_state);
 801ae0c:	f107 0316 	add.w	r3, r7, #22
 801ae10:	461a      	mov	r2, r3
 801ae12:	68b9      	ldr	r1, [r7, #8]
 801ae14:	68f8      	ldr	r0, [r7, #12]
 801ae16:	f7ff ffb3 	bl	801ad80 <_fx_utility_exFAT_cluster_state_get>
 801ae1a:	61f8      	str	r0, [r7, #28]

    /* Was the state get successful?  */
    if (status == FX_SUCCESS)
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d142      	bne.n	801aea8 <_fx_utility_exFAT_cluster_state_set+0xaa>
    {

        /* Is it the same state?  */
        if (new_cluster_state != cluster_state)
 801ae22:	7dbb      	ldrb	r3, [r7, #22]
 801ae24:	79fa      	ldrb	r2, [r7, #7]
 801ae26:	429a      	cmp	r2, r3
 801ae28:	d03e      	beq.n	801aea8 <_fx_utility_exFAT_cluster_state_set+0xaa>
        {

            /* No, we need to set the state.  */

            /* Calculate the bitmap offset.  */
            bitmap_offset =  (UINT)(cluster - media_ptr -> fx_media_exfat_bitmap_cache_start_cluster) >> BITS_PER_BYTE_SHIFT;
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 801ae30:	68ba      	ldr	r2, [r7, #8]
 801ae32:	1ad3      	subs	r3, r2, r3
 801ae34:	08db      	lsrs	r3, r3, #3
 801ae36:	61bb      	str	r3, [r7, #24]

            /* Calculate where the cluster is located.  */
            cluster_shift =  (UCHAR)((cluster - FX_FAT_ENTRY_START) % BITS_PER_BYTE);
 801ae38:	68bb      	ldr	r3, [r7, #8]
 801ae3a:	3b02      	subs	r3, #2
 801ae3c:	b2db      	uxtb	r3, r3
 801ae3e:	f003 0307 	and.w	r3, r3, #7
 801ae42:	75fb      	strb	r3, [r7, #23]

            /* Is occupied the new state?  */
            if (FX_EXFAT_BITMAP_CLUSTER_OCCUPIED == new_cluster_state)
 801ae44:	79fb      	ldrb	r3, [r7, #7]
 801ae46:	2b01      	cmp	r3, #1
 801ae48:	d115      	bne.n	801ae76 <_fx_utility_exFAT_cluster_state_set+0x78>
            {

                /* Yes, mark this cluster as occupied.  */
                *(media_ptr -> fx_media_exfat_bitmap_cache + bitmap_offset) = (UCHAR)(*(media_ptr -> fx_media_exfat_bitmap_cache + bitmap_offset) | (1 << cluster_shift));
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801ae50:	69bb      	ldr	r3, [r7, #24]
 801ae52:	4413      	add	r3, r2
 801ae54:	781b      	ldrb	r3, [r3, #0]
 801ae56:	b25a      	sxtb	r2, r3
 801ae58:	7dfb      	ldrb	r3, [r7, #23]
 801ae5a:	2101      	movs	r1, #1
 801ae5c:	fa01 f303 	lsl.w	r3, r1, r3
 801ae60:	b25b      	sxtb	r3, r3
 801ae62:	4313      	orrs	r3, r2
 801ae64:	b259      	sxtb	r1, r3
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801ae6c:	69bb      	ldr	r3, [r7, #24]
 801ae6e:	4413      	add	r3, r2
 801ae70:	b2ca      	uxtb	r2, r1
 801ae72:	701a      	strb	r2, [r3, #0]
 801ae74:	e014      	b.n	801aea0 <_fx_utility_exFAT_cluster_state_set+0xa2>
            }
            else
            {

                /* No, mark this cluster as not occupied.  */
                *(media_ptr -> fx_media_exfat_bitmap_cache + bitmap_offset) &=  (UCHAR)~(1 << cluster_shift);
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801ae7c:	69bb      	ldr	r3, [r7, #24]
 801ae7e:	4413      	add	r3, r2
 801ae80:	7819      	ldrb	r1, [r3, #0]
 801ae82:	7dfb      	ldrb	r3, [r7, #23]
 801ae84:	2201      	movs	r2, #1
 801ae86:	fa02 f303 	lsl.w	r3, r2, r3
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	43db      	mvns	r3, r3
 801ae8e:	b2da      	uxtb	r2, r3
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 801ae96:	69bb      	ldr	r3, [r7, #24]
 801ae98:	4403      	add	r3, r0
 801ae9a:	400a      	ands	r2, r1
 801ae9c:	b2d2      	uxtb	r2, r2
 801ae9e:	701a      	strb	r2, [r3, #0]
            }

            /* Mark the cache as dirty.  */
            media_ptr -> fx_media_exfat_bitmap_cache_dirty = FX_TRUE;
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	2201      	movs	r2, #1
 801aea4:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
        }
    }

    /* Return status.  */
    return(status);
 801aea8:	69fb      	ldr	r3, [r7, #28]
}
 801aeaa:	4618      	mov	r0, r3
 801aeac:	3720      	adds	r7, #32
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}

0801aeb2 <_fx_utility_exFAT_geometry_check>:
/*                                            sector size constant,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_geometry_check(FX_MEDIA *media_ptr, UCHAR *sector_buffer)
{
 801aeb2:	b590      	push	{r4, r7, lr}
 801aeb4:	b091      	sub	sp, #68	; 0x44
 801aeb6:	af00      	add	r7, sp, #0
 801aeb8:	6078      	str	r0, [r7, #4]
 801aeba:	6039      	str	r1, [r7, #0]

ULONG  temp;
ULONG  counter;
ULONG  calculated_checksum         = 0;
 801aebc:	2300      	movs	r3, #0
 801aebe:	637b      	str	r3, [r7, #52]	; 0x34
ULONG  main_system_area_checksum   = 0;
 801aec0:	2300      	movs	r3, #0
 801aec2:	613b      	str	r3, [r7, #16]
ULONG  backup_system_area_checksum      = 0;
 801aec4:	2300      	movs	r3, #0
 801aec6:	60fb      	str	r3, [r7, #12]
ULONG  bitmap_start_sector       = 0;
 801aec8:	2300      	movs	r3, #0
 801aeca:	633b      	str	r3, [r7, #48]	; 0x30
ULONG  bitmap_size_in_bytes      = 0;
 801aecc:	2300      	movs	r3, #0
 801aece:	62fb      	str	r3, [r7, #44]	; 0x2c
ULONG  upcase_table_start_sector  = 0;
 801aed0:	2300      	movs	r3, #0
 801aed2:	62bb      	str	r3, [r7, #40]	; 0x28
ULONG  upcase_table_size_in_bytes = 0;
 801aed4:	2300      	movs	r3, #0
 801aed6:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  upcase_table_checksum    = 0;
 801aed8:	2300      	movs	r3, #0
 801aeda:	623b      	str	r3, [r7, #32]
UCHAR *dir_entry_ptr           = NULL;
 801aedc:	2300      	movs	r3, #0
 801aede:	61fb      	str	r3, [r7, #28]
ULONG  dir_entries_found        = 0;
 801aee0:	2300      	movs	r3, #0
 801aee2:	61bb      	str	r3, [r7, #24]
UINT   status;


    /* Check FAT Size.  */
    temp = (media_ptr -> fx_media_sectors_per_FAT <<
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
            media_ptr -> fx_media_exfat_bytes_per_sector_shift) >>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    temp = (media_ptr -> fx_media_sectors_per_FAT <<
 801aeee:	fa02 f303 	lsl.w	r3, r2, r3
 801aef2:	089b      	lsrs	r3, r3, #2
 801aef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        FX_EXFAT_SIZE_OF_FAT_ELEMENT_SHIFT;

    /* Is the FAT capable of holding the total number of clusters?  */
    if (temp < media_ptr -> fx_media_total_clusters)
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aefa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801aefc:	429a      	cmp	r2, r3
 801aefe:	d201      	bcs.n	801af04 <_fx_utility_exFAT_geometry_check+0x52>
    {

        /* No, return error.  */
        return(FX_MEDIA_INVALID);
 801af00:	2302      	movs	r3, #2
 801af02:	e124      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Check Cluster Heap Offset.  */
    temp = media_ptr -> fx_media_reserved_sectors +
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f8d3 2474 	ldr.w	r2, [r3, #1140]	; 0x474
        media_ptr -> fx_media_sectors_per_FAT;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
    temp = media_ptr -> fx_media_reserved_sectors +
 801af10:	4413      	add	r3, r2
 801af12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Is the cluster heap placed after the FAT table?  */
    if (temp > media_ptr -> fx_media_data_sector_start)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 801af1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801af1c:	429a      	cmp	r2, r3
 801af1e:	d901      	bls.n	801af24 <_fx_utility_exFAT_geometry_check+0x72>
    {

        /* No, the media is invalid.  */
        return(FX_MEDIA_INVALID);
 801af20:	2302      	movs	r3, #2
 801af22:	e114      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Check System Area checksum.  */
    status = _fx_utility_exFAT_system_area_checksum_verify(media_ptr,
 801af24:	f107 0310 	add.w	r3, r7, #16
 801af28:	2200      	movs	r2, #0
 801af2a:	6839      	ldr	r1, [r7, #0]
 801af2c:	6878      	ldr	r0, [r7, #4]
 801af2e:	f000 f946 	bl	801b1be <_fx_utility_exFAT_system_area_checksum_verify>
 801af32:	6178      	str	r0, [r7, #20]
                                                           sector_buffer,
                                                           FX_EXFAT_FAT_MAIN_BOOT_SECTOR_OFFSET,
                                                           &main_system_area_checksum);

    /* Is the checksum correct?  */
    if (FX_SUCCESS != status)
 801af34:	697b      	ldr	r3, [r7, #20]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d001      	beq.n	801af3e <_fx_utility_exFAT_geometry_check+0x8c>
    {

        /* No, return error.  */
        return(status);
 801af3a:	697b      	ldr	r3, [r7, #20]
 801af3c:	e107      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Check System Area checksum in backup region.  */
    status = _fx_utility_exFAT_system_area_checksum_verify(media_ptr,
 801af3e:	f107 030c 	add.w	r3, r7, #12
 801af42:	220c      	movs	r2, #12
 801af44:	6839      	ldr	r1, [r7, #0]
 801af46:	6878      	ldr	r0, [r7, #4]
 801af48:	f000 f939 	bl	801b1be <_fx_utility_exFAT_system_area_checksum_verify>
 801af4c:	6178      	str	r0, [r7, #20]
                                                           sector_buffer,
                                                           FX_EXFAT_FAT_BACKUP_BOOT_SECTOR_OFFSET,
                                                           &backup_system_area_checksum);

    /* Is the checksum correct?  */
    if (FX_SUCCESS != status)
 801af4e:	697b      	ldr	r3, [r7, #20]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d001      	beq.n	801af58 <_fx_utility_exFAT_geometry_check+0xa6>
    {

        /* No, return error.  */
        return(status);
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	e0fa      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Is the main system area checksum equals to the backup system area checksum?  */
    if (main_system_area_checksum != backup_system_area_checksum)
 801af58:	693a      	ldr	r2, [r7, #16]
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	429a      	cmp	r2, r3
 801af5e:	d001      	beq.n	801af64 <_fx_utility_exFAT_geometry_check+0xb2>
    {

        /* No, return error.  */
        return(FX_MEDIA_INVALID);
 801af60:	2302      	movs	r3, #2
 801af62:	e0f4      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Get Bit Map and Up Case table parameters.  */
    media_ptr -> fx_media_driver_request = FX_DRIVER_READ;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2200      	movs	r2, #0
 801af68:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_buffer  = sector_buffer;
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	683a      	ldr	r2, [r7, #0]
 801af70:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    media_ptr -> fx_media_driver_sectors = 1;
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2201      	movs	r2, #1
 801af78:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8

    counter = 0;
 801af7c:	2300      	movs	r3, #0
 801af7e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Go through the first cluster of exFAT root directory.
       This cluster should contain BitMap allocation Dir Entry
       and Up Case table Dir Entry.  */
    while ((counter < media_ptr -> fx_media_sectors_per_cluster) &&
 801af80:	e074      	b.n	801b06c <_fx_utility_exFAT_geometry_check+0x1ba>
           (EXFAT_NUM_OF_DIR_ENTRIES != dir_entries_found))
    {

        /* Build the read sector command.  */
        media_ptr -> fx_media_driver_logical_sector = media_ptr -> fx_media_root_sector_start + counter;
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	f8d3 2478 	ldr.w	r2, [r3, #1144]	; 0x478
 801af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af8a:	441a      	add	r2, r3
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
        media_ptr -> fx_media_driver_status = FX_IO_ERROR;
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	2290      	movs	r2, #144	; 0x90
 801af96:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* Invoke the driver to read the directory entry sector.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801afa0:	6878      	ldr	r0, [r7, #4]
 801afa2:	4798      	blx	r3

        /* Determine if the read was successful. */
        if (FX_SUCCESS != media_ptr -> fx_media_driver_status)
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d003      	beq.n	801afb6 <_fx_utility_exFAT_geometry_check+0x104>
        {

            /* Return the error status.  */
            return(media_ptr -> fx_media_driver_status);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801afb4:	e0cb      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
        }

        /* Move to next sector.  */
        counter++;
 801afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afb8:	3301      	adds	r3, #1
 801afba:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup directory entry pointer to the sector buffer.  */
        dir_entry_ptr = sector_buffer;
 801afbc:	683b      	ldr	r3, [r7, #0]
 801afbe:	61fb      	str	r3, [r7, #28]

        /* Go through the read buffer and try to find BitMap table and UpCase table dir entries.  */
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801afc0:	e049      	b.n	801b056 <_fx_utility_exFAT_geometry_check+0x1a4>
                                media_ptr -> fx_media_bytes_per_sector) &&
               (EXFAT_NUM_OF_DIR_ENTRIES != dir_entries_found))
        {

            /* Check if we found the bitmap table.  */
            if (FX_EXFAT_DIR_ENTRY_TYPE_ALLOCATION_BITMAP == dir_entry_ptr[FX_EXFAT_ENTRY_TYPE])
 801afc2:	69fb      	ldr	r3, [r7, #28]
 801afc4:	781b      	ldrb	r3, [r3, #0]
 801afc6:	2b81      	cmp	r3, #129	; 0x81
 801afc8:	d11c      	bne.n	801b004 <_fx_utility_exFAT_geometry_check+0x152>
            {

                /* Calculate BitMap table start sector.  */
                bitmap_start_sector  = media_ptr -> fx_media_data_sector_start +
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
                    ((_fx_utility_32_unsigned_read(&dir_entry_ptr[FX_EXFAT_FIRST_CLUSTER]) -
 801afd0:	69fb      	ldr	r3, [r7, #28]
 801afd2:	3314      	adds	r3, #20
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7fe fb1b 	bl	8019610 <_fx_utility_32_unsigned_read>
 801afda:	4603      	mov	r3, r0
 801afdc:	1e9a      	subs	r2, r3, #2
                      FX_FAT_ENTRY_START) << media_ptr -> fx_media_exfat_sector_per_clusters_shift);
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801afe2:	fa02 f303 	lsl.w	r3, r2, r3
                bitmap_start_sector  = media_ptr -> fx_media_data_sector_start +
 801afe6:	4423      	add	r3, r4
 801afe8:	633b      	str	r3, [r7, #48]	; 0x30

                bitmap_size_in_bytes = (ULONG)_fx_utility_64_unsigned_read(&dir_entry_ptr[FX_EXFAT_DATA_LENGTH]);
 801afea:	69fb      	ldr	r3, [r7, #28]
 801afec:	3318      	adds	r3, #24
 801afee:	4618      	mov	r0, r3
 801aff0:	f7fe fb4c 	bl	801968c <_fx_utility_64_unsigned_read>
 801aff4:	4602      	mov	r2, r0
 801aff6:	460b      	mov	r3, r1
 801aff8:	4613      	mov	r3, r2
 801affa:	62fb      	str	r3, [r7, #44]	; 0x2c

                dir_entries_found++;
 801affc:	69bb      	ldr	r3, [r7, #24]
 801affe:	3301      	adds	r3, #1
 801b000:	61bb      	str	r3, [r7, #24]
 801b002:	e025      	b.n	801b050 <_fx_utility_exFAT_geometry_check+0x19e>
            }
            /* Check if we found the upcase table.  */
            else if (FX_EXFAT_DIR_ENTRY_TYPE_UP_CASE_TABLE == dir_entry_ptr[FX_EXFAT_ENTRY_TYPE])
 801b004:	69fb      	ldr	r3, [r7, #28]
 801b006:	781b      	ldrb	r3, [r3, #0]
 801b008:	2b82      	cmp	r3, #130	; 0x82
 801b00a:	d121      	bne.n	801b050 <_fx_utility_exFAT_geometry_check+0x19e>
            {

                /* Calculate UpCase table start sector.  */
                upcase_table_start_sector  = media_ptr -> fx_media_data_sector_start +
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
                    ((_fx_utility_32_unsigned_read(&dir_entry_ptr[FX_EXFAT_FIRST_CLUSTER]) -
 801b012:	69fb      	ldr	r3, [r7, #28]
 801b014:	3314      	adds	r3, #20
 801b016:	4618      	mov	r0, r3
 801b018:	f7fe fafa 	bl	8019610 <_fx_utility_32_unsigned_read>
 801b01c:	4603      	mov	r3, r0
 801b01e:	1e9a      	subs	r2, r3, #2
                      FX_FAT_ENTRY_START) << media_ptr -> fx_media_exfat_sector_per_clusters_shift);
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b024:	fa02 f303 	lsl.w	r3, r2, r3
                upcase_table_start_sector  = media_ptr -> fx_media_data_sector_start +
 801b028:	4423      	add	r3, r4
 801b02a:	62bb      	str	r3, [r7, #40]	; 0x28

                upcase_table_checksum    = _fx_utility_32_unsigned_read(&dir_entry_ptr[FX_EXFAT_UP_CASE_TABLE_CHECK_SUM]);
 801b02c:	69fb      	ldr	r3, [r7, #28]
 801b02e:	3304      	adds	r3, #4
 801b030:	4618      	mov	r0, r3
 801b032:	f7fe faed 	bl	8019610 <_fx_utility_32_unsigned_read>
 801b036:	6238      	str	r0, [r7, #32]
                upcase_table_size_in_bytes = (ULONG)_fx_utility_64_unsigned_read(&dir_entry_ptr[FX_EXFAT_DATA_LENGTH]);
 801b038:	69fb      	ldr	r3, [r7, #28]
 801b03a:	3318      	adds	r3, #24
 801b03c:	4618      	mov	r0, r3
 801b03e:	f7fe fb25 	bl	801968c <_fx_utility_64_unsigned_read>
 801b042:	4602      	mov	r2, r0
 801b044:	460b      	mov	r3, r1
 801b046:	4613      	mov	r3, r2
 801b048:	627b      	str	r3, [r7, #36]	; 0x24

                dir_entries_found++;
 801b04a:	69bb      	ldr	r3, [r7, #24]
 801b04c:	3301      	adds	r3, #1
 801b04e:	61bb      	str	r3, [r7, #24]
            }

            /* Move to next directory entry.  */
            dir_entry_ptr += FX_EXFAT_DIR_ENTRY_SIZE;
 801b050:	69fb      	ldr	r3, [r7, #28]
 801b052:	3320      	adds	r3, #32
 801b054:	61fb      	str	r3, [r7, #28]
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	689a      	ldr	r2, [r3, #8]
                                media_ptr -> fx_media_bytes_per_sector) &&
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (dir_entry_ptr < (media_ptr -> fx_media_memory_buffer +
 801b05e:	4413      	add	r3, r2
                                media_ptr -> fx_media_bytes_per_sector) &&
 801b060:	69fa      	ldr	r2, [r7, #28]
 801b062:	429a      	cmp	r2, r3
 801b064:	d202      	bcs.n	801b06c <_fx_utility_exFAT_geometry_check+0x1ba>
 801b066:	69bb      	ldr	r3, [r7, #24]
 801b068:	2b02      	cmp	r3, #2
 801b06a:	d1aa      	bne.n	801afc2 <_fx_utility_exFAT_geometry_check+0x110>
    while ((counter < media_ptr -> fx_media_sectors_per_cluster) &&
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801b072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b074:	429a      	cmp	r2, r3
 801b076:	d202      	bcs.n	801b07e <_fx_utility_exFAT_geometry_check+0x1cc>
 801b078:	69bb      	ldr	r3, [r7, #24]
 801b07a:	2b02      	cmp	r3, #2
 801b07c:	d181      	bne.n	801af82 <_fx_utility_exFAT_geometry_check+0xd0>
        }
    }

    /* Validate the directory entries.  */
    if ((0 == bitmap_start_sector)  ||
 801b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b080:	2b00      	cmp	r3, #0
 801b082:	d00b      	beq.n	801b09c <_fx_utility_exFAT_geometry_check+0x1ea>
 801b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b086:	2b00      	cmp	r3, #0
 801b088:	d008      	beq.n	801b09c <_fx_utility_exFAT_geometry_check+0x1ea>
        (0 == bitmap_size_in_bytes) ||
 801b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d005      	beq.n	801b09c <_fx_utility_exFAT_geometry_check+0x1ea>
        (0 == upcase_table_start_sector) ||
 801b090:	6a3b      	ldr	r3, [r7, #32]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d002      	beq.n	801b09c <_fx_utility_exFAT_geometry_check+0x1ea>
        (0 == upcase_table_checksum) ||
 801b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d101      	bne.n	801b0a0 <_fx_utility_exFAT_geometry_check+0x1ee>
        (0 == upcase_table_size_in_bytes))
    {

        /* Directory entries have invalid value, return error.  */
        return(FX_MEDIA_INVALID);
 801b09c:	2302      	movs	r3, #2
 801b09e:	e056      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Check Bit Map size.  */
    if (media_ptr -> fx_media_total_clusters >
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        /* 1 Byte = > map to 8 clusters.  */
        (bitmap_size_in_bytes << BITS_PER_BYTE_SHIFT))
 801b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0a6:	00db      	lsls	r3, r3, #3
    if (media_ptr -> fx_media_total_clusters >
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	d901      	bls.n	801b0b0 <_fx_utility_exFAT_geometry_check+0x1fe>
    {

        /* Bitmap size is not correct, return error.  */
        return(FX_MEDIA_INVALID);
 801b0ac:	2302      	movs	r3, #2
 801b0ae:	e04e      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Check Up Case Table checksum.  */
    calculated_checksum = 0;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Build driver request to read the upcase table.  */
    media_ptr -> fx_media_driver_logical_sector = upcase_table_start_sector;
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b0b8:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

    /* Loop to calculate upcase table checksum.  */
    while (upcase_table_size_in_bytes > 0)
 801b0bc:	e03d      	b.n	801b13a <_fx_utility_exFAT_geometry_check+0x288>
    {

        /* Build driver request.  */
        media_ptr -> fx_media_driver_status = FX_IO_ERROR;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	2290      	movs	r2, #144	; 0x90
 801b0c2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* Invoke the driver to read one sector.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	4798      	blx	r3

        /* Determine if the read was successful. */
        if (FX_SUCCESS != media_ptr -> fx_media_driver_status)
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d003      	beq.n	801b0e2 <_fx_utility_exFAT_geometry_check+0x230>
        {

            /* Return the error status.  */
            return(media_ptr -> fx_media_driver_status);
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b0e0:	e035      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
        }

        /* Determine the processing size.  */
        if (upcase_table_size_in_bytes >= media_ptr -> fx_media_bytes_per_sector)
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d30f      	bcc.n	801b10c <_fx_utility_exFAT_geometry_check+0x25a>
        {

            /* Process one sector at a time.  */
            temp = media_ptr -> fx_media_bytes_per_sector;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            upcase_table_size_in_bytes -= media_ptr -> fx_media_bytes_per_sector;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0f8:	1ad3      	subs	r3, r2, r3
 801b0fa:	627b      	str	r3, [r7, #36]	; 0x24
            media_ptr -> fx_media_driver_logical_sector++;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 801b102:	1c5a      	adds	r2, r3, #1
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
 801b10a:	e003      	b.n	801b114 <_fx_utility_exFAT_geometry_check+0x262>
        }
        else
        {

            /* Remaining data is less than one sector, process all the remaining bytes.  */
            temp = upcase_table_size_in_bytes;
 801b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
            upcase_table_size_in_bytes = 0;
 801b110:	2300      	movs	r3, #0
 801b112:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Calculate checksum.  */
        for (counter = 0; counter < temp; counter++)
 801b114:	2300      	movs	r3, #0
 801b116:	63bb      	str	r3, [r7, #56]	; 0x38
 801b118:	e00b      	b.n	801b132 <_fx_utility_exFAT_geometry_check+0x280>
        {

            /* Calculate the checksum using the algorithm specified in the specification.  */
            /* Right rotate the checksum by one bit position and add the data.  */
            calculated_checksum = ((calculated_checksum >> 1) | (calculated_checksum << 31)) + (ULONG)sector_buffer[counter];
 801b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b11c:	ea4f 0373 	mov.w	r3, r3, ror #1
 801b120:	6839      	ldr	r1, [r7, #0]
 801b122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b124:	440a      	add	r2, r1
 801b126:	7812      	ldrb	r2, [r2, #0]
 801b128:	4413      	add	r3, r2
 801b12a:	637b      	str	r3, [r7, #52]	; 0x34
        for (counter = 0; counter < temp; counter++)
 801b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b12e:	3301      	adds	r3, #1
 801b130:	63bb      	str	r3, [r7, #56]	; 0x38
 801b132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b136:	429a      	cmp	r2, r3
 801b138:	d3ef      	bcc.n	801b11a <_fx_utility_exFAT_geometry_check+0x268>
    while (upcase_table_size_in_bytes > 0)
 801b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d1be      	bne.n	801b0be <_fx_utility_exFAT_geometry_check+0x20c>
        }
    }

    /* Verify the checksum.  */
    if (calculated_checksum != upcase_table_checksum)
 801b140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b142:	6a3b      	ldr	r3, [r7, #32]
 801b144:	429a      	cmp	r2, r3
 801b146:	d001      	beq.n	801b14c <_fx_utility_exFAT_geometry_check+0x29a>
    {

        /* Checksum not correct, return error.  */
        return(FX_MEDIA_INVALID);
 801b148:	2302      	movs	r3, #2
 801b14a:	e000      	b.n	801b14e <_fx_utility_exFAT_geometry_check+0x29c>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 801b14c:	2300      	movs	r3, #0
}
 801b14e:	4618      	mov	r0, r3
 801b150:	3744      	adds	r7, #68	; 0x44
 801b152:	46bd      	mov	sp, r7
 801b154:	bd90      	pop	{r4, r7, pc}

0801b156 <_fx_utility_exFAT_name_hash_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
USHORT  _fx_utility_exFAT_name_hash_get(CHAR *name)
{
 801b156:	b590      	push	{r4, r7, lr}
 801b158:	b085      	sub	sp, #20
 801b15a:	af00      	add	r7, sp, #0
 801b15c:	6078      	str	r0, [r7, #4]

USHORT hash;


    /* Initialize hash to 0. */
    hash = 0;
 801b15e:	2300      	movs	r3, #0
 801b160:	81fb      	strh	r3, [r7, #14]

    /* Is there a name?  */
    if (!name)
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d121      	bne.n	801b1ac <_fx_utility_exFAT_name_hash_get+0x56>
    {

        /* No, just return 0.  */
        return(0);
 801b168:	2300      	movs	r3, #0
 801b16a:	e024      	b.n	801b1b6 <_fx_utility_exFAT_name_hash_get+0x60>
    /* Create hash for name.  */
    while (*name)
    {

        /* Compute hash.  */
        hash = (USHORT)(((hash >> 1) | (hash << 15)) + _fx_utility_exFAT_upcase_get((USHORT)*name));
 801b16c:	89fb      	ldrh	r3, [r7, #14]
 801b16e:	085b      	lsrs	r3, r3, #1
 801b170:	b29b      	uxth	r3, r3
 801b172:	b21a      	sxth	r2, r3
 801b174:	89fb      	ldrh	r3, [r7, #14]
 801b176:	03db      	lsls	r3, r3, #15
 801b178:	b21b      	sxth	r3, r3
 801b17a:	4313      	orrs	r3, r2
 801b17c:	b21b      	sxth	r3, r3
 801b17e:	b29c      	uxth	r4, r3
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	781b      	ldrb	r3, [r3, #0]
 801b184:	b29b      	uxth	r3, r3
 801b186:	4618      	mov	r0, r3
 801b188:	f000 f938 	bl	801b3fc <_fx_utility_exFAT_upcase_get>
 801b18c:	4603      	mov	r3, r0
 801b18e:	4423      	add	r3, r4
 801b190:	81fb      	strh	r3, [r7, #14]
        hash = (USHORT)((hash >> 1) | (hash << 15));
 801b192:	89fb      	ldrh	r3, [r7, #14]
 801b194:	085b      	lsrs	r3, r3, #1
 801b196:	b29b      	uxth	r3, r3
 801b198:	b21a      	sxth	r2, r3
 801b19a:	89fb      	ldrh	r3, [r7, #14]
 801b19c:	03db      	lsls	r3, r3, #15
 801b19e:	b21b      	sxth	r3, r3
 801b1a0:	4313      	orrs	r3, r2
 801b1a2:	b21b      	sxth	r3, r3
 801b1a4:	81fb      	strh	r3, [r7, #14]

        /* Move to next character of name.  */
        name++;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	3301      	adds	r3, #1
 801b1aa:	607b      	str	r3, [r7, #4]
    while (*name)
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	781b      	ldrb	r3, [r3, #0]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d1db      	bne.n	801b16c <_fx_utility_exFAT_name_hash_get+0x16>
    }

    /* Return the hash.  */
    return(hash);
 801b1b4:	89fb      	ldrh	r3, [r7, #14]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3714      	adds	r7, #20
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd90      	pop	{r4, r7, pc}

0801b1be <_fx_utility_exFAT_system_area_checksum_verify>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_exFAT_system_area_checksum_verify(FX_MEDIA *media_ptr, UCHAR *sector_buffer,
                                                    ULONG boot_sector_offset, ULONG *calculated_checksum)
{
 801b1be:	b580      	push	{r7, lr}
 801b1c0:	b086      	sub	sp, #24
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	60f8      	str	r0, [r7, #12]
 801b1c6:	60b9      	str	r1, [r7, #8]
 801b1c8:	607a      	str	r2, [r7, #4]
 801b1ca:	603b      	str	r3, [r7, #0]
ULONG temp;
ULONG counter;


    /* Clear the checksum for checksum calculation.  */
    *calculated_checksum =  0;
 801b1cc:	683b      	ldr	r3, [r7, #0]
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	601a      	str	r2, [r3, #0]

    /* Prepare driver request.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    media_ptr -> fx_media_driver_buffer  =          sector_buffer;
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	68ba      	ldr	r2, [r7, #8]
 801b1de:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    media_ptr -> fx_media_driver_sectors =          1;
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
    media_ptr -> fx_media_driver_status         =   FX_IO_ERROR;
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	2290      	movs	r2, #144	; 0x90
 801b1ee:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    media_ptr -> fx_media_driver_logical_sector =   boot_sector_offset;
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	687a      	ldr	r2, [r7, #4]
 801b1f6:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

    /* Call driver.  */
    (media_ptr -> fx_media_driver_entry)(media_ptr);
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801b200:	68f8      	ldr	r0, [r7, #12]
 801b202:	4798      	blx	r3

    /* Check driver status.  */
    if (FX_SUCCESS != media_ptr -> fx_media_driver_status)
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d003      	beq.n	801b216 <_fx_utility_exFAT_system_area_checksum_verify+0x58>
    {

        /* Error, return error status.  */
        return(media_ptr -> fx_media_driver_status);
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b214:	e0a6      	b.n	801b364 <_fx_utility_exFAT_system_area_checksum_verify+0x1a6>
    }

    /* Loop to calculate Boot Sector checksum.  */
    for (temp = 0; temp < media_ptr -> fx_media_bytes_per_sector; temp++)
 801b216:	2300      	movs	r3, #0
 801b218:	617b      	str	r3, [r7, #20]
 801b21a:	e018      	b.n	801b24e <_fx_utility_exFAT_system_area_checksum_verify+0x90>
    {

        /* Check if it is VolumeFlags or PercentInUse.  */
        if ((FX_EF_VOLUME_FLAGS     == temp) ||
 801b21c:	697b      	ldr	r3, [r7, #20]
 801b21e:	2b6a      	cmp	r3, #106	; 0x6a
 801b220:	d011      	beq.n	801b246 <_fx_utility_exFAT_system_area_checksum_verify+0x88>
 801b222:	697b      	ldr	r3, [r7, #20]
 801b224:	2b6b      	cmp	r3, #107	; 0x6b
 801b226:	d00e      	beq.n	801b246 <_fx_utility_exFAT_system_area_checksum_verify+0x88>
            (FX_EF_VOLUME_FLAGS + 1 == temp) ||
 801b228:	697b      	ldr	r3, [r7, #20]
 801b22a:	2b70      	cmp	r3, #112	; 0x70
 801b22c:	d00b      	beq.n	801b246 <_fx_utility_exFAT_system_area_checksum_verify+0x88>
            continue;
        }

        /* Calculate the checksum using the algorithm specified in the specification.  */
        /* Right rotate the checksum by one bit position and add the data.  */
        *calculated_checksum = ((*calculated_checksum >> 1) | (*calculated_checksum << 31)) + (ULONG)sector_buffer[temp];
 801b22e:	683b      	ldr	r3, [r7, #0]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	ea4f 0373 	mov.w	r3, r3, ror #1
 801b236:	68b9      	ldr	r1, [r7, #8]
 801b238:	697a      	ldr	r2, [r7, #20]
 801b23a:	440a      	add	r2, r1
 801b23c:	7812      	ldrb	r2, [r2, #0]
 801b23e:	441a      	add	r2, r3
 801b240:	683b      	ldr	r3, [r7, #0]
 801b242:	601a      	str	r2, [r3, #0]
 801b244:	e000      	b.n	801b248 <_fx_utility_exFAT_system_area_checksum_verify+0x8a>
            continue;
 801b246:	bf00      	nop
    for (temp = 0; temp < media_ptr -> fx_media_bytes_per_sector; temp++)
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	3301      	adds	r3, #1
 801b24c:	617b      	str	r3, [r7, #20]
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b252:	697a      	ldr	r2, [r7, #20]
 801b254:	429a      	cmp	r2, r3
 801b256:	d3e1      	bcc.n	801b21c <_fx_utility_exFAT_system_area_checksum_verify+0x5e>
    }

    /* Map to Extended boot Sector.  */
    media_ptr -> fx_media_driver_logical_sector++;
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 801b25e:	1c5a      	adds	r2, r3, #1
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

    /* Read System Area from Extended Boot Sector
       and calculate checksum.  */
    for (temp = FX_EXFAT_FAT_EXT_BOOT_SECTOR_OFFSET; FX_EXFAT_FAT_CHECK_SUM_OFFSET > temp; temp++)
 801b266:	2301      	movs	r3, #1
 801b268:	617b      	str	r3, [r7, #20]
 801b26a:	e04c      	b.n	801b306 <_fx_utility_exFAT_system_area_checksum_verify+0x148>
    {

        /* Build driver request.  */
        media_ptr -> fx_media_driver_status = FX_IO_ERROR;
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	2290      	movs	r2, #144	; 0x90
 801b270:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

        /* Read next sector.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801b27a:	68f8      	ldr	r0, [r7, #12]
 801b27c:	4798      	blx	r3

        /* Check status.  */
        if (FX_SUCCESS != media_ptr -> fx_media_driver_status)
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b284:	2b00      	cmp	r3, #0
 801b286:	d006      	beq.n	801b296 <_fx_utility_exFAT_system_area_checksum_verify+0xd8>
        {

            /* Clear checksum.  */
            *calculated_checksum = 0;
 801b288:	683b      	ldr	r3, [r7, #0]
 801b28a:	2200      	movs	r2, #0
 801b28c:	601a      	str	r2, [r3, #0]

            /* Error, return error status.  */
            return(media_ptr -> fx_media_driver_status);
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b294:	e066      	b.n	801b364 <_fx_utility_exFAT_system_area_checksum_verify+0x1a6>
        }

        /* Move to next logical sector.  */
        media_ptr -> fx_media_driver_logical_sector++;
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 801b29c:	1c5a      	adds	r2, r3, #1
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

        /* Check Sector Signature.  */
        if (((sector_buffer[media_ptr -> fx_media_bytes_per_sector - 2] != FX_SIG_BYTE_1) ||
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2a8:	3b02      	subs	r3, #2
 801b2aa:	68ba      	ldr	r2, [r7, #8]
 801b2ac:	4413      	add	r3, r2
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	2b55      	cmp	r3, #85	; 0x55
 801b2b2:	d107      	bne.n	801b2c4 <_fx_utility_exFAT_system_area_checksum_verify+0x106>
             (sector_buffer[media_ptr -> fx_media_bytes_per_sector - 1] != FX_SIG_BYTE_2)) &&
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2b8:	3b01      	subs	r3, #1
 801b2ba:	68ba      	ldr	r2, [r7, #8]
 801b2bc:	4413      	add	r3, r2
 801b2be:	781b      	ldrb	r3, [r3, #0]
        if (((sector_buffer[media_ptr -> fx_media_bytes_per_sector - 2] != FX_SIG_BYTE_1) ||
 801b2c0:	2baa      	cmp	r3, #170	; 0xaa
 801b2c2:	d007      	beq.n	801b2d4 <_fx_utility_exFAT_system_area_checksum_verify+0x116>
             (sector_buffer[media_ptr -> fx_media_bytes_per_sector - 1] != FX_SIG_BYTE_2)) &&
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	2b08      	cmp	r3, #8
 801b2c8:	d804      	bhi.n	801b2d4 <_fx_utility_exFAT_system_area_checksum_verify+0x116>
            (FX_EXFAT_FAT_OEM_PARAM_OFFSET > temp))
        {

            /* Clear checksum.  */
            *calculated_checksum =  0;
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	601a      	str	r2, [r3, #0]

            /* Error, return error status.  */
            return(FX_MEDIA_INVALID);
 801b2d0:	2302      	movs	r3, #2
 801b2d2:	e047      	b.n	801b364 <_fx_utility_exFAT_system_area_checksum_verify+0x1a6>
        }

        /* Loop to calculate the checksum.  */
        for (counter = 0; counter < media_ptr -> fx_media_bytes_per_sector; counter++)
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	613b      	str	r3, [r7, #16]
 801b2d8:	e00d      	b.n	801b2f6 <_fx_utility_exFAT_system_area_checksum_verify+0x138>
        {

            /* Calculate the checksum using the algorithm specified in the specification.  */
            /* Right rotate the checksum by one bit position and add the data.  */
            *calculated_checksum = ((*calculated_checksum >> 1) | (*calculated_checksum << 31)) + (ULONG)sector_buffer[counter];
 801b2da:	683b      	ldr	r3, [r7, #0]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	ea4f 0373 	mov.w	r3, r3, ror #1
 801b2e2:	68b9      	ldr	r1, [r7, #8]
 801b2e4:	693a      	ldr	r2, [r7, #16]
 801b2e6:	440a      	add	r2, r1
 801b2e8:	7812      	ldrb	r2, [r2, #0]
 801b2ea:	441a      	add	r2, r3
 801b2ec:	683b      	ldr	r3, [r7, #0]
 801b2ee:	601a      	str	r2, [r3, #0]
        for (counter = 0; counter < media_ptr -> fx_media_bytes_per_sector; counter++)
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	3301      	adds	r3, #1
 801b2f4:	613b      	str	r3, [r7, #16]
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2fa:	693a      	ldr	r2, [r7, #16]
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d3ec      	bcc.n	801b2da <_fx_utility_exFAT_system_area_checksum_verify+0x11c>
    for (temp = FX_EXFAT_FAT_EXT_BOOT_SECTOR_OFFSET; FX_EXFAT_FAT_CHECK_SUM_OFFSET > temp; temp++)
 801b300:	697b      	ldr	r3, [r7, #20]
 801b302:	3301      	adds	r3, #1
 801b304:	617b      	str	r3, [r7, #20]
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	2b0a      	cmp	r3, #10
 801b30a:	d9af      	bls.n	801b26c <_fx_utility_exFAT_system_area_checksum_verify+0xae>
        }
    }

    /* Build driver request.  */
    media_ptr -> fx_media_driver_status = FX_IO_ERROR;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2290      	movs	r2, #144	; 0x90
 801b310:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

    /* Read stored checksum.  */
    (media_ptr -> fx_media_driver_entry)(media_ptr);
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801b31a:	68f8      	ldr	r0, [r7, #12]
 801b31c:	4798      	blx	r3

    /* Determine if the read was successful.  */
    if (FX_SUCCESS != media_ptr -> fx_media_driver_status)
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b324:	2b00      	cmp	r3, #0
 801b326:	d003      	beq.n	801b330 <_fx_utility_exFAT_system_area_checksum_verify+0x172>
    {

        /* Not successful, return error status.  */
        return(media_ptr -> fx_media_driver_status);
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801b32e:	e019      	b.n	801b364 <_fx_utility_exFAT_system_area_checksum_verify+0x1a6>
    }

    /* Loop to check sector content.  */
    for (counter = 0; counter < media_ptr -> fx_media_bytes_per_sector; counter += sizeof(ULONG))
 801b330:	2300      	movs	r3, #0
 801b332:	613b      	str	r3, [r7, #16]
 801b334:	e010      	b.n	801b358 <_fx_utility_exFAT_system_area_checksum_verify+0x19a>
    {

        /* Read a 32 bit value from sector buffer.  */
        temp = _fx_utility_32_unsigned_read(&sector_buffer[counter]);
 801b336:	68ba      	ldr	r2, [r7, #8]
 801b338:	693b      	ldr	r3, [r7, #16]
 801b33a:	4413      	add	r3, r2
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7fe f967 	bl	8019610 <_fx_utility_32_unsigned_read>
 801b342:	6178      	str	r0, [r7, #20]

        /* Compare the read value with the caclulated checksum.  */
        if (temp != *calculated_checksum)
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	697a      	ldr	r2, [r7, #20]
 801b34a:	429a      	cmp	r2, r3
 801b34c:	d001      	beq.n	801b352 <_fx_utility_exFAT_system_area_checksum_verify+0x194>
        {

            /* Not equal, checksum verify failed.  */
            return(FX_MEDIA_INVALID);
 801b34e:	2302      	movs	r3, #2
 801b350:	e008      	b.n	801b364 <_fx_utility_exFAT_system_area_checksum_verify+0x1a6>
    for (counter = 0; counter < media_ptr -> fx_media_bytes_per_sector; counter += sizeof(ULONG))
 801b352:	693b      	ldr	r3, [r7, #16]
 801b354:	3304      	adds	r3, #4
 801b356:	613b      	str	r3, [r7, #16]
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b35c:	693a      	ldr	r2, [r7, #16]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d3e9      	bcc.n	801b336 <_fx_utility_exFAT_system_area_checksum_verify+0x178>
        }
    }

    /* Return success.  */
    return(FX_SUCCESS);
 801b362:	2300      	movs	r3, #0
}
 801b364:	4618      	mov	r0, r3
 801b366:	3718      	adds	r7, #24
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}

0801b36c <_fx_utility_exFAT_unicode_name_hash_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
USHORT  _fx_utility_exFAT_unicode_name_hash_get(CHAR *unicode_name, ULONG unicode_length)
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	b084      	sub	sp, #16
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	6039      	str	r1, [r7, #0]

USHORT hash;
USHORT upcased_char;

    /* Initialize hash to 0. */
    hash = 0;
 801b376:	2300      	movs	r3, #0
 801b378:	81fb      	strh	r3, [r7, #14]

    /* Is there a name?  */
    if (!unicode_name)
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d135      	bne.n	801b3ec <_fx_utility_exFAT_unicode_name_hash_get+0x80>
    {

        /* No, just return 0.  */
        return(0);
 801b380:	2300      	movs	r3, #0
 801b382:	e037      	b.n	801b3f4 <_fx_utility_exFAT_unicode_name_hash_get+0x88>
    /* Create hash for name.  */
    while (unicode_length)
    {

        /* Get up-cased character.  */
        upcased_char = (USHORT)(_fx_utility_exFAT_upcase_get((USHORT)(*unicode_name | (*(unicode_name + 1) << 8))));
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	781b      	ldrb	r3, [r3, #0]
 801b388:	b21a      	sxth	r2, r3
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	3301      	adds	r3, #1
 801b38e:	781b      	ldrb	r3, [r3, #0]
 801b390:	021b      	lsls	r3, r3, #8
 801b392:	b21b      	sxth	r3, r3
 801b394:	4313      	orrs	r3, r2
 801b396:	b21b      	sxth	r3, r3
 801b398:	b29b      	uxth	r3, r3
 801b39a:	4618      	mov	r0, r3
 801b39c:	f000 f82e 	bl	801b3fc <_fx_utility_exFAT_upcase_get>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	81bb      	strh	r3, [r7, #12]

        /* Compute hash.  */
        hash = (USHORT)(((hash >> 1) | (hash << 15)) + (upcased_char & 0xFF));
 801b3a4:	89fb      	ldrh	r3, [r7, #14]
 801b3a6:	085b      	lsrs	r3, r3, #1
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	b21a      	sxth	r2, r3
 801b3ac:	89fb      	ldrh	r3, [r7, #14]
 801b3ae:	03db      	lsls	r3, r3, #15
 801b3b0:	b21b      	sxth	r3, r3
 801b3b2:	4313      	orrs	r3, r2
 801b3b4:	b21b      	sxth	r3, r3
 801b3b6:	b29a      	uxth	r2, r3
 801b3b8:	89bb      	ldrh	r3, [r7, #12]
 801b3ba:	b2db      	uxtb	r3, r3
 801b3bc:	b29b      	uxth	r3, r3
 801b3be:	4413      	add	r3, r2
 801b3c0:	81fb      	strh	r3, [r7, #14]
        hash = (USHORT)(((hash >> 1) | (hash << 15)) + (upcased_char >> 8));
 801b3c2:	89fb      	ldrh	r3, [r7, #14]
 801b3c4:	085b      	lsrs	r3, r3, #1
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	b21a      	sxth	r2, r3
 801b3ca:	89fb      	ldrh	r3, [r7, #14]
 801b3cc:	03db      	lsls	r3, r3, #15
 801b3ce:	b21b      	sxth	r3, r3
 801b3d0:	4313      	orrs	r3, r2
 801b3d2:	b21b      	sxth	r3, r3
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	89bb      	ldrh	r3, [r7, #12]
 801b3d8:	0a1b      	lsrs	r3, r3, #8
 801b3da:	b29b      	uxth	r3, r3
 801b3dc:	4413      	add	r3, r2
 801b3de:	81fb      	strh	r3, [r7, #14]

        /* Move to next character of the Unicode name.  */
        unicode_name = unicode_name + 2;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	3302      	adds	r3, #2
 801b3e4:	607b      	str	r3, [r7, #4]

        /* Decrement length.  */
        unicode_length--;
 801b3e6:	683b      	ldr	r3, [r7, #0]
 801b3e8:	3b01      	subs	r3, #1
 801b3ea:	603b      	str	r3, [r7, #0]
    while (unicode_length)
 801b3ec:	683b      	ldr	r3, [r7, #0]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d1c8      	bne.n	801b384 <_fx_utility_exFAT_unicode_name_hash_get+0x18>
    }

    /* Return the hash.  */
    return(hash);
 801b3f2:	89fb      	ldrh	r3, [r7, #14]
}
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	3710      	adds	r7, #16
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd80      	pop	{r7, pc}

0801b3fc <_fx_utility_exFAT_upcase_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
USHORT _fx_utility_exFAT_upcase_get(USHORT character)
{
 801b3fc:	b480      	push	{r7}
 801b3fe:	b085      	sub	sp, #20
 801b400:	af00      	add	r7, sp, #0
 801b402:	4603      	mov	r3, r0
 801b404:	80fb      	strh	r3, [r7, #6]

UINT i;


    /* Loop to find if the character is in the range of the differential table.  */
    for (i = 0; i < sizeof(diff_table_range_low) / sizeof(USHORT); i++)
 801b406:	2300      	movs	r3, #0
 801b408:	60fb      	str	r3, [r7, #12]
 801b40a:	e020      	b.n	801b44e <_fx_utility_exFAT_upcase_get+0x52>
    {

        /* Check the range.  */
        if (character >= diff_table_range_low[i] && character <= diff_table_range_high[i])
 801b40c:	4a15      	ldr	r2, [pc, #84]	; (801b464 <_fx_utility_exFAT_upcase_get+0x68>)
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b414:	88fa      	ldrh	r2, [r7, #6]
 801b416:	429a      	cmp	r2, r3
 801b418:	d316      	bcc.n	801b448 <_fx_utility_exFAT_upcase_get+0x4c>
 801b41a:	4a13      	ldr	r2, [pc, #76]	; (801b468 <_fx_utility_exFAT_upcase_get+0x6c>)
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b422:	88fa      	ldrh	r2, [r7, #6]
 801b424:	429a      	cmp	r2, r3
 801b426:	d80f      	bhi.n	801b448 <_fx_utility_exFAT_upcase_get+0x4c>
        {

            /* Return the character from table.  */
            return(_fx_utility_exFAT_upcase_table_differential[diff_table_offset[i] + character - diff_table_range_low[i]]);
 801b428:	4a10      	ldr	r2, [pc, #64]	; (801b46c <_fx_utility_exFAT_upcase_get+0x70>)
 801b42a:	68fb      	ldr	r3, [r7, #12]
 801b42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b430:	461a      	mov	r2, r3
 801b432:	88fb      	ldrh	r3, [r7, #6]
 801b434:	4413      	add	r3, r2
 801b436:	490b      	ldr	r1, [pc, #44]	; (801b464 <_fx_utility_exFAT_upcase_get+0x68>)
 801b438:	68fa      	ldr	r2, [r7, #12]
 801b43a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801b43e:	1a9b      	subs	r3, r3, r2
 801b440:	4a0b      	ldr	r2, [pc, #44]	; (801b470 <_fx_utility_exFAT_upcase_get+0x74>)
 801b442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b446:	e006      	b.n	801b456 <_fx_utility_exFAT_upcase_get+0x5a>
    for (i = 0; i < sizeof(diff_table_range_low) / sizeof(USHORT); i++)
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	3301      	adds	r3, #1
 801b44c:	60fb      	str	r3, [r7, #12]
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	2b0c      	cmp	r3, #12
 801b452:	d9db      	bls.n	801b40c <_fx_utility_exFAT_upcase_get+0x10>
        }
    }

    /* Lower case and upper case are the same, return directly.  */
    return(character);
 801b454:	88fb      	ldrh	r3, [r7, #6]
}
 801b456:	4618      	mov	r0, r3
 801b458:	3714      	adds	r7, #20
 801b45a:	46bd      	mov	sp, r7
 801b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b460:	4770      	bx	lr
 801b462:	bf00      	nop
 801b464:	08023970 	.word	0x08023970
 801b468:	0802398c 	.word	0x0802398c
 801b46c:	080239a8 	.word	0x080239a8
 801b470:	08022b90 	.word	0x08022b90

0801b474 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 801b474:	b480      	push	{r7}
 801b476:	b08f      	sub	sp, #60	; 0x3c
 801b478:	af00      	add	r7, sp, #0
 801b47a:	60f8      	str	r0, [r7, #12]
 801b47c:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	691b      	ldr	r3, [r3, #16]
 801b484:	2b00      	cmp	r3, #0
 801b486:	f000 8276 	beq.w	801b976 <_fx_utility_logical_sector_cache_entry_read+0x502>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801b48a:	683a      	ldr	r2, [r7, #0]
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801b492:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 801b496:	4013      	ands	r3, r2
 801b498:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	6a1a      	ldr	r2, [r3, #32]
 801b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4a0:	f003 031f 	and.w	r3, r3, #31
 801b4a4:	2101      	movs	r1, #1
 801b4a6:	fa01 f303 	lsl.w	r3, r1, r3
 801b4aa:	431a      	orrs	r2, r3
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 801b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4b2:	009b      	lsls	r3, r3, #2
 801b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801b4b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	005b      	lsls	r3, r3, #1
 801b4bc:	4413      	add	r3, r2
 801b4be:	00db      	lsls	r3, r3, #3
 801b4c0:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 801b4c4:	3328      	adds	r3, #40	; 0x28
 801b4c6:	68fa      	ldr	r2, [r7, #12]
 801b4c8:	4413      	add	r3, r2
 801b4ca:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4ce:	7c5b      	ldrb	r3, [r3, #17]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d015      	beq.n	801b500 <_fx_utility_logical_sector_cache_entry_read+0x8c>
 801b4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b4da:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b4de:	4299      	cmp	r1, r3
 801b4e0:	bf08      	it	eq
 801b4e2:	4290      	cmpeq	r0, r2
 801b4e4:	d10c      	bne.n	801b500 <_fx_utility_logical_sector_cache_entry_read+0x8c>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801b4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4e8:	681a      	ldr	r2, [r3, #0]
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 801b4f4:	1c5a      	adds	r2, r3, #1
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801b4fc:	2300      	movs	r3, #0
 801b4fe:	e27e      	b.n	801b9fe <_fx_utility_logical_sector_cache_entry_read+0x58a>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 801b500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b502:	3318      	adds	r3, #24
 801b504:	7c5b      	ldrb	r3, [r3, #17]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d060      	beq.n	801b5cc <_fx_utility_logical_sector_cache_entry_read+0x158>
 801b50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b50c:	3318      	adds	r3, #24
 801b50e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b512:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b516:	4299      	cmp	r1, r3
 801b518:	bf08      	it	eq
 801b51a:	4290      	cmpeq	r0, r2
 801b51c:	d156      	bne.n	801b5cc <_fx_utility_logical_sector_cache_entry_read+0x158>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b520:	3318      	adds	r3, #24
 801b522:	681a      	ldr	r2, [r3, #0]
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 801b52e:	1c5a      	adds	r2, r3, #1
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801b53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b53e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b542:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b548:	7c1b      	ldrb	r3, [r3, #16]
 801b54a:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b550:	7c5b      	ldrb	r3, [r3, #17]
 801b552:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b558:	7c9b      	ldrb	r3, [r3, #18]
 801b55a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801b55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b560:	3318      	adds	r3, #24
 801b562:	681a      	ldr	r2, [r3, #0]
 801b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b566:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801b568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b56a:	3318      	adds	r3, #24
 801b56c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b572:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b578:	3318      	adds	r3, #24
 801b57a:	7c1a      	ldrb	r2, [r3, #16]
 801b57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b57e:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 801b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b582:	3318      	adds	r3, #24
 801b584:	7c5a      	ldrb	r2, [r3, #17]
 801b586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b588:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 801b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b58c:	3318      	adds	r3, #24
 801b58e:	7c9a      	ldrb	r2, [r3, #18]
 801b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b592:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801b594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b596:	3318      	adds	r3, #24
 801b598:	693a      	ldr	r2, [r7, #16]
 801b59a:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b59e:	f103 0118 	add.w	r1, r3, #24
 801b5a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b5a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801b5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5ac:	3318      	adds	r3, #24
 801b5ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 801b5b2:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5b6:	3318      	adds	r3, #24
 801b5b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801b5bc:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5c0:	3318      	adds	r3, #24
 801b5c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801b5c6:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	e218      	b.n	801b9fe <_fx_utility_logical_sector_cache_entry_read+0x58a>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 801b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5ce:	3330      	adds	r3, #48	; 0x30
 801b5d0:	7c5b      	ldrb	r3, [r3, #17]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	f000 8086 	beq.w	801b6e4 <_fx_utility_logical_sector_cache_entry_read+0x270>
 801b5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5da:	3330      	adds	r3, #48	; 0x30
 801b5dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b5e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b5e4:	4299      	cmp	r1, r3
 801b5e6:	bf08      	it	eq
 801b5e8:	4290      	cmpeq	r0, r2
 801b5ea:	d17b      	bne.n	801b6e4 <_fx_utility_logical_sector_cache_entry_read+0x270>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5ee:	3330      	adds	r3, #48	; 0x30
 801b5f0:	681a      	ldr	r2, [r3, #0]
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 801b5fc:	1c5a      	adds	r2, r3, #1
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801b604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b60c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b610:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801b614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b616:	7c1b      	ldrb	r3, [r3, #16]
 801b618:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b61e:	7c5b      	ldrb	r3, [r3, #17]
 801b620:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801b624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b626:	7c9b      	ldrb	r3, [r3, #18]
 801b628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b62e:	3330      	adds	r3, #48	; 0x30
 801b630:	681a      	ldr	r2, [r3, #0]
 801b632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b634:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 801b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b638:	3330      	adds	r3, #48	; 0x30
 801b63a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b63e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b640:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801b644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b646:	3330      	adds	r3, #48	; 0x30
 801b648:	7c1a      	ldrb	r2, [r3, #16]
 801b64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b64c:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 801b64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b650:	3330      	adds	r3, #48	; 0x30
 801b652:	7c5a      	ldrb	r2, [r3, #17]
 801b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b656:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 801b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b65a:	3330      	adds	r3, #48	; 0x30
 801b65c:	7c9a      	ldrb	r2, [r3, #18]
 801b65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b660:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801b662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b664:	f103 0218 	add.w	r2, r3, #24
 801b668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b66a:	3330      	adds	r3, #48	; 0x30
 801b66c:	6812      	ldr	r2, [r2, #0]
 801b66e:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801b670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b672:	3318      	adds	r3, #24
 801b674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b676:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801b67a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b67e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801b682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b684:	f103 0218 	add.w	r2, r3, #24
 801b688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b68a:	3330      	adds	r3, #48	; 0x30
 801b68c:	7c12      	ldrb	r2, [r2, #16]
 801b68e:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801b690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b692:	f103 0218 	add.w	r2, r3, #24
 801b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b698:	3330      	adds	r3, #48	; 0x30
 801b69a:	7c52      	ldrb	r2, [r2, #17]
 801b69c:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6a0:	f103 0218 	add.w	r2, r3, #24
 801b6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6a6:	3330      	adds	r3, #48	; 0x30
 801b6a8:	7c92      	ldrb	r2, [r2, #18]
 801b6aa:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801b6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ae:	3318      	adds	r3, #24
 801b6b0:	693a      	ldr	r2, [r7, #16]
 801b6b2:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801b6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6b6:	f103 0118 	add.w	r1, r3, #24
 801b6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b6be:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6c4:	3318      	adds	r3, #24
 801b6c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 801b6ca:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801b6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ce:	3318      	adds	r3, #24
 801b6d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801b6d4:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801b6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6d8:	3318      	adds	r3, #24
 801b6da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801b6de:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	e18c      	b.n	801b9fe <_fx_utility_logical_sector_cache_entry_read+0x58a>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801b6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6e6:	3348      	adds	r3, #72	; 0x48
 801b6e8:	7c5b      	ldrb	r3, [r3, #17]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	f000 80ac 	beq.w	801b848 <_fx_utility_logical_sector_cache_entry_read+0x3d4>
 801b6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6f2:	3348      	adds	r3, #72	; 0x48
 801b6f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b6f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b6fc:	4299      	cmp	r1, r3
 801b6fe:	bf08      	it	eq
 801b700:	4290      	cmpeq	r0, r2
 801b702:	f040 80a1 	bne.w	801b848 <_fx_utility_logical_sector_cache_entry_read+0x3d4>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801b706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b708:	3348      	adds	r3, #72	; 0x48
 801b70a:	681a      	ldr	r2, [r3, #0]
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 801b716:	1c5a      	adds	r2, r3, #1
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801b724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b726:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b72a:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b730:	7c1b      	ldrb	r3, [r3, #16]
 801b732:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b738:	7c5b      	ldrb	r3, [r3, #17]
 801b73a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b740:	7c9b      	ldrb	r3, [r3, #18]
 801b742:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b748:	3348      	adds	r3, #72	; 0x48
 801b74a:	681a      	ldr	r2, [r3, #0]
 801b74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b74e:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 801b750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b752:	3348      	adds	r3, #72	; 0x48
 801b754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b75a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 801b75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b760:	3348      	adds	r3, #72	; 0x48
 801b762:	7c1a      	ldrb	r2, [r3, #16]
 801b764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b766:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801b768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b76a:	3348      	adds	r3, #72	; 0x48
 801b76c:	7c5a      	ldrb	r2, [r3, #17]
 801b76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b770:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 801b772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b774:	3348      	adds	r3, #72	; 0x48
 801b776:	7c9a      	ldrb	r2, [r3, #18]
 801b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b77a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801b77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b77e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b784:	3348      	adds	r3, #72	; 0x48
 801b786:	6812      	ldr	r2, [r2, #0]
 801b788:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b78c:	3330      	adds	r3, #48	; 0x30
 801b78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b790:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801b794:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b798:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801b79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b79e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7a4:	3348      	adds	r3, #72	; 0x48
 801b7a6:	7c12      	ldrb	r2, [r2, #16]
 801b7a8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801b7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7b2:	3348      	adds	r3, #72	; 0x48
 801b7b4:	7c52      	ldrb	r2, [r2, #17]
 801b7b6:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7c0:	3348      	adds	r3, #72	; 0x48
 801b7c2:	7c92      	ldrb	r2, [r2, #18]
 801b7c4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801b7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7c8:	f103 0218 	add.w	r2, r3, #24
 801b7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ce:	3330      	adds	r3, #48	; 0x30
 801b7d0:	6812      	ldr	r2, [r2, #0]
 801b7d2:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7d6:	3318      	adds	r3, #24
 801b7d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b7da:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801b7de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b7e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7e8:	f103 0218 	add.w	r2, r3, #24
 801b7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ee:	3330      	adds	r3, #48	; 0x30
 801b7f0:	7c12      	ldrb	r2, [r2, #16]
 801b7f2:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801b7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7f6:	f103 0218 	add.w	r2, r3, #24
 801b7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7fc:	3330      	adds	r3, #48	; 0x30
 801b7fe:	7c52      	ldrb	r2, [r2, #17]
 801b800:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801b802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b804:	f103 0218 	add.w	r2, r3, #24
 801b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b80a:	3330      	adds	r3, #48	; 0x30
 801b80c:	7c92      	ldrb	r2, [r2, #18]
 801b80e:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801b810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b812:	3318      	adds	r3, #24
 801b814:	693a      	ldr	r2, [r7, #16]
 801b816:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801b818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b81a:	f103 0118 	add.w	r1, r3, #24
 801b81e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b822:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b828:	3318      	adds	r3, #24
 801b82a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801b82e:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801b830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b832:	3318      	adds	r3, #24
 801b834:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801b838:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801b83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b83c:	3318      	adds	r3, #24
 801b83e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801b842:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801b844:	2300      	movs	r3, #0
 801b846:	e0da      	b.n	801b9fe <_fx_utility_logical_sector_cache_entry_read+0x58a>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801b848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b84a:	3348      	adds	r3, #72	; 0x48
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 801b850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b852:	3348      	adds	r3, #72	; 0x48
 801b854:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b858:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 801b85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b85e:	3348      	adds	r3, #72	; 0x48
 801b860:	7c1b      	ldrb	r3, [r3, #16]
 801b862:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 801b866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b868:	3348      	adds	r3, #72	; 0x48
 801b86a:	7c5b      	ldrb	r3, [r3, #17]
 801b86c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 801b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b872:	3348      	adds	r3, #72	; 0x48
 801b874:	7c9b      	ldrb	r3, [r3, #18]
 801b876:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b87c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b882:	3348      	adds	r3, #72	; 0x48
 801b884:	6812      	ldr	r2, [r2, #0]
 801b886:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801b888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b88a:	3330      	adds	r3, #48	; 0x30
 801b88c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b88e:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801b892:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b896:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b89c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8a2:	3348      	adds	r3, #72	; 0x48
 801b8a4:	7c12      	ldrb	r2, [r2, #16]
 801b8a6:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8b0:	3348      	adds	r3, #72	; 0x48
 801b8b2:	7c52      	ldrb	r2, [r2, #17]
 801b8b4:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8be:	3348      	adds	r3, #72	; 0x48
 801b8c0:	7c92      	ldrb	r2, [r2, #18]
 801b8c2:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801b8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8c6:	f103 0218 	add.w	r2, r3, #24
 801b8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8cc:	3330      	adds	r3, #48	; 0x30
 801b8ce:	6812      	ldr	r2, [r2, #0]
 801b8d0:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8d4:	3318      	adds	r3, #24
 801b8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b8d8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801b8dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b8e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801b8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8e6:	f103 0218 	add.w	r2, r3, #24
 801b8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8ec:	3330      	adds	r3, #48	; 0x30
 801b8ee:	7c12      	ldrb	r2, [r2, #16]
 801b8f0:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801b8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8f4:	f103 0218 	add.w	r2, r3, #24
 801b8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8fa:	3330      	adds	r3, #48	; 0x30
 801b8fc:	7c52      	ldrb	r2, [r2, #17]
 801b8fe:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801b900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b902:	f103 0218 	add.w	r2, r3, #24
 801b906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b908:	3330      	adds	r3, #48	; 0x30
 801b90a:	7c92      	ldrb	r2, [r2, #18]
 801b90c:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 801b90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b910:	3318      	adds	r3, #24
 801b912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b914:	6812      	ldr	r2, [r2, #0]
 801b916:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 801b918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b91a:	f103 0118 	add.w	r1, r3, #24
 801b91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b920:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b924:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 801b928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b92a:	3318      	adds	r3, #24
 801b92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b92e:	7c12      	ldrb	r2, [r2, #16]
 801b930:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 801b932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b934:	3318      	adds	r3, #24
 801b936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b938:	7c52      	ldrb	r2, [r2, #17]
 801b93a:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 801b93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b93e:	3318      	adds	r3, #24
 801b940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b942:	7c92      	ldrb	r2, [r2, #18]
 801b944:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 801b946:	693a      	ldr	r2, [r7, #16]
 801b948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b94a:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 801b94c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b952:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 801b956:	f897 2020 	ldrb.w	r2, [r7, #32]
 801b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b95c:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 801b95e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801b962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b964:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 801b966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b96c:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 801b96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b970:	2200      	movs	r2, #0
 801b972:	601a      	str	r2, [r3, #0]
 801b974:	e042      	b.n	801b9fc <_fx_utility_logical_sector_cache_entry_read+0x588>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	695b      	ldr	r3, [r3, #20]
 801b97a:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	69db      	ldr	r3, [r3, #28]
 801b980:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 801b982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b984:	2200      	movs	r2, #0
 801b986:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 801b988:	e033      	b.n	801b9f2 <_fx_utility_logical_sector_cache_entry_read+0x57e>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801b98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b98c:	7c5b      	ldrb	r3, [r3, #17]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d025      	beq.n	801b9de <_fx_utility_logical_sector_cache_entry_read+0x56a>
 801b992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b994:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b998:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b99c:	4299      	cmp	r1, r3
 801b99e:	bf08      	it	eq
 801b9a0:	4290      	cmpeq	r0, r2
 801b9a2:	d11c      	bne.n	801b9de <_fx_utility_logical_sector_cache_entry_read+0x56a>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801b9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9a6:	681a      	ldr	r2, [r3, #0]
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 801b9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d00b      	beq.n	801b9cc <_fx_utility_logical_sector_cache_entry_read+0x558>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801b9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b9b6:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801b9b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b9ba:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801b9bc:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9c4:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b9ca:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 801b9d2:	1c5a      	adds	r2, r3, #1
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 801b9da:	2300      	movs	r3, #0
 801b9dc:	e00f      	b.n	801b9fe <_fx_utility_logical_sector_cache_entry_read+0x58a>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 801b9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9e0:	695b      	ldr	r3, [r3, #20]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d005      	beq.n	801b9f2 <_fx_utility_logical_sector_cache_entry_read+0x57e>
            {

                *previous_cache_entry =  cache_entry;
 801b9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b9ea:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 801b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ee:	695b      	ldr	r3, [r3, #20]
 801b9f0:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 801b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9f4:	1e5a      	subs	r2, r3, #1
 801b9f6:	633a      	str	r2, [r7, #48]	; 0x30
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d1c6      	bne.n	801b98a <_fx_utility_logical_sector_cache_entry_read+0x516>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 801b9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 801b9fe:	4618      	mov	r0, r3
 801ba00:	373c      	adds	r7, #60	; 0x3c
 801ba02:	46bd      	mov	sp, r7
 801ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba08:	4770      	bx	lr

0801ba0a <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 801ba0a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ba0e:	b094      	sub	sp, #80	; 0x50
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	61f8      	str	r0, [r7, #28]
 801ba14:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 801ba18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ba1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ba20:	1884      	adds	r4, r0, r2
 801ba22:	eb41 0503 	adc.w	r5, r1, r3
 801ba26:	1e63      	subs	r3, r4, #1
 801ba28:	60bb      	str	r3, [r7, #8]
 801ba2a:	f145 33ff 	adc.w	r3, r5, #4294967295
 801ba2e:	60fb      	str	r3, [r7, #12]
 801ba30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ba34:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 801ba38:	69fb      	ldr	r3, [r7, #28]
 801ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba3c:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 801ba3e:	69fb      	ldr	r3, [r7, #28]
 801ba40:	691b      	ldr	r3, [r3, #16]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	f040 80b4 	bne.w	801bbb0 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801ba48:	69fb      	ldr	r3, [r7, #28]
 801ba4a:	695b      	ldr	r3, [r3, #20]
 801ba4c:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801ba4e:	69fb      	ldr	r3, [r7, #28]
 801ba50:	69db      	ldr	r3, [r3, #28]
 801ba52:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801ba54:	e09f      	b.n	801bb96 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d103      	bne.n	801ba64 <_fx_utility_logical_sector_flush+0x5a>
 801ba5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	f000 81df 	beq.w	801be22 <_fx_utility_logical_sector_flush+0x418>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 801ba64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ba68:	4313      	orrs	r3, r2
 801ba6a:	f000 81dc 	beq.w	801be26 <_fx_utility_logical_sector_flush+0x41c>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 801ba6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba70:	7c5b      	ldrb	r3, [r3, #17]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	f000 808c 	beq.w	801bb90 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801ba78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 801ba7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ba82:	4290      	cmp	r0, r2
 801ba84:	eb71 0303 	sbcs.w	r3, r1, r3
 801ba88:	f0c0 8082 	bcc.w	801bb90 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 801ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801ba92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801ba96:	4290      	cmp	r0, r2
 801ba98:	eb71 0303 	sbcs.w	r3, r1, r3
 801ba9c:	d378      	bcc.n	801bb90 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 801ba9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801baa0:	7c1b      	ldrb	r3, [r3, #16]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d04d      	beq.n	801bb42 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801baa6:	69fb      	ldr	r3, [r7, #28]
 801baa8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801baac:	2b00      	cmp	r3, #0
 801baae:	d148      	bne.n	801bb42 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 801bab0:	69fb      	ldr	r3, [r7, #28]
 801bab2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801bab6:	1c5a      	adds	r2, r3, #1
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	2201      	movs	r2, #1
 801bac2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801bac6:	69fb      	ldr	r3, [r7, #28]
 801bac8:	2290      	movs	r2, #144	; 0x90
 801baca:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801bace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bad0:	681a      	ldr	r2, [r3, #0]
 801bad2:	69fb      	ldr	r3, [r7, #28]
 801bad4:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801bad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bada:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bade:	69fb      	ldr	r3, [r7, #28]
 801bae0:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 801bae4:	69fb      	ldr	r3, [r7, #28]
 801bae6:	2201      	movs	r2, #1
 801bae8:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801baec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801baee:	7c9b      	ldrb	r3, [r3, #18]
 801baf0:	461a      	mov	r2, r3
 801baf2:	69fb      	ldr	r3, [r7, #28]
 801baf4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801baf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bafa:	7c9b      	ldrb	r3, [r3, #18]
 801bafc:	2b04      	cmp	r3, #4
 801bafe:	d003      	beq.n	801bb08 <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801bb00:	69fb      	ldr	r3, [r7, #28]
 801bb02:	2201      	movs	r2, #1
 801bb04:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801bb08:	69fb      	ldr	r3, [r7, #28]
 801bb0a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801bb0e:	69f8      	ldr	r0, [r7, #28]
 801bb10:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801bb12:	69fb      	ldr	r3, [r7, #28]
 801bb14:	2200      	movs	r2, #0
 801bb16:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 801bb1a:	69fb      	ldr	r3, [r7, #28]
 801bb1c:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d003      	beq.n	801bb2c <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 801bb24:	69fb      	ldr	r3, [r7, #28]
 801bb26:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bb2a:	e180      	b.n	801be2e <_fx_utility_logical_sector_flush+0x424>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801bb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb2e:	2200      	movs	r2, #0
 801bb30:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801bb32:	69fb      	ldr	r3, [r7, #28]
 801bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb36:	1e5a      	subs	r2, r3, #1
 801bb38:	69fb      	ldr	r3, [r7, #28]
 801bb3a:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb3e:	3b01      	subs	r3, #1
 801bb40:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 801bb42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d018      	beq.n	801bb7a <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801bb48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801bb4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bb50:	f04f 32ff 	mov.w	r2, #4294967295
 801bb54:	f04f 33ff 	mov.w	r3, #4294967295
 801bb58:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 801bb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb5e:	7c1b      	ldrb	r3, [r3, #16]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d00a      	beq.n	801bb7a <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801bb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb66:	2200      	movs	r2, #0
 801bb68:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801bb6a:	69fb      	ldr	r3, [r7, #28]
 801bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb6e:	1e5a      	subs	r2, r3, #1
 801bb70:	69fb      	ldr	r3, [r7, #28]
 801bb72:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb76:	3b01      	subs	r3, #1
 801bb78:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 801bb7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bb7e:	1e51      	subs	r1, r2, #1
 801bb80:	6039      	str	r1, [r7, #0]
 801bb82:	f143 33ff 	adc.w	r3, r3, #4294967295
 801bb86:	607b      	str	r3, [r7, #4]
 801bb88:	e9d7 3400 	ldrd	r3, r4, [r7]
 801bb8c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801bb90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb92:	695b      	ldr	r3, [r3, #20]
 801bb94:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801bb96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb98:	1e5a      	subs	r2, r3, #1
 801bb9a:	64ba      	str	r2, [r7, #72]	; 0x48
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f000 8145 	beq.w	801be2c <_fx_utility_logical_sector_flush+0x422>
 801bba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bba4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bba8:	4313      	orrs	r3, r2
 801bbaa:	f47f af54 	bne.w	801ba56 <_fx_utility_logical_sector_flush+0x4c>
 801bbae:	e13d      	b.n	801be2c <_fx_utility_logical_sector_flush+0x422>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801bbb0:	69fb      	ldr	r3, [r7, #28]
 801bbb2:	695b      	ldr	r3, [r3, #20]
 801bbb4:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	6a1b      	ldr	r3, [r3, #32]
 801bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 801bbc0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bbc4:	2a20      	cmp	r2, #32
 801bbc6:	f173 0300 	sbcs.w	r3, r3, #0
 801bbca:	d202      	bcs.n	801bbd2 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 801bbcc:	2301      	movs	r3, #1
 801bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bbd0:	e122      	b.n	801be18 <_fx_utility_logical_sector_flush+0x40e>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 801bbd6:	e11f      	b.n	801be18 <_fx_utility_logical_sector_flush+0x40e>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d103      	bne.n	801bbe6 <_fx_utility_logical_sector_flush+0x1dc>
 801bbde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	f000 8122 	beq.w	801be2a <_fx_utility_logical_sector_flush+0x420>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 801bbe6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bbea:	4313      	orrs	r3, r2
 801bbec:	f000 811e 	beq.w	801be2c <_fx_utility_logical_sector_flush+0x422>
 801bbf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801bbf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801bbf8:	4290      	cmp	r0, r2
 801bbfa:	eb71 0303 	sbcs.w	r3, r1, r3
 801bbfe:	f0c0 8115 	bcc.w	801be2c <_fx_utility_logical_sector_flush+0x422>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 801bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d015      	beq.n	801bc34 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801bc08:	693a      	ldr	r2, [r7, #16]
 801bc0a:	69fb      	ldr	r3, [r7, #28]
 801bc0c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801bc10:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 801bc14:	4013      	ands	r3, r2
 801bc16:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 801bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc1a:	f003 031f 	and.w	r3, r3, #31
 801bc1e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801bc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	63bb      	str	r3, [r7, #56]	; 0x38
 801bc26:	e00d      	b.n	801bc44 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 801bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc2a:	085b      	lsrs	r3, r3, #1
 801bc2c:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 801bc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc30:	3301      	adds	r3, #1
 801bc32:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 801bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc36:	f003 0301 	and.w	r3, r3, #1
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d0f4      	beq.n	801bc28 <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801bc3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc40:	009b      	lsls	r3, r3, #2
 801bc42:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 801bc44:	2300      	movs	r3, #0
 801bc46:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801bc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	005b      	lsls	r3, r3, #1
 801bc4e:	4413      	add	r3, r2
 801bc50:	00db      	lsls	r3, r3, #3
 801bc52:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 801bc56:	3328      	adds	r3, #40	; 0x28
 801bc58:	69fa      	ldr	r2, [r7, #28]
 801bc5a:	4413      	add	r3, r2
 801bc5c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 801bc5e:	2300      	movs	r3, #0
 801bc60:	647b      	str	r3, [r7, #68]	; 0x44
 801bc62:	e0a7      	b.n	801bdb4 <_fx_utility_logical_sector_flush+0x3aa>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801bc64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc66:	7c5b      	ldrb	r3, [r3, #17]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	f000 8089 	beq.w	801bd80 <_fx_utility_logical_sector_flush+0x376>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801bc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801bc74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801bc78:	4290      	cmp	r0, r2
 801bc7a:	eb71 0303 	sbcs.w	r3, r1, r3
 801bc7e:	d37f      	bcc.n	801bd80 <_fx_utility_logical_sector_flush+0x376>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 801bc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801bc86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801bc8a:	4290      	cmp	r0, r2
 801bc8c:	eb71 0303 	sbcs.w	r3, r1, r3
 801bc90:	d376      	bcc.n	801bd80 <_fx_utility_logical_sector_flush+0x376>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc94:	7c1b      	ldrb	r3, [r3, #16]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d04d      	beq.n	801bd36 <_fx_utility_logical_sector_flush+0x32c>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801bc9a:	69fb      	ldr	r3, [r7, #28]
 801bc9c:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d148      	bne.n	801bd36 <_fx_utility_logical_sector_flush+0x32c>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 801bca4:	69fb      	ldr	r3, [r7, #28]
 801bca6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801bcaa:	1c5a      	adds	r2, r3, #1
 801bcac:	69fb      	ldr	r3, [r7, #28]
 801bcae:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801bcb2:	69fb      	ldr	r3, [r7, #28]
 801bcb4:	2201      	movs	r2, #1
 801bcb6:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801bcba:	69fb      	ldr	r3, [r7, #28]
 801bcbc:	2290      	movs	r2, #144	; 0x90
 801bcbe:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801bcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcc4:	681a      	ldr	r2, [r3, #0]
 801bcc6:	69fb      	ldr	r3, [r7, #28]
 801bcc8:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801bccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bcd2:	69fb      	ldr	r3, [r7, #28]
 801bcd4:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 801bcd8:	69fb      	ldr	r3, [r7, #28]
 801bcda:	2201      	movs	r2, #1
 801bcdc:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bce2:	7c9b      	ldrb	r3, [r3, #18]
 801bce4:	461a      	mov	r2, r3
 801bce6:	69fb      	ldr	r3, [r7, #28]
 801bce8:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801bcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcee:	7c9b      	ldrb	r3, [r3, #18]
 801bcf0:	2b04      	cmp	r3, #4
 801bcf2:	d003      	beq.n	801bcfc <_fx_utility_logical_sector_flush+0x2f2>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801bcf4:	69fb      	ldr	r3, [r7, #28]
 801bcf6:	2201      	movs	r2, #1
 801bcf8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801bcfc:	69fb      	ldr	r3, [r7, #28]
 801bcfe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801bd02:	69f8      	ldr	r0, [r7, #28]
 801bd04:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801bd06:	69fb      	ldr	r3, [r7, #28]
 801bd08:	2200      	movs	r2, #0
 801bd0a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 801bd0e:	69fb      	ldr	r3, [r7, #28]
 801bd10:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d003      	beq.n	801bd20 <_fx_utility_logical_sector_flush+0x316>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 801bd18:	69fb      	ldr	r3, [r7, #28]
 801bd1a:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bd1e:	e086      	b.n	801be2e <_fx_utility_logical_sector_flush+0x424>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801bd20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd22:	2200      	movs	r2, #0
 801bd24:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801bd26:	69fb      	ldr	r3, [r7, #28]
 801bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd2a:	1e5a      	subs	r2, r3, #1
 801bd2c:	69fb      	ldr	r3, [r7, #28]
 801bd2e:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd32:	3b01      	subs	r3, #1
 801bd34:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 801bd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d018      	beq.n	801bd6e <_fx_utility_logical_sector_flush+0x364>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801bd3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd3e:	2200      	movs	r2, #0
 801bd40:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801bd42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bd44:	f04f 32ff 	mov.w	r2, #4294967295
 801bd48:	f04f 33ff 	mov.w	r3, #4294967295
 801bd4c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801bd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd52:	7c1b      	ldrb	r3, [r3, #16]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d00a      	beq.n	801bd6e <_fx_utility_logical_sector_flush+0x364>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801bd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801bd5e:	69fb      	ldr	r3, [r7, #28]
 801bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd62:	1e5a      	subs	r2, r3, #1
 801bd64:	69fb      	ldr	r3, [r7, #28]
 801bd66:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd6a:	3b01      	subs	r3, #1
 801bd6c:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 801bd6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bd72:	f112 38ff 	adds.w	r8, r2, #4294967295
 801bd76:	f143 39ff 	adc.w	r9, r3, #4294967295
 801bd7a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 801bd7e:	e006      	b.n	801bd8e <_fx_utility_logical_sector_flush+0x384>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 801bd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd82:	7c5b      	ldrb	r3, [r3, #17]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d002      	beq.n	801bd8e <_fx_utility_logical_sector_flush+0x384>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 801bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d102      	bne.n	801bd9a <_fx_utility_logical_sector_flush+0x390>
 801bd94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d011      	beq.n	801bdbe <_fx_utility_logical_sector_flush+0x3b4>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801bd9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bd9e:	4313      	orrs	r3, r2
 801bda0:	d102      	bne.n	801bda8 <_fx_utility_logical_sector_flush+0x39e>
 801bda2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d00c      	beq.n	801bdc2 <_fx_utility_logical_sector_flush+0x3b8>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 801bda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bdaa:	3318      	adds	r3, #24
 801bdac:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 801bdae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdb0:	3301      	adds	r3, #1
 801bdb2:	647b      	str	r3, [r7, #68]	; 0x44
 801bdb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdb6:	2b03      	cmp	r3, #3
 801bdb8:	f67f af54 	bls.w	801bc64 <_fx_utility_logical_sector_flush+0x25a>
 801bdbc:	e002      	b.n	801bdc4 <_fx_utility_logical_sector_flush+0x3ba>
                        break;
 801bdbe:	bf00      	nop
 801bdc0:	e000      	b.n	801bdc4 <_fx_utility_logical_sector_flush+0x3ba>
                        break;
 801bdc2:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 801bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bdc6:	3380      	adds	r3, #128	; 0x80
 801bdc8:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801bdca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bdce:	429a      	cmp	r2, r3
 801bdd0:	f4ff af3a 	bcc.w	801bc48 <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 801bdd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d00c      	beq.n	801bdf4 <_fx_utility_logical_sector_flush+0x3ea>
 801bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d109      	bne.n	801bdf4 <_fx_utility_logical_sector_flush+0x3ea>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 801bde0:	69fb      	ldr	r3, [r7, #28]
 801bde2:	6a1a      	ldr	r2, [r3, #32]
 801bde4:	2101      	movs	r1, #1
 801bde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bde8:	fa01 f303 	lsl.w	r3, r1, r3
 801bdec:	43db      	mvns	r3, r3
 801bdee:	401a      	ands	r2, r3
 801bdf0:	69fb      	ldr	r3, [r7, #28]
 801bdf2:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 801bdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d008      	beq.n	801be0c <_fx_utility_logical_sector_flush+0x402>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801bdfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801bdfe:	f112 0a01 	adds.w	sl, r2, #1
 801be02:	f143 0b00 	adc.w	fp, r3, #0
 801be06:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801be0a:	e005      	b.n	801be18 <_fx_utility_logical_sector_flush+0x40e>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 801be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0e:	085b      	lsrs	r3, r3, #1
 801be10:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 801be12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be14:	3301      	adds	r3, #1
 801be16:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 801be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	f47f aedc 	bne.w	801bbd8 <_fx_utility_logical_sector_flush+0x1ce>
 801be20:	e004      	b.n	801be2c <_fx_utility_logical_sector_flush+0x422>
                break;
 801be22:	bf00      	nop
 801be24:	e002      	b.n	801be2c <_fx_utility_logical_sector_flush+0x422>
                break;
 801be26:	bf00      	nop
 801be28:	e000      	b.n	801be2c <_fx_utility_logical_sector_flush+0x422>
                break;
 801be2a:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801be2c:	2300      	movs	r3, #0
}
 801be2e:	4618      	mov	r0, r3
 801be30:	3750      	adds	r7, #80	; 0x50
 801be32:	46bd      	mov	sp, r7
 801be34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801be38 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801be38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801be3c:	b09c      	sub	sp, #112	; 0x70
 801be3e:	af04      	add	r7, sp, #16
 801be40:	64f8      	str	r0, [r7, #76]	; 0x4c
 801be42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801be46:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801be4a:	2b02      	cmp	r3, #2
 801be4c:	d106      	bne.n	801be5c <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 801be4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be50:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 801be54:	1c5a      	adds	r2, r3, #1
 801be56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be58:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 801be5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be5e:	f8d3 35cc 	ldr.w	r3, [r3, #1484]	; 0x5cc
 801be62:	1c5a      	adds	r2, r3, #1
 801be64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be66:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801be6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be6c:	689a      	ldr	r2, [r3, #8]
 801be6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801be72:	4293      	cmp	r3, r2
 801be74:	f0c0 80d9 	bcc.w	801c02a <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 801be78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be7a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801be7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801be80:	4293      	cmp	r3, r2
 801be82:	f200 80d2 	bhi.w	801c02a <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801be86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be8a:	9300      	str	r3, [sp, #0]
 801be8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801be90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801be92:	f7ff faef 	bl	801b474 <_fx_utility_logical_sector_cache_entry_read>
 801be96:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 801be98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d101      	bne.n	801bea2 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 801be9e:	2300      	movs	r3, #0
 801bea0:	e259      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 801bea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bea4:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 801bea8:	1c5a      	adds	r2, r3, #1
 801beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801beac:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 801beb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801beb2:	7c5b      	ldrb	r3, [r3, #17]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d049      	beq.n	801bf4c <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 801beb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801beba:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d045      	beq.n	801bf4c <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 801bec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bec2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801bec6:	1c5a      	adds	r2, r3, #1
 801bec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801beca:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801bece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bed0:	2201      	movs	r2, #1
 801bed2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801bed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bed8:	2290      	movs	r2, #144	; 0x90
 801beda:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801bede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bee0:	681a      	ldr	r2, [r3, #0]
 801bee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bee4:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801bee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801beea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801beee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bef0:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 801bef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bef6:	2201      	movs	r2, #1
 801bef8:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801befc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801befe:	7c9b      	ldrb	r3, [r3, #18]
 801bf00:	461a      	mov	r2, r3
 801bf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf04:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf0a:	7c9b      	ldrb	r3, [r3, #18]
 801bf0c:	2b04      	cmp	r3, #4
 801bf0e:	d003      	beq.n	801bf18 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801bf10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf12:	2201      	movs	r2, #1
 801bf14:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf1a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801bf1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801bf20:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801bf22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf24:	2200      	movs	r2, #0
 801bf26:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801bf2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf2c:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d003      	beq.n	801bf3c <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 801bf34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf36:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bf3a:	e20c      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801bf3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf3e:	2200      	movs	r2, #0
 801bf40:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 801bf42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf46:	1e5a      	subs	r2, r3, #1
 801bf48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 801bf4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801bf52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801bf56:	4290      	cmp	r0, r2
 801bf58:	eb71 0303 	sbcs.w	r3, r1, r3
 801bf5c:	d301      	bcc.n	801bf62 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 801bf5e:	2389      	movs	r3, #137	; 0x89
 801bf60:	e1f9      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801bf62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf64:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 801bf68:	1c5a      	adds	r2, r3, #1
 801bf6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf6c:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801bf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf72:	2200      	movs	r2, #0
 801bf74:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801bf78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf7a:	2290      	movs	r2, #144	; 0x90
 801bf7c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801bf80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf82:	681a      	ldr	r2, [r3, #0]
 801bf84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf86:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801bf8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf8e:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 801bf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf94:	2201      	movs	r2, #1
 801bf96:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801bf9a:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801bf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfa0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801bfa4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801bfa8:	2b04      	cmp	r3, #4
 801bfaa:	d103      	bne.n	801bfb4 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801bfac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfae:	2201      	movs	r2, #1
 801bfb0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801bfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfb6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801bfba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801bfbc:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801bfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 801bfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfc8:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d11a      	bne.n	801c006 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 801bfd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bfd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801bfd6:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801bfda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfdc:	2201      	movs	r2, #1
 801bfde:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 801bfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfe2:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801bfe6:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 801bfe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d015      	beq.n	801c01a <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 801bfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 801bff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bff2:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 801bff4:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 801bff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bff8:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801bffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bffc:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801bffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c002:	61da      	str	r2, [r3, #28]
 801c004:	e009      	b.n	801c01a <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801c006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c008:	2200      	movs	r2, #0
 801c00a:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801c00c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c00e:	f04f 32ff 	mov.w	r2, #4294967295
 801c012:	f04f 33ff 	mov.w	r3, #4294967295
 801c016:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801c01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c01c:	681a      	ldr	r2, [r3, #0]
 801c01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c020:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801c022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c024:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c028:	e195      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 801c02a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c02e:	2200      	movs	r2, #0
 801c030:	469a      	mov	sl, r3
 801c032:	4693      	mov	fp, r2
 801c034:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c038:	eb1a 0402 	adds.w	r4, sl, r2
 801c03c:	eb4b 0503 	adc.w	r5, fp, r3
 801c040:	f114 38ff 	adds.w	r8, r4, #4294967295
 801c044:	f145 39ff 	adc.w	r9, r5, #4294967295
 801c048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c04a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801c04e:	2300      	movs	r3, #0
 801c050:	63ba      	str	r2, [r7, #56]	; 0x38
 801c052:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c054:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801c058:	460b      	mov	r3, r1
 801c05a:	4543      	cmp	r3, r8
 801c05c:	4613      	mov	r3, r2
 801c05e:	eb73 0309 	sbcs.w	r3, r3, r9
 801c062:	d22c      	bcs.n	801c0be <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 801c064:	2389      	movs	r3, #137	; 0x89
 801c066:	e176      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 801c068:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c06c:	9300      	str	r3, [sp, #0]
 801c06e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c072:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c074:	f7ff f9fe 	bl	801b474 <_fx_utility_logical_sector_cache_entry_read>
 801c078:	4603      	mov	r3, r0
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d124      	bne.n	801c0c8 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 801c07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c080:	6898      	ldr	r0, [r3, #8]
 801c082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c086:	461a      	mov	r2, r3
 801c088:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801c08c:	f000 fad1 	bl	801c632 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c098:	4413      	add	r3, r2
 801c09a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 801c09e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c0a2:	1c51      	adds	r1, r2, #1
 801c0a4:	61b9      	str	r1, [r7, #24]
 801c0a6:	f143 0300 	adc.w	r3, r3, #0
 801c0aa:	61fb      	str	r3, [r7, #28]
 801c0ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801c0b0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 801c0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801c0be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d1d0      	bne.n	801c068 <_fx_utility_logical_sector_read+0x230>
 801c0c6:	e000      	b.n	801c0ca <_fx_utility_logical_sector_read+0x292>
                break;
 801c0c8:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 801c0ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	633b      	str	r3, [r7, #48]	; 0x30
 801c0d2:	637a      	str	r2, [r7, #52]	; 0x34
 801c0d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c0d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801c0dc:	4621      	mov	r1, r4
 801c0de:	1889      	adds	r1, r1, r2
 801c0e0:	62b9      	str	r1, [r7, #40]	; 0x28
 801c0e2:	4629      	mov	r1, r5
 801c0e4:	eb43 0101 	adc.w	r1, r3, r1
 801c0e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c0ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801c0ee:	460b      	mov	r3, r1
 801c0f0:	3b01      	subs	r3, #1
 801c0f2:	613b      	str	r3, [r7, #16]
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 801c0fa:	617b      	str	r3, [r7, #20]
 801c0fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c100:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 801c104:	e02b      	b.n	801c15e <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 801c106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c10a:	9300      	str	r3, [sp, #0]
 801c10c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c110:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c112:	f7ff f9af 	bl	801b474 <_fx_utility_logical_sector_cache_entry_read>
 801c116:	4603      	mov	r3, r0
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d125      	bne.n	801c168 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c11e:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 801c120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c124:	3b01      	subs	r3, #1
 801c126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c12a:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801c12e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c132:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 801c134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801c138:	461a      	mov	r2, r3
 801c13a:	f000 fa7a 	bl	801c632 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 801c13e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c142:	1e51      	subs	r1, r2, #1
 801c144:	60b9      	str	r1, [r7, #8]
 801c146:	f143 33ff 	adc.w	r3, r3, #4294967295
 801c14a:	60fb      	str	r3, [r7, #12]
 801c14c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c150:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 801c154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c158:	3b01      	subs	r3, #1
 801c15a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801c15e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c162:	2b00      	cmp	r3, #0
 801c164:	d1cf      	bne.n	801c106 <_fx_utility_logical_sector_read+0x2ce>
 801c166:	e000      	b.n	801c16a <_fx_utility_logical_sector_read+0x332>
                break;
 801c168:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 801c16a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d101      	bne.n	801c176 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 801c172:	2300      	movs	r3, #0
 801c174:	e0ef      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 801c176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c17a:	2200      	movs	r2, #0
 801c17c:	623b      	str	r3, [r7, #32]
 801c17e:	627a      	str	r2, [r7, #36]	; 0x24
 801c180:	2301      	movs	r3, #1
 801c182:	9302      	str	r3, [sp, #8]
 801c184:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801c188:	e9cd 3400 	strd	r3, r4, [sp]
 801c18c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c190:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c192:	f7ff fc3a 	bl	801ba0a <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801c196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c198:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 801c19c:	1c5a      	adds	r2, r3, #1
 801c19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1a0:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801c1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801c1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1ae:	2290      	movs	r2, #144	; 0x90
 801c1b0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801c1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c1ba:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801c1be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1c2:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801c1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c1cc:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801c1d0:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801c1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1d6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801c1da:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801c1de:	2b04      	cmp	r3, #4
 801c1e0:	d103      	bne.n	801c1ea <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801c1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1e4:	2201      	movs	r2, #1
 801c1e6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801c1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801c1f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c1f2:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801c1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1f6:	2200      	movs	r2, #0
 801c1f8:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 801c1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1fe:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c202:	2b00      	cmp	r3, #0
 801c204:	f040 80a4 	bne.w	801c350 <_fx_utility_logical_sector_read+0x518>
 801c208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c20a:	695b      	ldr	r3, [r3, #20]
 801c20c:	089b      	lsrs	r3, r3, #2
 801c20e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c212:	429a      	cmp	r2, r3
 801c214:	f080 809c 	bcs.w	801c350 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 801c218:	e095      	b.n	801c346 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801c21a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c21e:	9300      	str	r3, [sp, #0]
 801c220:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c224:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c226:	f7ff f925 	bl	801b474 <_fx_utility_logical_sector_cache_entry_read>
 801c22a:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 801c22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d101      	bne.n	801c236 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 801c232:	2300      	movs	r3, #0
 801c234:	e08f      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 801c236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c238:	7c5b      	ldrb	r3, [r3, #17]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d049      	beq.n	801c2d2 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 801c23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c240:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 801c242:	2b00      	cmp	r3, #0
 801c244:	d045      	beq.n	801c2d2 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 801c246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c248:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801c24c:	1c5a      	adds	r2, r3, #1
 801c24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c250:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801c254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c256:	2201      	movs	r2, #1
 801c258:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801c25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c25e:	2290      	movs	r2, #144	; 0x90
 801c260:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801c264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c266:	681a      	ldr	r2, [r3, #0]
 801c268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c26a:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801c26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c270:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c276:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 801c27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c27c:	2201      	movs	r2, #1
 801c27e:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801c282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c284:	7c9b      	ldrb	r3, [r3, #18]
 801c286:	461a      	mov	r2, r3
 801c288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c28a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801c28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c290:	7c9b      	ldrb	r3, [r3, #18]
 801c292:	2b04      	cmp	r3, #4
 801c294:	d003      	beq.n	801c29e <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801c296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c298:	2201      	movs	r2, #1
 801c29a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801c29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801c2a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c2a6:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801c2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 801c2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2b2:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d003      	beq.n	801c2c2 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 801c2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2bc:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c2c0:	e049      	b.n	801c356 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801c2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 801c2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2cc:	1e5a      	subs	r2, r3, #1
 801c2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2d0:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 801c2d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c2d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c2d8:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801c2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2de:	2201      	movs	r2, #1
 801c2e0:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 801c2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2e4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801c2e8:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 801c2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d00a      	beq.n	801c306 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 801c2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 801c2f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c2f4:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 801c2f6:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801c2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2fa:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801c2fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2fe:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801c300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c304:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801c306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c308:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801c30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801c30e:	461a      	mov	r2, r3
 801c310:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801c314:	f000 f98d 	bl	801c632 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801c318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c31c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c320:	4413      	add	r3, r2
 801c322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 801c326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c32a:	1c51      	adds	r1, r2, #1
 801c32c:	6039      	str	r1, [r7, #0]
 801c32e:	f143 0300 	adc.w	r3, r3, #0
 801c332:	607b      	str	r3, [r7, #4]
 801c334:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c338:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 801c33c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c340:	3b01      	subs	r3, #1
 801c342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 801c346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	f47f af65 	bne.w	801c21a <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801c350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c352:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
    }
}
 801c356:	4618      	mov	r0, r3
 801c358:	3760      	adds	r7, #96	; 0x60
 801c35a:	46bd      	mov	sp, r7
 801c35c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c360 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801c360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c364:	b096      	sub	sp, #88	; 0x58
 801c366:	af04      	add	r7, sp, #16
 801c368:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c36a:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 801c36e:	2300      	movs	r3, #0
 801c370:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801c374:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801c378:	2b02      	cmp	r3, #2
 801c37a:	d106      	bne.n	801c38a <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 801c37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c37e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801c382:	1c5a      	adds	r2, r3, #1
 801c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c386:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 801c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c38c:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 801c390:	1c5a      	adds	r2, r3, #1
 801c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c394:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c39a:	689a      	ldr	r2, [r3, #8]
 801c39c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c39e:	4293      	cmp	r3, r2
 801c3a0:	f0c0 80d9 	bcc.w	801c556 <_fx_utility_logical_sector_write+0x1f6>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 801c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3a6:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801c3a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3aa:	4293      	cmp	r3, r2
 801c3ac:	f200 80d3 	bhi.w	801c556 <_fx_utility_logical_sector_write+0x1f6>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 801c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3b2:	691b      	ldr	r3, [r3, #16]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d031      	beq.n	801c41c <_fx_utility_logical_sector_write+0xbc>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 801c3b8:	6a3a      	ldr	r2, [r7, #32]
 801c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3bc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 801c3c0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 801c3c4:	4013      	ands	r3, r2
 801c3c6:	009b      	lsls	r3, r3, #2
 801c3c8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801c3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c3cc:	4613      	mov	r3, r2
 801c3ce:	005b      	lsls	r3, r3, #1
 801c3d0:	4413      	add	r3, r2
 801c3d2:	00db      	lsls	r3, r3, #3
 801c3d4:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 801c3d8:	3328      	adds	r3, #40	; 0x28
 801c3da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3dc:	4413      	add	r3, r2
 801c3de:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c3e4:	e016      	b.n	801c414 <_fx_utility_logical_sector_write+0xb4>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801c3e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3e8:	7c5b      	ldrb	r3, [r3, #17]
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d00c      	beq.n	801c408 <_fx_utility_logical_sector_write+0xa8>
 801c3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c3f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c3f8:	4299      	cmp	r1, r3
 801c3fa:	bf08      	it	eq
 801c3fc:	4290      	cmpeq	r0, r2
 801c3fe:	d103      	bne.n	801c408 <_fx_utility_logical_sector_write+0xa8>
                {
                    cache_found = FX_TRUE;
 801c400:	2301      	movs	r3, #1
 801c402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801c406:	e02d      	b.n	801c464 <_fx_utility_logical_sector_write+0x104>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801c408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c40a:	3301      	adds	r3, #1
 801c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c410:	3318      	adds	r3, #24
 801c412:	647b      	str	r3, [r7, #68]	; 0x44
 801c414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c416:	2b03      	cmp	r3, #3
 801c418:	d9e5      	bls.n	801c3e6 <_fx_utility_logical_sector_write+0x86>
 801c41a:	e023      	b.n	801c464 <_fx_utility_logical_sector_write+0x104>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c41e:	695b      	ldr	r3, [r3, #20]
 801c420:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c424:	69db      	ldr	r3, [r3, #28]
 801c426:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 801c428:	e017      	b.n	801c45a <_fx_utility_logical_sector_write+0xfa>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801c42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c42c:	7c5b      	ldrb	r3, [r3, #17]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d00c      	beq.n	801c44c <_fx_utility_logical_sector_write+0xec>
 801c432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c434:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c438:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c43c:	4299      	cmp	r1, r3
 801c43e:	bf08      	it	eq
 801c440:	4290      	cmpeq	r0, r2
 801c442:	d103      	bne.n	801c44c <_fx_utility_logical_sector_write+0xec>
                {
                    cache_found = FX_TRUE;
 801c444:	2301      	movs	r3, #1
 801c446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801c44a:	e00b      	b.n	801c464 <_fx_utility_logical_sector_write+0x104>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801c44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c44e:	695b      	ldr	r3, [r3, #20]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d002      	beq.n	801c45a <_fx_utility_logical_sector_write+0xfa>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801c454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c456:	695b      	ldr	r3, [r3, #20]
 801c458:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 801c45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c45c:	1e5a      	subs	r2, r3, #1
 801c45e:	643a      	str	r2, [r7, #64]	; 0x40
 801c460:	2b00      	cmp	r3, #0
 801c462:	d1e2      	bne.n	801c42a <_fx_utility_logical_sector_write+0xca>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 801c464:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d00d      	beq.n	801c488 <_fx_utility_logical_sector_write+0x128>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801c46c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c46e:	7c1b      	ldrb	r3, [r3, #16]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d107      	bne.n	801c484 <_fx_utility_logical_sector_write+0x124>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 801c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c478:	1c5a      	adds	r2, r3, #1
 801c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c47c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 801c47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c480:	2201      	movs	r2, #1
 801c482:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 801c484:	2300      	movs	r3, #0
 801c486:	e0cf      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801c488:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c48c:	4313      	orrs	r3, r2
 801c48e:	d004      	beq.n	801c49a <_fx_utility_logical_sector_write+0x13a>
 801c490:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c494:	1c51      	adds	r1, r2, #1
 801c496:	430b      	orrs	r3, r1
 801c498:	d101      	bne.n	801c49e <_fx_utility_logical_sector_write+0x13e>
        {
            return(FX_SECTOR_INVALID);
 801c49a:	2389      	movs	r3, #137	; 0x89
 801c49c:	e0c4      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801c49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	61bb      	str	r3, [r7, #24]
 801c4a4:	61fa      	str	r2, [r7, #28]
 801c4a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c4aa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801c4ae:	4621      	mov	r1, r4
 801c4b0:	1889      	adds	r1, r1, r2
 801c4b2:	6139      	str	r1, [r7, #16]
 801c4b4:	4629      	mov	r1, r5
 801c4b6:	eb43 0101 	adc.w	r1, r3, r1
 801c4ba:	6179      	str	r1, [r7, #20]
 801c4bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801c4c0:	460b      	mov	r3, r1
 801c4c2:	f113 3aff 	adds.w	sl, r3, #4294967295
 801c4c6:	4613      	mov	r3, r2
 801c4c8:	f143 3bff 	adc.w	fp, r3, #4294967295
 801c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801c4d2:	4592      	cmp	sl, r2
 801c4d4:	eb7b 0303 	sbcs.w	r3, fp, r3
 801c4d8:	d301      	bcc.n	801c4de <_fx_utility_logical_sector_write+0x17e>
        {
            return(FX_SECTOR_INVALID);
 801c4da:	2389      	movs	r3, #137	; 0x89
 801c4dc:	e0a4      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4e0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801c4e4:	1c5a      	adds	r2, r3, #1
 801c4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4e8:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4ee:	2201      	movs	r2, #1
 801c4f0:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4f6:	2290      	movs	r2, #144	; 0x90
 801c4f8:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c500:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801c504:	6a3a      	ldr	r2, [r7, #32]
 801c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c508:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c50e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c510:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801c514:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801c518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c51a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801c51e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801c522:	2b04      	cmp	r3, #4
 801c524:	d003      	beq.n	801c52e <_fx_utility_logical_sector_write+0x1ce>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c528:	2201      	movs	r2, #1
 801c52a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c530:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801c534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c536:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c53a:	2200      	movs	r2, #0
 801c53c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 801c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c542:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c546:	2b00      	cmp	r3, #0
 801c548:	d003      	beq.n	801c552 <_fx_utility_logical_sector_write+0x1f2>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 801c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c54c:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 801c550:	e06a      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 801c552:	2300      	movs	r3, #0
 801c554:	e068      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801c556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c55a:	4313      	orrs	r3, r2
 801c55c:	d004      	beq.n	801c568 <_fx_utility_logical_sector_write+0x208>
 801c55e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c562:	1c51      	adds	r1, r2, #1
 801c564:	430b      	orrs	r3, r1
 801c566:	d101      	bne.n	801c56c <_fx_utility_logical_sector_write+0x20c>
        {
            return(FX_SECTOR_INVALID);
 801c568:	2389      	movs	r3, #137	; 0x89
 801c56a:	e05d      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801c56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c56e:	2200      	movs	r2, #0
 801c570:	60bb      	str	r3, [r7, #8]
 801c572:	60fa      	str	r2, [r7, #12]
 801c574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c578:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801c57c:	4651      	mov	r1, sl
 801c57e:	eb11 0802 	adds.w	r8, r1, r2
 801c582:	4659      	mov	r1, fp
 801c584:	eb41 0903 	adc.w	r9, r1, r3
 801c588:	f118 34ff 	adds.w	r4, r8, #4294967295
 801c58c:	f149 35ff 	adc.w	r5, r9, #4294967295
 801c590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c592:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801c596:	4294      	cmp	r4, r2
 801c598:	eb75 0303 	sbcs.w	r3, r5, r3
 801c59c:	d301      	bcc.n	801c5a2 <_fx_utility_logical_sector_write+0x242>
        {
            return(FX_SECTOR_INVALID);
 801c59e:	2389      	movs	r3, #137	; 0x89
 801c5a0:	e042      	b.n	801c628 <_fx_utility_logical_sector_write+0x2c8>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 801c5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	603b      	str	r3, [r7, #0]
 801c5a8:	607a      	str	r2, [r7, #4]
 801c5aa:	2301      	movs	r3, #1
 801c5ac:	9302      	str	r3, [sp, #8]
 801c5ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c5b2:	e9cd 3400 	strd	r3, r4, [sp]
 801c5b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c5bc:	f7ff fa25 	bl	801ba0a <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5c2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 801c5c6:	1c5a      	adds	r2, r3, #1
 801c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5ca:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5d0:	2201      	movs	r2, #1
 801c5d2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5d8:	2290      	movs	r2, #144	; 0x90
 801c5da:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c5e2:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801c5e6:	6a3a      	ldr	r2, [r7, #32]
 801c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5ea:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c5f2:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801c5f6:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5fc:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801c600:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801c604:	2b04      	cmp	r3, #4
 801c606:	d003      	beq.n	801c610 <_fx_utility_logical_sector_write+0x2b0>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c60a:	2201      	movs	r2, #1
 801c60c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c612:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 801c616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c618:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c61c:	2200      	movs	r2, #0
 801c61e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c624:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
    }
}
 801c628:	4618      	mov	r0, r3
 801c62a:	3748      	adds	r7, #72	; 0x48
 801c62c:	46bd      	mov	sp, r7
 801c62e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c632 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 801c632:	b580      	push	{r7, lr}
 801c634:	b084      	sub	sp, #16
 801c636:	af00      	add	r7, sp, #0
 801c638:	60f8      	str	r0, [r7, #12]
 801c63a:	60b9      	str	r1, [r7, #8]
 801c63c:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 801c63e:	687a      	ldr	r2, [r7, #4]
 801c640:	68f9      	ldr	r1, [r7, #12]
 801c642:	68b8      	ldr	r0, [r7, #8]
 801c644:	f001 fa4e 	bl	801dae4 <memcpy>
}
 801c648:	bf00      	nop
 801c64a:	3710      	adds	r7, #16
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <_fx_utility_string_length_get>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_string_length_get(CHAR *string, UINT max_length)
{
 801c650:	b480      	push	{r7}
 801c652:	b085      	sub	sp, #20
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
 801c658:	6039      	str	r1, [r7, #0]

UINT length;

    /* Initialize length to 0.  */
    length = 0;
 801c65a:	2300      	movs	r3, #0
 801c65c:	60fb      	str	r3, [r7, #12]

    /* Loop to calculate the length.  */
    while (string[length] && (length < max_length))
 801c65e:	e002      	b.n	801c666 <_fx_utility_string_length_get+0x16>
    {

        /* Increment the length (index).  */
        length++;
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	3301      	adds	r3, #1
 801c664:	60fb      	str	r3, [r7, #12]
    while (string[length] && (length < max_length))
 801c666:	687a      	ldr	r2, [r7, #4]
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	4413      	add	r3, r2
 801c66c:	781b      	ldrb	r3, [r3, #0]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d003      	beq.n	801c67a <_fx_utility_string_length_get+0x2a>
 801c672:	68fa      	ldr	r2, [r7, #12]
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	429a      	cmp	r2, r3
 801c678:	d3f2      	bcc.n	801c660 <_fx_utility_string_length_get+0x10>
    }

    /* Return length.  */
    return(length);
 801c67a:	68fb      	ldr	r3, [r7, #12]
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3714      	adds	r7, #20
 801c680:	46bd      	mov	sp, r7
 801c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c686:	4770      	bx	lr

0801c688 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 801c688:	b580      	push	{r7, lr}
 801c68a:	b084      	sub	sp, #16
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d101      	bne.n	801c69a <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 801c696:	2318      	movs	r3, #24
 801c698:	e004      	b.n	801c6a4 <_fxe_file_close+0x1c>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 801c69a:	6878      	ldr	r0, [r7, #4]
 801c69c:	f7f9 fa20 	bl	8015ae0 <_fx_file_close>
 801c6a0:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801c6a2:	68fb      	ldr	r3, [r7, #12]
}
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	3710      	adds	r7, #16
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	bd80      	pop	{r7, pc}

0801c6ac <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801c6ac:	b580      	push	{r7, lr}
 801c6ae:	b084      	sub	sp, #16
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
 801c6b4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d101      	bne.n	801c6c0 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 801c6bc:	2318      	movs	r3, #24
 801c6be:	e005      	b.n	801c6cc <_fxe_file_create+0x20>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 801c6c0:	6839      	ldr	r1, [r7, #0]
 801c6c2:	6878      	ldr	r0, [r7, #4]
 801c6c4:	f7f9 fa90 	bl	8015be8 <_fx_file_create>
 801c6c8:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 801c6ca:	68fb      	ldr	r3, [r7, #12]
}
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	3710      	adds	r7, #16
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	bd80      	pop	{r7, pc}

0801c6d4 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b088      	sub	sp, #32
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	60f8      	str	r0, [r7, #12]
 801c6dc:	60b9      	str	r1, [r7, #8]
 801c6de:	607a      	str	r2, [r7, #4]
 801c6e0:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d00b      	beq.n	801c700 <_fxe_file_open+0x2c>
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	4a1c      	ldr	r2, [pc, #112]	; (801c760 <_fxe_file_open+0x8c>)
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d106      	bne.n	801c700 <_fxe_file_open+0x2c>
 801c6f2:	68bb      	ldr	r3, [r7, #8]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d003      	beq.n	801c700 <_fxe_file_open+0x2c>
 801c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6fa:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 801c6fe:	d001      	beq.n	801c704 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 801c700:	2318      	movs	r3, #24
 801c702:	e029      	b.n	801c758 <_fxe_file_open+0x84>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d007      	beq.n	801c71a <_fxe_file_open+0x46>
 801c70a:	683b      	ldr	r3, [r7, #0]
 801c70c:	2b02      	cmp	r3, #2
 801c70e:	d004      	beq.n	801c71a <_fxe_file_open+0x46>
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	2b01      	cmp	r3, #1
 801c714:	d001      	beq.n	801c71a <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 801c716:	2306      	movs	r3, #6
 801c718:	e01e      	b.n	801c758 <_fxe_file_open+0x84>
    FX_PROTECT

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 801c720:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801c728:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801c72a:	e008      	b.n	801c73e <_fxe_file_open+0x6a>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 801c72c:	68ba      	ldr	r2, [r7, #8]
 801c72e:	69fb      	ldr	r3, [r7, #28]
 801c730:	429a      	cmp	r2, r3
 801c732:	d101      	bne.n	801c738 <_fxe_file_open+0x64>

            /* Release protection.  */
            FX_UNPROTECT

            /* Return error.  */
            return(FX_PTR_ERROR);
 801c734:	2318      	movs	r3, #24
 801c736:	e00f      	b.n	801c758 <_fxe_file_open+0x84>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 801c738:	69fb      	ldr	r3, [r7, #28]
 801c73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c73c:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801c73e:	69bb      	ldr	r3, [r7, #24]
 801c740:	1e5a      	subs	r2, r3, #1
 801c742:	61ba      	str	r2, [r7, #24]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d1f1      	bne.n	801c72c <_fxe_file_open+0x58>

    /* Release protection.  */
    FX_UNPROTECT

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 801c748:	683b      	ldr	r3, [r7, #0]
 801c74a:	687a      	ldr	r2, [r7, #4]
 801c74c:	68b9      	ldr	r1, [r7, #8]
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7f9 fc0a 	bl	8015f68 <_fx_file_open>
 801c754:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 801c756:	697b      	ldr	r3, [r7, #20]
}
 801c758:	4618      	mov	r0, r3
 801c75a:	3720      	adds	r7, #32
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}
 801c760:	4d454449 	.word	0x4d454449

0801c764 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b086      	sub	sp, #24
 801c768:	af00      	add	r7, sp, #0
 801c76a:	60f8      	str	r0, [r7, #12]
 801c76c:	60b9      	str	r1, [r7, #8]
 801c76e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d002      	beq.n	801c77c <_fxe_file_write+0x18>
 801c776:	68bb      	ldr	r3, [r7, #8]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d101      	bne.n	801c780 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 801c77c:	2318      	movs	r3, #24
 801c77e:	e006      	b.n	801c78e <_fxe_file_write+0x2a>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 801c780:	687a      	ldr	r2, [r7, #4]
 801c782:	68b9      	ldr	r1, [r7, #8]
 801c784:	68f8      	ldr	r0, [r7, #12]
 801c786:	f7fa f9cb 	bl	8016b20 <_fx_file_write>
 801c78a:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 801c78c:	697b      	ldr	r3, [r7, #20]
}
 801c78e:	4618      	mov	r0, r3
 801c790:	3718      	adds	r7, #24
 801c792:	46bd      	mov	sp, r7
 801c794:	bd80      	pop	{r7, pc}

0801c796 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 801c796:	b580      	push	{r7, lr}
 801c798:	b084      	sub	sp, #16
 801c79a:	af00      	add	r7, sp, #0
 801c79c:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d101      	bne.n	801c7a8 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 801c7a4:	2318      	movs	r3, #24
 801c7a6:	e004      	b.n	801c7b2 <_fxe_media_close+0x1c>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	f7fb fc19 	bl	8017fe0 <_fx_media_close>
 801c7ae:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801c7b0:	68fb      	ldr	r3, [r7, #12]
}
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	3710      	adds	r7, #16
 801c7b6:	46bd      	mov	sp, r7
 801c7b8:	bd80      	pop	{r7, pc}

0801c7ba <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 801c7ba:	b580      	push	{r7, lr}
 801c7bc:	b084      	sub	sp, #16
 801c7be:	af00      	add	r7, sp, #0
 801c7c0:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d101      	bne.n	801c7cc <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 801c7c8:	2318      	movs	r3, #24
 801c7ca:	e004      	b.n	801c7d6 <_fxe_media_flush+0x1c>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 801c7cc:	6878      	ldr	r0, [r7, #4]
 801c7ce:	f7fb fdb7 	bl	8018340 <_fx_media_flush>
 801c7d2:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801c7d4:	68fb      	ldr	r3, [r7, #12]
}
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	3710      	adds	r7, #16
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
	...

0801c7e0 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b08a      	sub	sp, #40	; 0x28
 801c7e4:	af02      	add	r7, sp, #8
 801c7e6:	60f8      	str	r0, [r7, #12]
 801c7e8:	60b9      	str	r1, [r7, #8]
 801c7ea:	607a      	str	r2, [r7, #4]
 801c7ec:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d00a      	beq.n	801c80a <_fxe_media_open+0x2a>
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d007      	beq.n	801c80a <_fxe_media_open+0x2a>
 801c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d004      	beq.n	801c80a <_fxe_media_open+0x2a>
 801c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c802:	f24a 12c0 	movw	r2, #41408	; 0xa1c0
 801c806:	4293      	cmp	r3, r2
 801c808:	d001      	beq.n	801c80e <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 801c80a:	2318      	movs	r3, #24
 801c80c:	e045      	b.n	801c89a <_fxe_media_open+0xba>

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 801c80e:	4b25      	ldr	r3, [pc, #148]	; (801c8a4 <_fxe_media_open+0xc4>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	617b      	str	r3, [r7, #20]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	425b      	negs	r3, r3
 801c818:	697a      	ldr	r2, [r7, #20]
 801c81a:	4013      	ands	r3, r2
 801c81c:	617b      	str	r3, [r7, #20]

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	2b01      	cmp	r3, #1
 801c822:	d004      	beq.n	801c82e <_fxe_media_open+0x4e>
 801c824:	4b1f      	ldr	r3, [pc, #124]	; (801c8a4 <_fxe_media_open+0xc4>)
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	697a      	ldr	r2, [r7, #20]
 801c82a:	429a      	cmp	r2, r3
 801c82c:	d001      	beq.n	801c832 <_fxe_media_open+0x52>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801c82e:	2302      	movs	r3, #2
 801c830:	e033      	b.n	801c89a <_fxe_media_open+0xba>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 801c832:	4b1d      	ldr	r3, [pc, #116]	; (801c8a8 <_fxe_media_open+0xc8>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	617b      	str	r3, [r7, #20]

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801c838:	697b      	ldr	r3, [r7, #20]
 801c83a:	425b      	negs	r3, r3
 801c83c:	697a      	ldr	r2, [r7, #20]
 801c83e:	4013      	ands	r3, r2
 801c840:	617b      	str	r3, [r7, #20]

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	2b01      	cmp	r3, #1
 801c846:	d004      	beq.n	801c852 <_fxe_media_open+0x72>
 801c848:	4b17      	ldr	r3, [pc, #92]	; (801c8a8 <_fxe_media_open+0xc8>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	697a      	ldr	r2, [r7, #20]
 801c84e:	429a      	cmp	r2, r3
 801c850:	d001      	beq.n	801c856 <_fxe_media_open+0x76>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801c852:	2302      	movs	r3, #2
 801c854:	e021      	b.n	801c89a <_fxe_media_open+0xba>
    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 801c856:	4b15      	ldr	r3, [pc, #84]	; (801c8ac <_fxe_media_open+0xcc>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	61fb      	str	r3, [r7, #28]
    open_count =     _fx_system_media_opened_count;
 801c85c:	4b14      	ldr	r3, [pc, #80]	; (801c8b0 <_fxe_media_open+0xd0>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	61bb      	str	r3, [r7, #24]
    while (open_count--)
 801c862:	e009      	b.n	801c878 <_fxe_media_open+0x98>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 801c864:	68fa      	ldr	r2, [r7, #12]
 801c866:	69fb      	ldr	r3, [r7, #28]
 801c868:	429a      	cmp	r2, r3
 801c86a:	d101      	bne.n	801c870 <_fxe_media_open+0x90>
            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 801c86c:	2318      	movs	r3, #24
 801c86e:	e014      	b.n	801c89a <_fxe_media_open+0xba>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801c870:	69fb      	ldr	r3, [r7, #28]
 801c872:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801c876:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801c878:	69bb      	ldr	r3, [r7, #24]
 801c87a:	1e5a      	subs	r2, r3, #1
 801c87c:	61ba      	str	r2, [r7, #24]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d1f0      	bne.n	801c864 <_fxe_media_open+0x84>
    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 801c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c884:	9301      	str	r3, [sp, #4]
 801c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c888:	9300      	str	r3, [sp, #0]
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	687a      	ldr	r2, [r7, #4]
 801c88e:	68b9      	ldr	r1, [r7, #8]
 801c890:	68f8      	ldr	r0, [r7, #12]
 801c892:	f7fb febd 	bl	8018610 <_fx_media_open>
 801c896:	6138      	str	r0, [r7, #16]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 801c898:	693b      	ldr	r3, [r7, #16]
}
 801c89a:	4618      	mov	r0, r3
 801c89c:	3720      	adds	r7, #32
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}
 801c8a2:	bf00      	nop
 801c8a4:	2000d230 	.word	0x2000d230
 801c8a8:	2000d234 	.word	0x2000d234
 801c8ac:	2000d220 	.word	0x2000d220
 801c8b0:	2000d224 	.word	0x2000d224

0801c8b4 <__cvt>:
 801c8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8b8:	ec55 4b10 	vmov	r4, r5, d0
 801c8bc:	2d00      	cmp	r5, #0
 801c8be:	460e      	mov	r6, r1
 801c8c0:	4619      	mov	r1, r3
 801c8c2:	462b      	mov	r3, r5
 801c8c4:	bfb4      	ite	lt
 801c8c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c8ca:	2300      	movge	r3, #0
 801c8cc:	4691      	mov	r9, r2
 801c8ce:	bfbf      	itttt	lt
 801c8d0:	4622      	movlt	r2, r4
 801c8d2:	461d      	movlt	r5, r3
 801c8d4:	232d      	movlt	r3, #45	; 0x2d
 801c8d6:	4614      	movlt	r4, r2
 801c8d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c8dc:	700b      	strb	r3, [r1, #0]
 801c8de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8e0:	f023 0820 	bic.w	r8, r3, #32
 801c8e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c8e8:	d005      	beq.n	801c8f6 <__cvt+0x42>
 801c8ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c8ee:	d100      	bne.n	801c8f2 <__cvt+0x3e>
 801c8f0:	3601      	adds	r6, #1
 801c8f2:	2102      	movs	r1, #2
 801c8f4:	e000      	b.n	801c8f8 <__cvt+0x44>
 801c8f6:	2103      	movs	r1, #3
 801c8f8:	ab03      	add	r3, sp, #12
 801c8fa:	4632      	mov	r2, r6
 801c8fc:	9301      	str	r3, [sp, #4]
 801c8fe:	ab02      	add	r3, sp, #8
 801c900:	ec45 4b10 	vmov	d0, r4, r5
 801c904:	9300      	str	r3, [sp, #0]
 801c906:	4653      	mov	r3, sl
 801c908:	f001 f992 	bl	801dc30 <_dtoa_r>
 801c90c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c910:	4607      	mov	r7, r0
 801c912:	d102      	bne.n	801c91a <__cvt+0x66>
 801c914:	f019 0f01 	tst.w	r9, #1
 801c918:	d022      	beq.n	801c960 <__cvt+0xac>
 801c91a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c91e:	eb07 0906 	add.w	r9, r7, r6
 801c922:	d110      	bne.n	801c946 <__cvt+0x92>
 801c924:	783b      	ldrb	r3, [r7, #0]
 801c926:	2b30      	cmp	r3, #48	; 0x30
 801c928:	d10a      	bne.n	801c940 <__cvt+0x8c>
 801c92a:	2200      	movs	r2, #0
 801c92c:	2300      	movs	r3, #0
 801c92e:	4620      	mov	r0, r4
 801c930:	4629      	mov	r1, r5
 801c932:	f7e4 f8cd 	bl	8000ad0 <__aeabi_dcmpeq>
 801c936:	b918      	cbnz	r0, 801c940 <__cvt+0x8c>
 801c938:	f1c6 0601 	rsb	r6, r6, #1
 801c93c:	f8ca 6000 	str.w	r6, [sl]
 801c940:	f8da 3000 	ldr.w	r3, [sl]
 801c944:	4499      	add	r9, r3
 801c946:	2200      	movs	r2, #0
 801c948:	2300      	movs	r3, #0
 801c94a:	4620      	mov	r0, r4
 801c94c:	4629      	mov	r1, r5
 801c94e:	f7e4 f8bf 	bl	8000ad0 <__aeabi_dcmpeq>
 801c952:	b108      	cbz	r0, 801c958 <__cvt+0xa4>
 801c954:	f8cd 900c 	str.w	r9, [sp, #12]
 801c958:	2230      	movs	r2, #48	; 0x30
 801c95a:	9b03      	ldr	r3, [sp, #12]
 801c95c:	454b      	cmp	r3, r9
 801c95e:	d307      	bcc.n	801c970 <__cvt+0xbc>
 801c960:	9b03      	ldr	r3, [sp, #12]
 801c962:	4638      	mov	r0, r7
 801c964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c966:	1bdb      	subs	r3, r3, r7
 801c968:	6013      	str	r3, [r2, #0]
 801c96a:	b004      	add	sp, #16
 801c96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c970:	1c59      	adds	r1, r3, #1
 801c972:	9103      	str	r1, [sp, #12]
 801c974:	701a      	strb	r2, [r3, #0]
 801c976:	e7f0      	b.n	801c95a <__cvt+0xa6>

0801c978 <__exponent>:
 801c978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c97a:	2900      	cmp	r1, #0
 801c97c:	4603      	mov	r3, r0
 801c97e:	bfb8      	it	lt
 801c980:	4249      	neglt	r1, r1
 801c982:	f803 2b02 	strb.w	r2, [r3], #2
 801c986:	bfb4      	ite	lt
 801c988:	222d      	movlt	r2, #45	; 0x2d
 801c98a:	222b      	movge	r2, #43	; 0x2b
 801c98c:	2909      	cmp	r1, #9
 801c98e:	7042      	strb	r2, [r0, #1]
 801c990:	dd29      	ble.n	801c9e6 <__exponent+0x6e>
 801c992:	f10d 0207 	add.w	r2, sp, #7
 801c996:	260a      	movs	r6, #10
 801c998:	4617      	mov	r7, r2
 801c99a:	4694      	mov	ip, r2
 801c99c:	3a01      	subs	r2, #1
 801c99e:	fb91 f5f6 	sdiv	r5, r1, r6
 801c9a2:	fb06 1415 	mls	r4, r6, r5, r1
 801c9a6:	3430      	adds	r4, #48	; 0x30
 801c9a8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801c9ac:	460c      	mov	r4, r1
 801c9ae:	4629      	mov	r1, r5
 801c9b0:	2c63      	cmp	r4, #99	; 0x63
 801c9b2:	dcf2      	bgt.n	801c99a <__exponent+0x22>
 801c9b4:	3130      	adds	r1, #48	; 0x30
 801c9b6:	f1ac 0402 	sub.w	r4, ip, #2
 801c9ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c9be:	1c41      	adds	r1, r0, #1
 801c9c0:	4622      	mov	r2, r4
 801c9c2:	42ba      	cmp	r2, r7
 801c9c4:	d30a      	bcc.n	801c9dc <__exponent+0x64>
 801c9c6:	f10d 0209 	add.w	r2, sp, #9
 801c9ca:	eba2 020c 	sub.w	r2, r2, ip
 801c9ce:	42bc      	cmp	r4, r7
 801c9d0:	bf88      	it	hi
 801c9d2:	2200      	movhi	r2, #0
 801c9d4:	4413      	add	r3, r2
 801c9d6:	1a18      	subs	r0, r3, r0
 801c9d8:	b003      	add	sp, #12
 801c9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c9e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 801c9e4:	e7ed      	b.n	801c9c2 <__exponent+0x4a>
 801c9e6:	2330      	movs	r3, #48	; 0x30
 801c9e8:	3130      	adds	r1, #48	; 0x30
 801c9ea:	7083      	strb	r3, [r0, #2]
 801c9ec:	1d03      	adds	r3, r0, #4
 801c9ee:	70c1      	strb	r1, [r0, #3]
 801c9f0:	e7f1      	b.n	801c9d6 <__exponent+0x5e>
	...

0801c9f4 <_printf_float>:
 801c9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f8:	ed2d 8b02 	vpush	{d8}
 801c9fc:	b08d      	sub	sp, #52	; 0x34
 801c9fe:	460c      	mov	r4, r1
 801ca00:	4616      	mov	r6, r2
 801ca02:	461f      	mov	r7, r3
 801ca04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ca08:	4605      	mov	r5, r0
 801ca0a:	f000 ffe7 	bl	801d9dc <_localeconv_r>
 801ca0e:	f8d0 a000 	ldr.w	sl, [r0]
 801ca12:	4650      	mov	r0, sl
 801ca14:	f7e3 fc30 	bl	8000278 <strlen>
 801ca18:	2300      	movs	r3, #0
 801ca1a:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ca1e:	ee08 0a10 	vmov	s16, r0
 801ca22:	930a      	str	r3, [sp, #40]	; 0x28
 801ca24:	6823      	ldr	r3, [r4, #0]
 801ca26:	9305      	str	r3, [sp, #20]
 801ca28:	f8d8 3000 	ldr.w	r3, [r8]
 801ca2c:	3307      	adds	r3, #7
 801ca2e:	f023 0307 	bic.w	r3, r3, #7
 801ca32:	f103 0208 	add.w	r2, r3, #8
 801ca36:	f8c8 2000 	str.w	r2, [r8]
 801ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ca42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ca46:	f8cd 8018 	str.w	r8, [sp, #24]
 801ca4a:	9307      	str	r3, [sp, #28]
 801ca4c:	4b9f      	ldr	r3, [pc, #636]	; (801cccc <_printf_float+0x2d8>)
 801ca4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ca52:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801ca56:	f7e4 f86d 	bl	8000b34 <__aeabi_dcmpun>
 801ca5a:	bb88      	cbnz	r0, 801cac0 <_printf_float+0xcc>
 801ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca60:	4b9a      	ldr	r3, [pc, #616]	; (801cccc <_printf_float+0x2d8>)
 801ca62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ca66:	f7e4 f847 	bl	8000af8 <__aeabi_dcmple>
 801ca6a:	bb48      	cbnz	r0, 801cac0 <_printf_float+0xcc>
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	2300      	movs	r3, #0
 801ca70:	4640      	mov	r0, r8
 801ca72:	4649      	mov	r1, r9
 801ca74:	f7e4 f836 	bl	8000ae4 <__aeabi_dcmplt>
 801ca78:	b110      	cbz	r0, 801ca80 <_printf_float+0x8c>
 801ca7a:	232d      	movs	r3, #45	; 0x2d
 801ca7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca80:	4a93      	ldr	r2, [pc, #588]	; (801ccd0 <_printf_float+0x2dc>)
 801ca82:	4b94      	ldr	r3, [pc, #592]	; (801ccd4 <_printf_float+0x2e0>)
 801ca84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ca88:	bf94      	ite	ls
 801ca8a:	4690      	movls	r8, r2
 801ca8c:	4698      	movhi	r8, r3
 801ca8e:	2303      	movs	r3, #3
 801ca90:	f04f 0900 	mov.w	r9, #0
 801ca94:	6123      	str	r3, [r4, #16]
 801ca96:	9b05      	ldr	r3, [sp, #20]
 801ca98:	f023 0304 	bic.w	r3, r3, #4
 801ca9c:	6023      	str	r3, [r4, #0]
 801ca9e:	4633      	mov	r3, r6
 801caa0:	aa0b      	add	r2, sp, #44	; 0x2c
 801caa2:	4621      	mov	r1, r4
 801caa4:	4628      	mov	r0, r5
 801caa6:	9700      	str	r7, [sp, #0]
 801caa8:	f000 f9da 	bl	801ce60 <_printf_common>
 801caac:	3001      	adds	r0, #1
 801caae:	f040 8090 	bne.w	801cbd2 <_printf_float+0x1de>
 801cab2:	f04f 30ff 	mov.w	r0, #4294967295
 801cab6:	b00d      	add	sp, #52	; 0x34
 801cab8:	ecbd 8b02 	vpop	{d8}
 801cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac0:	4642      	mov	r2, r8
 801cac2:	464b      	mov	r3, r9
 801cac4:	4640      	mov	r0, r8
 801cac6:	4649      	mov	r1, r9
 801cac8:	f7e4 f834 	bl	8000b34 <__aeabi_dcmpun>
 801cacc:	b140      	cbz	r0, 801cae0 <_printf_float+0xec>
 801cace:	464b      	mov	r3, r9
 801cad0:	4a81      	ldr	r2, [pc, #516]	; (801ccd8 <_printf_float+0x2e4>)
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	bfbc      	itt	lt
 801cad6:	232d      	movlt	r3, #45	; 0x2d
 801cad8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cadc:	4b7f      	ldr	r3, [pc, #508]	; (801ccdc <_printf_float+0x2e8>)
 801cade:	e7d1      	b.n	801ca84 <_printf_float+0x90>
 801cae0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801cae4:	6863      	ldr	r3, [r4, #4]
 801cae6:	9206      	str	r2, [sp, #24]
 801cae8:	1c5a      	adds	r2, r3, #1
 801caea:	d13f      	bne.n	801cb6c <_printf_float+0x178>
 801caec:	2306      	movs	r3, #6
 801caee:	6063      	str	r3, [r4, #4]
 801caf0:	9b05      	ldr	r3, [sp, #20]
 801caf2:	4628      	mov	r0, r5
 801caf4:	6861      	ldr	r1, [r4, #4]
 801caf6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801cafa:	2300      	movs	r3, #0
 801cafc:	9303      	str	r3, [sp, #12]
 801cafe:	ab0a      	add	r3, sp, #40	; 0x28
 801cb00:	6022      	str	r2, [r4, #0]
 801cb02:	e9cd b301 	strd	fp, r3, [sp, #4]
 801cb06:	ab09      	add	r3, sp, #36	; 0x24
 801cb08:	ec49 8b10 	vmov	d0, r8, r9
 801cb0c:	9300      	str	r3, [sp, #0]
 801cb0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801cb12:	f7ff fecf 	bl	801c8b4 <__cvt>
 801cb16:	9b06      	ldr	r3, [sp, #24]
 801cb18:	4680      	mov	r8, r0
 801cb1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb1c:	2b47      	cmp	r3, #71	; 0x47
 801cb1e:	d108      	bne.n	801cb32 <_printf_float+0x13e>
 801cb20:	1cc8      	adds	r0, r1, #3
 801cb22:	db02      	blt.n	801cb2a <_printf_float+0x136>
 801cb24:	6863      	ldr	r3, [r4, #4]
 801cb26:	4299      	cmp	r1, r3
 801cb28:	dd41      	ble.n	801cbae <_printf_float+0x1ba>
 801cb2a:	f1ab 0302 	sub.w	r3, fp, #2
 801cb2e:	fa5f fb83 	uxtb.w	fp, r3
 801cb32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cb36:	d820      	bhi.n	801cb7a <_printf_float+0x186>
 801cb38:	3901      	subs	r1, #1
 801cb3a:	465a      	mov	r2, fp
 801cb3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cb40:	9109      	str	r1, [sp, #36]	; 0x24
 801cb42:	f7ff ff19 	bl	801c978 <__exponent>
 801cb46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb48:	4681      	mov	r9, r0
 801cb4a:	1813      	adds	r3, r2, r0
 801cb4c:	2a01      	cmp	r2, #1
 801cb4e:	6123      	str	r3, [r4, #16]
 801cb50:	dc02      	bgt.n	801cb58 <_printf_float+0x164>
 801cb52:	6822      	ldr	r2, [r4, #0]
 801cb54:	07d2      	lsls	r2, r2, #31
 801cb56:	d501      	bpl.n	801cb5c <_printf_float+0x168>
 801cb58:	3301      	adds	r3, #1
 801cb5a:	6123      	str	r3, [r4, #16]
 801cb5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d09c      	beq.n	801ca9e <_printf_float+0xaa>
 801cb64:	232d      	movs	r3, #45	; 0x2d
 801cb66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb6a:	e798      	b.n	801ca9e <_printf_float+0xaa>
 801cb6c:	9a06      	ldr	r2, [sp, #24]
 801cb6e:	2a47      	cmp	r2, #71	; 0x47
 801cb70:	d1be      	bne.n	801caf0 <_printf_float+0xfc>
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d1bc      	bne.n	801caf0 <_printf_float+0xfc>
 801cb76:	2301      	movs	r3, #1
 801cb78:	e7b9      	b.n	801caee <_printf_float+0xfa>
 801cb7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801cb7e:	d118      	bne.n	801cbb2 <_printf_float+0x1be>
 801cb80:	2900      	cmp	r1, #0
 801cb82:	6863      	ldr	r3, [r4, #4]
 801cb84:	dd0b      	ble.n	801cb9e <_printf_float+0x1aa>
 801cb86:	6121      	str	r1, [r4, #16]
 801cb88:	b913      	cbnz	r3, 801cb90 <_printf_float+0x19c>
 801cb8a:	6822      	ldr	r2, [r4, #0]
 801cb8c:	07d0      	lsls	r0, r2, #31
 801cb8e:	d502      	bpl.n	801cb96 <_printf_float+0x1a2>
 801cb90:	3301      	adds	r3, #1
 801cb92:	440b      	add	r3, r1
 801cb94:	6123      	str	r3, [r4, #16]
 801cb96:	f04f 0900 	mov.w	r9, #0
 801cb9a:	65a1      	str	r1, [r4, #88]	; 0x58
 801cb9c:	e7de      	b.n	801cb5c <_printf_float+0x168>
 801cb9e:	b913      	cbnz	r3, 801cba6 <_printf_float+0x1b2>
 801cba0:	6822      	ldr	r2, [r4, #0]
 801cba2:	07d2      	lsls	r2, r2, #31
 801cba4:	d501      	bpl.n	801cbaa <_printf_float+0x1b6>
 801cba6:	3302      	adds	r3, #2
 801cba8:	e7f4      	b.n	801cb94 <_printf_float+0x1a0>
 801cbaa:	2301      	movs	r3, #1
 801cbac:	e7f2      	b.n	801cb94 <_printf_float+0x1a0>
 801cbae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801cbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbb4:	4299      	cmp	r1, r3
 801cbb6:	db05      	blt.n	801cbc4 <_printf_float+0x1d0>
 801cbb8:	6823      	ldr	r3, [r4, #0]
 801cbba:	6121      	str	r1, [r4, #16]
 801cbbc:	07d8      	lsls	r0, r3, #31
 801cbbe:	d5ea      	bpl.n	801cb96 <_printf_float+0x1a2>
 801cbc0:	1c4b      	adds	r3, r1, #1
 801cbc2:	e7e7      	b.n	801cb94 <_printf_float+0x1a0>
 801cbc4:	2900      	cmp	r1, #0
 801cbc6:	bfd4      	ite	le
 801cbc8:	f1c1 0202 	rsble	r2, r1, #2
 801cbcc:	2201      	movgt	r2, #1
 801cbce:	4413      	add	r3, r2
 801cbd0:	e7e0      	b.n	801cb94 <_printf_float+0x1a0>
 801cbd2:	6823      	ldr	r3, [r4, #0]
 801cbd4:	055a      	lsls	r2, r3, #21
 801cbd6:	d407      	bmi.n	801cbe8 <_printf_float+0x1f4>
 801cbd8:	6923      	ldr	r3, [r4, #16]
 801cbda:	4642      	mov	r2, r8
 801cbdc:	4631      	mov	r1, r6
 801cbde:	4628      	mov	r0, r5
 801cbe0:	47b8      	blx	r7
 801cbe2:	3001      	adds	r0, #1
 801cbe4:	d12c      	bne.n	801cc40 <_printf_float+0x24c>
 801cbe6:	e764      	b.n	801cab2 <_printf_float+0xbe>
 801cbe8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cbec:	f240 80e0 	bls.w	801cdb0 <_printf_float+0x3bc>
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cbf8:	f7e3 ff6a 	bl	8000ad0 <__aeabi_dcmpeq>
 801cbfc:	2800      	cmp	r0, #0
 801cbfe:	d034      	beq.n	801cc6a <_printf_float+0x276>
 801cc00:	2301      	movs	r3, #1
 801cc02:	4a37      	ldr	r2, [pc, #220]	; (801cce0 <_printf_float+0x2ec>)
 801cc04:	4631      	mov	r1, r6
 801cc06:	4628      	mov	r0, r5
 801cc08:	47b8      	blx	r7
 801cc0a:	3001      	adds	r0, #1
 801cc0c:	f43f af51 	beq.w	801cab2 <_printf_float+0xbe>
 801cc10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cc14:	429a      	cmp	r2, r3
 801cc16:	db02      	blt.n	801cc1e <_printf_float+0x22a>
 801cc18:	6823      	ldr	r3, [r4, #0]
 801cc1a:	07d8      	lsls	r0, r3, #31
 801cc1c:	d510      	bpl.n	801cc40 <_printf_float+0x24c>
 801cc1e:	ee18 3a10 	vmov	r3, s16
 801cc22:	4652      	mov	r2, sl
 801cc24:	4631      	mov	r1, r6
 801cc26:	4628      	mov	r0, r5
 801cc28:	47b8      	blx	r7
 801cc2a:	3001      	adds	r0, #1
 801cc2c:	f43f af41 	beq.w	801cab2 <_printf_float+0xbe>
 801cc30:	f04f 0800 	mov.w	r8, #0
 801cc34:	f104 091a 	add.w	r9, r4, #26
 801cc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc3a:	3b01      	subs	r3, #1
 801cc3c:	4543      	cmp	r3, r8
 801cc3e:	dc09      	bgt.n	801cc54 <_printf_float+0x260>
 801cc40:	6823      	ldr	r3, [r4, #0]
 801cc42:	079b      	lsls	r3, r3, #30
 801cc44:	f100 8107 	bmi.w	801ce56 <_printf_float+0x462>
 801cc48:	68e0      	ldr	r0, [r4, #12]
 801cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc4c:	4298      	cmp	r0, r3
 801cc4e:	bfb8      	it	lt
 801cc50:	4618      	movlt	r0, r3
 801cc52:	e730      	b.n	801cab6 <_printf_float+0xc2>
 801cc54:	2301      	movs	r3, #1
 801cc56:	464a      	mov	r2, r9
 801cc58:	4631      	mov	r1, r6
 801cc5a:	4628      	mov	r0, r5
 801cc5c:	47b8      	blx	r7
 801cc5e:	3001      	adds	r0, #1
 801cc60:	f43f af27 	beq.w	801cab2 <_printf_float+0xbe>
 801cc64:	f108 0801 	add.w	r8, r8, #1
 801cc68:	e7e6      	b.n	801cc38 <_printf_float+0x244>
 801cc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	dc39      	bgt.n	801cce4 <_printf_float+0x2f0>
 801cc70:	2301      	movs	r3, #1
 801cc72:	4a1b      	ldr	r2, [pc, #108]	; (801cce0 <_printf_float+0x2ec>)
 801cc74:	4631      	mov	r1, r6
 801cc76:	4628      	mov	r0, r5
 801cc78:	47b8      	blx	r7
 801cc7a:	3001      	adds	r0, #1
 801cc7c:	f43f af19 	beq.w	801cab2 <_printf_float+0xbe>
 801cc80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cc84:	4313      	orrs	r3, r2
 801cc86:	d102      	bne.n	801cc8e <_printf_float+0x29a>
 801cc88:	6823      	ldr	r3, [r4, #0]
 801cc8a:	07d9      	lsls	r1, r3, #31
 801cc8c:	d5d8      	bpl.n	801cc40 <_printf_float+0x24c>
 801cc8e:	ee18 3a10 	vmov	r3, s16
 801cc92:	4652      	mov	r2, sl
 801cc94:	4631      	mov	r1, r6
 801cc96:	4628      	mov	r0, r5
 801cc98:	47b8      	blx	r7
 801cc9a:	3001      	adds	r0, #1
 801cc9c:	f43f af09 	beq.w	801cab2 <_printf_float+0xbe>
 801cca0:	f04f 0900 	mov.w	r9, #0
 801cca4:	f104 0a1a 	add.w	sl, r4, #26
 801cca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccaa:	425b      	negs	r3, r3
 801ccac:	454b      	cmp	r3, r9
 801ccae:	dc01      	bgt.n	801ccb4 <_printf_float+0x2c0>
 801ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccb2:	e792      	b.n	801cbda <_printf_float+0x1e6>
 801ccb4:	2301      	movs	r3, #1
 801ccb6:	4652      	mov	r2, sl
 801ccb8:	4631      	mov	r1, r6
 801ccba:	4628      	mov	r0, r5
 801ccbc:	47b8      	blx	r7
 801ccbe:	3001      	adds	r0, #1
 801ccc0:	f43f aef7 	beq.w	801cab2 <_printf_float+0xbe>
 801ccc4:	f109 0901 	add.w	r9, r9, #1
 801ccc8:	e7ee      	b.n	801cca8 <_printf_float+0x2b4>
 801ccca:	bf00      	nop
 801cccc:	7fefffff 	.word	0x7fefffff
 801ccd0:	080239c2 	.word	0x080239c2
 801ccd4:	080239c6 	.word	0x080239c6
 801ccd8:	080239ca 	.word	0x080239ca
 801ccdc:	080239ce 	.word	0x080239ce
 801cce0:	08023d58 	.word	0x08023d58
 801cce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cce8:	429a      	cmp	r2, r3
 801ccea:	bfa8      	it	ge
 801ccec:	461a      	movge	r2, r3
 801ccee:	2a00      	cmp	r2, #0
 801ccf0:	4691      	mov	r9, r2
 801ccf2:	dc37      	bgt.n	801cd64 <_printf_float+0x370>
 801ccf4:	f04f 0b00 	mov.w	fp, #0
 801ccf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ccfc:	f104 021a 	add.w	r2, r4, #26
 801cd00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cd02:	9305      	str	r3, [sp, #20]
 801cd04:	eba3 0309 	sub.w	r3, r3, r9
 801cd08:	455b      	cmp	r3, fp
 801cd0a:	dc33      	bgt.n	801cd74 <_printf_float+0x380>
 801cd0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cd10:	429a      	cmp	r2, r3
 801cd12:	db3b      	blt.n	801cd8c <_printf_float+0x398>
 801cd14:	6823      	ldr	r3, [r4, #0]
 801cd16:	07da      	lsls	r2, r3, #31
 801cd18:	d438      	bmi.n	801cd8c <_printf_float+0x398>
 801cd1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cd1e:	eba2 0903 	sub.w	r9, r2, r3
 801cd22:	9b05      	ldr	r3, [sp, #20]
 801cd24:	1ad2      	subs	r2, r2, r3
 801cd26:	4591      	cmp	r9, r2
 801cd28:	bfa8      	it	ge
 801cd2a:	4691      	movge	r9, r2
 801cd2c:	f1b9 0f00 	cmp.w	r9, #0
 801cd30:	dc35      	bgt.n	801cd9e <_printf_float+0x3aa>
 801cd32:	f04f 0800 	mov.w	r8, #0
 801cd36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cd3a:	f104 0a1a 	add.w	sl, r4, #26
 801cd3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cd42:	1a9b      	subs	r3, r3, r2
 801cd44:	eba3 0309 	sub.w	r3, r3, r9
 801cd48:	4543      	cmp	r3, r8
 801cd4a:	f77f af79 	ble.w	801cc40 <_printf_float+0x24c>
 801cd4e:	2301      	movs	r3, #1
 801cd50:	4652      	mov	r2, sl
 801cd52:	4631      	mov	r1, r6
 801cd54:	4628      	mov	r0, r5
 801cd56:	47b8      	blx	r7
 801cd58:	3001      	adds	r0, #1
 801cd5a:	f43f aeaa 	beq.w	801cab2 <_printf_float+0xbe>
 801cd5e:	f108 0801 	add.w	r8, r8, #1
 801cd62:	e7ec      	b.n	801cd3e <_printf_float+0x34a>
 801cd64:	4613      	mov	r3, r2
 801cd66:	4631      	mov	r1, r6
 801cd68:	4642      	mov	r2, r8
 801cd6a:	4628      	mov	r0, r5
 801cd6c:	47b8      	blx	r7
 801cd6e:	3001      	adds	r0, #1
 801cd70:	d1c0      	bne.n	801ccf4 <_printf_float+0x300>
 801cd72:	e69e      	b.n	801cab2 <_printf_float+0xbe>
 801cd74:	2301      	movs	r3, #1
 801cd76:	4631      	mov	r1, r6
 801cd78:	4628      	mov	r0, r5
 801cd7a:	9205      	str	r2, [sp, #20]
 801cd7c:	47b8      	blx	r7
 801cd7e:	3001      	adds	r0, #1
 801cd80:	f43f ae97 	beq.w	801cab2 <_printf_float+0xbe>
 801cd84:	f10b 0b01 	add.w	fp, fp, #1
 801cd88:	9a05      	ldr	r2, [sp, #20]
 801cd8a:	e7b9      	b.n	801cd00 <_printf_float+0x30c>
 801cd8c:	ee18 3a10 	vmov	r3, s16
 801cd90:	4652      	mov	r2, sl
 801cd92:	4631      	mov	r1, r6
 801cd94:	4628      	mov	r0, r5
 801cd96:	47b8      	blx	r7
 801cd98:	3001      	adds	r0, #1
 801cd9a:	d1be      	bne.n	801cd1a <_printf_float+0x326>
 801cd9c:	e689      	b.n	801cab2 <_printf_float+0xbe>
 801cd9e:	9a05      	ldr	r2, [sp, #20]
 801cda0:	464b      	mov	r3, r9
 801cda2:	4631      	mov	r1, r6
 801cda4:	4628      	mov	r0, r5
 801cda6:	4442      	add	r2, r8
 801cda8:	47b8      	blx	r7
 801cdaa:	3001      	adds	r0, #1
 801cdac:	d1c1      	bne.n	801cd32 <_printf_float+0x33e>
 801cdae:	e680      	b.n	801cab2 <_printf_float+0xbe>
 801cdb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdb2:	2a01      	cmp	r2, #1
 801cdb4:	dc01      	bgt.n	801cdba <_printf_float+0x3c6>
 801cdb6:	07db      	lsls	r3, r3, #31
 801cdb8:	d53a      	bpl.n	801ce30 <_printf_float+0x43c>
 801cdba:	2301      	movs	r3, #1
 801cdbc:	4642      	mov	r2, r8
 801cdbe:	4631      	mov	r1, r6
 801cdc0:	4628      	mov	r0, r5
 801cdc2:	47b8      	blx	r7
 801cdc4:	3001      	adds	r0, #1
 801cdc6:	f43f ae74 	beq.w	801cab2 <_printf_float+0xbe>
 801cdca:	ee18 3a10 	vmov	r3, s16
 801cdce:	4652      	mov	r2, sl
 801cdd0:	4631      	mov	r1, r6
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	47b8      	blx	r7
 801cdd6:	3001      	adds	r0, #1
 801cdd8:	f43f ae6b 	beq.w	801cab2 <_printf_float+0xbe>
 801cddc:	2200      	movs	r2, #0
 801cdde:	2300      	movs	r3, #0
 801cde0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801cde4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cde8:	f7e3 fe72 	bl	8000ad0 <__aeabi_dcmpeq>
 801cdec:	b9d8      	cbnz	r0, 801ce26 <_printf_float+0x432>
 801cdee:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cdf2:	f108 0201 	add.w	r2, r8, #1
 801cdf6:	4631      	mov	r1, r6
 801cdf8:	4628      	mov	r0, r5
 801cdfa:	47b8      	blx	r7
 801cdfc:	3001      	adds	r0, #1
 801cdfe:	d10e      	bne.n	801ce1e <_printf_float+0x42a>
 801ce00:	e657      	b.n	801cab2 <_printf_float+0xbe>
 801ce02:	2301      	movs	r3, #1
 801ce04:	4652      	mov	r2, sl
 801ce06:	4631      	mov	r1, r6
 801ce08:	4628      	mov	r0, r5
 801ce0a:	47b8      	blx	r7
 801ce0c:	3001      	adds	r0, #1
 801ce0e:	f43f ae50 	beq.w	801cab2 <_printf_float+0xbe>
 801ce12:	f108 0801 	add.w	r8, r8, #1
 801ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce18:	3b01      	subs	r3, #1
 801ce1a:	4543      	cmp	r3, r8
 801ce1c:	dcf1      	bgt.n	801ce02 <_printf_float+0x40e>
 801ce1e:	464b      	mov	r3, r9
 801ce20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ce24:	e6da      	b.n	801cbdc <_printf_float+0x1e8>
 801ce26:	f04f 0800 	mov.w	r8, #0
 801ce2a:	f104 0a1a 	add.w	sl, r4, #26
 801ce2e:	e7f2      	b.n	801ce16 <_printf_float+0x422>
 801ce30:	2301      	movs	r3, #1
 801ce32:	4642      	mov	r2, r8
 801ce34:	e7df      	b.n	801cdf6 <_printf_float+0x402>
 801ce36:	2301      	movs	r3, #1
 801ce38:	464a      	mov	r2, r9
 801ce3a:	4631      	mov	r1, r6
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	47b8      	blx	r7
 801ce40:	3001      	adds	r0, #1
 801ce42:	f43f ae36 	beq.w	801cab2 <_printf_float+0xbe>
 801ce46:	f108 0801 	add.w	r8, r8, #1
 801ce4a:	68e3      	ldr	r3, [r4, #12]
 801ce4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ce4e:	1a5b      	subs	r3, r3, r1
 801ce50:	4543      	cmp	r3, r8
 801ce52:	dcf0      	bgt.n	801ce36 <_printf_float+0x442>
 801ce54:	e6f8      	b.n	801cc48 <_printf_float+0x254>
 801ce56:	f04f 0800 	mov.w	r8, #0
 801ce5a:	f104 0919 	add.w	r9, r4, #25
 801ce5e:	e7f4      	b.n	801ce4a <_printf_float+0x456>

0801ce60 <_printf_common>:
 801ce60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce64:	4616      	mov	r6, r2
 801ce66:	4699      	mov	r9, r3
 801ce68:	688a      	ldr	r2, [r1, #8]
 801ce6a:	4607      	mov	r7, r0
 801ce6c:	690b      	ldr	r3, [r1, #16]
 801ce6e:	460c      	mov	r4, r1
 801ce70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ce74:	4293      	cmp	r3, r2
 801ce76:	bfb8      	it	lt
 801ce78:	4613      	movlt	r3, r2
 801ce7a:	6033      	str	r3, [r6, #0]
 801ce7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ce80:	b10a      	cbz	r2, 801ce86 <_printf_common+0x26>
 801ce82:	3301      	adds	r3, #1
 801ce84:	6033      	str	r3, [r6, #0]
 801ce86:	6823      	ldr	r3, [r4, #0]
 801ce88:	0699      	lsls	r1, r3, #26
 801ce8a:	bf42      	ittt	mi
 801ce8c:	6833      	ldrmi	r3, [r6, #0]
 801ce8e:	3302      	addmi	r3, #2
 801ce90:	6033      	strmi	r3, [r6, #0]
 801ce92:	6825      	ldr	r5, [r4, #0]
 801ce94:	f015 0506 	ands.w	r5, r5, #6
 801ce98:	d106      	bne.n	801cea8 <_printf_common+0x48>
 801ce9a:	f104 0a19 	add.w	sl, r4, #25
 801ce9e:	68e3      	ldr	r3, [r4, #12]
 801cea0:	6832      	ldr	r2, [r6, #0]
 801cea2:	1a9b      	subs	r3, r3, r2
 801cea4:	42ab      	cmp	r3, r5
 801cea6:	dc2b      	bgt.n	801cf00 <_printf_common+0xa0>
 801cea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ceac:	1e13      	subs	r3, r2, #0
 801ceae:	6822      	ldr	r2, [r4, #0]
 801ceb0:	bf18      	it	ne
 801ceb2:	2301      	movne	r3, #1
 801ceb4:	0692      	lsls	r2, r2, #26
 801ceb6:	d430      	bmi.n	801cf1a <_printf_common+0xba>
 801ceb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cebc:	4649      	mov	r1, r9
 801cebe:	4638      	mov	r0, r7
 801cec0:	47c0      	blx	r8
 801cec2:	3001      	adds	r0, #1
 801cec4:	d023      	beq.n	801cf0e <_printf_common+0xae>
 801cec6:	6823      	ldr	r3, [r4, #0]
 801cec8:	341a      	adds	r4, #26
 801ceca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801cece:	f003 0306 	and.w	r3, r3, #6
 801ced2:	2b04      	cmp	r3, #4
 801ced4:	bf0a      	itet	eq
 801ced6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801ceda:	2500      	movne	r5, #0
 801cedc:	6833      	ldreq	r3, [r6, #0]
 801cede:	f04f 0600 	mov.w	r6, #0
 801cee2:	bf08      	it	eq
 801cee4:	1aed      	subeq	r5, r5, r3
 801cee6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801ceea:	bf08      	it	eq
 801ceec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cef0:	4293      	cmp	r3, r2
 801cef2:	bfc4      	itt	gt
 801cef4:	1a9b      	subgt	r3, r3, r2
 801cef6:	18ed      	addgt	r5, r5, r3
 801cef8:	42b5      	cmp	r5, r6
 801cefa:	d11a      	bne.n	801cf32 <_printf_common+0xd2>
 801cefc:	2000      	movs	r0, #0
 801cefe:	e008      	b.n	801cf12 <_printf_common+0xb2>
 801cf00:	2301      	movs	r3, #1
 801cf02:	4652      	mov	r2, sl
 801cf04:	4649      	mov	r1, r9
 801cf06:	4638      	mov	r0, r7
 801cf08:	47c0      	blx	r8
 801cf0a:	3001      	adds	r0, #1
 801cf0c:	d103      	bne.n	801cf16 <_printf_common+0xb6>
 801cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 801cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf16:	3501      	adds	r5, #1
 801cf18:	e7c1      	b.n	801ce9e <_printf_common+0x3e>
 801cf1a:	18e1      	adds	r1, r4, r3
 801cf1c:	1c5a      	adds	r2, r3, #1
 801cf1e:	2030      	movs	r0, #48	; 0x30
 801cf20:	3302      	adds	r3, #2
 801cf22:	4422      	add	r2, r4
 801cf24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cf28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cf2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cf30:	e7c2      	b.n	801ceb8 <_printf_common+0x58>
 801cf32:	2301      	movs	r3, #1
 801cf34:	4622      	mov	r2, r4
 801cf36:	4649      	mov	r1, r9
 801cf38:	4638      	mov	r0, r7
 801cf3a:	47c0      	blx	r8
 801cf3c:	3001      	adds	r0, #1
 801cf3e:	d0e6      	beq.n	801cf0e <_printf_common+0xae>
 801cf40:	3601      	adds	r6, #1
 801cf42:	e7d9      	b.n	801cef8 <_printf_common+0x98>

0801cf44 <_printf_i>:
 801cf44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf48:	7e0f      	ldrb	r7, [r1, #24]
 801cf4a:	4691      	mov	r9, r2
 801cf4c:	4680      	mov	r8, r0
 801cf4e:	460c      	mov	r4, r1
 801cf50:	2f78      	cmp	r7, #120	; 0x78
 801cf52:	469a      	mov	sl, r3
 801cf54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cf56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cf5a:	d807      	bhi.n	801cf6c <_printf_i+0x28>
 801cf5c:	2f62      	cmp	r7, #98	; 0x62
 801cf5e:	d80a      	bhi.n	801cf76 <_printf_i+0x32>
 801cf60:	2f00      	cmp	r7, #0
 801cf62:	f000 80d3 	beq.w	801d10c <_printf_i+0x1c8>
 801cf66:	2f58      	cmp	r7, #88	; 0x58
 801cf68:	f000 80bf 	beq.w	801d0ea <_printf_i+0x1a6>
 801cf6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cf70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cf74:	e03a      	b.n	801cfec <_printf_i+0xa8>
 801cf76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cf7a:	2b15      	cmp	r3, #21
 801cf7c:	d8f6      	bhi.n	801cf6c <_printf_i+0x28>
 801cf7e:	a101      	add	r1, pc, #4	; (adr r1, 801cf84 <_printf_i+0x40>)
 801cf80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cf84:	0801cfdd 	.word	0x0801cfdd
 801cf88:	0801cff1 	.word	0x0801cff1
 801cf8c:	0801cf6d 	.word	0x0801cf6d
 801cf90:	0801cf6d 	.word	0x0801cf6d
 801cf94:	0801cf6d 	.word	0x0801cf6d
 801cf98:	0801cf6d 	.word	0x0801cf6d
 801cf9c:	0801cff1 	.word	0x0801cff1
 801cfa0:	0801cf6d 	.word	0x0801cf6d
 801cfa4:	0801cf6d 	.word	0x0801cf6d
 801cfa8:	0801cf6d 	.word	0x0801cf6d
 801cfac:	0801cf6d 	.word	0x0801cf6d
 801cfb0:	0801d0f3 	.word	0x0801d0f3
 801cfb4:	0801d01d 	.word	0x0801d01d
 801cfb8:	0801d0af 	.word	0x0801d0af
 801cfbc:	0801cf6d 	.word	0x0801cf6d
 801cfc0:	0801cf6d 	.word	0x0801cf6d
 801cfc4:	0801d115 	.word	0x0801d115
 801cfc8:	0801cf6d 	.word	0x0801cf6d
 801cfcc:	0801d01d 	.word	0x0801d01d
 801cfd0:	0801cf6d 	.word	0x0801cf6d
 801cfd4:	0801cf6d 	.word	0x0801cf6d
 801cfd8:	0801d0b7 	.word	0x0801d0b7
 801cfdc:	682b      	ldr	r3, [r5, #0]
 801cfde:	1d1a      	adds	r2, r3, #4
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	602a      	str	r2, [r5, #0]
 801cfe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cfe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cfec:	2301      	movs	r3, #1
 801cfee:	e09e      	b.n	801d12e <_printf_i+0x1ea>
 801cff0:	6820      	ldr	r0, [r4, #0]
 801cff2:	682b      	ldr	r3, [r5, #0]
 801cff4:	0607      	lsls	r7, r0, #24
 801cff6:	f103 0104 	add.w	r1, r3, #4
 801cffa:	6029      	str	r1, [r5, #0]
 801cffc:	d501      	bpl.n	801d002 <_printf_i+0xbe>
 801cffe:	681e      	ldr	r6, [r3, #0]
 801d000:	e003      	b.n	801d00a <_printf_i+0xc6>
 801d002:	0646      	lsls	r6, r0, #25
 801d004:	d5fb      	bpl.n	801cffe <_printf_i+0xba>
 801d006:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d00a:	2e00      	cmp	r6, #0
 801d00c:	da03      	bge.n	801d016 <_printf_i+0xd2>
 801d00e:	232d      	movs	r3, #45	; 0x2d
 801d010:	4276      	negs	r6, r6
 801d012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d016:	4859      	ldr	r0, [pc, #356]	; (801d17c <_printf_i+0x238>)
 801d018:	230a      	movs	r3, #10
 801d01a:	e012      	b.n	801d042 <_printf_i+0xfe>
 801d01c:	682b      	ldr	r3, [r5, #0]
 801d01e:	6820      	ldr	r0, [r4, #0]
 801d020:	1d19      	adds	r1, r3, #4
 801d022:	6029      	str	r1, [r5, #0]
 801d024:	0605      	lsls	r5, r0, #24
 801d026:	d501      	bpl.n	801d02c <_printf_i+0xe8>
 801d028:	681e      	ldr	r6, [r3, #0]
 801d02a:	e002      	b.n	801d032 <_printf_i+0xee>
 801d02c:	0641      	lsls	r1, r0, #25
 801d02e:	d5fb      	bpl.n	801d028 <_printf_i+0xe4>
 801d030:	881e      	ldrh	r6, [r3, #0]
 801d032:	2f6f      	cmp	r7, #111	; 0x6f
 801d034:	4851      	ldr	r0, [pc, #324]	; (801d17c <_printf_i+0x238>)
 801d036:	bf0c      	ite	eq
 801d038:	2308      	moveq	r3, #8
 801d03a:	230a      	movne	r3, #10
 801d03c:	2100      	movs	r1, #0
 801d03e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d042:	6865      	ldr	r5, [r4, #4]
 801d044:	2d00      	cmp	r5, #0
 801d046:	60a5      	str	r5, [r4, #8]
 801d048:	bfa2      	ittt	ge
 801d04a:	6821      	ldrge	r1, [r4, #0]
 801d04c:	f021 0104 	bicge.w	r1, r1, #4
 801d050:	6021      	strge	r1, [r4, #0]
 801d052:	b90e      	cbnz	r6, 801d058 <_printf_i+0x114>
 801d054:	2d00      	cmp	r5, #0
 801d056:	d04a      	beq.n	801d0ee <_printf_i+0x1aa>
 801d058:	4615      	mov	r5, r2
 801d05a:	fbb6 f1f3 	udiv	r1, r6, r3
 801d05e:	fb03 6711 	mls	r7, r3, r1, r6
 801d062:	5dc7      	ldrb	r7, [r0, r7]
 801d064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d068:	4637      	mov	r7, r6
 801d06a:	460e      	mov	r6, r1
 801d06c:	42bb      	cmp	r3, r7
 801d06e:	d9f4      	bls.n	801d05a <_printf_i+0x116>
 801d070:	2b08      	cmp	r3, #8
 801d072:	d10b      	bne.n	801d08c <_printf_i+0x148>
 801d074:	6823      	ldr	r3, [r4, #0]
 801d076:	07de      	lsls	r6, r3, #31
 801d078:	d508      	bpl.n	801d08c <_printf_i+0x148>
 801d07a:	6923      	ldr	r3, [r4, #16]
 801d07c:	6861      	ldr	r1, [r4, #4]
 801d07e:	4299      	cmp	r1, r3
 801d080:	bfde      	ittt	le
 801d082:	2330      	movle	r3, #48	; 0x30
 801d084:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d088:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d08c:	1b52      	subs	r2, r2, r5
 801d08e:	6122      	str	r2, [r4, #16]
 801d090:	464b      	mov	r3, r9
 801d092:	aa03      	add	r2, sp, #12
 801d094:	4621      	mov	r1, r4
 801d096:	4640      	mov	r0, r8
 801d098:	f8cd a000 	str.w	sl, [sp]
 801d09c:	f7ff fee0 	bl	801ce60 <_printf_common>
 801d0a0:	3001      	adds	r0, #1
 801d0a2:	d149      	bne.n	801d138 <_printf_i+0x1f4>
 801d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d0a8:	b004      	add	sp, #16
 801d0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0ae:	6823      	ldr	r3, [r4, #0]
 801d0b0:	f043 0320 	orr.w	r3, r3, #32
 801d0b4:	6023      	str	r3, [r4, #0]
 801d0b6:	2778      	movs	r7, #120	; 0x78
 801d0b8:	4831      	ldr	r0, [pc, #196]	; (801d180 <_printf_i+0x23c>)
 801d0ba:	6823      	ldr	r3, [r4, #0]
 801d0bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d0c0:	061f      	lsls	r7, r3, #24
 801d0c2:	6829      	ldr	r1, [r5, #0]
 801d0c4:	f851 6b04 	ldr.w	r6, [r1], #4
 801d0c8:	d402      	bmi.n	801d0d0 <_printf_i+0x18c>
 801d0ca:	065f      	lsls	r7, r3, #25
 801d0cc:	bf48      	it	mi
 801d0ce:	b2b6      	uxthmi	r6, r6
 801d0d0:	07df      	lsls	r7, r3, #31
 801d0d2:	6029      	str	r1, [r5, #0]
 801d0d4:	bf44      	itt	mi
 801d0d6:	f043 0320 	orrmi.w	r3, r3, #32
 801d0da:	6023      	strmi	r3, [r4, #0]
 801d0dc:	b91e      	cbnz	r6, 801d0e6 <_printf_i+0x1a2>
 801d0de:	6823      	ldr	r3, [r4, #0]
 801d0e0:	f023 0320 	bic.w	r3, r3, #32
 801d0e4:	6023      	str	r3, [r4, #0]
 801d0e6:	2310      	movs	r3, #16
 801d0e8:	e7a8      	b.n	801d03c <_printf_i+0xf8>
 801d0ea:	4824      	ldr	r0, [pc, #144]	; (801d17c <_printf_i+0x238>)
 801d0ec:	e7e5      	b.n	801d0ba <_printf_i+0x176>
 801d0ee:	4615      	mov	r5, r2
 801d0f0:	e7be      	b.n	801d070 <_printf_i+0x12c>
 801d0f2:	682b      	ldr	r3, [r5, #0]
 801d0f4:	6826      	ldr	r6, [r4, #0]
 801d0f6:	1d18      	adds	r0, r3, #4
 801d0f8:	6961      	ldr	r1, [r4, #20]
 801d0fa:	6028      	str	r0, [r5, #0]
 801d0fc:	0635      	lsls	r5, r6, #24
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	d501      	bpl.n	801d106 <_printf_i+0x1c2>
 801d102:	6019      	str	r1, [r3, #0]
 801d104:	e002      	b.n	801d10c <_printf_i+0x1c8>
 801d106:	0670      	lsls	r0, r6, #25
 801d108:	d5fb      	bpl.n	801d102 <_printf_i+0x1be>
 801d10a:	8019      	strh	r1, [r3, #0]
 801d10c:	2300      	movs	r3, #0
 801d10e:	4615      	mov	r5, r2
 801d110:	6123      	str	r3, [r4, #16]
 801d112:	e7bd      	b.n	801d090 <_printf_i+0x14c>
 801d114:	682b      	ldr	r3, [r5, #0]
 801d116:	2100      	movs	r1, #0
 801d118:	1d1a      	adds	r2, r3, #4
 801d11a:	602a      	str	r2, [r5, #0]
 801d11c:	681d      	ldr	r5, [r3, #0]
 801d11e:	6862      	ldr	r2, [r4, #4]
 801d120:	4628      	mov	r0, r5
 801d122:	f000 fcd1 	bl	801dac8 <memchr>
 801d126:	b108      	cbz	r0, 801d12c <_printf_i+0x1e8>
 801d128:	1b40      	subs	r0, r0, r5
 801d12a:	6060      	str	r0, [r4, #4]
 801d12c:	6863      	ldr	r3, [r4, #4]
 801d12e:	6123      	str	r3, [r4, #16]
 801d130:	2300      	movs	r3, #0
 801d132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d136:	e7ab      	b.n	801d090 <_printf_i+0x14c>
 801d138:	6923      	ldr	r3, [r4, #16]
 801d13a:	462a      	mov	r2, r5
 801d13c:	4649      	mov	r1, r9
 801d13e:	4640      	mov	r0, r8
 801d140:	47d0      	blx	sl
 801d142:	3001      	adds	r0, #1
 801d144:	d0ae      	beq.n	801d0a4 <_printf_i+0x160>
 801d146:	6823      	ldr	r3, [r4, #0]
 801d148:	079b      	lsls	r3, r3, #30
 801d14a:	d413      	bmi.n	801d174 <_printf_i+0x230>
 801d14c:	68e0      	ldr	r0, [r4, #12]
 801d14e:	9b03      	ldr	r3, [sp, #12]
 801d150:	4298      	cmp	r0, r3
 801d152:	bfb8      	it	lt
 801d154:	4618      	movlt	r0, r3
 801d156:	e7a7      	b.n	801d0a8 <_printf_i+0x164>
 801d158:	2301      	movs	r3, #1
 801d15a:	4632      	mov	r2, r6
 801d15c:	4649      	mov	r1, r9
 801d15e:	4640      	mov	r0, r8
 801d160:	47d0      	blx	sl
 801d162:	3001      	adds	r0, #1
 801d164:	d09e      	beq.n	801d0a4 <_printf_i+0x160>
 801d166:	3501      	adds	r5, #1
 801d168:	68e3      	ldr	r3, [r4, #12]
 801d16a:	9903      	ldr	r1, [sp, #12]
 801d16c:	1a5b      	subs	r3, r3, r1
 801d16e:	42ab      	cmp	r3, r5
 801d170:	dcf2      	bgt.n	801d158 <_printf_i+0x214>
 801d172:	e7eb      	b.n	801d14c <_printf_i+0x208>
 801d174:	2500      	movs	r5, #0
 801d176:	f104 0619 	add.w	r6, r4, #25
 801d17a:	e7f5      	b.n	801d168 <_printf_i+0x224>
 801d17c:	080239d2 	.word	0x080239d2
 801d180:	080239e3 	.word	0x080239e3

0801d184 <_scanf_float>:
 801d184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d188:	b087      	sub	sp, #28
 801d18a:	4617      	mov	r7, r2
 801d18c:	468b      	mov	fp, r1
 801d18e:	4680      	mov	r8, r0
 801d190:	9303      	str	r3, [sp, #12]
 801d192:	460c      	mov	r4, r1
 801d194:	688b      	ldr	r3, [r1, #8]
 801d196:	1e5a      	subs	r2, r3, #1
 801d198:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d19c:	bf8b      	itete	hi
 801d19e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d1a2:	2300      	movls	r3, #0
 801d1a4:	195b      	addhi	r3, r3, r5
 801d1a6:	9302      	strls	r3, [sp, #8]
 801d1a8:	f04f 0500 	mov.w	r5, #0
 801d1ac:	bf84      	itt	hi
 801d1ae:	9302      	strhi	r3, [sp, #8]
 801d1b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d1b4:	46aa      	mov	sl, r5
 801d1b6:	46a9      	mov	r9, r5
 801d1b8:	bf88      	it	hi
 801d1ba:	608b      	strhi	r3, [r1, #8]
 801d1bc:	680b      	ldr	r3, [r1, #0]
 801d1be:	9501      	str	r5, [sp, #4]
 801d1c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d1c4:	f84b 3b1c 	str.w	r3, [fp], #28
 801d1c8:	465e      	mov	r6, fp
 801d1ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d1ce:	68a2      	ldr	r2, [r4, #8]
 801d1d0:	b152      	cbz	r2, 801d1e8 <_scanf_float+0x64>
 801d1d2:	683b      	ldr	r3, [r7, #0]
 801d1d4:	781b      	ldrb	r3, [r3, #0]
 801d1d6:	2b4e      	cmp	r3, #78	; 0x4e
 801d1d8:	d864      	bhi.n	801d2a4 <_scanf_float+0x120>
 801d1da:	2b40      	cmp	r3, #64	; 0x40
 801d1dc:	d83c      	bhi.n	801d258 <_scanf_float+0xd4>
 801d1de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d1e2:	b2c8      	uxtb	r0, r1
 801d1e4:	280e      	cmp	r0, #14
 801d1e6:	d93a      	bls.n	801d25e <_scanf_float+0xda>
 801d1e8:	f1b9 0f00 	cmp.w	r9, #0
 801d1ec:	d003      	beq.n	801d1f6 <_scanf_float+0x72>
 801d1ee:	6823      	ldr	r3, [r4, #0]
 801d1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d1f4:	6023      	str	r3, [r4, #0]
 801d1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1fa:	f1ba 0f01 	cmp.w	sl, #1
 801d1fe:	f200 8113 	bhi.w	801d428 <_scanf_float+0x2a4>
 801d202:	455e      	cmp	r6, fp
 801d204:	f200 8105 	bhi.w	801d412 <_scanf_float+0x28e>
 801d208:	2501      	movs	r5, #1
 801d20a:	4628      	mov	r0, r5
 801d20c:	b007      	add	sp, #28
 801d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d212:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d216:	2a0d      	cmp	r2, #13
 801d218:	d8e6      	bhi.n	801d1e8 <_scanf_float+0x64>
 801d21a:	a101      	add	r1, pc, #4	; (adr r1, 801d220 <_scanf_float+0x9c>)
 801d21c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d220:	0801d35f 	.word	0x0801d35f
 801d224:	0801d1e9 	.word	0x0801d1e9
 801d228:	0801d1e9 	.word	0x0801d1e9
 801d22c:	0801d1e9 	.word	0x0801d1e9
 801d230:	0801d3bf 	.word	0x0801d3bf
 801d234:	0801d397 	.word	0x0801d397
 801d238:	0801d1e9 	.word	0x0801d1e9
 801d23c:	0801d1e9 	.word	0x0801d1e9
 801d240:	0801d36d 	.word	0x0801d36d
 801d244:	0801d1e9 	.word	0x0801d1e9
 801d248:	0801d1e9 	.word	0x0801d1e9
 801d24c:	0801d1e9 	.word	0x0801d1e9
 801d250:	0801d1e9 	.word	0x0801d1e9
 801d254:	0801d325 	.word	0x0801d325
 801d258:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d25c:	e7db      	b.n	801d216 <_scanf_float+0x92>
 801d25e:	290e      	cmp	r1, #14
 801d260:	d8c2      	bhi.n	801d1e8 <_scanf_float+0x64>
 801d262:	a001      	add	r0, pc, #4	; (adr r0, 801d268 <_scanf_float+0xe4>)
 801d264:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d268:	0801d317 	.word	0x0801d317
 801d26c:	0801d1e9 	.word	0x0801d1e9
 801d270:	0801d317 	.word	0x0801d317
 801d274:	0801d3ab 	.word	0x0801d3ab
 801d278:	0801d1e9 	.word	0x0801d1e9
 801d27c:	0801d2c5 	.word	0x0801d2c5
 801d280:	0801d301 	.word	0x0801d301
 801d284:	0801d301 	.word	0x0801d301
 801d288:	0801d301 	.word	0x0801d301
 801d28c:	0801d301 	.word	0x0801d301
 801d290:	0801d301 	.word	0x0801d301
 801d294:	0801d301 	.word	0x0801d301
 801d298:	0801d301 	.word	0x0801d301
 801d29c:	0801d301 	.word	0x0801d301
 801d2a0:	0801d301 	.word	0x0801d301
 801d2a4:	2b6e      	cmp	r3, #110	; 0x6e
 801d2a6:	d809      	bhi.n	801d2bc <_scanf_float+0x138>
 801d2a8:	2b60      	cmp	r3, #96	; 0x60
 801d2aa:	d8b2      	bhi.n	801d212 <_scanf_float+0x8e>
 801d2ac:	2b54      	cmp	r3, #84	; 0x54
 801d2ae:	d077      	beq.n	801d3a0 <_scanf_float+0x21c>
 801d2b0:	2b59      	cmp	r3, #89	; 0x59
 801d2b2:	d199      	bne.n	801d1e8 <_scanf_float+0x64>
 801d2b4:	2d07      	cmp	r5, #7
 801d2b6:	d197      	bne.n	801d1e8 <_scanf_float+0x64>
 801d2b8:	2508      	movs	r5, #8
 801d2ba:	e029      	b.n	801d310 <_scanf_float+0x18c>
 801d2bc:	2b74      	cmp	r3, #116	; 0x74
 801d2be:	d06f      	beq.n	801d3a0 <_scanf_float+0x21c>
 801d2c0:	2b79      	cmp	r3, #121	; 0x79
 801d2c2:	e7f6      	b.n	801d2b2 <_scanf_float+0x12e>
 801d2c4:	6821      	ldr	r1, [r4, #0]
 801d2c6:	05c8      	lsls	r0, r1, #23
 801d2c8:	d51a      	bpl.n	801d300 <_scanf_float+0x17c>
 801d2ca:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801d2ce:	9b02      	ldr	r3, [sp, #8]
 801d2d0:	f109 0901 	add.w	r9, r9, #1
 801d2d4:	6021      	str	r1, [r4, #0]
 801d2d6:	b11b      	cbz	r3, 801d2e0 <_scanf_float+0x15c>
 801d2d8:	3b01      	subs	r3, #1
 801d2da:	3201      	adds	r2, #1
 801d2dc:	9302      	str	r3, [sp, #8]
 801d2de:	60a2      	str	r2, [r4, #8]
 801d2e0:	68a3      	ldr	r3, [r4, #8]
 801d2e2:	3b01      	subs	r3, #1
 801d2e4:	60a3      	str	r3, [r4, #8]
 801d2e6:	6923      	ldr	r3, [r4, #16]
 801d2e8:	3301      	adds	r3, #1
 801d2ea:	6123      	str	r3, [r4, #16]
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	3b01      	subs	r3, #1
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	607b      	str	r3, [r7, #4]
 801d2f4:	f340 8084 	ble.w	801d400 <_scanf_float+0x27c>
 801d2f8:	683b      	ldr	r3, [r7, #0]
 801d2fa:	3301      	adds	r3, #1
 801d2fc:	603b      	str	r3, [r7, #0]
 801d2fe:	e766      	b.n	801d1ce <_scanf_float+0x4a>
 801d300:	eb1a 0f05 	cmn.w	sl, r5
 801d304:	f47f af70 	bne.w	801d1e8 <_scanf_float+0x64>
 801d308:	6822      	ldr	r2, [r4, #0]
 801d30a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801d30e:	6022      	str	r2, [r4, #0]
 801d310:	f806 3b01 	strb.w	r3, [r6], #1
 801d314:	e7e4      	b.n	801d2e0 <_scanf_float+0x15c>
 801d316:	6822      	ldr	r2, [r4, #0]
 801d318:	0610      	lsls	r0, r2, #24
 801d31a:	f57f af65 	bpl.w	801d1e8 <_scanf_float+0x64>
 801d31e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d322:	e7f4      	b.n	801d30e <_scanf_float+0x18a>
 801d324:	f1ba 0f00 	cmp.w	sl, #0
 801d328:	d10e      	bne.n	801d348 <_scanf_float+0x1c4>
 801d32a:	f1b9 0f00 	cmp.w	r9, #0
 801d32e:	d10e      	bne.n	801d34e <_scanf_float+0x1ca>
 801d330:	6822      	ldr	r2, [r4, #0]
 801d332:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d336:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d33a:	d108      	bne.n	801d34e <_scanf_float+0x1ca>
 801d33c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d340:	f04f 0a01 	mov.w	sl, #1
 801d344:	6022      	str	r2, [r4, #0]
 801d346:	e7e3      	b.n	801d310 <_scanf_float+0x18c>
 801d348:	f1ba 0f02 	cmp.w	sl, #2
 801d34c:	d055      	beq.n	801d3fa <_scanf_float+0x276>
 801d34e:	2d01      	cmp	r5, #1
 801d350:	d002      	beq.n	801d358 <_scanf_float+0x1d4>
 801d352:	2d04      	cmp	r5, #4
 801d354:	f47f af48 	bne.w	801d1e8 <_scanf_float+0x64>
 801d358:	3501      	adds	r5, #1
 801d35a:	b2ed      	uxtb	r5, r5
 801d35c:	e7d8      	b.n	801d310 <_scanf_float+0x18c>
 801d35e:	f1ba 0f01 	cmp.w	sl, #1
 801d362:	f47f af41 	bne.w	801d1e8 <_scanf_float+0x64>
 801d366:	f04f 0a02 	mov.w	sl, #2
 801d36a:	e7d1      	b.n	801d310 <_scanf_float+0x18c>
 801d36c:	b97d      	cbnz	r5, 801d38e <_scanf_float+0x20a>
 801d36e:	f1b9 0f00 	cmp.w	r9, #0
 801d372:	f47f af3c 	bne.w	801d1ee <_scanf_float+0x6a>
 801d376:	6822      	ldr	r2, [r4, #0]
 801d378:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d37c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d380:	f47f af39 	bne.w	801d1f6 <_scanf_float+0x72>
 801d384:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d388:	2501      	movs	r5, #1
 801d38a:	6022      	str	r2, [r4, #0]
 801d38c:	e7c0      	b.n	801d310 <_scanf_float+0x18c>
 801d38e:	2d03      	cmp	r5, #3
 801d390:	d0e2      	beq.n	801d358 <_scanf_float+0x1d4>
 801d392:	2d05      	cmp	r5, #5
 801d394:	e7de      	b.n	801d354 <_scanf_float+0x1d0>
 801d396:	2d02      	cmp	r5, #2
 801d398:	f47f af26 	bne.w	801d1e8 <_scanf_float+0x64>
 801d39c:	2503      	movs	r5, #3
 801d39e:	e7b7      	b.n	801d310 <_scanf_float+0x18c>
 801d3a0:	2d06      	cmp	r5, #6
 801d3a2:	f47f af21 	bne.w	801d1e8 <_scanf_float+0x64>
 801d3a6:	2507      	movs	r5, #7
 801d3a8:	e7b2      	b.n	801d310 <_scanf_float+0x18c>
 801d3aa:	6822      	ldr	r2, [r4, #0]
 801d3ac:	0591      	lsls	r1, r2, #22
 801d3ae:	f57f af1b 	bpl.w	801d1e8 <_scanf_float+0x64>
 801d3b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801d3b6:	f8cd 9004 	str.w	r9, [sp, #4]
 801d3ba:	6022      	str	r2, [r4, #0]
 801d3bc:	e7a8      	b.n	801d310 <_scanf_float+0x18c>
 801d3be:	6822      	ldr	r2, [r4, #0]
 801d3c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801d3c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d3c8:	d006      	beq.n	801d3d8 <_scanf_float+0x254>
 801d3ca:	0550      	lsls	r0, r2, #21
 801d3cc:	f57f af0c 	bpl.w	801d1e8 <_scanf_float+0x64>
 801d3d0:	f1b9 0f00 	cmp.w	r9, #0
 801d3d4:	f43f af0f 	beq.w	801d1f6 <_scanf_float+0x72>
 801d3d8:	0591      	lsls	r1, r2, #22
 801d3da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d3de:	bf58      	it	pl
 801d3e0:	9901      	ldrpl	r1, [sp, #4]
 801d3e2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801d3e6:	bf58      	it	pl
 801d3e8:	eba9 0101 	subpl.w	r1, r9, r1
 801d3ec:	6022      	str	r2, [r4, #0]
 801d3ee:	f04f 0900 	mov.w	r9, #0
 801d3f2:	bf58      	it	pl
 801d3f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d3f8:	e78a      	b.n	801d310 <_scanf_float+0x18c>
 801d3fa:	f04f 0a03 	mov.w	sl, #3
 801d3fe:	e787      	b.n	801d310 <_scanf_float+0x18c>
 801d400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d404:	4639      	mov	r1, r7
 801d406:	4640      	mov	r0, r8
 801d408:	4798      	blx	r3
 801d40a:	2800      	cmp	r0, #0
 801d40c:	f43f aedf 	beq.w	801d1ce <_scanf_float+0x4a>
 801d410:	e6ea      	b.n	801d1e8 <_scanf_float+0x64>
 801d412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d416:	463a      	mov	r2, r7
 801d418:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d41c:	4640      	mov	r0, r8
 801d41e:	4798      	blx	r3
 801d420:	6923      	ldr	r3, [r4, #16]
 801d422:	3b01      	subs	r3, #1
 801d424:	6123      	str	r3, [r4, #16]
 801d426:	e6ec      	b.n	801d202 <_scanf_float+0x7e>
 801d428:	1e6b      	subs	r3, r5, #1
 801d42a:	2b06      	cmp	r3, #6
 801d42c:	d825      	bhi.n	801d47a <_scanf_float+0x2f6>
 801d42e:	2d02      	cmp	r5, #2
 801d430:	d836      	bhi.n	801d4a0 <_scanf_float+0x31c>
 801d432:	455e      	cmp	r6, fp
 801d434:	f67f aee8 	bls.w	801d208 <_scanf_float+0x84>
 801d438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d43c:	463a      	mov	r2, r7
 801d43e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d442:	4640      	mov	r0, r8
 801d444:	4798      	blx	r3
 801d446:	6923      	ldr	r3, [r4, #16]
 801d448:	3b01      	subs	r3, #1
 801d44a:	6123      	str	r3, [r4, #16]
 801d44c:	e7f1      	b.n	801d432 <_scanf_float+0x2ae>
 801d44e:	9802      	ldr	r0, [sp, #8]
 801d450:	463a      	mov	r2, r7
 801d452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d456:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801d45a:	9002      	str	r0, [sp, #8]
 801d45c:	4640      	mov	r0, r8
 801d45e:	4798      	blx	r3
 801d460:	6923      	ldr	r3, [r4, #16]
 801d462:	3b01      	subs	r3, #1
 801d464:	6123      	str	r3, [r4, #16]
 801d466:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d46a:	fa5f fa8a 	uxtb.w	sl, sl
 801d46e:	f1ba 0f02 	cmp.w	sl, #2
 801d472:	d1ec      	bne.n	801d44e <_scanf_float+0x2ca>
 801d474:	3d03      	subs	r5, #3
 801d476:	b2ed      	uxtb	r5, r5
 801d478:	1b76      	subs	r6, r6, r5
 801d47a:	6823      	ldr	r3, [r4, #0]
 801d47c:	05da      	lsls	r2, r3, #23
 801d47e:	d52e      	bpl.n	801d4de <_scanf_float+0x35a>
 801d480:	055b      	lsls	r3, r3, #21
 801d482:	d510      	bpl.n	801d4a6 <_scanf_float+0x322>
 801d484:	455e      	cmp	r6, fp
 801d486:	f67f aebf 	bls.w	801d208 <_scanf_float+0x84>
 801d48a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d48e:	463a      	mov	r2, r7
 801d490:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d494:	4640      	mov	r0, r8
 801d496:	4798      	blx	r3
 801d498:	6923      	ldr	r3, [r4, #16]
 801d49a:	3b01      	subs	r3, #1
 801d49c:	6123      	str	r3, [r4, #16]
 801d49e:	e7f1      	b.n	801d484 <_scanf_float+0x300>
 801d4a0:	46aa      	mov	sl, r5
 801d4a2:	9602      	str	r6, [sp, #8]
 801d4a4:	e7df      	b.n	801d466 <_scanf_float+0x2e2>
 801d4a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d4aa:	1e75      	subs	r5, r6, #1
 801d4ac:	6923      	ldr	r3, [r4, #16]
 801d4ae:	2965      	cmp	r1, #101	; 0x65
 801d4b0:	f103 33ff 	add.w	r3, r3, #4294967295
 801d4b4:	6123      	str	r3, [r4, #16]
 801d4b6:	d00c      	beq.n	801d4d2 <_scanf_float+0x34e>
 801d4b8:	2945      	cmp	r1, #69	; 0x45
 801d4ba:	d00a      	beq.n	801d4d2 <_scanf_float+0x34e>
 801d4bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d4c0:	463a      	mov	r2, r7
 801d4c2:	4640      	mov	r0, r8
 801d4c4:	1eb5      	subs	r5, r6, #2
 801d4c6:	4798      	blx	r3
 801d4c8:	6923      	ldr	r3, [r4, #16]
 801d4ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d4ce:	3b01      	subs	r3, #1
 801d4d0:	6123      	str	r3, [r4, #16]
 801d4d2:	462e      	mov	r6, r5
 801d4d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d4d8:	463a      	mov	r2, r7
 801d4da:	4640      	mov	r0, r8
 801d4dc:	4798      	blx	r3
 801d4de:	6825      	ldr	r5, [r4, #0]
 801d4e0:	f015 0510 	ands.w	r5, r5, #16
 801d4e4:	d158      	bne.n	801d598 <_scanf_float+0x414>
 801d4e6:	7035      	strb	r5, [r6, #0]
 801d4e8:	6823      	ldr	r3, [r4, #0]
 801d4ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801d4ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d4f2:	d11c      	bne.n	801d52e <_scanf_float+0x3aa>
 801d4f4:	9b01      	ldr	r3, [sp, #4]
 801d4f6:	454b      	cmp	r3, r9
 801d4f8:	eba3 0209 	sub.w	r2, r3, r9
 801d4fc:	d124      	bne.n	801d548 <_scanf_float+0x3c4>
 801d4fe:	2200      	movs	r2, #0
 801d500:	4659      	mov	r1, fp
 801d502:	4640      	mov	r0, r8
 801d504:	f002 fd50 	bl	801ffa8 <_strtod_r>
 801d508:	6821      	ldr	r1, [r4, #0]
 801d50a:	9b03      	ldr	r3, [sp, #12]
 801d50c:	f011 0f02 	tst.w	r1, #2
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	ec57 6b10 	vmov	r6, r7, d0
 801d516:	f103 0204 	add.w	r2, r3, #4
 801d51a:	d020      	beq.n	801d55e <_scanf_float+0x3da>
 801d51c:	9903      	ldr	r1, [sp, #12]
 801d51e:	600a      	str	r2, [r1, #0]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	e9c3 6700 	strd	r6, r7, [r3]
 801d526:	68e3      	ldr	r3, [r4, #12]
 801d528:	3301      	adds	r3, #1
 801d52a:	60e3      	str	r3, [r4, #12]
 801d52c:	e66d      	b.n	801d20a <_scanf_float+0x86>
 801d52e:	9b04      	ldr	r3, [sp, #16]
 801d530:	2b00      	cmp	r3, #0
 801d532:	d0e4      	beq.n	801d4fe <_scanf_float+0x37a>
 801d534:	9905      	ldr	r1, [sp, #20]
 801d536:	230a      	movs	r3, #10
 801d538:	462a      	mov	r2, r5
 801d53a:	4640      	mov	r0, r8
 801d53c:	3101      	adds	r1, #1
 801d53e:	f002 fdbb 	bl	80200b8 <_strtol_r>
 801d542:	9b04      	ldr	r3, [sp, #16]
 801d544:	9e05      	ldr	r6, [sp, #20]
 801d546:	1ac2      	subs	r2, r0, r3
 801d548:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801d54c:	4913      	ldr	r1, [pc, #76]	; (801d59c <_scanf_float+0x418>)
 801d54e:	429e      	cmp	r6, r3
 801d550:	bf28      	it	cs
 801d552:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801d556:	4630      	mov	r0, r6
 801d558:	f000 f994 	bl	801d884 <siprintf>
 801d55c:	e7cf      	b.n	801d4fe <_scanf_float+0x37a>
 801d55e:	f011 0f04 	tst.w	r1, #4
 801d562:	9903      	ldr	r1, [sp, #12]
 801d564:	600a      	str	r2, [r1, #0]
 801d566:	d1db      	bne.n	801d520 <_scanf_float+0x39c>
 801d568:	f8d3 8000 	ldr.w	r8, [r3]
 801d56c:	ee10 2a10 	vmov	r2, s0
 801d570:	463b      	mov	r3, r7
 801d572:	ee10 0a10 	vmov	r0, s0
 801d576:	4639      	mov	r1, r7
 801d578:	f7e3 fadc 	bl	8000b34 <__aeabi_dcmpun>
 801d57c:	b128      	cbz	r0, 801d58a <_scanf_float+0x406>
 801d57e:	4808      	ldr	r0, [pc, #32]	; (801d5a0 <_scanf_float+0x41c>)
 801d580:	f000 fabe 	bl	801db00 <nanf>
 801d584:	ed88 0a00 	vstr	s0, [r8]
 801d588:	e7cd      	b.n	801d526 <_scanf_float+0x3a2>
 801d58a:	4630      	mov	r0, r6
 801d58c:	4639      	mov	r1, r7
 801d58e:	f7e3 fb2f 	bl	8000bf0 <__aeabi_d2f>
 801d592:	f8c8 0000 	str.w	r0, [r8]
 801d596:	e7c6      	b.n	801d526 <_scanf_float+0x3a2>
 801d598:	2500      	movs	r5, #0
 801d59a:	e636      	b.n	801d20a <_scanf_float+0x86>
 801d59c:	080239f4 	.word	0x080239f4
 801d5a0:	08023da0 	.word	0x08023da0

0801d5a4 <__sflush_r>:
 801d5a4:	898a      	ldrh	r2, [r1, #12]
 801d5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5aa:	4605      	mov	r5, r0
 801d5ac:	0710      	lsls	r0, r2, #28
 801d5ae:	460c      	mov	r4, r1
 801d5b0:	d458      	bmi.n	801d664 <__sflush_r+0xc0>
 801d5b2:	684b      	ldr	r3, [r1, #4]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	dc05      	bgt.n	801d5c4 <__sflush_r+0x20>
 801d5b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	dc02      	bgt.n	801d5c4 <__sflush_r+0x20>
 801d5be:	2000      	movs	r0, #0
 801d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5c6:	2e00      	cmp	r6, #0
 801d5c8:	d0f9      	beq.n	801d5be <__sflush_r+0x1a>
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d5d0:	682f      	ldr	r7, [r5, #0]
 801d5d2:	6a21      	ldr	r1, [r4, #32]
 801d5d4:	602b      	str	r3, [r5, #0]
 801d5d6:	d032      	beq.n	801d63e <__sflush_r+0x9a>
 801d5d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d5da:	89a3      	ldrh	r3, [r4, #12]
 801d5dc:	075a      	lsls	r2, r3, #29
 801d5de:	d505      	bpl.n	801d5ec <__sflush_r+0x48>
 801d5e0:	6863      	ldr	r3, [r4, #4]
 801d5e2:	1ac0      	subs	r0, r0, r3
 801d5e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d5e6:	b10b      	cbz	r3, 801d5ec <__sflush_r+0x48>
 801d5e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d5ea:	1ac0      	subs	r0, r0, r3
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	4602      	mov	r2, r0
 801d5f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5f2:	4628      	mov	r0, r5
 801d5f4:	6a21      	ldr	r1, [r4, #32]
 801d5f6:	47b0      	blx	r6
 801d5f8:	1c43      	adds	r3, r0, #1
 801d5fa:	89a3      	ldrh	r3, [r4, #12]
 801d5fc:	d106      	bne.n	801d60c <__sflush_r+0x68>
 801d5fe:	6829      	ldr	r1, [r5, #0]
 801d600:	291d      	cmp	r1, #29
 801d602:	d82b      	bhi.n	801d65c <__sflush_r+0xb8>
 801d604:	4a28      	ldr	r2, [pc, #160]	; (801d6a8 <__sflush_r+0x104>)
 801d606:	410a      	asrs	r2, r1
 801d608:	07d6      	lsls	r6, r2, #31
 801d60a:	d427      	bmi.n	801d65c <__sflush_r+0xb8>
 801d60c:	2200      	movs	r2, #0
 801d60e:	04d9      	lsls	r1, r3, #19
 801d610:	6062      	str	r2, [r4, #4]
 801d612:	6922      	ldr	r2, [r4, #16]
 801d614:	6022      	str	r2, [r4, #0]
 801d616:	d504      	bpl.n	801d622 <__sflush_r+0x7e>
 801d618:	1c42      	adds	r2, r0, #1
 801d61a:	d101      	bne.n	801d620 <__sflush_r+0x7c>
 801d61c:	682b      	ldr	r3, [r5, #0]
 801d61e:	b903      	cbnz	r3, 801d622 <__sflush_r+0x7e>
 801d620:	6560      	str	r0, [r4, #84]	; 0x54
 801d622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d624:	602f      	str	r7, [r5, #0]
 801d626:	2900      	cmp	r1, #0
 801d628:	d0c9      	beq.n	801d5be <__sflush_r+0x1a>
 801d62a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d62e:	4299      	cmp	r1, r3
 801d630:	d002      	beq.n	801d638 <__sflush_r+0x94>
 801d632:	4628      	mov	r0, r5
 801d634:	f001 f8ec 	bl	801e810 <_free_r>
 801d638:	2000      	movs	r0, #0
 801d63a:	6360      	str	r0, [r4, #52]	; 0x34
 801d63c:	e7c0      	b.n	801d5c0 <__sflush_r+0x1c>
 801d63e:	2301      	movs	r3, #1
 801d640:	4628      	mov	r0, r5
 801d642:	47b0      	blx	r6
 801d644:	1c41      	adds	r1, r0, #1
 801d646:	d1c8      	bne.n	801d5da <__sflush_r+0x36>
 801d648:	682b      	ldr	r3, [r5, #0]
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d0c5      	beq.n	801d5da <__sflush_r+0x36>
 801d64e:	2b1d      	cmp	r3, #29
 801d650:	d001      	beq.n	801d656 <__sflush_r+0xb2>
 801d652:	2b16      	cmp	r3, #22
 801d654:	d101      	bne.n	801d65a <__sflush_r+0xb6>
 801d656:	602f      	str	r7, [r5, #0]
 801d658:	e7b1      	b.n	801d5be <__sflush_r+0x1a>
 801d65a:	89a3      	ldrh	r3, [r4, #12]
 801d65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d660:	81a3      	strh	r3, [r4, #12]
 801d662:	e7ad      	b.n	801d5c0 <__sflush_r+0x1c>
 801d664:	690f      	ldr	r7, [r1, #16]
 801d666:	2f00      	cmp	r7, #0
 801d668:	d0a9      	beq.n	801d5be <__sflush_r+0x1a>
 801d66a:	0793      	lsls	r3, r2, #30
 801d66c:	680e      	ldr	r6, [r1, #0]
 801d66e:	600f      	str	r7, [r1, #0]
 801d670:	bf0c      	ite	eq
 801d672:	694b      	ldreq	r3, [r1, #20]
 801d674:	2300      	movne	r3, #0
 801d676:	eba6 0807 	sub.w	r8, r6, r7
 801d67a:	608b      	str	r3, [r1, #8]
 801d67c:	f1b8 0f00 	cmp.w	r8, #0
 801d680:	dd9d      	ble.n	801d5be <__sflush_r+0x1a>
 801d682:	4643      	mov	r3, r8
 801d684:	463a      	mov	r2, r7
 801d686:	6a21      	ldr	r1, [r4, #32]
 801d688:	4628      	mov	r0, r5
 801d68a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d68c:	47b0      	blx	r6
 801d68e:	2800      	cmp	r0, #0
 801d690:	dc06      	bgt.n	801d6a0 <__sflush_r+0xfc>
 801d692:	89a3      	ldrh	r3, [r4, #12]
 801d694:	f04f 30ff 	mov.w	r0, #4294967295
 801d698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d69c:	81a3      	strh	r3, [r4, #12]
 801d69e:	e78f      	b.n	801d5c0 <__sflush_r+0x1c>
 801d6a0:	4407      	add	r7, r0
 801d6a2:	eba8 0800 	sub.w	r8, r8, r0
 801d6a6:	e7e9      	b.n	801d67c <__sflush_r+0xd8>
 801d6a8:	dfbffffe 	.word	0xdfbffffe

0801d6ac <_fflush_r>:
 801d6ac:	b538      	push	{r3, r4, r5, lr}
 801d6ae:	690b      	ldr	r3, [r1, #16]
 801d6b0:	4605      	mov	r5, r0
 801d6b2:	460c      	mov	r4, r1
 801d6b4:	b913      	cbnz	r3, 801d6bc <_fflush_r+0x10>
 801d6b6:	2500      	movs	r5, #0
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	bd38      	pop	{r3, r4, r5, pc}
 801d6bc:	b118      	cbz	r0, 801d6c6 <_fflush_r+0x1a>
 801d6be:	6a03      	ldr	r3, [r0, #32]
 801d6c0:	b90b      	cbnz	r3, 801d6c6 <_fflush_r+0x1a>
 801d6c2:	f000 f8a9 	bl	801d818 <__sinit>
 801d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d0f3      	beq.n	801d6b6 <_fflush_r+0xa>
 801d6ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d6d0:	07d0      	lsls	r0, r2, #31
 801d6d2:	d404      	bmi.n	801d6de <_fflush_r+0x32>
 801d6d4:	0599      	lsls	r1, r3, #22
 801d6d6:	d402      	bmi.n	801d6de <_fflush_r+0x32>
 801d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6da:	f000 f9f3 	bl	801dac4 <__retarget_lock_acquire_recursive>
 801d6de:	4628      	mov	r0, r5
 801d6e0:	4621      	mov	r1, r4
 801d6e2:	f7ff ff5f 	bl	801d5a4 <__sflush_r>
 801d6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d6e8:	4605      	mov	r5, r0
 801d6ea:	07da      	lsls	r2, r3, #31
 801d6ec:	d4e4      	bmi.n	801d6b8 <_fflush_r+0xc>
 801d6ee:	89a3      	ldrh	r3, [r4, #12]
 801d6f0:	059b      	lsls	r3, r3, #22
 801d6f2:	d4e1      	bmi.n	801d6b8 <_fflush_r+0xc>
 801d6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6f6:	f000 f9e6 	bl	801dac6 <__retarget_lock_release_recursive>
 801d6fa:	e7dd      	b.n	801d6b8 <_fflush_r+0xc>

0801d6fc <fflush>:
 801d6fc:	4601      	mov	r1, r0
 801d6fe:	b920      	cbnz	r0, 801d70a <fflush+0xe>
 801d700:	4a04      	ldr	r2, [pc, #16]	; (801d714 <fflush+0x18>)
 801d702:	4905      	ldr	r1, [pc, #20]	; (801d718 <fflush+0x1c>)
 801d704:	4805      	ldr	r0, [pc, #20]	; (801d71c <fflush+0x20>)
 801d706:	f000 b89f 	b.w	801d848 <_fwalk_sglue>
 801d70a:	4b05      	ldr	r3, [pc, #20]	; (801d720 <fflush+0x24>)
 801d70c:	6818      	ldr	r0, [r3, #0]
 801d70e:	f7ff bfcd 	b.w	801d6ac <_fflush_r>
 801d712:	bf00      	nop
 801d714:	2000006c 	.word	0x2000006c
 801d718:	0801d6ad 	.word	0x0801d6ad
 801d71c:	20000078 	.word	0x20000078
 801d720:	200000c4 	.word	0x200000c4

0801d724 <std>:
 801d724:	2300      	movs	r3, #0
 801d726:	b510      	push	{r4, lr}
 801d728:	4604      	mov	r4, r0
 801d72a:	6083      	str	r3, [r0, #8]
 801d72c:	8181      	strh	r1, [r0, #12]
 801d72e:	4619      	mov	r1, r3
 801d730:	6643      	str	r3, [r0, #100]	; 0x64
 801d732:	81c2      	strh	r2, [r0, #14]
 801d734:	2208      	movs	r2, #8
 801d736:	6183      	str	r3, [r0, #24]
 801d738:	e9c0 3300 	strd	r3, r3, [r0]
 801d73c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d740:	305c      	adds	r0, #92	; 0x5c
 801d742:	f000 f930 	bl	801d9a6 <memset>
 801d746:	4b05      	ldr	r3, [pc, #20]	; (801d75c <std+0x38>)
 801d748:	6224      	str	r4, [r4, #32]
 801d74a:	6263      	str	r3, [r4, #36]	; 0x24
 801d74c:	4b04      	ldr	r3, [pc, #16]	; (801d760 <std+0x3c>)
 801d74e:	62a3      	str	r3, [r4, #40]	; 0x28
 801d750:	4b04      	ldr	r3, [pc, #16]	; (801d764 <std+0x40>)
 801d752:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d754:	4b04      	ldr	r3, [pc, #16]	; (801d768 <std+0x44>)
 801d756:	6323      	str	r3, [r4, #48]	; 0x30
 801d758:	bd10      	pop	{r4, pc}
 801d75a:	bf00      	nop
 801d75c:	0801d91d 	.word	0x0801d91d
 801d760:	0801d943 	.word	0x0801d943
 801d764:	0801d97b 	.word	0x0801d97b
 801d768:	0801d99f 	.word	0x0801d99f

0801d76c <stdio_exit_handler>:
 801d76c:	4a02      	ldr	r2, [pc, #8]	; (801d778 <stdio_exit_handler+0xc>)
 801d76e:	4903      	ldr	r1, [pc, #12]	; (801d77c <stdio_exit_handler+0x10>)
 801d770:	4803      	ldr	r0, [pc, #12]	; (801d780 <stdio_exit_handler+0x14>)
 801d772:	f000 b869 	b.w	801d848 <_fwalk_sglue>
 801d776:	bf00      	nop
 801d778:	2000006c 	.word	0x2000006c
 801d77c:	0801d6ad 	.word	0x0801d6ad
 801d780:	20000078 	.word	0x20000078

0801d784 <cleanup_stdio>:
 801d784:	6841      	ldr	r1, [r0, #4]
 801d786:	4b0c      	ldr	r3, [pc, #48]	; (801d7b8 <cleanup_stdio+0x34>)
 801d788:	4299      	cmp	r1, r3
 801d78a:	b510      	push	{r4, lr}
 801d78c:	4604      	mov	r4, r0
 801d78e:	d001      	beq.n	801d794 <cleanup_stdio+0x10>
 801d790:	f7ff ff8c 	bl	801d6ac <_fflush_r>
 801d794:	68a1      	ldr	r1, [r4, #8]
 801d796:	4b09      	ldr	r3, [pc, #36]	; (801d7bc <cleanup_stdio+0x38>)
 801d798:	4299      	cmp	r1, r3
 801d79a:	d002      	beq.n	801d7a2 <cleanup_stdio+0x1e>
 801d79c:	4620      	mov	r0, r4
 801d79e:	f7ff ff85 	bl	801d6ac <_fflush_r>
 801d7a2:	68e1      	ldr	r1, [r4, #12]
 801d7a4:	4b06      	ldr	r3, [pc, #24]	; (801d7c0 <cleanup_stdio+0x3c>)
 801d7a6:	4299      	cmp	r1, r3
 801d7a8:	d004      	beq.n	801d7b4 <cleanup_stdio+0x30>
 801d7aa:	4620      	mov	r0, r4
 801d7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7b0:	f7ff bf7c 	b.w	801d6ac <_fflush_r>
 801d7b4:	bd10      	pop	{r4, pc}
 801d7b6:	bf00      	nop
 801d7b8:	2000d244 	.word	0x2000d244
 801d7bc:	2000d2ac 	.word	0x2000d2ac
 801d7c0:	2000d314 	.word	0x2000d314

0801d7c4 <global_stdio_init.part.0>:
 801d7c4:	b510      	push	{r4, lr}
 801d7c6:	4b0b      	ldr	r3, [pc, #44]	; (801d7f4 <global_stdio_init.part.0+0x30>)
 801d7c8:	2104      	movs	r1, #4
 801d7ca:	4c0b      	ldr	r4, [pc, #44]	; (801d7f8 <global_stdio_init.part.0+0x34>)
 801d7cc:	4a0b      	ldr	r2, [pc, #44]	; (801d7fc <global_stdio_init.part.0+0x38>)
 801d7ce:	4620      	mov	r0, r4
 801d7d0:	601a      	str	r2, [r3, #0]
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	f7ff ffa6 	bl	801d724 <std>
 801d7d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d7dc:	2201      	movs	r2, #1
 801d7de:	2109      	movs	r1, #9
 801d7e0:	f7ff ffa0 	bl	801d724 <std>
 801d7e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d7e8:	2202      	movs	r2, #2
 801d7ea:	2112      	movs	r1, #18
 801d7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7f0:	f7ff bf98 	b.w	801d724 <std>
 801d7f4:	2000d37c 	.word	0x2000d37c
 801d7f8:	2000d244 	.word	0x2000d244
 801d7fc:	0801d76d 	.word	0x0801d76d

0801d800 <__sfp_lock_acquire>:
 801d800:	4801      	ldr	r0, [pc, #4]	; (801d808 <__sfp_lock_acquire+0x8>)
 801d802:	f000 b95f 	b.w	801dac4 <__retarget_lock_acquire_recursive>
 801d806:	bf00      	nop
 801d808:	2000d385 	.word	0x2000d385

0801d80c <__sfp_lock_release>:
 801d80c:	4801      	ldr	r0, [pc, #4]	; (801d814 <__sfp_lock_release+0x8>)
 801d80e:	f000 b95a 	b.w	801dac6 <__retarget_lock_release_recursive>
 801d812:	bf00      	nop
 801d814:	2000d385 	.word	0x2000d385

0801d818 <__sinit>:
 801d818:	b510      	push	{r4, lr}
 801d81a:	4604      	mov	r4, r0
 801d81c:	f7ff fff0 	bl	801d800 <__sfp_lock_acquire>
 801d820:	6a23      	ldr	r3, [r4, #32]
 801d822:	b11b      	cbz	r3, 801d82c <__sinit+0x14>
 801d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d828:	f7ff bff0 	b.w	801d80c <__sfp_lock_release>
 801d82c:	4b04      	ldr	r3, [pc, #16]	; (801d840 <__sinit+0x28>)
 801d82e:	6223      	str	r3, [r4, #32]
 801d830:	4b04      	ldr	r3, [pc, #16]	; (801d844 <__sinit+0x2c>)
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	2b00      	cmp	r3, #0
 801d836:	d1f5      	bne.n	801d824 <__sinit+0xc>
 801d838:	f7ff ffc4 	bl	801d7c4 <global_stdio_init.part.0>
 801d83c:	e7f2      	b.n	801d824 <__sinit+0xc>
 801d83e:	bf00      	nop
 801d840:	0801d785 	.word	0x0801d785
 801d844:	2000d37c 	.word	0x2000d37c

0801d848 <_fwalk_sglue>:
 801d848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d84c:	4607      	mov	r7, r0
 801d84e:	4688      	mov	r8, r1
 801d850:	4614      	mov	r4, r2
 801d852:	2600      	movs	r6, #0
 801d854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d858:	f1b9 0901 	subs.w	r9, r9, #1
 801d85c:	d505      	bpl.n	801d86a <_fwalk_sglue+0x22>
 801d85e:	6824      	ldr	r4, [r4, #0]
 801d860:	2c00      	cmp	r4, #0
 801d862:	d1f7      	bne.n	801d854 <_fwalk_sglue+0xc>
 801d864:	4630      	mov	r0, r6
 801d866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d86a:	89ab      	ldrh	r3, [r5, #12]
 801d86c:	2b01      	cmp	r3, #1
 801d86e:	d907      	bls.n	801d880 <_fwalk_sglue+0x38>
 801d870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d874:	3301      	adds	r3, #1
 801d876:	d003      	beq.n	801d880 <_fwalk_sglue+0x38>
 801d878:	4629      	mov	r1, r5
 801d87a:	4638      	mov	r0, r7
 801d87c:	47c0      	blx	r8
 801d87e:	4306      	orrs	r6, r0
 801d880:	3568      	adds	r5, #104	; 0x68
 801d882:	e7e9      	b.n	801d858 <_fwalk_sglue+0x10>

0801d884 <siprintf>:
 801d884:	b40e      	push	{r1, r2, r3}
 801d886:	b500      	push	{lr}
 801d888:	b09c      	sub	sp, #112	; 0x70
 801d88a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d88e:	ab1d      	add	r3, sp, #116	; 0x74
 801d890:	9002      	str	r0, [sp, #8]
 801d892:	9006      	str	r0, [sp, #24]
 801d894:	9107      	str	r1, [sp, #28]
 801d896:	9104      	str	r1, [sp, #16]
 801d898:	4808      	ldr	r0, [pc, #32]	; (801d8bc <siprintf+0x38>)
 801d89a:	4909      	ldr	r1, [pc, #36]	; (801d8c0 <siprintf+0x3c>)
 801d89c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d8a0:	9105      	str	r1, [sp, #20]
 801d8a2:	a902      	add	r1, sp, #8
 801d8a4:	6800      	ldr	r0, [r0, #0]
 801d8a6:	9301      	str	r3, [sp, #4]
 801d8a8:	f002 fc62 	bl	8020170 <_svfiprintf_r>
 801d8ac:	9b02      	ldr	r3, [sp, #8]
 801d8ae:	2200      	movs	r2, #0
 801d8b0:	701a      	strb	r2, [r3, #0]
 801d8b2:	b01c      	add	sp, #112	; 0x70
 801d8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d8b8:	b003      	add	sp, #12
 801d8ba:	4770      	bx	lr
 801d8bc:	200000c4 	.word	0x200000c4
 801d8c0:	ffff0208 	.word	0xffff0208

0801d8c4 <siscanf>:
 801d8c4:	b40e      	push	{r1, r2, r3}
 801d8c6:	b510      	push	{r4, lr}
 801d8c8:	b09f      	sub	sp, #124	; 0x7c
 801d8ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 801d8ce:	ac21      	add	r4, sp, #132	; 0x84
 801d8d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d8d4:	9004      	str	r0, [sp, #16]
 801d8d6:	f854 2b04 	ldr.w	r2, [r4], #4
 801d8da:	9008      	str	r0, [sp, #32]
 801d8dc:	9201      	str	r2, [sp, #4]
 801d8de:	f7e2 fccb 	bl	8000278 <strlen>
 801d8e2:	4b0c      	ldr	r3, [pc, #48]	; (801d914 <siscanf+0x50>)
 801d8e4:	a904      	add	r1, sp, #16
 801d8e6:	9005      	str	r0, [sp, #20]
 801d8e8:	930d      	str	r3, [sp, #52]	; 0x34
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	9009      	str	r0, [sp, #36]	; 0x24
 801d8ee:	9311      	str	r3, [sp, #68]	; 0x44
 801d8f0:	9316      	str	r3, [sp, #88]	; 0x58
 801d8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d8f6:	4808      	ldr	r0, [pc, #32]	; (801d918 <siscanf+0x54>)
 801d8f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d8fc:	4623      	mov	r3, r4
 801d8fe:	9a01      	ldr	r2, [sp, #4]
 801d900:	6800      	ldr	r0, [r0, #0]
 801d902:	9403      	str	r4, [sp, #12]
 801d904:	f002 fd8c 	bl	8020420 <__ssvfiscanf_r>
 801d908:	b01f      	add	sp, #124	; 0x7c
 801d90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d90e:	b003      	add	sp, #12
 801d910:	4770      	bx	lr
 801d912:	bf00      	nop
 801d914:	0801d93f 	.word	0x0801d93f
 801d918:	200000c4 	.word	0x200000c4

0801d91c <__sread>:
 801d91c:	b510      	push	{r4, lr}
 801d91e:	460c      	mov	r4, r1
 801d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d924:	f000 f880 	bl	801da28 <_read_r>
 801d928:	2800      	cmp	r0, #0
 801d92a:	bfab      	itete	ge
 801d92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d92e:	89a3      	ldrhlt	r3, [r4, #12]
 801d930:	181b      	addge	r3, r3, r0
 801d932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d936:	bfac      	ite	ge
 801d938:	6563      	strge	r3, [r4, #84]	; 0x54
 801d93a:	81a3      	strhlt	r3, [r4, #12]
 801d93c:	bd10      	pop	{r4, pc}

0801d93e <__seofread>:
 801d93e:	2000      	movs	r0, #0
 801d940:	4770      	bx	lr

0801d942 <__swrite>:
 801d942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d946:	461f      	mov	r7, r3
 801d948:	898b      	ldrh	r3, [r1, #12]
 801d94a:	4605      	mov	r5, r0
 801d94c:	460c      	mov	r4, r1
 801d94e:	05db      	lsls	r3, r3, #23
 801d950:	4616      	mov	r6, r2
 801d952:	d505      	bpl.n	801d960 <__swrite+0x1e>
 801d954:	2302      	movs	r3, #2
 801d956:	2200      	movs	r2, #0
 801d958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d95c:	f000 f852 	bl	801da04 <_lseek_r>
 801d960:	89a3      	ldrh	r3, [r4, #12]
 801d962:	4632      	mov	r2, r6
 801d964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d968:	4628      	mov	r0, r5
 801d96a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d96e:	81a3      	strh	r3, [r4, #12]
 801d970:	463b      	mov	r3, r7
 801d972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d976:	f000 b869 	b.w	801da4c <_write_r>

0801d97a <__sseek>:
 801d97a:	b510      	push	{r4, lr}
 801d97c:	460c      	mov	r4, r1
 801d97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d982:	f000 f83f 	bl	801da04 <_lseek_r>
 801d986:	1c43      	adds	r3, r0, #1
 801d988:	89a3      	ldrh	r3, [r4, #12]
 801d98a:	bf15      	itete	ne
 801d98c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d98e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d996:	81a3      	strheq	r3, [r4, #12]
 801d998:	bf18      	it	ne
 801d99a:	81a3      	strhne	r3, [r4, #12]
 801d99c:	bd10      	pop	{r4, pc}

0801d99e <__sclose>:
 801d99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9a2:	f000 b81f 	b.w	801d9e4 <_close_r>

0801d9a6 <memset>:
 801d9a6:	4402      	add	r2, r0
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	4293      	cmp	r3, r2
 801d9ac:	d100      	bne.n	801d9b0 <memset+0xa>
 801d9ae:	4770      	bx	lr
 801d9b0:	f803 1b01 	strb.w	r1, [r3], #1
 801d9b4:	e7f9      	b.n	801d9aa <memset+0x4>

0801d9b6 <strncmp>:
 801d9b6:	b510      	push	{r4, lr}
 801d9b8:	b16a      	cbz	r2, 801d9d6 <strncmp+0x20>
 801d9ba:	3901      	subs	r1, #1
 801d9bc:	1884      	adds	r4, r0, r2
 801d9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d9c6:	429a      	cmp	r2, r3
 801d9c8:	d103      	bne.n	801d9d2 <strncmp+0x1c>
 801d9ca:	42a0      	cmp	r0, r4
 801d9cc:	d001      	beq.n	801d9d2 <strncmp+0x1c>
 801d9ce:	2a00      	cmp	r2, #0
 801d9d0:	d1f5      	bne.n	801d9be <strncmp+0x8>
 801d9d2:	1ad0      	subs	r0, r2, r3
 801d9d4:	bd10      	pop	{r4, pc}
 801d9d6:	4610      	mov	r0, r2
 801d9d8:	e7fc      	b.n	801d9d4 <strncmp+0x1e>
	...

0801d9dc <_localeconv_r>:
 801d9dc:	4800      	ldr	r0, [pc, #0]	; (801d9e0 <_localeconv_r+0x4>)
 801d9de:	4770      	bx	lr
 801d9e0:	200001b8 	.word	0x200001b8

0801d9e4 <_close_r>:
 801d9e4:	b538      	push	{r3, r4, r5, lr}
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	4d05      	ldr	r5, [pc, #20]	; (801da00 <_close_r+0x1c>)
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	4608      	mov	r0, r1
 801d9ee:	602b      	str	r3, [r5, #0]
 801d9f0:	f7e8 f829 	bl	8005a46 <_close>
 801d9f4:	1c43      	adds	r3, r0, #1
 801d9f6:	d102      	bne.n	801d9fe <_close_r+0x1a>
 801d9f8:	682b      	ldr	r3, [r5, #0]
 801d9fa:	b103      	cbz	r3, 801d9fe <_close_r+0x1a>
 801d9fc:	6023      	str	r3, [r4, #0]
 801d9fe:	bd38      	pop	{r3, r4, r5, pc}
 801da00:	2000d380 	.word	0x2000d380

0801da04 <_lseek_r>:
 801da04:	b538      	push	{r3, r4, r5, lr}
 801da06:	4604      	mov	r4, r0
 801da08:	4d06      	ldr	r5, [pc, #24]	; (801da24 <_lseek_r+0x20>)
 801da0a:	4608      	mov	r0, r1
 801da0c:	4611      	mov	r1, r2
 801da0e:	2200      	movs	r2, #0
 801da10:	602a      	str	r2, [r5, #0]
 801da12:	461a      	mov	r2, r3
 801da14:	f7e8 f83e 	bl	8005a94 <_lseek>
 801da18:	1c43      	adds	r3, r0, #1
 801da1a:	d102      	bne.n	801da22 <_lseek_r+0x1e>
 801da1c:	682b      	ldr	r3, [r5, #0]
 801da1e:	b103      	cbz	r3, 801da22 <_lseek_r+0x1e>
 801da20:	6023      	str	r3, [r4, #0]
 801da22:	bd38      	pop	{r3, r4, r5, pc}
 801da24:	2000d380 	.word	0x2000d380

0801da28 <_read_r>:
 801da28:	b538      	push	{r3, r4, r5, lr}
 801da2a:	4604      	mov	r4, r0
 801da2c:	4d06      	ldr	r5, [pc, #24]	; (801da48 <_read_r+0x20>)
 801da2e:	4608      	mov	r0, r1
 801da30:	4611      	mov	r1, r2
 801da32:	2200      	movs	r2, #0
 801da34:	602a      	str	r2, [r5, #0]
 801da36:	461a      	mov	r2, r3
 801da38:	f7e7 ffcc 	bl	80059d4 <_read>
 801da3c:	1c43      	adds	r3, r0, #1
 801da3e:	d102      	bne.n	801da46 <_read_r+0x1e>
 801da40:	682b      	ldr	r3, [r5, #0]
 801da42:	b103      	cbz	r3, 801da46 <_read_r+0x1e>
 801da44:	6023      	str	r3, [r4, #0]
 801da46:	bd38      	pop	{r3, r4, r5, pc}
 801da48:	2000d380 	.word	0x2000d380

0801da4c <_write_r>:
 801da4c:	b538      	push	{r3, r4, r5, lr}
 801da4e:	4604      	mov	r4, r0
 801da50:	4d06      	ldr	r5, [pc, #24]	; (801da6c <_write_r+0x20>)
 801da52:	4608      	mov	r0, r1
 801da54:	4611      	mov	r1, r2
 801da56:	2200      	movs	r2, #0
 801da58:	602a      	str	r2, [r5, #0]
 801da5a:	461a      	mov	r2, r3
 801da5c:	f7e7 ffd7 	bl	8005a0e <_write>
 801da60:	1c43      	adds	r3, r0, #1
 801da62:	d102      	bne.n	801da6a <_write_r+0x1e>
 801da64:	682b      	ldr	r3, [r5, #0]
 801da66:	b103      	cbz	r3, 801da6a <_write_r+0x1e>
 801da68:	6023      	str	r3, [r4, #0]
 801da6a:	bd38      	pop	{r3, r4, r5, pc}
 801da6c:	2000d380 	.word	0x2000d380

0801da70 <__errno>:
 801da70:	4b01      	ldr	r3, [pc, #4]	; (801da78 <__errno+0x8>)
 801da72:	6818      	ldr	r0, [r3, #0]
 801da74:	4770      	bx	lr
 801da76:	bf00      	nop
 801da78:	200000c4 	.word	0x200000c4

0801da7c <__libc_init_array>:
 801da7c:	b570      	push	{r4, r5, r6, lr}
 801da7e:	4d0d      	ldr	r5, [pc, #52]	; (801dab4 <__libc_init_array+0x38>)
 801da80:	2600      	movs	r6, #0
 801da82:	4c0d      	ldr	r4, [pc, #52]	; (801dab8 <__libc_init_array+0x3c>)
 801da84:	1b64      	subs	r4, r4, r5
 801da86:	10a4      	asrs	r4, r4, #2
 801da88:	42a6      	cmp	r6, r4
 801da8a:	d109      	bne.n	801daa0 <__libc_init_array+0x24>
 801da8c:	4d0b      	ldr	r5, [pc, #44]	; (801dabc <__libc_init_array+0x40>)
 801da8e:	2600      	movs	r6, #0
 801da90:	4c0b      	ldr	r4, [pc, #44]	; (801dac0 <__libc_init_array+0x44>)
 801da92:	f004 fe7f 	bl	8022794 <_init>
 801da96:	1b64      	subs	r4, r4, r5
 801da98:	10a4      	asrs	r4, r4, #2
 801da9a:	42a6      	cmp	r6, r4
 801da9c:	d105      	bne.n	801daaa <__libc_init_array+0x2e>
 801da9e:	bd70      	pop	{r4, r5, r6, pc}
 801daa0:	f855 3b04 	ldr.w	r3, [r5], #4
 801daa4:	3601      	adds	r6, #1
 801daa6:	4798      	blx	r3
 801daa8:	e7ee      	b.n	801da88 <__libc_init_array+0xc>
 801daaa:	f855 3b04 	ldr.w	r3, [r5], #4
 801daae:	3601      	adds	r6, #1
 801dab0:	4798      	blx	r3
 801dab2:	e7f2      	b.n	801da9a <__libc_init_array+0x1e>
 801dab4:	08023e40 	.word	0x08023e40
 801dab8:	08023e40 	.word	0x08023e40
 801dabc:	08023e40 	.word	0x08023e40
 801dac0:	08023e44 	.word	0x08023e44

0801dac4 <__retarget_lock_acquire_recursive>:
 801dac4:	4770      	bx	lr

0801dac6 <__retarget_lock_release_recursive>:
 801dac6:	4770      	bx	lr

0801dac8 <memchr>:
 801dac8:	b2c9      	uxtb	r1, r1
 801daca:	4402      	add	r2, r0
 801dacc:	b510      	push	{r4, lr}
 801dace:	4290      	cmp	r0, r2
 801dad0:	4603      	mov	r3, r0
 801dad2:	d101      	bne.n	801dad8 <memchr+0x10>
 801dad4:	2300      	movs	r3, #0
 801dad6:	e003      	b.n	801dae0 <memchr+0x18>
 801dad8:	781c      	ldrb	r4, [r3, #0]
 801dada:	3001      	adds	r0, #1
 801dadc:	428c      	cmp	r4, r1
 801dade:	d1f6      	bne.n	801dace <memchr+0x6>
 801dae0:	4618      	mov	r0, r3
 801dae2:	bd10      	pop	{r4, pc}

0801dae4 <memcpy>:
 801dae4:	440a      	add	r2, r1
 801dae6:	1e43      	subs	r3, r0, #1
 801dae8:	4291      	cmp	r1, r2
 801daea:	d100      	bne.n	801daee <memcpy+0xa>
 801daec:	4770      	bx	lr
 801daee:	b510      	push	{r4, lr}
 801daf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801daf4:	4291      	cmp	r1, r2
 801daf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dafa:	d1f9      	bne.n	801daf0 <memcpy+0xc>
 801dafc:	bd10      	pop	{r4, pc}
	...

0801db00 <nanf>:
 801db00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801db08 <nanf+0x8>
 801db04:	4770      	bx	lr
 801db06:	bf00      	nop
 801db08:	7fc00000 	.word	0x7fc00000

0801db0c <quorem>:
 801db0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db10:	6903      	ldr	r3, [r0, #16]
 801db12:	4607      	mov	r7, r0
 801db14:	690c      	ldr	r4, [r1, #16]
 801db16:	42a3      	cmp	r3, r4
 801db18:	f2c0 8086 	blt.w	801dc28 <quorem+0x11c>
 801db1c:	3c01      	subs	r4, #1
 801db1e:	f100 0514 	add.w	r5, r0, #20
 801db22:	f101 0814 	add.w	r8, r1, #20
 801db26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801db2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801db2e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801db32:	9301      	str	r3, [sp, #4]
 801db34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801db38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801db3c:	3301      	adds	r3, #1
 801db3e:	429a      	cmp	r2, r3
 801db40:	fbb2 f6f3 	udiv	r6, r2, r3
 801db44:	d335      	bcc.n	801dbb2 <quorem+0xa6>
 801db46:	f04f 0e00 	mov.w	lr, #0
 801db4a:	4640      	mov	r0, r8
 801db4c:	46ac      	mov	ip, r5
 801db4e:	46f2      	mov	sl, lr
 801db50:	f850 2b04 	ldr.w	r2, [r0], #4
 801db54:	b293      	uxth	r3, r2
 801db56:	4581      	cmp	r9, r0
 801db58:	fb06 e303 	mla	r3, r6, r3, lr
 801db5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801db60:	ea4f 4213 	mov.w	r2, r3, lsr #16
 801db64:	b29b      	uxth	r3, r3
 801db66:	fb06 220e 	mla	r2, r6, lr, r2
 801db6a:	ebaa 0303 	sub.w	r3, sl, r3
 801db6e:	f8dc a000 	ldr.w	sl, [ip]
 801db72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801db76:	fa1f fa8a 	uxth.w	sl, sl
 801db7a:	b292      	uxth	r2, r2
 801db7c:	4453      	add	r3, sl
 801db7e:	9300      	str	r3, [sp, #0]
 801db80:	f8dc 3000 	ldr.w	r3, [ip]
 801db84:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801db88:	9b00      	ldr	r3, [sp, #0]
 801db8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801db8e:	f8bd 3000 	ldrh.w	r3, [sp]
 801db92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801db96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801db9a:	f84c 3b04 	str.w	r3, [ip], #4
 801db9e:	d2d7      	bcs.n	801db50 <quorem+0x44>
 801dba0:	f855 300b 	ldr.w	r3, [r5, fp]
 801dba4:	b92b      	cbnz	r3, 801dbb2 <quorem+0xa6>
 801dba6:	9b01      	ldr	r3, [sp, #4]
 801dba8:	3b04      	subs	r3, #4
 801dbaa:	429d      	cmp	r5, r3
 801dbac:	461a      	mov	r2, r3
 801dbae:	d32f      	bcc.n	801dc10 <quorem+0x104>
 801dbb0:	613c      	str	r4, [r7, #16]
 801dbb2:	4638      	mov	r0, r7
 801dbb4:	f001 f9f4 	bl	801efa0 <__mcmp>
 801dbb8:	2800      	cmp	r0, #0
 801dbba:	db25      	blt.n	801dc08 <quorem+0xfc>
 801dbbc:	3601      	adds	r6, #1
 801dbbe:	4629      	mov	r1, r5
 801dbc0:	2000      	movs	r0, #0
 801dbc2:	f858 2b04 	ldr.w	r2, [r8], #4
 801dbc6:	f8d1 c000 	ldr.w	ip, [r1]
 801dbca:	b293      	uxth	r3, r2
 801dbcc:	45c1      	cmp	r9, r8
 801dbce:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801dbd2:	eba0 0303 	sub.w	r3, r0, r3
 801dbd6:	fa1f f08c 	uxth.w	r0, ip
 801dbda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801dbde:	4403      	add	r3, r0
 801dbe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dbe4:	b29b      	uxth	r3, r3
 801dbe6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801dbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dbee:	f841 3b04 	str.w	r3, [r1], #4
 801dbf2:	d2e6      	bcs.n	801dbc2 <quorem+0xb6>
 801dbf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dbf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dbfc:	b922      	cbnz	r2, 801dc08 <quorem+0xfc>
 801dbfe:	3b04      	subs	r3, #4
 801dc00:	429d      	cmp	r5, r3
 801dc02:	461a      	mov	r2, r3
 801dc04:	d30a      	bcc.n	801dc1c <quorem+0x110>
 801dc06:	613c      	str	r4, [r7, #16]
 801dc08:	4630      	mov	r0, r6
 801dc0a:	b003      	add	sp, #12
 801dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc10:	6812      	ldr	r2, [r2, #0]
 801dc12:	3b04      	subs	r3, #4
 801dc14:	2a00      	cmp	r2, #0
 801dc16:	d1cb      	bne.n	801dbb0 <quorem+0xa4>
 801dc18:	3c01      	subs	r4, #1
 801dc1a:	e7c6      	b.n	801dbaa <quorem+0x9e>
 801dc1c:	6812      	ldr	r2, [r2, #0]
 801dc1e:	3b04      	subs	r3, #4
 801dc20:	2a00      	cmp	r2, #0
 801dc22:	d1f0      	bne.n	801dc06 <quorem+0xfa>
 801dc24:	3c01      	subs	r4, #1
 801dc26:	e7eb      	b.n	801dc00 <quorem+0xf4>
 801dc28:	2000      	movs	r0, #0
 801dc2a:	e7ee      	b.n	801dc0a <quorem+0xfe>
 801dc2c:	0000      	movs	r0, r0
	...

0801dc30 <_dtoa_r>:
 801dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc34:	69c5      	ldr	r5, [r0, #28]
 801dc36:	4604      	mov	r4, r0
 801dc38:	ed2d 8b04 	vpush	{d8-d9}
 801dc3c:	b093      	sub	sp, #76	; 0x4c
 801dc3e:	ec57 6b10 	vmov	r6, r7, d0
 801dc42:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801dc46:	9107      	str	r1, [sp, #28]
 801dc48:	920a      	str	r2, [sp, #40]	; 0x28
 801dc4a:	930d      	str	r3, [sp, #52]	; 0x34
 801dc4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801dc50:	b975      	cbnz	r5, 801dc70 <_dtoa_r+0x40>
 801dc52:	2010      	movs	r0, #16
 801dc54:	f000 fe28 	bl	801e8a8 <malloc>
 801dc58:	4602      	mov	r2, r0
 801dc5a:	61e0      	str	r0, [r4, #28]
 801dc5c:	b920      	cbnz	r0, 801dc68 <_dtoa_r+0x38>
 801dc5e:	4bae      	ldr	r3, [pc, #696]	; (801df18 <_dtoa_r+0x2e8>)
 801dc60:	21ef      	movs	r1, #239	; 0xef
 801dc62:	48ae      	ldr	r0, [pc, #696]	; (801df1c <_dtoa_r+0x2ec>)
 801dc64:	f002 ff44 	bl	8020af0 <__assert_func>
 801dc68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801dc6c:	6005      	str	r5, [r0, #0]
 801dc6e:	60c5      	str	r5, [r0, #12]
 801dc70:	69e3      	ldr	r3, [r4, #28]
 801dc72:	6819      	ldr	r1, [r3, #0]
 801dc74:	b151      	cbz	r1, 801dc8c <_dtoa_r+0x5c>
 801dc76:	685a      	ldr	r2, [r3, #4]
 801dc78:	2301      	movs	r3, #1
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	4093      	lsls	r3, r2
 801dc7e:	604a      	str	r2, [r1, #4]
 801dc80:	608b      	str	r3, [r1, #8]
 801dc82:	f000 ff05 	bl	801ea90 <_Bfree>
 801dc86:	69e3      	ldr	r3, [r4, #28]
 801dc88:	2200      	movs	r2, #0
 801dc8a:	601a      	str	r2, [r3, #0]
 801dc8c:	1e3b      	subs	r3, r7, #0
 801dc8e:	bfb7      	itett	lt
 801dc90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801dc94:	2300      	movge	r3, #0
 801dc96:	2201      	movlt	r2, #1
 801dc98:	9303      	strlt	r3, [sp, #12]
 801dc9a:	bfac      	ite	ge
 801dc9c:	f8c8 3000 	strge.w	r3, [r8]
 801dca0:	f8c8 2000 	strlt.w	r2, [r8]
 801dca4:	4b9e      	ldr	r3, [pc, #632]	; (801df20 <_dtoa_r+0x2f0>)
 801dca6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801dcaa:	ea33 0308 	bics.w	r3, r3, r8
 801dcae:	d11b      	bne.n	801dce8 <_dtoa_r+0xb8>
 801dcb0:	f242 730f 	movw	r3, #9999	; 0x270f
 801dcb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dcb6:	6013      	str	r3, [r2, #0]
 801dcb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801dcbc:	4333      	orrs	r3, r6
 801dcbe:	f000 8592 	beq.w	801e7e6 <_dtoa_r+0xbb6>
 801dcc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dcc4:	b963      	cbnz	r3, 801dce0 <_dtoa_r+0xb0>
 801dcc6:	4b97      	ldr	r3, [pc, #604]	; (801df24 <_dtoa_r+0x2f4>)
 801dcc8:	e027      	b.n	801dd1a <_dtoa_r+0xea>
 801dcca:	4b97      	ldr	r3, [pc, #604]	; (801df28 <_dtoa_r+0x2f8>)
 801dccc:	9300      	str	r3, [sp, #0]
 801dcce:	3308      	adds	r3, #8
 801dcd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dcd2:	6013      	str	r3, [r2, #0]
 801dcd4:	9800      	ldr	r0, [sp, #0]
 801dcd6:	b013      	add	sp, #76	; 0x4c
 801dcd8:	ecbd 8b04 	vpop	{d8-d9}
 801dcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dce0:	4b90      	ldr	r3, [pc, #576]	; (801df24 <_dtoa_r+0x2f4>)
 801dce2:	9300      	str	r3, [sp, #0]
 801dce4:	3303      	adds	r3, #3
 801dce6:	e7f3      	b.n	801dcd0 <_dtoa_r+0xa0>
 801dce8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dcec:	2200      	movs	r2, #0
 801dcee:	2300      	movs	r3, #0
 801dcf0:	ec51 0b17 	vmov	r0, r1, d7
 801dcf4:	eeb0 8a47 	vmov.f32	s16, s14
 801dcf8:	eef0 8a67 	vmov.f32	s17, s15
 801dcfc:	f7e2 fee8 	bl	8000ad0 <__aeabi_dcmpeq>
 801dd00:	4681      	mov	r9, r0
 801dd02:	b160      	cbz	r0, 801dd1e <_dtoa_r+0xee>
 801dd04:	2301      	movs	r3, #1
 801dd06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd08:	6013      	str	r3, [r2, #0]
 801dd0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	f000 8567 	beq.w	801e7e0 <_dtoa_r+0xbb0>
 801dd12:	4b86      	ldr	r3, [pc, #536]	; (801df2c <_dtoa_r+0x2fc>)
 801dd14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dd16:	6013      	str	r3, [r2, #0]
 801dd18:	3b01      	subs	r3, #1
 801dd1a:	9300      	str	r3, [sp, #0]
 801dd1c:	e7da      	b.n	801dcd4 <_dtoa_r+0xa4>
 801dd1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801dd22:	eeb0 0a48 	vmov.f32	s0, s16
 801dd26:	eef0 0a68 	vmov.f32	s1, s17
 801dd2a:	aa10      	add	r2, sp, #64	; 0x40
 801dd2c:	a911      	add	r1, sp, #68	; 0x44
 801dd2e:	4620      	mov	r0, r4
 801dd30:	f001 fa56 	bl	801f1e0 <__d2b>
 801dd34:	4682      	mov	sl, r0
 801dd36:	2d00      	cmp	r5, #0
 801dd38:	d07d      	beq.n	801de36 <_dtoa_r+0x206>
 801dd3a:	ee18 3a90 	vmov	r3, s17
 801dd3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801dd42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801dd46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dd4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801dd4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dd52:	ec51 0b18 	vmov	r0, r1, d8
 801dd56:	4619      	mov	r1, r3
 801dd58:	2200      	movs	r2, #0
 801dd5a:	4b75      	ldr	r3, [pc, #468]	; (801df30 <_dtoa_r+0x300>)
 801dd5c:	f7e2 fa98 	bl	8000290 <__aeabi_dsub>
 801dd60:	a367      	add	r3, pc, #412	; (adr r3, 801df00 <_dtoa_r+0x2d0>)
 801dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd66:	f7e2 fc4b 	bl	8000600 <__aeabi_dmul>
 801dd6a:	a367      	add	r3, pc, #412	; (adr r3, 801df08 <_dtoa_r+0x2d8>)
 801dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd70:	f7e2 fa90 	bl	8000294 <__adddf3>
 801dd74:	4606      	mov	r6, r0
 801dd76:	460f      	mov	r7, r1
 801dd78:	4628      	mov	r0, r5
 801dd7a:	f7e2 fbd7 	bl	800052c <__aeabi_i2d>
 801dd7e:	a364      	add	r3, pc, #400	; (adr r3, 801df10 <_dtoa_r+0x2e0>)
 801dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd84:	f7e2 fc3c 	bl	8000600 <__aeabi_dmul>
 801dd88:	4602      	mov	r2, r0
 801dd8a:	460b      	mov	r3, r1
 801dd8c:	4630      	mov	r0, r6
 801dd8e:	4639      	mov	r1, r7
 801dd90:	f7e2 fa80 	bl	8000294 <__adddf3>
 801dd94:	4606      	mov	r6, r0
 801dd96:	460f      	mov	r7, r1
 801dd98:	f7e2 fee2 	bl	8000b60 <__aeabi_d2iz>
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	4683      	mov	fp, r0
 801dda0:	2300      	movs	r3, #0
 801dda2:	4630      	mov	r0, r6
 801dda4:	4639      	mov	r1, r7
 801dda6:	f7e2 fe9d 	bl	8000ae4 <__aeabi_dcmplt>
 801ddaa:	b148      	cbz	r0, 801ddc0 <_dtoa_r+0x190>
 801ddac:	4658      	mov	r0, fp
 801ddae:	f7e2 fbbd 	bl	800052c <__aeabi_i2d>
 801ddb2:	4632      	mov	r2, r6
 801ddb4:	463b      	mov	r3, r7
 801ddb6:	f7e2 fe8b 	bl	8000ad0 <__aeabi_dcmpeq>
 801ddba:	b908      	cbnz	r0, 801ddc0 <_dtoa_r+0x190>
 801ddbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddc0:	f1bb 0f16 	cmp.w	fp, #22
 801ddc4:	d857      	bhi.n	801de76 <_dtoa_r+0x246>
 801ddc6:	4b5b      	ldr	r3, [pc, #364]	; (801df34 <_dtoa_r+0x304>)
 801ddc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ddcc:	ec51 0b18 	vmov	r0, r1, d8
 801ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddd4:	f7e2 fe86 	bl	8000ae4 <__aeabi_dcmplt>
 801ddd8:	2800      	cmp	r0, #0
 801ddda:	d04e      	beq.n	801de7a <_dtoa_r+0x24a>
 801dddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dde0:	2300      	movs	r3, #0
 801dde2:	930c      	str	r3, [sp, #48]	; 0x30
 801dde4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dde6:	1b5b      	subs	r3, r3, r5
 801dde8:	1e5a      	subs	r2, r3, #1
 801ddea:	bf4c      	ite	mi
 801ddec:	f1c3 0301 	rsbmi	r3, r3, #1
 801ddf0:	2300      	movpl	r3, #0
 801ddf2:	9206      	str	r2, [sp, #24]
 801ddf4:	bf45      	ittet	mi
 801ddf6:	9305      	strmi	r3, [sp, #20]
 801ddf8:	2300      	movmi	r3, #0
 801ddfa:	9305      	strpl	r3, [sp, #20]
 801ddfc:	9306      	strmi	r3, [sp, #24]
 801ddfe:	f1bb 0f00 	cmp.w	fp, #0
 801de02:	db3c      	blt.n	801de7e <_dtoa_r+0x24e>
 801de04:	9b06      	ldr	r3, [sp, #24]
 801de06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801de0a:	445b      	add	r3, fp
 801de0c:	9306      	str	r3, [sp, #24]
 801de0e:	2300      	movs	r3, #0
 801de10:	9308      	str	r3, [sp, #32]
 801de12:	9b07      	ldr	r3, [sp, #28]
 801de14:	2b09      	cmp	r3, #9
 801de16:	d868      	bhi.n	801deea <_dtoa_r+0x2ba>
 801de18:	2b05      	cmp	r3, #5
 801de1a:	bfc5      	ittet	gt
 801de1c:	3b04      	subgt	r3, #4
 801de1e:	2500      	movgt	r5, #0
 801de20:	2501      	movle	r5, #1
 801de22:	9307      	strgt	r3, [sp, #28]
 801de24:	9b07      	ldr	r3, [sp, #28]
 801de26:	3b02      	subs	r3, #2
 801de28:	2b03      	cmp	r3, #3
 801de2a:	f200 8087 	bhi.w	801df3c <_dtoa_r+0x30c>
 801de2e:	e8df f003 	tbb	[pc, r3]
 801de32:	3d30      	.short	0x3d30
 801de34:	5a3b      	.short	0x5a3b
 801de36:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801de3a:	441d      	add	r5, r3
 801de3c:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801de40:	2b20      	cmp	r3, #32
 801de42:	bfc9      	itett	gt
 801de44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801de48:	f1c3 0320 	rsble	r3, r3, #32
 801de4c:	fa08 f803 	lslgt.w	r8, r8, r3
 801de50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801de54:	bfd8      	it	le
 801de56:	fa06 f003 	lslle.w	r0, r6, r3
 801de5a:	f105 35ff 	add.w	r5, r5, #4294967295
 801de5e:	bfc4      	itt	gt
 801de60:	fa26 f303 	lsrgt.w	r3, r6, r3
 801de64:	ea48 0003 	orrgt.w	r0, r8, r3
 801de68:	f7e2 fb50 	bl	800050c <__aeabi_ui2d>
 801de6c:	2201      	movs	r2, #1
 801de6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801de72:	920e      	str	r2, [sp, #56]	; 0x38
 801de74:	e76f      	b.n	801dd56 <_dtoa_r+0x126>
 801de76:	2301      	movs	r3, #1
 801de78:	e7b3      	b.n	801dde2 <_dtoa_r+0x1b2>
 801de7a:	900c      	str	r0, [sp, #48]	; 0x30
 801de7c:	e7b2      	b.n	801dde4 <_dtoa_r+0x1b4>
 801de7e:	9b05      	ldr	r3, [sp, #20]
 801de80:	eba3 030b 	sub.w	r3, r3, fp
 801de84:	9305      	str	r3, [sp, #20]
 801de86:	f1cb 0300 	rsb	r3, fp, #0
 801de8a:	9308      	str	r3, [sp, #32]
 801de8c:	2300      	movs	r3, #0
 801de8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801de90:	e7bf      	b.n	801de12 <_dtoa_r+0x1e2>
 801de92:	2300      	movs	r3, #0
 801de94:	9309      	str	r3, [sp, #36]	; 0x24
 801de96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de98:	2b00      	cmp	r3, #0
 801de9a:	dc52      	bgt.n	801df42 <_dtoa_r+0x312>
 801de9c:	2301      	movs	r3, #1
 801de9e:	461a      	mov	r2, r3
 801dea0:	9301      	str	r3, [sp, #4]
 801dea2:	9304      	str	r3, [sp, #16]
 801dea4:	920a      	str	r2, [sp, #40]	; 0x28
 801dea6:	e00b      	b.n	801dec0 <_dtoa_r+0x290>
 801dea8:	2301      	movs	r3, #1
 801deaa:	e7f3      	b.n	801de94 <_dtoa_r+0x264>
 801deac:	2300      	movs	r3, #0
 801deae:	9309      	str	r3, [sp, #36]	; 0x24
 801deb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801deb2:	445b      	add	r3, fp
 801deb4:	9301      	str	r3, [sp, #4]
 801deb6:	3301      	adds	r3, #1
 801deb8:	2b01      	cmp	r3, #1
 801deba:	9304      	str	r3, [sp, #16]
 801debc:	bfb8      	it	lt
 801debe:	2301      	movlt	r3, #1
 801dec0:	69e0      	ldr	r0, [r4, #28]
 801dec2:	2100      	movs	r1, #0
 801dec4:	2204      	movs	r2, #4
 801dec6:	f102 0614 	add.w	r6, r2, #20
 801deca:	429e      	cmp	r6, r3
 801decc:	d93d      	bls.n	801df4a <_dtoa_r+0x31a>
 801dece:	6041      	str	r1, [r0, #4]
 801ded0:	4620      	mov	r0, r4
 801ded2:	f000 fd9d 	bl	801ea10 <_Balloc>
 801ded6:	9000      	str	r0, [sp, #0]
 801ded8:	2800      	cmp	r0, #0
 801deda:	d139      	bne.n	801df50 <_dtoa_r+0x320>
 801dedc:	4b16      	ldr	r3, [pc, #88]	; (801df38 <_dtoa_r+0x308>)
 801dede:	4602      	mov	r2, r0
 801dee0:	f240 11af 	movw	r1, #431	; 0x1af
 801dee4:	e6bd      	b.n	801dc62 <_dtoa_r+0x32>
 801dee6:	2301      	movs	r3, #1
 801dee8:	e7e1      	b.n	801deae <_dtoa_r+0x27e>
 801deea:	2501      	movs	r5, #1
 801deec:	2300      	movs	r3, #0
 801deee:	9509      	str	r5, [sp, #36]	; 0x24
 801def0:	9307      	str	r3, [sp, #28]
 801def2:	f04f 33ff 	mov.w	r3, #4294967295
 801def6:	2200      	movs	r2, #0
 801def8:	9301      	str	r3, [sp, #4]
 801defa:	9304      	str	r3, [sp, #16]
 801defc:	2312      	movs	r3, #18
 801defe:	e7d1      	b.n	801dea4 <_dtoa_r+0x274>
 801df00:	636f4361 	.word	0x636f4361
 801df04:	3fd287a7 	.word	0x3fd287a7
 801df08:	8b60c8b3 	.word	0x8b60c8b3
 801df0c:	3fc68a28 	.word	0x3fc68a28
 801df10:	509f79fb 	.word	0x509f79fb
 801df14:	3fd34413 	.word	0x3fd34413
 801df18:	08023a06 	.word	0x08023a06
 801df1c:	08023a1d 	.word	0x08023a1d
 801df20:	7ff00000 	.word	0x7ff00000
 801df24:	08023a02 	.word	0x08023a02
 801df28:	080239f9 	.word	0x080239f9
 801df2c:	08023d59 	.word	0x08023d59
 801df30:	3ff80000 	.word	0x3ff80000
 801df34:	08023b08 	.word	0x08023b08
 801df38:	08023a75 	.word	0x08023a75
 801df3c:	2301      	movs	r3, #1
 801df3e:	9309      	str	r3, [sp, #36]	; 0x24
 801df40:	e7d7      	b.n	801def2 <_dtoa_r+0x2c2>
 801df42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df44:	9301      	str	r3, [sp, #4]
 801df46:	9304      	str	r3, [sp, #16]
 801df48:	e7ba      	b.n	801dec0 <_dtoa_r+0x290>
 801df4a:	3101      	adds	r1, #1
 801df4c:	0052      	lsls	r2, r2, #1
 801df4e:	e7ba      	b.n	801dec6 <_dtoa_r+0x296>
 801df50:	69e3      	ldr	r3, [r4, #28]
 801df52:	9a00      	ldr	r2, [sp, #0]
 801df54:	601a      	str	r2, [r3, #0]
 801df56:	9b04      	ldr	r3, [sp, #16]
 801df58:	2b0e      	cmp	r3, #14
 801df5a:	f200 80a8 	bhi.w	801e0ae <_dtoa_r+0x47e>
 801df5e:	2d00      	cmp	r5, #0
 801df60:	f000 80a5 	beq.w	801e0ae <_dtoa_r+0x47e>
 801df64:	f1bb 0f00 	cmp.w	fp, #0
 801df68:	dd38      	ble.n	801dfdc <_dtoa_r+0x3ac>
 801df6a:	f00b 020f 	and.w	r2, fp, #15
 801df6e:	4bbf      	ldr	r3, [pc, #764]	; (801e26c <_dtoa_r+0x63c>)
 801df70:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801df74:	ea4f 182b 	mov.w	r8, fp, asr #4
 801df78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801df7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 801df80:	d019      	beq.n	801dfb6 <_dtoa_r+0x386>
 801df82:	4bbb      	ldr	r3, [pc, #748]	; (801e270 <_dtoa_r+0x640>)
 801df84:	f008 080f 	and.w	r8, r8, #15
 801df88:	2503      	movs	r5, #3
 801df8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801df8e:	ec51 0b18 	vmov	r0, r1, d8
 801df92:	f7e2 fc5f 	bl	8000854 <__aeabi_ddiv>
 801df96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801e270 <_dtoa_r+0x640>
 801df9e:	f1b8 0f00 	cmp.w	r8, #0
 801dfa2:	d10a      	bne.n	801dfba <_dtoa_r+0x38a>
 801dfa4:	4632      	mov	r2, r6
 801dfa6:	463b      	mov	r3, r7
 801dfa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dfac:	f7e2 fc52 	bl	8000854 <__aeabi_ddiv>
 801dfb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dfb4:	e02b      	b.n	801e00e <_dtoa_r+0x3de>
 801dfb6:	2502      	movs	r5, #2
 801dfb8:	e7ef      	b.n	801df9a <_dtoa_r+0x36a>
 801dfba:	f018 0f01 	tst.w	r8, #1
 801dfbe:	d008      	beq.n	801dfd2 <_dtoa_r+0x3a2>
 801dfc0:	4630      	mov	r0, r6
 801dfc2:	4639      	mov	r1, r7
 801dfc4:	3501      	adds	r5, #1
 801dfc6:	e9d9 2300 	ldrd	r2, r3, [r9]
 801dfca:	f7e2 fb19 	bl	8000600 <__aeabi_dmul>
 801dfce:	4606      	mov	r6, r0
 801dfd0:	460f      	mov	r7, r1
 801dfd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801dfd6:	f109 0908 	add.w	r9, r9, #8
 801dfda:	e7e0      	b.n	801df9e <_dtoa_r+0x36e>
 801dfdc:	f000 809f 	beq.w	801e11e <_dtoa_r+0x4ee>
 801dfe0:	f1cb 0600 	rsb	r6, fp, #0
 801dfe4:	4ba1      	ldr	r3, [pc, #644]	; (801e26c <_dtoa_r+0x63c>)
 801dfe6:	4fa2      	ldr	r7, [pc, #648]	; (801e270 <_dtoa_r+0x640>)
 801dfe8:	2502      	movs	r5, #2
 801dfea:	f006 020f 	and.w	r2, r6, #15
 801dfee:	1136      	asrs	r6, r6, #4
 801dff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dff4:	ec51 0b18 	vmov	r0, r1, d8
 801dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dffc:	f7e2 fb00 	bl	8000600 <__aeabi_dmul>
 801e000:	2300      	movs	r3, #0
 801e002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e006:	2e00      	cmp	r6, #0
 801e008:	d17e      	bne.n	801e108 <_dtoa_r+0x4d8>
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d1d0      	bne.n	801dfb0 <_dtoa_r+0x380>
 801e00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e010:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e014:	2b00      	cmp	r3, #0
 801e016:	f000 8084 	beq.w	801e122 <_dtoa_r+0x4f2>
 801e01a:	2200      	movs	r2, #0
 801e01c:	4b95      	ldr	r3, [pc, #596]	; (801e274 <_dtoa_r+0x644>)
 801e01e:	4640      	mov	r0, r8
 801e020:	4649      	mov	r1, r9
 801e022:	f7e2 fd5f 	bl	8000ae4 <__aeabi_dcmplt>
 801e026:	2800      	cmp	r0, #0
 801e028:	d07b      	beq.n	801e122 <_dtoa_r+0x4f2>
 801e02a:	9b04      	ldr	r3, [sp, #16]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d078      	beq.n	801e122 <_dtoa_r+0x4f2>
 801e030:	9b01      	ldr	r3, [sp, #4]
 801e032:	2b00      	cmp	r3, #0
 801e034:	dd39      	ble.n	801e0aa <_dtoa_r+0x47a>
 801e036:	2200      	movs	r2, #0
 801e038:	4b8f      	ldr	r3, [pc, #572]	; (801e278 <_dtoa_r+0x648>)
 801e03a:	4640      	mov	r0, r8
 801e03c:	4649      	mov	r1, r9
 801e03e:	f7e2 fadf 	bl	8000600 <__aeabi_dmul>
 801e042:	f10b 37ff 	add.w	r7, fp, #4294967295
 801e046:	3501      	adds	r5, #1
 801e048:	9e01      	ldr	r6, [sp, #4]
 801e04a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e04e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e052:	4628      	mov	r0, r5
 801e054:	f7e2 fa6a 	bl	800052c <__aeabi_i2d>
 801e058:	4642      	mov	r2, r8
 801e05a:	464b      	mov	r3, r9
 801e05c:	f7e2 fad0 	bl	8000600 <__aeabi_dmul>
 801e060:	4b86      	ldr	r3, [pc, #536]	; (801e27c <_dtoa_r+0x64c>)
 801e062:	2200      	movs	r2, #0
 801e064:	f7e2 f916 	bl	8000294 <__adddf3>
 801e068:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e070:	9303      	str	r3, [sp, #12]
 801e072:	2e00      	cmp	r6, #0
 801e074:	d158      	bne.n	801e128 <_dtoa_r+0x4f8>
 801e076:	2200      	movs	r2, #0
 801e078:	4b81      	ldr	r3, [pc, #516]	; (801e280 <_dtoa_r+0x650>)
 801e07a:	4640      	mov	r0, r8
 801e07c:	4649      	mov	r1, r9
 801e07e:	f7e2 f907 	bl	8000290 <__aeabi_dsub>
 801e082:	4680      	mov	r8, r0
 801e084:	4689      	mov	r9, r1
 801e086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e08a:	f7e2 fd49 	bl	8000b20 <__aeabi_dcmpgt>
 801e08e:	2800      	cmp	r0, #0
 801e090:	f040 8296 	bne.w	801e5c0 <_dtoa_r+0x990>
 801e094:	4640      	mov	r0, r8
 801e096:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e09a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e09e:	4649      	mov	r1, r9
 801e0a0:	f7e2 fd20 	bl	8000ae4 <__aeabi_dcmplt>
 801e0a4:	2800      	cmp	r0, #0
 801e0a6:	f040 8289 	bne.w	801e5bc <_dtoa_r+0x98c>
 801e0aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	f2c0 814e 	blt.w	801e352 <_dtoa_r+0x722>
 801e0b6:	f1bb 0f0e 	cmp.w	fp, #14
 801e0ba:	f300 814a 	bgt.w	801e352 <_dtoa_r+0x722>
 801e0be:	4b6b      	ldr	r3, [pc, #428]	; (801e26c <_dtoa_r+0x63c>)
 801e0c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e0c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	f280 80dc 	bge.w	801e288 <_dtoa_r+0x658>
 801e0d0:	9b04      	ldr	r3, [sp, #16]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	f300 80d8 	bgt.w	801e288 <_dtoa_r+0x658>
 801e0d8:	f040 826f 	bne.w	801e5ba <_dtoa_r+0x98a>
 801e0dc:	2200      	movs	r2, #0
 801e0de:	4b68      	ldr	r3, [pc, #416]	; (801e280 <_dtoa_r+0x650>)
 801e0e0:	4640      	mov	r0, r8
 801e0e2:	4649      	mov	r1, r9
 801e0e4:	f7e2 fa8c 	bl	8000600 <__aeabi_dmul>
 801e0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e0ec:	f7e2 fd0e 	bl	8000b0c <__aeabi_dcmpge>
 801e0f0:	9e04      	ldr	r6, [sp, #16]
 801e0f2:	4637      	mov	r7, r6
 801e0f4:	2800      	cmp	r0, #0
 801e0f6:	f040 8245 	bne.w	801e584 <_dtoa_r+0x954>
 801e0fa:	9d00      	ldr	r5, [sp, #0]
 801e0fc:	2331      	movs	r3, #49	; 0x31
 801e0fe:	f10b 0b01 	add.w	fp, fp, #1
 801e102:	f805 3b01 	strb.w	r3, [r5], #1
 801e106:	e241      	b.n	801e58c <_dtoa_r+0x95c>
 801e108:	07f2      	lsls	r2, r6, #31
 801e10a:	d505      	bpl.n	801e118 <_dtoa_r+0x4e8>
 801e10c:	3501      	adds	r5, #1
 801e10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e112:	f7e2 fa75 	bl	8000600 <__aeabi_dmul>
 801e116:	2301      	movs	r3, #1
 801e118:	1076      	asrs	r6, r6, #1
 801e11a:	3708      	adds	r7, #8
 801e11c:	e773      	b.n	801e006 <_dtoa_r+0x3d6>
 801e11e:	2502      	movs	r5, #2
 801e120:	e775      	b.n	801e00e <_dtoa_r+0x3de>
 801e122:	465f      	mov	r7, fp
 801e124:	9e04      	ldr	r6, [sp, #16]
 801e126:	e792      	b.n	801e04e <_dtoa_r+0x41e>
 801e128:	9900      	ldr	r1, [sp, #0]
 801e12a:	4b50      	ldr	r3, [pc, #320]	; (801e26c <_dtoa_r+0x63c>)
 801e12c:	4431      	add	r1, r6
 801e12e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e132:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e136:	9102      	str	r1, [sp, #8]
 801e138:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e13a:	eeb0 9a47 	vmov.f32	s18, s14
 801e13e:	eef0 9a67 	vmov.f32	s19, s15
 801e142:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e146:	2900      	cmp	r1, #0
 801e148:	d044      	beq.n	801e1d4 <_dtoa_r+0x5a4>
 801e14a:	2000      	movs	r0, #0
 801e14c:	494d      	ldr	r1, [pc, #308]	; (801e284 <_dtoa_r+0x654>)
 801e14e:	f7e2 fb81 	bl	8000854 <__aeabi_ddiv>
 801e152:	ec53 2b19 	vmov	r2, r3, d9
 801e156:	f7e2 f89b 	bl	8000290 <__aeabi_dsub>
 801e15a:	9d00      	ldr	r5, [sp, #0]
 801e15c:	ec41 0b19 	vmov	d9, r0, r1
 801e160:	4649      	mov	r1, r9
 801e162:	4640      	mov	r0, r8
 801e164:	f7e2 fcfc 	bl	8000b60 <__aeabi_d2iz>
 801e168:	4606      	mov	r6, r0
 801e16a:	f7e2 f9df 	bl	800052c <__aeabi_i2d>
 801e16e:	4602      	mov	r2, r0
 801e170:	3630      	adds	r6, #48	; 0x30
 801e172:	460b      	mov	r3, r1
 801e174:	4640      	mov	r0, r8
 801e176:	4649      	mov	r1, r9
 801e178:	f7e2 f88a 	bl	8000290 <__aeabi_dsub>
 801e17c:	f805 6b01 	strb.w	r6, [r5], #1
 801e180:	4680      	mov	r8, r0
 801e182:	4689      	mov	r9, r1
 801e184:	ec53 2b19 	vmov	r2, r3, d9
 801e188:	f7e2 fcac 	bl	8000ae4 <__aeabi_dcmplt>
 801e18c:	2800      	cmp	r0, #0
 801e18e:	d164      	bne.n	801e25a <_dtoa_r+0x62a>
 801e190:	4642      	mov	r2, r8
 801e192:	464b      	mov	r3, r9
 801e194:	2000      	movs	r0, #0
 801e196:	4937      	ldr	r1, [pc, #220]	; (801e274 <_dtoa_r+0x644>)
 801e198:	f7e2 f87a 	bl	8000290 <__aeabi_dsub>
 801e19c:	ec53 2b19 	vmov	r2, r3, d9
 801e1a0:	f7e2 fca0 	bl	8000ae4 <__aeabi_dcmplt>
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	f040 80b6 	bne.w	801e316 <_dtoa_r+0x6e6>
 801e1aa:	9b02      	ldr	r3, [sp, #8]
 801e1ac:	429d      	cmp	r5, r3
 801e1ae:	f43f af7c 	beq.w	801e0aa <_dtoa_r+0x47a>
 801e1b2:	2200      	movs	r2, #0
 801e1b4:	4b30      	ldr	r3, [pc, #192]	; (801e278 <_dtoa_r+0x648>)
 801e1b6:	ec51 0b19 	vmov	r0, r1, d9
 801e1ba:	f7e2 fa21 	bl	8000600 <__aeabi_dmul>
 801e1be:	2200      	movs	r2, #0
 801e1c0:	4b2d      	ldr	r3, [pc, #180]	; (801e278 <_dtoa_r+0x648>)
 801e1c2:	ec41 0b19 	vmov	d9, r0, r1
 801e1c6:	4640      	mov	r0, r8
 801e1c8:	4649      	mov	r1, r9
 801e1ca:	f7e2 fa19 	bl	8000600 <__aeabi_dmul>
 801e1ce:	4680      	mov	r8, r0
 801e1d0:	4689      	mov	r9, r1
 801e1d2:	e7c5      	b.n	801e160 <_dtoa_r+0x530>
 801e1d4:	ec51 0b17 	vmov	r0, r1, d7
 801e1d8:	f7e2 fa12 	bl	8000600 <__aeabi_dmul>
 801e1dc:	9b02      	ldr	r3, [sp, #8]
 801e1de:	9d00      	ldr	r5, [sp, #0]
 801e1e0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e1e2:	ec41 0b19 	vmov	d9, r0, r1
 801e1e6:	4649      	mov	r1, r9
 801e1e8:	4640      	mov	r0, r8
 801e1ea:	f7e2 fcb9 	bl	8000b60 <__aeabi_d2iz>
 801e1ee:	4606      	mov	r6, r0
 801e1f0:	f7e2 f99c 	bl	800052c <__aeabi_i2d>
 801e1f4:	4602      	mov	r2, r0
 801e1f6:	460b      	mov	r3, r1
 801e1f8:	4640      	mov	r0, r8
 801e1fa:	4649      	mov	r1, r9
 801e1fc:	3630      	adds	r6, #48	; 0x30
 801e1fe:	f7e2 f847 	bl	8000290 <__aeabi_dsub>
 801e202:	9b02      	ldr	r3, [sp, #8]
 801e204:	f805 6b01 	strb.w	r6, [r5], #1
 801e208:	4680      	mov	r8, r0
 801e20a:	429d      	cmp	r5, r3
 801e20c:	4689      	mov	r9, r1
 801e20e:	f04f 0200 	mov.w	r2, #0
 801e212:	d124      	bne.n	801e25e <_dtoa_r+0x62e>
 801e214:	4b1b      	ldr	r3, [pc, #108]	; (801e284 <_dtoa_r+0x654>)
 801e216:	ec51 0b19 	vmov	r0, r1, d9
 801e21a:	f7e2 f83b 	bl	8000294 <__adddf3>
 801e21e:	4602      	mov	r2, r0
 801e220:	460b      	mov	r3, r1
 801e222:	4640      	mov	r0, r8
 801e224:	4649      	mov	r1, r9
 801e226:	f7e2 fc7b 	bl	8000b20 <__aeabi_dcmpgt>
 801e22a:	2800      	cmp	r0, #0
 801e22c:	d173      	bne.n	801e316 <_dtoa_r+0x6e6>
 801e22e:	2000      	movs	r0, #0
 801e230:	4914      	ldr	r1, [pc, #80]	; (801e284 <_dtoa_r+0x654>)
 801e232:	ec53 2b19 	vmov	r2, r3, d9
 801e236:	f7e2 f82b 	bl	8000290 <__aeabi_dsub>
 801e23a:	4602      	mov	r2, r0
 801e23c:	460b      	mov	r3, r1
 801e23e:	4640      	mov	r0, r8
 801e240:	4649      	mov	r1, r9
 801e242:	f7e2 fc4f 	bl	8000ae4 <__aeabi_dcmplt>
 801e246:	2800      	cmp	r0, #0
 801e248:	f43f af2f 	beq.w	801e0aa <_dtoa_r+0x47a>
 801e24c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e24e:	1e6b      	subs	r3, r5, #1
 801e250:	930f      	str	r3, [sp, #60]	; 0x3c
 801e252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e256:	2b30      	cmp	r3, #48	; 0x30
 801e258:	d0f8      	beq.n	801e24c <_dtoa_r+0x61c>
 801e25a:	46bb      	mov	fp, r7
 801e25c:	e04a      	b.n	801e2f4 <_dtoa_r+0x6c4>
 801e25e:	4b06      	ldr	r3, [pc, #24]	; (801e278 <_dtoa_r+0x648>)
 801e260:	f7e2 f9ce 	bl	8000600 <__aeabi_dmul>
 801e264:	4680      	mov	r8, r0
 801e266:	4689      	mov	r9, r1
 801e268:	e7bd      	b.n	801e1e6 <_dtoa_r+0x5b6>
 801e26a:	bf00      	nop
 801e26c:	08023b08 	.word	0x08023b08
 801e270:	08023ae0 	.word	0x08023ae0
 801e274:	3ff00000 	.word	0x3ff00000
 801e278:	40240000 	.word	0x40240000
 801e27c:	401c0000 	.word	0x401c0000
 801e280:	40140000 	.word	0x40140000
 801e284:	3fe00000 	.word	0x3fe00000
 801e288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e28c:	9d00      	ldr	r5, [sp, #0]
 801e28e:	4642      	mov	r2, r8
 801e290:	464b      	mov	r3, r9
 801e292:	4630      	mov	r0, r6
 801e294:	4639      	mov	r1, r7
 801e296:	f7e2 fadd 	bl	8000854 <__aeabi_ddiv>
 801e29a:	f7e2 fc61 	bl	8000b60 <__aeabi_d2iz>
 801e29e:	9001      	str	r0, [sp, #4]
 801e2a0:	f7e2 f944 	bl	800052c <__aeabi_i2d>
 801e2a4:	4642      	mov	r2, r8
 801e2a6:	464b      	mov	r3, r9
 801e2a8:	f7e2 f9aa 	bl	8000600 <__aeabi_dmul>
 801e2ac:	4602      	mov	r2, r0
 801e2ae:	460b      	mov	r3, r1
 801e2b0:	4630      	mov	r0, r6
 801e2b2:	4639      	mov	r1, r7
 801e2b4:	f7e1 ffec 	bl	8000290 <__aeabi_dsub>
 801e2b8:	9e01      	ldr	r6, [sp, #4]
 801e2ba:	9f04      	ldr	r7, [sp, #16]
 801e2bc:	4602      	mov	r2, r0
 801e2be:	3630      	adds	r6, #48	; 0x30
 801e2c0:	460b      	mov	r3, r1
 801e2c2:	f805 6b01 	strb.w	r6, [r5], #1
 801e2c6:	9e00      	ldr	r6, [sp, #0]
 801e2c8:	1bae      	subs	r6, r5, r6
 801e2ca:	42b7      	cmp	r7, r6
 801e2cc:	d134      	bne.n	801e338 <_dtoa_r+0x708>
 801e2ce:	f7e1 ffe1 	bl	8000294 <__adddf3>
 801e2d2:	4642      	mov	r2, r8
 801e2d4:	464b      	mov	r3, r9
 801e2d6:	4606      	mov	r6, r0
 801e2d8:	460f      	mov	r7, r1
 801e2da:	f7e2 fc21 	bl	8000b20 <__aeabi_dcmpgt>
 801e2de:	b9c8      	cbnz	r0, 801e314 <_dtoa_r+0x6e4>
 801e2e0:	4642      	mov	r2, r8
 801e2e2:	464b      	mov	r3, r9
 801e2e4:	4630      	mov	r0, r6
 801e2e6:	4639      	mov	r1, r7
 801e2e8:	f7e2 fbf2 	bl	8000ad0 <__aeabi_dcmpeq>
 801e2ec:	b110      	cbz	r0, 801e2f4 <_dtoa_r+0x6c4>
 801e2ee:	9b01      	ldr	r3, [sp, #4]
 801e2f0:	07db      	lsls	r3, r3, #31
 801e2f2:	d40f      	bmi.n	801e314 <_dtoa_r+0x6e4>
 801e2f4:	4651      	mov	r1, sl
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f000 fbca 	bl	801ea90 <_Bfree>
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e300:	702b      	strb	r3, [r5, #0]
 801e302:	f10b 0301 	add.w	r3, fp, #1
 801e306:	6013      	str	r3, [r2, #0]
 801e308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	f43f ace2 	beq.w	801dcd4 <_dtoa_r+0xa4>
 801e310:	601d      	str	r5, [r3, #0]
 801e312:	e4df      	b.n	801dcd4 <_dtoa_r+0xa4>
 801e314:	465f      	mov	r7, fp
 801e316:	462b      	mov	r3, r5
 801e318:	461d      	mov	r5, r3
 801e31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e31e:	2a39      	cmp	r2, #57	; 0x39
 801e320:	d106      	bne.n	801e330 <_dtoa_r+0x700>
 801e322:	9a00      	ldr	r2, [sp, #0]
 801e324:	429a      	cmp	r2, r3
 801e326:	d1f7      	bne.n	801e318 <_dtoa_r+0x6e8>
 801e328:	2230      	movs	r2, #48	; 0x30
 801e32a:	9900      	ldr	r1, [sp, #0]
 801e32c:	3701      	adds	r7, #1
 801e32e:	700a      	strb	r2, [r1, #0]
 801e330:	781a      	ldrb	r2, [r3, #0]
 801e332:	3201      	adds	r2, #1
 801e334:	701a      	strb	r2, [r3, #0]
 801e336:	e790      	b.n	801e25a <_dtoa_r+0x62a>
 801e338:	2200      	movs	r2, #0
 801e33a:	4ba3      	ldr	r3, [pc, #652]	; (801e5c8 <_dtoa_r+0x998>)
 801e33c:	f7e2 f960 	bl	8000600 <__aeabi_dmul>
 801e340:	2200      	movs	r2, #0
 801e342:	2300      	movs	r3, #0
 801e344:	4606      	mov	r6, r0
 801e346:	460f      	mov	r7, r1
 801e348:	f7e2 fbc2 	bl	8000ad0 <__aeabi_dcmpeq>
 801e34c:	2800      	cmp	r0, #0
 801e34e:	d09e      	beq.n	801e28e <_dtoa_r+0x65e>
 801e350:	e7d0      	b.n	801e2f4 <_dtoa_r+0x6c4>
 801e352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e354:	2a00      	cmp	r2, #0
 801e356:	f000 80ca 	beq.w	801e4ee <_dtoa_r+0x8be>
 801e35a:	9a07      	ldr	r2, [sp, #28]
 801e35c:	2a01      	cmp	r2, #1
 801e35e:	f300 80ad 	bgt.w	801e4bc <_dtoa_r+0x88c>
 801e362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e364:	2a00      	cmp	r2, #0
 801e366:	f000 80a5 	beq.w	801e4b4 <_dtoa_r+0x884>
 801e36a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e36e:	9e08      	ldr	r6, [sp, #32]
 801e370:	9d05      	ldr	r5, [sp, #20]
 801e372:	9a05      	ldr	r2, [sp, #20]
 801e374:	2101      	movs	r1, #1
 801e376:	4620      	mov	r0, r4
 801e378:	441a      	add	r2, r3
 801e37a:	9205      	str	r2, [sp, #20]
 801e37c:	9a06      	ldr	r2, [sp, #24]
 801e37e:	441a      	add	r2, r3
 801e380:	9206      	str	r2, [sp, #24]
 801e382:	f000 fc87 	bl	801ec94 <__i2b>
 801e386:	4607      	mov	r7, r0
 801e388:	b165      	cbz	r5, 801e3a4 <_dtoa_r+0x774>
 801e38a:	9b06      	ldr	r3, [sp, #24]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	dd09      	ble.n	801e3a4 <_dtoa_r+0x774>
 801e390:	42ab      	cmp	r3, r5
 801e392:	9a05      	ldr	r2, [sp, #20]
 801e394:	bfa8      	it	ge
 801e396:	462b      	movge	r3, r5
 801e398:	1ad2      	subs	r2, r2, r3
 801e39a:	1aed      	subs	r5, r5, r3
 801e39c:	9205      	str	r2, [sp, #20]
 801e39e:	9a06      	ldr	r2, [sp, #24]
 801e3a0:	1ad3      	subs	r3, r2, r3
 801e3a2:	9306      	str	r3, [sp, #24]
 801e3a4:	9b08      	ldr	r3, [sp, #32]
 801e3a6:	b1f3      	cbz	r3, 801e3e6 <_dtoa_r+0x7b6>
 801e3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	f000 80a3 	beq.w	801e4f6 <_dtoa_r+0x8c6>
 801e3b0:	2e00      	cmp	r6, #0
 801e3b2:	dd10      	ble.n	801e3d6 <_dtoa_r+0x7a6>
 801e3b4:	4639      	mov	r1, r7
 801e3b6:	4632      	mov	r2, r6
 801e3b8:	4620      	mov	r0, r4
 801e3ba:	f000 fd2b 	bl	801ee14 <__pow5mult>
 801e3be:	4652      	mov	r2, sl
 801e3c0:	4601      	mov	r1, r0
 801e3c2:	4607      	mov	r7, r0
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f000 fc7b 	bl	801ecc0 <__multiply>
 801e3ca:	4680      	mov	r8, r0
 801e3cc:	4651      	mov	r1, sl
 801e3ce:	4620      	mov	r0, r4
 801e3d0:	46c2      	mov	sl, r8
 801e3d2:	f000 fb5d 	bl	801ea90 <_Bfree>
 801e3d6:	9b08      	ldr	r3, [sp, #32]
 801e3d8:	1b9a      	subs	r2, r3, r6
 801e3da:	d004      	beq.n	801e3e6 <_dtoa_r+0x7b6>
 801e3dc:	4651      	mov	r1, sl
 801e3de:	4620      	mov	r0, r4
 801e3e0:	f000 fd18 	bl	801ee14 <__pow5mult>
 801e3e4:	4682      	mov	sl, r0
 801e3e6:	2101      	movs	r1, #1
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f000 fc53 	bl	801ec94 <__i2b>
 801e3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3f0:	4606      	mov	r6, r0
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	f340 8081 	ble.w	801e4fa <_dtoa_r+0x8ca>
 801e3f8:	461a      	mov	r2, r3
 801e3fa:	4601      	mov	r1, r0
 801e3fc:	4620      	mov	r0, r4
 801e3fe:	f000 fd09 	bl	801ee14 <__pow5mult>
 801e402:	9b07      	ldr	r3, [sp, #28]
 801e404:	4606      	mov	r6, r0
 801e406:	2b01      	cmp	r3, #1
 801e408:	dd7a      	ble.n	801e500 <_dtoa_r+0x8d0>
 801e40a:	f04f 0800 	mov.w	r8, #0
 801e40e:	6933      	ldr	r3, [r6, #16]
 801e410:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e414:	6918      	ldr	r0, [r3, #16]
 801e416:	f000 fbef 	bl	801ebf8 <__hi0bits>
 801e41a:	f1c0 0020 	rsb	r0, r0, #32
 801e41e:	9b06      	ldr	r3, [sp, #24]
 801e420:	4418      	add	r0, r3
 801e422:	f010 001f 	ands.w	r0, r0, #31
 801e426:	f000 8094 	beq.w	801e552 <_dtoa_r+0x922>
 801e42a:	f1c0 0320 	rsb	r3, r0, #32
 801e42e:	2b04      	cmp	r3, #4
 801e430:	f340 8085 	ble.w	801e53e <_dtoa_r+0x90e>
 801e434:	f1c0 001c 	rsb	r0, r0, #28
 801e438:	9b05      	ldr	r3, [sp, #20]
 801e43a:	4403      	add	r3, r0
 801e43c:	4405      	add	r5, r0
 801e43e:	9305      	str	r3, [sp, #20]
 801e440:	9b06      	ldr	r3, [sp, #24]
 801e442:	4403      	add	r3, r0
 801e444:	9306      	str	r3, [sp, #24]
 801e446:	9b05      	ldr	r3, [sp, #20]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	dd05      	ble.n	801e458 <_dtoa_r+0x828>
 801e44c:	4651      	mov	r1, sl
 801e44e:	461a      	mov	r2, r3
 801e450:	4620      	mov	r0, r4
 801e452:	f000 fd39 	bl	801eec8 <__lshift>
 801e456:	4682      	mov	sl, r0
 801e458:	9b06      	ldr	r3, [sp, #24]
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	dd05      	ble.n	801e46a <_dtoa_r+0x83a>
 801e45e:	4631      	mov	r1, r6
 801e460:	461a      	mov	r2, r3
 801e462:	4620      	mov	r0, r4
 801e464:	f000 fd30 	bl	801eec8 <__lshift>
 801e468:	4606      	mov	r6, r0
 801e46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d072      	beq.n	801e556 <_dtoa_r+0x926>
 801e470:	4631      	mov	r1, r6
 801e472:	4650      	mov	r0, sl
 801e474:	f000 fd94 	bl	801efa0 <__mcmp>
 801e478:	2800      	cmp	r0, #0
 801e47a:	da6c      	bge.n	801e556 <_dtoa_r+0x926>
 801e47c:	2300      	movs	r3, #0
 801e47e:	4651      	mov	r1, sl
 801e480:	220a      	movs	r2, #10
 801e482:	4620      	mov	r0, r4
 801e484:	f000 fb26 	bl	801ead4 <__multadd>
 801e488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e48e:	4682      	mov	sl, r0
 801e490:	2b00      	cmp	r3, #0
 801e492:	f000 81af 	beq.w	801e7f4 <_dtoa_r+0xbc4>
 801e496:	2300      	movs	r3, #0
 801e498:	4639      	mov	r1, r7
 801e49a:	220a      	movs	r2, #10
 801e49c:	4620      	mov	r0, r4
 801e49e:	f000 fb19 	bl	801ead4 <__multadd>
 801e4a2:	9b01      	ldr	r3, [sp, #4]
 801e4a4:	4607      	mov	r7, r0
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	f300 8096 	bgt.w	801e5d8 <_dtoa_r+0x9a8>
 801e4ac:	9b07      	ldr	r3, [sp, #28]
 801e4ae:	2b02      	cmp	r3, #2
 801e4b0:	dc59      	bgt.n	801e566 <_dtoa_r+0x936>
 801e4b2:	e091      	b.n	801e5d8 <_dtoa_r+0x9a8>
 801e4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e4ba:	e758      	b.n	801e36e <_dtoa_r+0x73e>
 801e4bc:	9b04      	ldr	r3, [sp, #16]
 801e4be:	1e5e      	subs	r6, r3, #1
 801e4c0:	9b08      	ldr	r3, [sp, #32]
 801e4c2:	42b3      	cmp	r3, r6
 801e4c4:	bfb7      	itett	lt
 801e4c6:	9b08      	ldrlt	r3, [sp, #32]
 801e4c8:	1b9e      	subge	r6, r3, r6
 801e4ca:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801e4cc:	1af3      	sublt	r3, r6, r3
 801e4ce:	bfbe      	ittt	lt
 801e4d0:	9608      	strlt	r6, [sp, #32]
 801e4d2:	2600      	movlt	r6, #0
 801e4d4:	18d2      	addlt	r2, r2, r3
 801e4d6:	9b04      	ldr	r3, [sp, #16]
 801e4d8:	bfb8      	it	lt
 801e4da:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	bfb7      	itett	lt
 801e4e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801e4e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801e4e8:	1a9d      	sublt	r5, r3, r2
 801e4ea:	2300      	movlt	r3, #0
 801e4ec:	e741      	b.n	801e372 <_dtoa_r+0x742>
 801e4ee:	9e08      	ldr	r6, [sp, #32]
 801e4f0:	9d05      	ldr	r5, [sp, #20]
 801e4f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e4f4:	e748      	b.n	801e388 <_dtoa_r+0x758>
 801e4f6:	9a08      	ldr	r2, [sp, #32]
 801e4f8:	e770      	b.n	801e3dc <_dtoa_r+0x7ac>
 801e4fa:	9b07      	ldr	r3, [sp, #28]
 801e4fc:	2b01      	cmp	r3, #1
 801e4fe:	dc19      	bgt.n	801e534 <_dtoa_r+0x904>
 801e500:	9b02      	ldr	r3, [sp, #8]
 801e502:	b9bb      	cbnz	r3, 801e534 <_dtoa_r+0x904>
 801e504:	9b03      	ldr	r3, [sp, #12]
 801e506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e50a:	b99b      	cbnz	r3, 801e534 <_dtoa_r+0x904>
 801e50c:	9b03      	ldr	r3, [sp, #12]
 801e50e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e512:	0d1b      	lsrs	r3, r3, #20
 801e514:	051b      	lsls	r3, r3, #20
 801e516:	b183      	cbz	r3, 801e53a <_dtoa_r+0x90a>
 801e518:	9b05      	ldr	r3, [sp, #20]
 801e51a:	f04f 0801 	mov.w	r8, #1
 801e51e:	3301      	adds	r3, #1
 801e520:	9305      	str	r3, [sp, #20]
 801e522:	9b06      	ldr	r3, [sp, #24]
 801e524:	3301      	adds	r3, #1
 801e526:	9306      	str	r3, [sp, #24]
 801e528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	f47f af6f 	bne.w	801e40e <_dtoa_r+0x7de>
 801e530:	2001      	movs	r0, #1
 801e532:	e774      	b.n	801e41e <_dtoa_r+0x7ee>
 801e534:	f04f 0800 	mov.w	r8, #0
 801e538:	e7f6      	b.n	801e528 <_dtoa_r+0x8f8>
 801e53a:	4698      	mov	r8, r3
 801e53c:	e7f4      	b.n	801e528 <_dtoa_r+0x8f8>
 801e53e:	d082      	beq.n	801e446 <_dtoa_r+0x816>
 801e540:	331c      	adds	r3, #28
 801e542:	9a05      	ldr	r2, [sp, #20]
 801e544:	441a      	add	r2, r3
 801e546:	441d      	add	r5, r3
 801e548:	9205      	str	r2, [sp, #20]
 801e54a:	9a06      	ldr	r2, [sp, #24]
 801e54c:	441a      	add	r2, r3
 801e54e:	9206      	str	r2, [sp, #24]
 801e550:	e779      	b.n	801e446 <_dtoa_r+0x816>
 801e552:	4603      	mov	r3, r0
 801e554:	e7f4      	b.n	801e540 <_dtoa_r+0x910>
 801e556:	9b04      	ldr	r3, [sp, #16]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	dc37      	bgt.n	801e5cc <_dtoa_r+0x99c>
 801e55c:	9b07      	ldr	r3, [sp, #28]
 801e55e:	2b02      	cmp	r3, #2
 801e560:	dd34      	ble.n	801e5cc <_dtoa_r+0x99c>
 801e562:	9b04      	ldr	r3, [sp, #16]
 801e564:	9301      	str	r3, [sp, #4]
 801e566:	9b01      	ldr	r3, [sp, #4]
 801e568:	b963      	cbnz	r3, 801e584 <_dtoa_r+0x954>
 801e56a:	4631      	mov	r1, r6
 801e56c:	2205      	movs	r2, #5
 801e56e:	4620      	mov	r0, r4
 801e570:	f000 fab0 	bl	801ead4 <__multadd>
 801e574:	4601      	mov	r1, r0
 801e576:	4606      	mov	r6, r0
 801e578:	4650      	mov	r0, sl
 801e57a:	f000 fd11 	bl	801efa0 <__mcmp>
 801e57e:	2800      	cmp	r0, #0
 801e580:	f73f adbb 	bgt.w	801e0fa <_dtoa_r+0x4ca>
 801e584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e586:	9d00      	ldr	r5, [sp, #0]
 801e588:	ea6f 0b03 	mvn.w	fp, r3
 801e58c:	f04f 0800 	mov.w	r8, #0
 801e590:	4631      	mov	r1, r6
 801e592:	4620      	mov	r0, r4
 801e594:	f000 fa7c 	bl	801ea90 <_Bfree>
 801e598:	2f00      	cmp	r7, #0
 801e59a:	f43f aeab 	beq.w	801e2f4 <_dtoa_r+0x6c4>
 801e59e:	f1b8 0f00 	cmp.w	r8, #0
 801e5a2:	d005      	beq.n	801e5b0 <_dtoa_r+0x980>
 801e5a4:	45b8      	cmp	r8, r7
 801e5a6:	d003      	beq.n	801e5b0 <_dtoa_r+0x980>
 801e5a8:	4641      	mov	r1, r8
 801e5aa:	4620      	mov	r0, r4
 801e5ac:	f000 fa70 	bl	801ea90 <_Bfree>
 801e5b0:	4639      	mov	r1, r7
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	f000 fa6c 	bl	801ea90 <_Bfree>
 801e5b8:	e69c      	b.n	801e2f4 <_dtoa_r+0x6c4>
 801e5ba:	2600      	movs	r6, #0
 801e5bc:	4637      	mov	r7, r6
 801e5be:	e7e1      	b.n	801e584 <_dtoa_r+0x954>
 801e5c0:	46bb      	mov	fp, r7
 801e5c2:	4637      	mov	r7, r6
 801e5c4:	e599      	b.n	801e0fa <_dtoa_r+0x4ca>
 801e5c6:	bf00      	nop
 801e5c8:	40240000 	.word	0x40240000
 801e5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f000 80c8 	beq.w	801e764 <_dtoa_r+0xb34>
 801e5d4:	9b04      	ldr	r3, [sp, #16]
 801e5d6:	9301      	str	r3, [sp, #4]
 801e5d8:	2d00      	cmp	r5, #0
 801e5da:	dd05      	ble.n	801e5e8 <_dtoa_r+0x9b8>
 801e5dc:	4639      	mov	r1, r7
 801e5de:	462a      	mov	r2, r5
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f000 fc71 	bl	801eec8 <__lshift>
 801e5e6:	4607      	mov	r7, r0
 801e5e8:	f1b8 0f00 	cmp.w	r8, #0
 801e5ec:	d05b      	beq.n	801e6a6 <_dtoa_r+0xa76>
 801e5ee:	6879      	ldr	r1, [r7, #4]
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	f000 fa0d 	bl	801ea10 <_Balloc>
 801e5f6:	4605      	mov	r5, r0
 801e5f8:	b928      	cbnz	r0, 801e606 <_dtoa_r+0x9d6>
 801e5fa:	4b82      	ldr	r3, [pc, #520]	; (801e804 <_dtoa_r+0xbd4>)
 801e5fc:	4602      	mov	r2, r0
 801e5fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 801e602:	f7ff bb2e 	b.w	801dc62 <_dtoa_r+0x32>
 801e606:	693a      	ldr	r2, [r7, #16]
 801e608:	f107 010c 	add.w	r1, r7, #12
 801e60c:	300c      	adds	r0, #12
 801e60e:	3202      	adds	r2, #2
 801e610:	0092      	lsls	r2, r2, #2
 801e612:	f7ff fa67 	bl	801dae4 <memcpy>
 801e616:	2201      	movs	r2, #1
 801e618:	4629      	mov	r1, r5
 801e61a:	4620      	mov	r0, r4
 801e61c:	f000 fc54 	bl	801eec8 <__lshift>
 801e620:	9b00      	ldr	r3, [sp, #0]
 801e622:	46b8      	mov	r8, r7
 801e624:	4607      	mov	r7, r0
 801e626:	3301      	adds	r3, #1
 801e628:	9304      	str	r3, [sp, #16]
 801e62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e62e:	4413      	add	r3, r2
 801e630:	9308      	str	r3, [sp, #32]
 801e632:	9b02      	ldr	r3, [sp, #8]
 801e634:	f003 0301 	and.w	r3, r3, #1
 801e638:	9306      	str	r3, [sp, #24]
 801e63a:	9b04      	ldr	r3, [sp, #16]
 801e63c:	4631      	mov	r1, r6
 801e63e:	4650      	mov	r0, sl
 801e640:	3b01      	subs	r3, #1
 801e642:	9301      	str	r3, [sp, #4]
 801e644:	f7ff fa62 	bl	801db0c <quorem>
 801e648:	4641      	mov	r1, r8
 801e64a:	9002      	str	r0, [sp, #8]
 801e64c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e650:	4650      	mov	r0, sl
 801e652:	f000 fca5 	bl	801efa0 <__mcmp>
 801e656:	463a      	mov	r2, r7
 801e658:	9005      	str	r0, [sp, #20]
 801e65a:	4631      	mov	r1, r6
 801e65c:	4620      	mov	r0, r4
 801e65e:	f000 fcbb 	bl	801efd8 <__mdiff>
 801e662:	68c2      	ldr	r2, [r0, #12]
 801e664:	4605      	mov	r5, r0
 801e666:	bb02      	cbnz	r2, 801e6aa <_dtoa_r+0xa7a>
 801e668:	4601      	mov	r1, r0
 801e66a:	4650      	mov	r0, sl
 801e66c:	f000 fc98 	bl	801efa0 <__mcmp>
 801e670:	4602      	mov	r2, r0
 801e672:	4629      	mov	r1, r5
 801e674:	4620      	mov	r0, r4
 801e676:	9209      	str	r2, [sp, #36]	; 0x24
 801e678:	f000 fa0a 	bl	801ea90 <_Bfree>
 801e67c:	9b07      	ldr	r3, [sp, #28]
 801e67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e680:	9d04      	ldr	r5, [sp, #16]
 801e682:	ea43 0102 	orr.w	r1, r3, r2
 801e686:	9b06      	ldr	r3, [sp, #24]
 801e688:	4319      	orrs	r1, r3
 801e68a:	d110      	bne.n	801e6ae <_dtoa_r+0xa7e>
 801e68c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e690:	d029      	beq.n	801e6e6 <_dtoa_r+0xab6>
 801e692:	9b05      	ldr	r3, [sp, #20]
 801e694:	2b00      	cmp	r3, #0
 801e696:	dd02      	ble.n	801e69e <_dtoa_r+0xa6e>
 801e698:	9b02      	ldr	r3, [sp, #8]
 801e69a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801e69e:	9b01      	ldr	r3, [sp, #4]
 801e6a0:	f883 9000 	strb.w	r9, [r3]
 801e6a4:	e774      	b.n	801e590 <_dtoa_r+0x960>
 801e6a6:	4638      	mov	r0, r7
 801e6a8:	e7ba      	b.n	801e620 <_dtoa_r+0x9f0>
 801e6aa:	2201      	movs	r2, #1
 801e6ac:	e7e1      	b.n	801e672 <_dtoa_r+0xa42>
 801e6ae:	9b05      	ldr	r3, [sp, #20]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	db04      	blt.n	801e6be <_dtoa_r+0xa8e>
 801e6b4:	9907      	ldr	r1, [sp, #28]
 801e6b6:	430b      	orrs	r3, r1
 801e6b8:	9906      	ldr	r1, [sp, #24]
 801e6ba:	430b      	orrs	r3, r1
 801e6bc:	d120      	bne.n	801e700 <_dtoa_r+0xad0>
 801e6be:	2a00      	cmp	r2, #0
 801e6c0:	dded      	ble.n	801e69e <_dtoa_r+0xa6e>
 801e6c2:	4651      	mov	r1, sl
 801e6c4:	2201      	movs	r2, #1
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	f000 fbfe 	bl	801eec8 <__lshift>
 801e6cc:	4631      	mov	r1, r6
 801e6ce:	4682      	mov	sl, r0
 801e6d0:	f000 fc66 	bl	801efa0 <__mcmp>
 801e6d4:	2800      	cmp	r0, #0
 801e6d6:	dc03      	bgt.n	801e6e0 <_dtoa_r+0xab0>
 801e6d8:	d1e1      	bne.n	801e69e <_dtoa_r+0xa6e>
 801e6da:	f019 0f01 	tst.w	r9, #1
 801e6de:	d0de      	beq.n	801e69e <_dtoa_r+0xa6e>
 801e6e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e6e4:	d1d8      	bne.n	801e698 <_dtoa_r+0xa68>
 801e6e6:	2339      	movs	r3, #57	; 0x39
 801e6e8:	9a01      	ldr	r2, [sp, #4]
 801e6ea:	7013      	strb	r3, [r2, #0]
 801e6ec:	462b      	mov	r3, r5
 801e6ee:	461d      	mov	r5, r3
 801e6f0:	3b01      	subs	r3, #1
 801e6f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e6f6:	2a39      	cmp	r2, #57	; 0x39
 801e6f8:	d06b      	beq.n	801e7d2 <_dtoa_r+0xba2>
 801e6fa:	3201      	adds	r2, #1
 801e6fc:	701a      	strb	r2, [r3, #0]
 801e6fe:	e747      	b.n	801e590 <_dtoa_r+0x960>
 801e700:	2a00      	cmp	r2, #0
 801e702:	dd07      	ble.n	801e714 <_dtoa_r+0xae4>
 801e704:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e708:	d0ed      	beq.n	801e6e6 <_dtoa_r+0xab6>
 801e70a:	f109 0301 	add.w	r3, r9, #1
 801e70e:	9a01      	ldr	r2, [sp, #4]
 801e710:	7013      	strb	r3, [r2, #0]
 801e712:	e73d      	b.n	801e590 <_dtoa_r+0x960>
 801e714:	9b04      	ldr	r3, [sp, #16]
 801e716:	9a08      	ldr	r2, [sp, #32]
 801e718:	f803 9c01 	strb.w	r9, [r3, #-1]
 801e71c:	4293      	cmp	r3, r2
 801e71e:	d042      	beq.n	801e7a6 <_dtoa_r+0xb76>
 801e720:	4651      	mov	r1, sl
 801e722:	2300      	movs	r3, #0
 801e724:	220a      	movs	r2, #10
 801e726:	4620      	mov	r0, r4
 801e728:	f000 f9d4 	bl	801ead4 <__multadd>
 801e72c:	45b8      	cmp	r8, r7
 801e72e:	4682      	mov	sl, r0
 801e730:	f04f 0300 	mov.w	r3, #0
 801e734:	f04f 020a 	mov.w	r2, #10
 801e738:	4641      	mov	r1, r8
 801e73a:	4620      	mov	r0, r4
 801e73c:	d107      	bne.n	801e74e <_dtoa_r+0xb1e>
 801e73e:	f000 f9c9 	bl	801ead4 <__multadd>
 801e742:	4680      	mov	r8, r0
 801e744:	4607      	mov	r7, r0
 801e746:	9b04      	ldr	r3, [sp, #16]
 801e748:	3301      	adds	r3, #1
 801e74a:	9304      	str	r3, [sp, #16]
 801e74c:	e775      	b.n	801e63a <_dtoa_r+0xa0a>
 801e74e:	f000 f9c1 	bl	801ead4 <__multadd>
 801e752:	4639      	mov	r1, r7
 801e754:	4680      	mov	r8, r0
 801e756:	2300      	movs	r3, #0
 801e758:	220a      	movs	r2, #10
 801e75a:	4620      	mov	r0, r4
 801e75c:	f000 f9ba 	bl	801ead4 <__multadd>
 801e760:	4607      	mov	r7, r0
 801e762:	e7f0      	b.n	801e746 <_dtoa_r+0xb16>
 801e764:	9b04      	ldr	r3, [sp, #16]
 801e766:	9301      	str	r3, [sp, #4]
 801e768:	9d00      	ldr	r5, [sp, #0]
 801e76a:	4631      	mov	r1, r6
 801e76c:	4650      	mov	r0, sl
 801e76e:	f7ff f9cd 	bl	801db0c <quorem>
 801e772:	9b00      	ldr	r3, [sp, #0]
 801e774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e778:	f805 9b01 	strb.w	r9, [r5], #1
 801e77c:	1aea      	subs	r2, r5, r3
 801e77e:	9b01      	ldr	r3, [sp, #4]
 801e780:	4293      	cmp	r3, r2
 801e782:	dd07      	ble.n	801e794 <_dtoa_r+0xb64>
 801e784:	4651      	mov	r1, sl
 801e786:	2300      	movs	r3, #0
 801e788:	220a      	movs	r2, #10
 801e78a:	4620      	mov	r0, r4
 801e78c:	f000 f9a2 	bl	801ead4 <__multadd>
 801e790:	4682      	mov	sl, r0
 801e792:	e7ea      	b.n	801e76a <_dtoa_r+0xb3a>
 801e794:	9b01      	ldr	r3, [sp, #4]
 801e796:	f04f 0800 	mov.w	r8, #0
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	bfcc      	ite	gt
 801e79e:	461d      	movgt	r5, r3
 801e7a0:	2501      	movle	r5, #1
 801e7a2:	9b00      	ldr	r3, [sp, #0]
 801e7a4:	441d      	add	r5, r3
 801e7a6:	4651      	mov	r1, sl
 801e7a8:	2201      	movs	r2, #1
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	f000 fb8c 	bl	801eec8 <__lshift>
 801e7b0:	4631      	mov	r1, r6
 801e7b2:	4682      	mov	sl, r0
 801e7b4:	f000 fbf4 	bl	801efa0 <__mcmp>
 801e7b8:	2800      	cmp	r0, #0
 801e7ba:	dc97      	bgt.n	801e6ec <_dtoa_r+0xabc>
 801e7bc:	d102      	bne.n	801e7c4 <_dtoa_r+0xb94>
 801e7be:	f019 0f01 	tst.w	r9, #1
 801e7c2:	d193      	bne.n	801e6ec <_dtoa_r+0xabc>
 801e7c4:	462b      	mov	r3, r5
 801e7c6:	461d      	mov	r5, r3
 801e7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e7cc:	2a30      	cmp	r2, #48	; 0x30
 801e7ce:	d0fa      	beq.n	801e7c6 <_dtoa_r+0xb96>
 801e7d0:	e6de      	b.n	801e590 <_dtoa_r+0x960>
 801e7d2:	9a00      	ldr	r2, [sp, #0]
 801e7d4:	429a      	cmp	r2, r3
 801e7d6:	d18a      	bne.n	801e6ee <_dtoa_r+0xabe>
 801e7d8:	f10b 0b01 	add.w	fp, fp, #1
 801e7dc:	2331      	movs	r3, #49	; 0x31
 801e7de:	e797      	b.n	801e710 <_dtoa_r+0xae0>
 801e7e0:	4b09      	ldr	r3, [pc, #36]	; (801e808 <_dtoa_r+0xbd8>)
 801e7e2:	f7ff ba9a 	b.w	801dd1a <_dtoa_r+0xea>
 801e7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	f47f aa6e 	bne.w	801dcca <_dtoa_r+0x9a>
 801e7ee:	4b07      	ldr	r3, [pc, #28]	; (801e80c <_dtoa_r+0xbdc>)
 801e7f0:	f7ff ba93 	b.w	801dd1a <_dtoa_r+0xea>
 801e7f4:	9b01      	ldr	r3, [sp, #4]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	dcb6      	bgt.n	801e768 <_dtoa_r+0xb38>
 801e7fa:	9b07      	ldr	r3, [sp, #28]
 801e7fc:	2b02      	cmp	r3, #2
 801e7fe:	f73f aeb2 	bgt.w	801e566 <_dtoa_r+0x936>
 801e802:	e7b1      	b.n	801e768 <_dtoa_r+0xb38>
 801e804:	08023a75 	.word	0x08023a75
 801e808:	08023d58 	.word	0x08023d58
 801e80c:	080239f9 	.word	0x080239f9

0801e810 <_free_r>:
 801e810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e812:	2900      	cmp	r1, #0
 801e814:	d043      	beq.n	801e89e <_free_r+0x8e>
 801e816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e81a:	1f0c      	subs	r4, r1, #4
 801e81c:	9001      	str	r0, [sp, #4]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	bfb8      	it	lt
 801e822:	18e4      	addlt	r4, r4, r3
 801e824:	f000 f8e8 	bl	801e9f8 <__malloc_lock>
 801e828:	4a1e      	ldr	r2, [pc, #120]	; (801e8a4 <_free_r+0x94>)
 801e82a:	9801      	ldr	r0, [sp, #4]
 801e82c:	6813      	ldr	r3, [r2, #0]
 801e82e:	b933      	cbnz	r3, 801e83e <_free_r+0x2e>
 801e830:	6063      	str	r3, [r4, #4]
 801e832:	6014      	str	r4, [r2, #0]
 801e834:	b003      	add	sp, #12
 801e836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e83a:	f000 b8e3 	b.w	801ea04 <__malloc_unlock>
 801e83e:	42a3      	cmp	r3, r4
 801e840:	d908      	bls.n	801e854 <_free_r+0x44>
 801e842:	6825      	ldr	r5, [r4, #0]
 801e844:	1961      	adds	r1, r4, r5
 801e846:	428b      	cmp	r3, r1
 801e848:	bf01      	itttt	eq
 801e84a:	6819      	ldreq	r1, [r3, #0]
 801e84c:	685b      	ldreq	r3, [r3, #4]
 801e84e:	1949      	addeq	r1, r1, r5
 801e850:	6021      	streq	r1, [r4, #0]
 801e852:	e7ed      	b.n	801e830 <_free_r+0x20>
 801e854:	461a      	mov	r2, r3
 801e856:	685b      	ldr	r3, [r3, #4]
 801e858:	b10b      	cbz	r3, 801e85e <_free_r+0x4e>
 801e85a:	42a3      	cmp	r3, r4
 801e85c:	d9fa      	bls.n	801e854 <_free_r+0x44>
 801e85e:	6811      	ldr	r1, [r2, #0]
 801e860:	1855      	adds	r5, r2, r1
 801e862:	42a5      	cmp	r5, r4
 801e864:	d10b      	bne.n	801e87e <_free_r+0x6e>
 801e866:	6824      	ldr	r4, [r4, #0]
 801e868:	4421      	add	r1, r4
 801e86a:	1854      	adds	r4, r2, r1
 801e86c:	6011      	str	r1, [r2, #0]
 801e86e:	42a3      	cmp	r3, r4
 801e870:	d1e0      	bne.n	801e834 <_free_r+0x24>
 801e872:	681c      	ldr	r4, [r3, #0]
 801e874:	685b      	ldr	r3, [r3, #4]
 801e876:	440c      	add	r4, r1
 801e878:	6053      	str	r3, [r2, #4]
 801e87a:	6014      	str	r4, [r2, #0]
 801e87c:	e7da      	b.n	801e834 <_free_r+0x24>
 801e87e:	d902      	bls.n	801e886 <_free_r+0x76>
 801e880:	230c      	movs	r3, #12
 801e882:	6003      	str	r3, [r0, #0]
 801e884:	e7d6      	b.n	801e834 <_free_r+0x24>
 801e886:	6825      	ldr	r5, [r4, #0]
 801e888:	1961      	adds	r1, r4, r5
 801e88a:	428b      	cmp	r3, r1
 801e88c:	bf02      	ittt	eq
 801e88e:	6819      	ldreq	r1, [r3, #0]
 801e890:	685b      	ldreq	r3, [r3, #4]
 801e892:	1949      	addeq	r1, r1, r5
 801e894:	6063      	str	r3, [r4, #4]
 801e896:	bf08      	it	eq
 801e898:	6021      	streq	r1, [r4, #0]
 801e89a:	6054      	str	r4, [r2, #4]
 801e89c:	e7ca      	b.n	801e834 <_free_r+0x24>
 801e89e:	b003      	add	sp, #12
 801e8a0:	bd30      	pop	{r4, r5, pc}
 801e8a2:	bf00      	nop
 801e8a4:	2000d388 	.word	0x2000d388

0801e8a8 <malloc>:
 801e8a8:	4b02      	ldr	r3, [pc, #8]	; (801e8b4 <malloc+0xc>)
 801e8aa:	4601      	mov	r1, r0
 801e8ac:	6818      	ldr	r0, [r3, #0]
 801e8ae:	f000 b823 	b.w	801e8f8 <_malloc_r>
 801e8b2:	bf00      	nop
 801e8b4:	200000c4 	.word	0x200000c4

0801e8b8 <sbrk_aligned>:
 801e8b8:	b570      	push	{r4, r5, r6, lr}
 801e8ba:	4e0e      	ldr	r6, [pc, #56]	; (801e8f4 <sbrk_aligned+0x3c>)
 801e8bc:	460c      	mov	r4, r1
 801e8be:	4605      	mov	r5, r0
 801e8c0:	6831      	ldr	r1, [r6, #0]
 801e8c2:	b911      	cbnz	r1, 801e8ca <sbrk_aligned+0x12>
 801e8c4:	f002 f8fa 	bl	8020abc <_sbrk_r>
 801e8c8:	6030      	str	r0, [r6, #0]
 801e8ca:	4621      	mov	r1, r4
 801e8cc:	4628      	mov	r0, r5
 801e8ce:	f002 f8f5 	bl	8020abc <_sbrk_r>
 801e8d2:	1c43      	adds	r3, r0, #1
 801e8d4:	d00a      	beq.n	801e8ec <sbrk_aligned+0x34>
 801e8d6:	1cc4      	adds	r4, r0, #3
 801e8d8:	f024 0403 	bic.w	r4, r4, #3
 801e8dc:	42a0      	cmp	r0, r4
 801e8de:	d007      	beq.n	801e8f0 <sbrk_aligned+0x38>
 801e8e0:	1a21      	subs	r1, r4, r0
 801e8e2:	4628      	mov	r0, r5
 801e8e4:	f002 f8ea 	bl	8020abc <_sbrk_r>
 801e8e8:	3001      	adds	r0, #1
 801e8ea:	d101      	bne.n	801e8f0 <sbrk_aligned+0x38>
 801e8ec:	f04f 34ff 	mov.w	r4, #4294967295
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	bd70      	pop	{r4, r5, r6, pc}
 801e8f4:	2000d38c 	.word	0x2000d38c

0801e8f8 <_malloc_r>:
 801e8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e8fc:	1ccd      	adds	r5, r1, #3
 801e8fe:	4607      	mov	r7, r0
 801e900:	f025 0503 	bic.w	r5, r5, #3
 801e904:	3508      	adds	r5, #8
 801e906:	2d0c      	cmp	r5, #12
 801e908:	bf38      	it	cc
 801e90a:	250c      	movcc	r5, #12
 801e90c:	2d00      	cmp	r5, #0
 801e90e:	db01      	blt.n	801e914 <_malloc_r+0x1c>
 801e910:	42a9      	cmp	r1, r5
 801e912:	d905      	bls.n	801e920 <_malloc_r+0x28>
 801e914:	230c      	movs	r3, #12
 801e916:	2600      	movs	r6, #0
 801e918:	603b      	str	r3, [r7, #0]
 801e91a:	4630      	mov	r0, r6
 801e91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e920:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e9f4 <_malloc_r+0xfc>
 801e924:	f000 f868 	bl	801e9f8 <__malloc_lock>
 801e928:	f8d8 3000 	ldr.w	r3, [r8]
 801e92c:	461c      	mov	r4, r3
 801e92e:	bb5c      	cbnz	r4, 801e988 <_malloc_r+0x90>
 801e930:	4629      	mov	r1, r5
 801e932:	4638      	mov	r0, r7
 801e934:	f7ff ffc0 	bl	801e8b8 <sbrk_aligned>
 801e938:	1c43      	adds	r3, r0, #1
 801e93a:	4604      	mov	r4, r0
 801e93c:	d155      	bne.n	801e9ea <_malloc_r+0xf2>
 801e93e:	f8d8 4000 	ldr.w	r4, [r8]
 801e942:	4626      	mov	r6, r4
 801e944:	2e00      	cmp	r6, #0
 801e946:	d145      	bne.n	801e9d4 <_malloc_r+0xdc>
 801e948:	2c00      	cmp	r4, #0
 801e94a:	d048      	beq.n	801e9de <_malloc_r+0xe6>
 801e94c:	6823      	ldr	r3, [r4, #0]
 801e94e:	4631      	mov	r1, r6
 801e950:	4638      	mov	r0, r7
 801e952:	eb04 0903 	add.w	r9, r4, r3
 801e956:	f002 f8b1 	bl	8020abc <_sbrk_r>
 801e95a:	4581      	cmp	r9, r0
 801e95c:	d13f      	bne.n	801e9de <_malloc_r+0xe6>
 801e95e:	6821      	ldr	r1, [r4, #0]
 801e960:	4638      	mov	r0, r7
 801e962:	1a6d      	subs	r5, r5, r1
 801e964:	4629      	mov	r1, r5
 801e966:	f7ff ffa7 	bl	801e8b8 <sbrk_aligned>
 801e96a:	3001      	adds	r0, #1
 801e96c:	d037      	beq.n	801e9de <_malloc_r+0xe6>
 801e96e:	6823      	ldr	r3, [r4, #0]
 801e970:	442b      	add	r3, r5
 801e972:	6023      	str	r3, [r4, #0]
 801e974:	f8d8 3000 	ldr.w	r3, [r8]
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d038      	beq.n	801e9ee <_malloc_r+0xf6>
 801e97c:	685a      	ldr	r2, [r3, #4]
 801e97e:	42a2      	cmp	r2, r4
 801e980:	d12b      	bne.n	801e9da <_malloc_r+0xe2>
 801e982:	2200      	movs	r2, #0
 801e984:	605a      	str	r2, [r3, #4]
 801e986:	e00f      	b.n	801e9a8 <_malloc_r+0xb0>
 801e988:	6822      	ldr	r2, [r4, #0]
 801e98a:	1b52      	subs	r2, r2, r5
 801e98c:	d41f      	bmi.n	801e9ce <_malloc_r+0xd6>
 801e98e:	2a0b      	cmp	r2, #11
 801e990:	d917      	bls.n	801e9c2 <_malloc_r+0xca>
 801e992:	1961      	adds	r1, r4, r5
 801e994:	42a3      	cmp	r3, r4
 801e996:	6025      	str	r5, [r4, #0]
 801e998:	bf18      	it	ne
 801e99a:	6059      	strne	r1, [r3, #4]
 801e99c:	6863      	ldr	r3, [r4, #4]
 801e99e:	bf08      	it	eq
 801e9a0:	f8c8 1000 	streq.w	r1, [r8]
 801e9a4:	5162      	str	r2, [r4, r5]
 801e9a6:	604b      	str	r3, [r1, #4]
 801e9a8:	f104 060b 	add.w	r6, r4, #11
 801e9ac:	4638      	mov	r0, r7
 801e9ae:	f000 f829 	bl	801ea04 <__malloc_unlock>
 801e9b2:	1d23      	adds	r3, r4, #4
 801e9b4:	f026 0607 	bic.w	r6, r6, #7
 801e9b8:	1af2      	subs	r2, r6, r3
 801e9ba:	d0ae      	beq.n	801e91a <_malloc_r+0x22>
 801e9bc:	1b9b      	subs	r3, r3, r6
 801e9be:	50a3      	str	r3, [r4, r2]
 801e9c0:	e7ab      	b.n	801e91a <_malloc_r+0x22>
 801e9c2:	42a3      	cmp	r3, r4
 801e9c4:	6862      	ldr	r2, [r4, #4]
 801e9c6:	d1dd      	bne.n	801e984 <_malloc_r+0x8c>
 801e9c8:	f8c8 2000 	str.w	r2, [r8]
 801e9cc:	e7ec      	b.n	801e9a8 <_malloc_r+0xb0>
 801e9ce:	4623      	mov	r3, r4
 801e9d0:	6864      	ldr	r4, [r4, #4]
 801e9d2:	e7ac      	b.n	801e92e <_malloc_r+0x36>
 801e9d4:	4634      	mov	r4, r6
 801e9d6:	6876      	ldr	r6, [r6, #4]
 801e9d8:	e7b4      	b.n	801e944 <_malloc_r+0x4c>
 801e9da:	4613      	mov	r3, r2
 801e9dc:	e7cc      	b.n	801e978 <_malloc_r+0x80>
 801e9de:	230c      	movs	r3, #12
 801e9e0:	4638      	mov	r0, r7
 801e9e2:	603b      	str	r3, [r7, #0]
 801e9e4:	f000 f80e 	bl	801ea04 <__malloc_unlock>
 801e9e8:	e797      	b.n	801e91a <_malloc_r+0x22>
 801e9ea:	6025      	str	r5, [r4, #0]
 801e9ec:	e7dc      	b.n	801e9a8 <_malloc_r+0xb0>
 801e9ee:	605b      	str	r3, [r3, #4]
 801e9f0:	deff      	udf	#255	; 0xff
 801e9f2:	bf00      	nop
 801e9f4:	2000d388 	.word	0x2000d388

0801e9f8 <__malloc_lock>:
 801e9f8:	4801      	ldr	r0, [pc, #4]	; (801ea00 <__malloc_lock+0x8>)
 801e9fa:	f7ff b863 	b.w	801dac4 <__retarget_lock_acquire_recursive>
 801e9fe:	bf00      	nop
 801ea00:	2000d384 	.word	0x2000d384

0801ea04 <__malloc_unlock>:
 801ea04:	4801      	ldr	r0, [pc, #4]	; (801ea0c <__malloc_unlock+0x8>)
 801ea06:	f7ff b85e 	b.w	801dac6 <__retarget_lock_release_recursive>
 801ea0a:	bf00      	nop
 801ea0c:	2000d384 	.word	0x2000d384

0801ea10 <_Balloc>:
 801ea10:	b570      	push	{r4, r5, r6, lr}
 801ea12:	69c6      	ldr	r6, [r0, #28]
 801ea14:	4604      	mov	r4, r0
 801ea16:	460d      	mov	r5, r1
 801ea18:	b976      	cbnz	r6, 801ea38 <_Balloc+0x28>
 801ea1a:	2010      	movs	r0, #16
 801ea1c:	f7ff ff44 	bl	801e8a8 <malloc>
 801ea20:	4602      	mov	r2, r0
 801ea22:	61e0      	str	r0, [r4, #28]
 801ea24:	b920      	cbnz	r0, 801ea30 <_Balloc+0x20>
 801ea26:	4b18      	ldr	r3, [pc, #96]	; (801ea88 <_Balloc+0x78>)
 801ea28:	216b      	movs	r1, #107	; 0x6b
 801ea2a:	4818      	ldr	r0, [pc, #96]	; (801ea8c <_Balloc+0x7c>)
 801ea2c:	f002 f860 	bl	8020af0 <__assert_func>
 801ea30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ea34:	6006      	str	r6, [r0, #0]
 801ea36:	60c6      	str	r6, [r0, #12]
 801ea38:	69e6      	ldr	r6, [r4, #28]
 801ea3a:	68f3      	ldr	r3, [r6, #12]
 801ea3c:	b183      	cbz	r3, 801ea60 <_Balloc+0x50>
 801ea3e:	69e3      	ldr	r3, [r4, #28]
 801ea40:	68db      	ldr	r3, [r3, #12]
 801ea42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ea46:	b9b8      	cbnz	r0, 801ea78 <_Balloc+0x68>
 801ea48:	2101      	movs	r1, #1
 801ea4a:	4620      	mov	r0, r4
 801ea4c:	fa01 f605 	lsl.w	r6, r1, r5
 801ea50:	1d72      	adds	r2, r6, #5
 801ea52:	0092      	lsls	r2, r2, #2
 801ea54:	f002 f86a 	bl	8020b2c <_calloc_r>
 801ea58:	b160      	cbz	r0, 801ea74 <_Balloc+0x64>
 801ea5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ea5e:	e00e      	b.n	801ea7e <_Balloc+0x6e>
 801ea60:	2221      	movs	r2, #33	; 0x21
 801ea62:	2104      	movs	r1, #4
 801ea64:	4620      	mov	r0, r4
 801ea66:	f002 f861 	bl	8020b2c <_calloc_r>
 801ea6a:	69e3      	ldr	r3, [r4, #28]
 801ea6c:	60f0      	str	r0, [r6, #12]
 801ea6e:	68db      	ldr	r3, [r3, #12]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d1e4      	bne.n	801ea3e <_Balloc+0x2e>
 801ea74:	2000      	movs	r0, #0
 801ea76:	bd70      	pop	{r4, r5, r6, pc}
 801ea78:	6802      	ldr	r2, [r0, #0]
 801ea7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ea7e:	2300      	movs	r3, #0
 801ea80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ea84:	e7f7      	b.n	801ea76 <_Balloc+0x66>
 801ea86:	bf00      	nop
 801ea88:	08023a06 	.word	0x08023a06
 801ea8c:	08023a86 	.word	0x08023a86

0801ea90 <_Bfree>:
 801ea90:	b570      	push	{r4, r5, r6, lr}
 801ea92:	69c6      	ldr	r6, [r0, #28]
 801ea94:	4605      	mov	r5, r0
 801ea96:	460c      	mov	r4, r1
 801ea98:	b976      	cbnz	r6, 801eab8 <_Bfree+0x28>
 801ea9a:	2010      	movs	r0, #16
 801ea9c:	f7ff ff04 	bl	801e8a8 <malloc>
 801eaa0:	4602      	mov	r2, r0
 801eaa2:	61e8      	str	r0, [r5, #28]
 801eaa4:	b920      	cbnz	r0, 801eab0 <_Bfree+0x20>
 801eaa6:	4b09      	ldr	r3, [pc, #36]	; (801eacc <_Bfree+0x3c>)
 801eaa8:	218f      	movs	r1, #143	; 0x8f
 801eaaa:	4809      	ldr	r0, [pc, #36]	; (801ead0 <_Bfree+0x40>)
 801eaac:	f002 f820 	bl	8020af0 <__assert_func>
 801eab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eab4:	6006      	str	r6, [r0, #0]
 801eab6:	60c6      	str	r6, [r0, #12]
 801eab8:	b13c      	cbz	r4, 801eaca <_Bfree+0x3a>
 801eaba:	69eb      	ldr	r3, [r5, #28]
 801eabc:	6862      	ldr	r2, [r4, #4]
 801eabe:	68db      	ldr	r3, [r3, #12]
 801eac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801eac4:	6021      	str	r1, [r4, #0]
 801eac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801eaca:	bd70      	pop	{r4, r5, r6, pc}
 801eacc:	08023a06 	.word	0x08023a06
 801ead0:	08023a86 	.word	0x08023a86

0801ead4 <__multadd>:
 801ead4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ead8:	f101 0c14 	add.w	ip, r1, #20
 801eadc:	4607      	mov	r7, r0
 801eade:	460c      	mov	r4, r1
 801eae0:	461e      	mov	r6, r3
 801eae2:	690d      	ldr	r5, [r1, #16]
 801eae4:	2000      	movs	r0, #0
 801eae6:	f8dc 3000 	ldr.w	r3, [ip]
 801eaea:	3001      	adds	r0, #1
 801eaec:	b299      	uxth	r1, r3
 801eaee:	4285      	cmp	r5, r0
 801eaf0:	fb02 6101 	mla	r1, r2, r1, r6
 801eaf4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801eaf8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801eafc:	b289      	uxth	r1, r1
 801eafe:	fb02 3306 	mla	r3, r2, r6, r3
 801eb02:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801eb06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801eb0a:	f84c 1b04 	str.w	r1, [ip], #4
 801eb0e:	dcea      	bgt.n	801eae6 <__multadd+0x12>
 801eb10:	b30e      	cbz	r6, 801eb56 <__multadd+0x82>
 801eb12:	68a3      	ldr	r3, [r4, #8]
 801eb14:	42ab      	cmp	r3, r5
 801eb16:	dc19      	bgt.n	801eb4c <__multadd+0x78>
 801eb18:	6861      	ldr	r1, [r4, #4]
 801eb1a:	4638      	mov	r0, r7
 801eb1c:	3101      	adds	r1, #1
 801eb1e:	f7ff ff77 	bl	801ea10 <_Balloc>
 801eb22:	4680      	mov	r8, r0
 801eb24:	b928      	cbnz	r0, 801eb32 <__multadd+0x5e>
 801eb26:	4602      	mov	r2, r0
 801eb28:	4b0c      	ldr	r3, [pc, #48]	; (801eb5c <__multadd+0x88>)
 801eb2a:	21ba      	movs	r1, #186	; 0xba
 801eb2c:	480c      	ldr	r0, [pc, #48]	; (801eb60 <__multadd+0x8c>)
 801eb2e:	f001 ffdf 	bl	8020af0 <__assert_func>
 801eb32:	6922      	ldr	r2, [r4, #16]
 801eb34:	f104 010c 	add.w	r1, r4, #12
 801eb38:	300c      	adds	r0, #12
 801eb3a:	3202      	adds	r2, #2
 801eb3c:	0092      	lsls	r2, r2, #2
 801eb3e:	f7fe ffd1 	bl	801dae4 <memcpy>
 801eb42:	4621      	mov	r1, r4
 801eb44:	4644      	mov	r4, r8
 801eb46:	4638      	mov	r0, r7
 801eb48:	f7ff ffa2 	bl	801ea90 <_Bfree>
 801eb4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801eb50:	3501      	adds	r5, #1
 801eb52:	615e      	str	r6, [r3, #20]
 801eb54:	6125      	str	r5, [r4, #16]
 801eb56:	4620      	mov	r0, r4
 801eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb5c:	08023a75 	.word	0x08023a75
 801eb60:	08023a86 	.word	0x08023a86

0801eb64 <__s2b>:
 801eb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb68:	4615      	mov	r5, r2
 801eb6a:	461f      	mov	r7, r3
 801eb6c:	2209      	movs	r2, #9
 801eb6e:	3308      	adds	r3, #8
 801eb70:	460c      	mov	r4, r1
 801eb72:	4606      	mov	r6, r0
 801eb74:	2100      	movs	r1, #0
 801eb76:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb7a:	2201      	movs	r2, #1
 801eb7c:	429a      	cmp	r2, r3
 801eb7e:	db09      	blt.n	801eb94 <__s2b+0x30>
 801eb80:	4630      	mov	r0, r6
 801eb82:	f7ff ff45 	bl	801ea10 <_Balloc>
 801eb86:	b940      	cbnz	r0, 801eb9a <__s2b+0x36>
 801eb88:	4602      	mov	r2, r0
 801eb8a:	4b19      	ldr	r3, [pc, #100]	; (801ebf0 <__s2b+0x8c>)
 801eb8c:	21d3      	movs	r1, #211	; 0xd3
 801eb8e:	4819      	ldr	r0, [pc, #100]	; (801ebf4 <__s2b+0x90>)
 801eb90:	f001 ffae 	bl	8020af0 <__assert_func>
 801eb94:	0052      	lsls	r2, r2, #1
 801eb96:	3101      	adds	r1, #1
 801eb98:	e7f0      	b.n	801eb7c <__s2b+0x18>
 801eb9a:	9b08      	ldr	r3, [sp, #32]
 801eb9c:	2d09      	cmp	r5, #9
 801eb9e:	6143      	str	r3, [r0, #20]
 801eba0:	f04f 0301 	mov.w	r3, #1
 801eba4:	6103      	str	r3, [r0, #16]
 801eba6:	dd16      	ble.n	801ebd6 <__s2b+0x72>
 801eba8:	f104 0909 	add.w	r9, r4, #9
 801ebac:	442c      	add	r4, r5
 801ebae:	46c8      	mov	r8, r9
 801ebb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ebb4:	4601      	mov	r1, r0
 801ebb6:	220a      	movs	r2, #10
 801ebb8:	4630      	mov	r0, r6
 801ebba:	3b30      	subs	r3, #48	; 0x30
 801ebbc:	f7ff ff8a 	bl	801ead4 <__multadd>
 801ebc0:	45a0      	cmp	r8, r4
 801ebc2:	d1f5      	bne.n	801ebb0 <__s2b+0x4c>
 801ebc4:	f1a5 0408 	sub.w	r4, r5, #8
 801ebc8:	444c      	add	r4, r9
 801ebca:	1b2d      	subs	r5, r5, r4
 801ebcc:	1963      	adds	r3, r4, r5
 801ebce:	42bb      	cmp	r3, r7
 801ebd0:	db04      	blt.n	801ebdc <__s2b+0x78>
 801ebd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebd6:	340a      	adds	r4, #10
 801ebd8:	2509      	movs	r5, #9
 801ebda:	e7f6      	b.n	801ebca <__s2b+0x66>
 801ebdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ebe0:	4601      	mov	r1, r0
 801ebe2:	220a      	movs	r2, #10
 801ebe4:	4630      	mov	r0, r6
 801ebe6:	3b30      	subs	r3, #48	; 0x30
 801ebe8:	f7ff ff74 	bl	801ead4 <__multadd>
 801ebec:	e7ee      	b.n	801ebcc <__s2b+0x68>
 801ebee:	bf00      	nop
 801ebf0:	08023a75 	.word	0x08023a75
 801ebf4:	08023a86 	.word	0x08023a86

0801ebf8 <__hi0bits>:
 801ebf8:	0c03      	lsrs	r3, r0, #16
 801ebfa:	041b      	lsls	r3, r3, #16
 801ebfc:	b9d3      	cbnz	r3, 801ec34 <__hi0bits+0x3c>
 801ebfe:	0400      	lsls	r0, r0, #16
 801ec00:	2310      	movs	r3, #16
 801ec02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ec06:	bf04      	itt	eq
 801ec08:	0200      	lsleq	r0, r0, #8
 801ec0a:	3308      	addeq	r3, #8
 801ec0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ec10:	bf04      	itt	eq
 801ec12:	0100      	lsleq	r0, r0, #4
 801ec14:	3304      	addeq	r3, #4
 801ec16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ec1a:	bf04      	itt	eq
 801ec1c:	0080      	lsleq	r0, r0, #2
 801ec1e:	3302      	addeq	r3, #2
 801ec20:	2800      	cmp	r0, #0
 801ec22:	db05      	blt.n	801ec30 <__hi0bits+0x38>
 801ec24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ec28:	f103 0301 	add.w	r3, r3, #1
 801ec2c:	bf08      	it	eq
 801ec2e:	2320      	moveq	r3, #32
 801ec30:	4618      	mov	r0, r3
 801ec32:	4770      	bx	lr
 801ec34:	2300      	movs	r3, #0
 801ec36:	e7e4      	b.n	801ec02 <__hi0bits+0xa>

0801ec38 <__lo0bits>:
 801ec38:	6803      	ldr	r3, [r0, #0]
 801ec3a:	f013 0207 	ands.w	r2, r3, #7
 801ec3e:	d00c      	beq.n	801ec5a <__lo0bits+0x22>
 801ec40:	07d9      	lsls	r1, r3, #31
 801ec42:	d422      	bmi.n	801ec8a <__lo0bits+0x52>
 801ec44:	079a      	lsls	r2, r3, #30
 801ec46:	bf47      	ittee	mi
 801ec48:	085b      	lsrmi	r3, r3, #1
 801ec4a:	2201      	movmi	r2, #1
 801ec4c:	089b      	lsrpl	r3, r3, #2
 801ec4e:	2202      	movpl	r2, #2
 801ec50:	bf4c      	ite	mi
 801ec52:	6003      	strmi	r3, [r0, #0]
 801ec54:	6003      	strpl	r3, [r0, #0]
 801ec56:	4610      	mov	r0, r2
 801ec58:	4770      	bx	lr
 801ec5a:	b299      	uxth	r1, r3
 801ec5c:	b909      	cbnz	r1, 801ec62 <__lo0bits+0x2a>
 801ec5e:	0c1b      	lsrs	r3, r3, #16
 801ec60:	2210      	movs	r2, #16
 801ec62:	b2d9      	uxtb	r1, r3
 801ec64:	b909      	cbnz	r1, 801ec6a <__lo0bits+0x32>
 801ec66:	3208      	adds	r2, #8
 801ec68:	0a1b      	lsrs	r3, r3, #8
 801ec6a:	0719      	lsls	r1, r3, #28
 801ec6c:	bf04      	itt	eq
 801ec6e:	091b      	lsreq	r3, r3, #4
 801ec70:	3204      	addeq	r2, #4
 801ec72:	0799      	lsls	r1, r3, #30
 801ec74:	bf04      	itt	eq
 801ec76:	089b      	lsreq	r3, r3, #2
 801ec78:	3202      	addeq	r2, #2
 801ec7a:	07d9      	lsls	r1, r3, #31
 801ec7c:	d403      	bmi.n	801ec86 <__lo0bits+0x4e>
 801ec7e:	085b      	lsrs	r3, r3, #1
 801ec80:	f102 0201 	add.w	r2, r2, #1
 801ec84:	d003      	beq.n	801ec8e <__lo0bits+0x56>
 801ec86:	6003      	str	r3, [r0, #0]
 801ec88:	e7e5      	b.n	801ec56 <__lo0bits+0x1e>
 801ec8a:	2200      	movs	r2, #0
 801ec8c:	e7e3      	b.n	801ec56 <__lo0bits+0x1e>
 801ec8e:	2220      	movs	r2, #32
 801ec90:	e7e1      	b.n	801ec56 <__lo0bits+0x1e>
	...

0801ec94 <__i2b>:
 801ec94:	b510      	push	{r4, lr}
 801ec96:	460c      	mov	r4, r1
 801ec98:	2101      	movs	r1, #1
 801ec9a:	f7ff feb9 	bl	801ea10 <_Balloc>
 801ec9e:	4602      	mov	r2, r0
 801eca0:	b928      	cbnz	r0, 801ecae <__i2b+0x1a>
 801eca2:	4b05      	ldr	r3, [pc, #20]	; (801ecb8 <__i2b+0x24>)
 801eca4:	f240 1145 	movw	r1, #325	; 0x145
 801eca8:	4804      	ldr	r0, [pc, #16]	; (801ecbc <__i2b+0x28>)
 801ecaa:	f001 ff21 	bl	8020af0 <__assert_func>
 801ecae:	2301      	movs	r3, #1
 801ecb0:	6144      	str	r4, [r0, #20]
 801ecb2:	6103      	str	r3, [r0, #16]
 801ecb4:	bd10      	pop	{r4, pc}
 801ecb6:	bf00      	nop
 801ecb8:	08023a75 	.word	0x08023a75
 801ecbc:	08023a86 	.word	0x08023a86

0801ecc0 <__multiply>:
 801ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc4:	4691      	mov	r9, r2
 801ecc6:	690a      	ldr	r2, [r1, #16]
 801ecc8:	460c      	mov	r4, r1
 801ecca:	b085      	sub	sp, #20
 801eccc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ecd0:	429a      	cmp	r2, r3
 801ecd2:	bfbe      	ittt	lt
 801ecd4:	460b      	movlt	r3, r1
 801ecd6:	464c      	movlt	r4, r9
 801ecd8:	4699      	movlt	r9, r3
 801ecda:	6927      	ldr	r7, [r4, #16]
 801ecdc:	68a3      	ldr	r3, [r4, #8]
 801ecde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ece2:	6861      	ldr	r1, [r4, #4]
 801ece4:	eb07 060a 	add.w	r6, r7, sl
 801ece8:	42b3      	cmp	r3, r6
 801ecea:	bfb8      	it	lt
 801ecec:	3101      	addlt	r1, #1
 801ecee:	f7ff fe8f 	bl	801ea10 <_Balloc>
 801ecf2:	b930      	cbnz	r0, 801ed02 <__multiply+0x42>
 801ecf4:	4602      	mov	r2, r0
 801ecf6:	4b45      	ldr	r3, [pc, #276]	; (801ee0c <__multiply+0x14c>)
 801ecf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801ecfc:	4844      	ldr	r0, [pc, #272]	; (801ee10 <__multiply+0x150>)
 801ecfe:	f001 fef7 	bl	8020af0 <__assert_func>
 801ed02:	f100 0514 	add.w	r5, r0, #20
 801ed06:	2200      	movs	r2, #0
 801ed08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ed0c:	462b      	mov	r3, r5
 801ed0e:	4543      	cmp	r3, r8
 801ed10:	d321      	bcc.n	801ed56 <__multiply+0x96>
 801ed12:	f104 0314 	add.w	r3, r4, #20
 801ed16:	f104 0115 	add.w	r1, r4, #21
 801ed1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ed1e:	f109 0314 	add.w	r3, r9, #20
 801ed22:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ed26:	9202      	str	r2, [sp, #8]
 801ed28:	1b3a      	subs	r2, r7, r4
 801ed2a:	3a15      	subs	r2, #21
 801ed2c:	f022 0203 	bic.w	r2, r2, #3
 801ed30:	3204      	adds	r2, #4
 801ed32:	428f      	cmp	r7, r1
 801ed34:	bf38      	it	cc
 801ed36:	2204      	movcc	r2, #4
 801ed38:	9201      	str	r2, [sp, #4]
 801ed3a:	9a02      	ldr	r2, [sp, #8]
 801ed3c:	9303      	str	r3, [sp, #12]
 801ed3e:	429a      	cmp	r2, r3
 801ed40:	d80c      	bhi.n	801ed5c <__multiply+0x9c>
 801ed42:	2e00      	cmp	r6, #0
 801ed44:	dd03      	ble.n	801ed4e <__multiply+0x8e>
 801ed46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d05b      	beq.n	801ee06 <__multiply+0x146>
 801ed4e:	6106      	str	r6, [r0, #16]
 801ed50:	b005      	add	sp, #20
 801ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed56:	f843 2b04 	str.w	r2, [r3], #4
 801ed5a:	e7d8      	b.n	801ed0e <__multiply+0x4e>
 801ed5c:	f8b3 a000 	ldrh.w	sl, [r3]
 801ed60:	f1ba 0f00 	cmp.w	sl, #0
 801ed64:	d024      	beq.n	801edb0 <__multiply+0xf0>
 801ed66:	f104 0e14 	add.w	lr, r4, #20
 801ed6a:	46a9      	mov	r9, r5
 801ed6c:	f04f 0c00 	mov.w	ip, #0
 801ed70:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ed74:	f8d9 1000 	ldr.w	r1, [r9]
 801ed78:	fa1f fb82 	uxth.w	fp, r2
 801ed7c:	4577      	cmp	r7, lr
 801ed7e:	b289      	uxth	r1, r1
 801ed80:	fb0a 110b 	mla	r1, sl, fp, r1
 801ed84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ed88:	f8d9 2000 	ldr.w	r2, [r9]
 801ed8c:	4461      	add	r1, ip
 801ed8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed92:	fb0a c20b 	mla	r2, sl, fp, ip
 801ed96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ed9a:	b289      	uxth	r1, r1
 801ed9c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801eda0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801eda4:	f849 1b04 	str.w	r1, [r9], #4
 801eda8:	d8e2      	bhi.n	801ed70 <__multiply+0xb0>
 801edaa:	9a01      	ldr	r2, [sp, #4]
 801edac:	f845 c002 	str.w	ip, [r5, r2]
 801edb0:	9a03      	ldr	r2, [sp, #12]
 801edb2:	3304      	adds	r3, #4
 801edb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801edb8:	f1b9 0f00 	cmp.w	r9, #0
 801edbc:	d021      	beq.n	801ee02 <__multiply+0x142>
 801edbe:	6829      	ldr	r1, [r5, #0]
 801edc0:	f104 0c14 	add.w	ip, r4, #20
 801edc4:	46ae      	mov	lr, r5
 801edc6:	f04f 0a00 	mov.w	sl, #0
 801edca:	f8bc b000 	ldrh.w	fp, [ip]
 801edce:	b289      	uxth	r1, r1
 801edd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801edd4:	fb09 220b 	mla	r2, r9, fp, r2
 801edd8:	4452      	add	r2, sl
 801edda:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801edde:	f84e 1b04 	str.w	r1, [lr], #4
 801ede2:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ede6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801edea:	f8be 1000 	ldrh.w	r1, [lr]
 801edee:	4567      	cmp	r7, ip
 801edf0:	fb09 110a 	mla	r1, r9, sl, r1
 801edf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801edf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801edfc:	d8e5      	bhi.n	801edca <__multiply+0x10a>
 801edfe:	9a01      	ldr	r2, [sp, #4]
 801ee00:	50a9      	str	r1, [r5, r2]
 801ee02:	3504      	adds	r5, #4
 801ee04:	e799      	b.n	801ed3a <__multiply+0x7a>
 801ee06:	3e01      	subs	r6, #1
 801ee08:	e79b      	b.n	801ed42 <__multiply+0x82>
 801ee0a:	bf00      	nop
 801ee0c:	08023a75 	.word	0x08023a75
 801ee10:	08023a86 	.word	0x08023a86

0801ee14 <__pow5mult>:
 801ee14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee18:	4615      	mov	r5, r2
 801ee1a:	f012 0203 	ands.w	r2, r2, #3
 801ee1e:	4606      	mov	r6, r0
 801ee20:	460f      	mov	r7, r1
 801ee22:	d007      	beq.n	801ee34 <__pow5mult+0x20>
 801ee24:	3a01      	subs	r2, #1
 801ee26:	4c25      	ldr	r4, [pc, #148]	; (801eebc <__pow5mult+0xa8>)
 801ee28:	2300      	movs	r3, #0
 801ee2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ee2e:	f7ff fe51 	bl	801ead4 <__multadd>
 801ee32:	4607      	mov	r7, r0
 801ee34:	10ad      	asrs	r5, r5, #2
 801ee36:	d03d      	beq.n	801eeb4 <__pow5mult+0xa0>
 801ee38:	69f4      	ldr	r4, [r6, #28]
 801ee3a:	b97c      	cbnz	r4, 801ee5c <__pow5mult+0x48>
 801ee3c:	2010      	movs	r0, #16
 801ee3e:	f7ff fd33 	bl	801e8a8 <malloc>
 801ee42:	4602      	mov	r2, r0
 801ee44:	61f0      	str	r0, [r6, #28]
 801ee46:	b928      	cbnz	r0, 801ee54 <__pow5mult+0x40>
 801ee48:	4b1d      	ldr	r3, [pc, #116]	; (801eec0 <__pow5mult+0xac>)
 801ee4a:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ee4e:	481d      	ldr	r0, [pc, #116]	; (801eec4 <__pow5mult+0xb0>)
 801ee50:	f001 fe4e 	bl	8020af0 <__assert_func>
 801ee54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ee58:	6004      	str	r4, [r0, #0]
 801ee5a:	60c4      	str	r4, [r0, #12]
 801ee5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ee60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ee64:	b94c      	cbnz	r4, 801ee7a <__pow5mult+0x66>
 801ee66:	f240 2171 	movw	r1, #625	; 0x271
 801ee6a:	4630      	mov	r0, r6
 801ee6c:	f7ff ff12 	bl	801ec94 <__i2b>
 801ee70:	2300      	movs	r3, #0
 801ee72:	4604      	mov	r4, r0
 801ee74:	f8c8 0008 	str.w	r0, [r8, #8]
 801ee78:	6003      	str	r3, [r0, #0]
 801ee7a:	f04f 0900 	mov.w	r9, #0
 801ee7e:	07eb      	lsls	r3, r5, #31
 801ee80:	d50a      	bpl.n	801ee98 <__pow5mult+0x84>
 801ee82:	4639      	mov	r1, r7
 801ee84:	4622      	mov	r2, r4
 801ee86:	4630      	mov	r0, r6
 801ee88:	f7ff ff1a 	bl	801ecc0 <__multiply>
 801ee8c:	4680      	mov	r8, r0
 801ee8e:	4639      	mov	r1, r7
 801ee90:	4630      	mov	r0, r6
 801ee92:	4647      	mov	r7, r8
 801ee94:	f7ff fdfc 	bl	801ea90 <_Bfree>
 801ee98:	106d      	asrs	r5, r5, #1
 801ee9a:	d00b      	beq.n	801eeb4 <__pow5mult+0xa0>
 801ee9c:	6820      	ldr	r0, [r4, #0]
 801ee9e:	b938      	cbnz	r0, 801eeb0 <__pow5mult+0x9c>
 801eea0:	4622      	mov	r2, r4
 801eea2:	4621      	mov	r1, r4
 801eea4:	4630      	mov	r0, r6
 801eea6:	f7ff ff0b 	bl	801ecc0 <__multiply>
 801eeaa:	6020      	str	r0, [r4, #0]
 801eeac:	f8c0 9000 	str.w	r9, [r0]
 801eeb0:	4604      	mov	r4, r0
 801eeb2:	e7e4      	b.n	801ee7e <__pow5mult+0x6a>
 801eeb4:	4638      	mov	r0, r7
 801eeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eeba:	bf00      	nop
 801eebc:	08023bd0 	.word	0x08023bd0
 801eec0:	08023a06 	.word	0x08023a06
 801eec4:	08023a86 	.word	0x08023a86

0801eec8 <__lshift>:
 801eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eecc:	460c      	mov	r4, r1
 801eece:	4607      	mov	r7, r0
 801eed0:	4691      	mov	r9, r2
 801eed2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801eed6:	6923      	ldr	r3, [r4, #16]
 801eed8:	6849      	ldr	r1, [r1, #4]
 801eeda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801eede:	68a3      	ldr	r3, [r4, #8]
 801eee0:	f108 0601 	add.w	r6, r8, #1
 801eee4:	42b3      	cmp	r3, r6
 801eee6:	db0b      	blt.n	801ef00 <__lshift+0x38>
 801eee8:	4638      	mov	r0, r7
 801eeea:	f7ff fd91 	bl	801ea10 <_Balloc>
 801eeee:	4605      	mov	r5, r0
 801eef0:	b948      	cbnz	r0, 801ef06 <__lshift+0x3e>
 801eef2:	4602      	mov	r2, r0
 801eef4:	4b28      	ldr	r3, [pc, #160]	; (801ef98 <__lshift+0xd0>)
 801eef6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801eefa:	4828      	ldr	r0, [pc, #160]	; (801ef9c <__lshift+0xd4>)
 801eefc:	f001 fdf8 	bl	8020af0 <__assert_func>
 801ef00:	3101      	adds	r1, #1
 801ef02:	005b      	lsls	r3, r3, #1
 801ef04:	e7ee      	b.n	801eee4 <__lshift+0x1c>
 801ef06:	2300      	movs	r3, #0
 801ef08:	f100 0114 	add.w	r1, r0, #20
 801ef0c:	f100 0210 	add.w	r2, r0, #16
 801ef10:	4618      	mov	r0, r3
 801ef12:	4553      	cmp	r3, sl
 801ef14:	db33      	blt.n	801ef7e <__lshift+0xb6>
 801ef16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ef1a:	f104 0314 	add.w	r3, r4, #20
 801ef1e:	6920      	ldr	r0, [r4, #16]
 801ef20:	f019 091f 	ands.w	r9, r9, #31
 801ef24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ef28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ef2c:	d02b      	beq.n	801ef86 <__lshift+0xbe>
 801ef2e:	f1c9 0e20 	rsb	lr, r9, #32
 801ef32:	468a      	mov	sl, r1
 801ef34:	2200      	movs	r2, #0
 801ef36:	6818      	ldr	r0, [r3, #0]
 801ef38:	fa00 f009 	lsl.w	r0, r0, r9
 801ef3c:	4310      	orrs	r0, r2
 801ef3e:	f84a 0b04 	str.w	r0, [sl], #4
 801ef42:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef46:	459c      	cmp	ip, r3
 801ef48:	fa22 f20e 	lsr.w	r2, r2, lr
 801ef4c:	d8f3      	bhi.n	801ef36 <__lshift+0x6e>
 801ef4e:	ebac 0304 	sub.w	r3, ip, r4
 801ef52:	f104 0015 	add.w	r0, r4, #21
 801ef56:	3b15      	subs	r3, #21
 801ef58:	f023 0303 	bic.w	r3, r3, #3
 801ef5c:	3304      	adds	r3, #4
 801ef5e:	4584      	cmp	ip, r0
 801ef60:	bf38      	it	cc
 801ef62:	2304      	movcc	r3, #4
 801ef64:	50ca      	str	r2, [r1, r3]
 801ef66:	b10a      	cbz	r2, 801ef6c <__lshift+0xa4>
 801ef68:	f108 0602 	add.w	r6, r8, #2
 801ef6c:	3e01      	subs	r6, #1
 801ef6e:	4638      	mov	r0, r7
 801ef70:	4621      	mov	r1, r4
 801ef72:	612e      	str	r6, [r5, #16]
 801ef74:	f7ff fd8c 	bl	801ea90 <_Bfree>
 801ef78:	4628      	mov	r0, r5
 801ef7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef7e:	3301      	adds	r3, #1
 801ef80:	f842 0f04 	str.w	r0, [r2, #4]!
 801ef84:	e7c5      	b.n	801ef12 <__lshift+0x4a>
 801ef86:	3904      	subs	r1, #4
 801ef88:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef8c:	459c      	cmp	ip, r3
 801ef8e:	f841 2f04 	str.w	r2, [r1, #4]!
 801ef92:	d8f9      	bhi.n	801ef88 <__lshift+0xc0>
 801ef94:	e7ea      	b.n	801ef6c <__lshift+0xa4>
 801ef96:	bf00      	nop
 801ef98:	08023a75 	.word	0x08023a75
 801ef9c:	08023a86 	.word	0x08023a86

0801efa0 <__mcmp>:
 801efa0:	6902      	ldr	r2, [r0, #16]
 801efa2:	b530      	push	{r4, r5, lr}
 801efa4:	690c      	ldr	r4, [r1, #16]
 801efa6:	1b12      	subs	r2, r2, r4
 801efa8:	d10e      	bne.n	801efc8 <__mcmp+0x28>
 801efaa:	f100 0314 	add.w	r3, r0, #20
 801efae:	3114      	adds	r1, #20
 801efb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801efb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801efb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801efbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801efc0:	42a5      	cmp	r5, r4
 801efc2:	d003      	beq.n	801efcc <__mcmp+0x2c>
 801efc4:	d305      	bcc.n	801efd2 <__mcmp+0x32>
 801efc6:	2201      	movs	r2, #1
 801efc8:	4610      	mov	r0, r2
 801efca:	bd30      	pop	{r4, r5, pc}
 801efcc:	4283      	cmp	r3, r0
 801efce:	d3f3      	bcc.n	801efb8 <__mcmp+0x18>
 801efd0:	e7fa      	b.n	801efc8 <__mcmp+0x28>
 801efd2:	f04f 32ff 	mov.w	r2, #4294967295
 801efd6:	e7f7      	b.n	801efc8 <__mcmp+0x28>

0801efd8 <__mdiff>:
 801efd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efdc:	460c      	mov	r4, r1
 801efde:	4606      	mov	r6, r0
 801efe0:	4611      	mov	r1, r2
 801efe2:	4692      	mov	sl, r2
 801efe4:	4620      	mov	r0, r4
 801efe6:	f7ff ffdb 	bl	801efa0 <__mcmp>
 801efea:	1e05      	subs	r5, r0, #0
 801efec:	d110      	bne.n	801f010 <__mdiff+0x38>
 801efee:	4629      	mov	r1, r5
 801eff0:	4630      	mov	r0, r6
 801eff2:	f7ff fd0d 	bl	801ea10 <_Balloc>
 801eff6:	b930      	cbnz	r0, 801f006 <__mdiff+0x2e>
 801eff8:	4b3d      	ldr	r3, [pc, #244]	; (801f0f0 <__mdiff+0x118>)
 801effa:	4602      	mov	r2, r0
 801effc:	f240 2137 	movw	r1, #567	; 0x237
 801f000:	483c      	ldr	r0, [pc, #240]	; (801f0f4 <__mdiff+0x11c>)
 801f002:	f001 fd75 	bl	8020af0 <__assert_func>
 801f006:	2301      	movs	r3, #1
 801f008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f010:	bfa4      	itt	ge
 801f012:	4653      	movge	r3, sl
 801f014:	46a2      	movge	sl, r4
 801f016:	4630      	mov	r0, r6
 801f018:	bfa8      	it	ge
 801f01a:	2500      	movge	r5, #0
 801f01c:	f8da 1004 	ldr.w	r1, [sl, #4]
 801f020:	bfac      	ite	ge
 801f022:	461c      	movge	r4, r3
 801f024:	2501      	movlt	r5, #1
 801f026:	f7ff fcf3 	bl	801ea10 <_Balloc>
 801f02a:	b920      	cbnz	r0, 801f036 <__mdiff+0x5e>
 801f02c:	4b30      	ldr	r3, [pc, #192]	; (801f0f0 <__mdiff+0x118>)
 801f02e:	4602      	mov	r2, r0
 801f030:	f240 2145 	movw	r1, #581	; 0x245
 801f034:	e7e4      	b.n	801f000 <__mdiff+0x28>
 801f036:	f8da 7010 	ldr.w	r7, [sl, #16]
 801f03a:	f104 0914 	add.w	r9, r4, #20
 801f03e:	6926      	ldr	r6, [r4, #16]
 801f040:	f100 0814 	add.w	r8, r0, #20
 801f044:	60c5      	str	r5, [r0, #12]
 801f046:	f10a 0514 	add.w	r5, sl, #20
 801f04a:	f10a 0210 	add.w	r2, sl, #16
 801f04e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f052:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801f056:	46c2      	mov	sl, r8
 801f058:	f04f 0c00 	mov.w	ip, #0
 801f05c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f060:	f859 3b04 	ldr.w	r3, [r9], #4
 801f064:	fa1f f18b 	uxth.w	r1, fp
 801f068:	454e      	cmp	r6, r9
 801f06a:	4461      	add	r1, ip
 801f06c:	fa1f fc83 	uxth.w	ip, r3
 801f070:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801f074:	eba1 010c 	sub.w	r1, r1, ip
 801f078:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f07c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801f080:	b289      	uxth	r1, r1
 801f082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801f086:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801f08a:	f84a 1b04 	str.w	r1, [sl], #4
 801f08e:	d8e5      	bhi.n	801f05c <__mdiff+0x84>
 801f090:	1b33      	subs	r3, r6, r4
 801f092:	3415      	adds	r4, #21
 801f094:	3b15      	subs	r3, #21
 801f096:	f023 0303 	bic.w	r3, r3, #3
 801f09a:	3304      	adds	r3, #4
 801f09c:	42a6      	cmp	r6, r4
 801f09e:	bf38      	it	cc
 801f0a0:	2304      	movcc	r3, #4
 801f0a2:	441d      	add	r5, r3
 801f0a4:	4443      	add	r3, r8
 801f0a6:	462c      	mov	r4, r5
 801f0a8:	461e      	mov	r6, r3
 801f0aa:	4574      	cmp	r4, lr
 801f0ac:	d30e      	bcc.n	801f0cc <__mdiff+0xf4>
 801f0ae:	f10e 0203 	add.w	r2, lr, #3
 801f0b2:	1b52      	subs	r2, r2, r5
 801f0b4:	3d03      	subs	r5, #3
 801f0b6:	f022 0203 	bic.w	r2, r2, #3
 801f0ba:	45ae      	cmp	lr, r5
 801f0bc:	bf38      	it	cc
 801f0be:	2200      	movcc	r2, #0
 801f0c0:	4413      	add	r3, r2
 801f0c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f0c6:	b18a      	cbz	r2, 801f0ec <__mdiff+0x114>
 801f0c8:	6107      	str	r7, [r0, #16]
 801f0ca:	e79f      	b.n	801f00c <__mdiff+0x34>
 801f0cc:	f854 8b04 	ldr.w	r8, [r4], #4
 801f0d0:	fa1f f288 	uxth.w	r2, r8
 801f0d4:	4462      	add	r2, ip
 801f0d6:	1411      	asrs	r1, r2, #16
 801f0d8:	b292      	uxth	r2, r2
 801f0da:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801f0de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801f0e2:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801f0e6:	f846 2b04 	str.w	r2, [r6], #4
 801f0ea:	e7de      	b.n	801f0aa <__mdiff+0xd2>
 801f0ec:	3f01      	subs	r7, #1
 801f0ee:	e7e8      	b.n	801f0c2 <__mdiff+0xea>
 801f0f0:	08023a75 	.word	0x08023a75
 801f0f4:	08023a86 	.word	0x08023a86

0801f0f8 <__ulp>:
 801f0f8:	b082      	sub	sp, #8
 801f0fa:	4b11      	ldr	r3, [pc, #68]	; (801f140 <__ulp+0x48>)
 801f0fc:	ed8d 0b00 	vstr	d0, [sp]
 801f100:	9a01      	ldr	r2, [sp, #4]
 801f102:	4013      	ands	r3, r2
 801f104:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801f108:	2b00      	cmp	r3, #0
 801f10a:	dc08      	bgt.n	801f11e <__ulp+0x26>
 801f10c:	425b      	negs	r3, r3
 801f10e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801f112:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f116:	da04      	bge.n	801f122 <__ulp+0x2a>
 801f118:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801f11c:	4113      	asrs	r3, r2
 801f11e:	2200      	movs	r2, #0
 801f120:	e008      	b.n	801f134 <__ulp+0x3c>
 801f122:	f1a2 0314 	sub.w	r3, r2, #20
 801f126:	2b1e      	cmp	r3, #30
 801f128:	bfd6      	itet	le
 801f12a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801f12e:	2201      	movgt	r2, #1
 801f130:	40da      	lsrle	r2, r3
 801f132:	2300      	movs	r3, #0
 801f134:	4619      	mov	r1, r3
 801f136:	4610      	mov	r0, r2
 801f138:	ec41 0b10 	vmov	d0, r0, r1
 801f13c:	b002      	add	sp, #8
 801f13e:	4770      	bx	lr
 801f140:	7ff00000 	.word	0x7ff00000

0801f144 <__b2d>:
 801f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f148:	6906      	ldr	r6, [r0, #16]
 801f14a:	f100 0814 	add.w	r8, r0, #20
 801f14e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f152:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f156:	1f37      	subs	r7, r6, #4
 801f158:	4610      	mov	r0, r2
 801f15a:	f7ff fd4d 	bl	801ebf8 <__hi0bits>
 801f15e:	f1c0 0320 	rsb	r3, r0, #32
 801f162:	280a      	cmp	r0, #10
 801f164:	600b      	str	r3, [r1, #0]
 801f166:	491d      	ldr	r1, [pc, #116]	; (801f1dc <__b2d+0x98>)
 801f168:	dc16      	bgt.n	801f198 <__b2d+0x54>
 801f16a:	f1c0 0c0b 	rsb	ip, r0, #11
 801f16e:	45b8      	cmp	r8, r7
 801f170:	f100 0015 	add.w	r0, r0, #21
 801f174:	fa22 f30c 	lsr.w	r3, r2, ip
 801f178:	fa02 f000 	lsl.w	r0, r2, r0
 801f17c:	ea43 0501 	orr.w	r5, r3, r1
 801f180:	bf34      	ite	cc
 801f182:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f186:	2300      	movcs	r3, #0
 801f188:	fa23 f30c 	lsr.w	r3, r3, ip
 801f18c:	4303      	orrs	r3, r0
 801f18e:	461c      	mov	r4, r3
 801f190:	ec45 4b10 	vmov	d0, r4, r5
 801f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f198:	45b8      	cmp	r8, r7
 801f19a:	bf3a      	itte	cc
 801f19c:	f1a6 0708 	subcc.w	r7, r6, #8
 801f1a0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f1a4:	2300      	movcs	r3, #0
 801f1a6:	380b      	subs	r0, #11
 801f1a8:	d014      	beq.n	801f1d4 <__b2d+0x90>
 801f1aa:	f1c0 0120 	rsb	r1, r0, #32
 801f1ae:	4082      	lsls	r2, r0
 801f1b0:	4547      	cmp	r7, r8
 801f1b2:	fa23 f401 	lsr.w	r4, r3, r1
 801f1b6:	fa03 f300 	lsl.w	r3, r3, r0
 801f1ba:	ea42 0204 	orr.w	r2, r2, r4
 801f1be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801f1c2:	bf8c      	ite	hi
 801f1c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f1c8:	2200      	movls	r2, #0
 801f1ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f1ce:	40ca      	lsrs	r2, r1
 801f1d0:	4313      	orrs	r3, r2
 801f1d2:	e7dc      	b.n	801f18e <__b2d+0x4a>
 801f1d4:	ea42 0501 	orr.w	r5, r2, r1
 801f1d8:	e7d9      	b.n	801f18e <__b2d+0x4a>
 801f1da:	bf00      	nop
 801f1dc:	3ff00000 	.word	0x3ff00000

0801f1e0 <__d2b>:
 801f1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f1e4:	460f      	mov	r7, r1
 801f1e6:	2101      	movs	r1, #1
 801f1e8:	4616      	mov	r6, r2
 801f1ea:	ec59 8b10 	vmov	r8, r9, d0
 801f1ee:	f7ff fc0f 	bl	801ea10 <_Balloc>
 801f1f2:	4604      	mov	r4, r0
 801f1f4:	b930      	cbnz	r0, 801f204 <__d2b+0x24>
 801f1f6:	4602      	mov	r2, r0
 801f1f8:	4b24      	ldr	r3, [pc, #144]	; (801f28c <__d2b+0xac>)
 801f1fa:	f240 310f 	movw	r1, #783	; 0x30f
 801f1fe:	4824      	ldr	r0, [pc, #144]	; (801f290 <__d2b+0xb0>)
 801f200:	f001 fc76 	bl	8020af0 <__assert_func>
 801f204:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f20c:	bb2d      	cbnz	r5, 801f25a <__d2b+0x7a>
 801f20e:	9301      	str	r3, [sp, #4]
 801f210:	f1b8 0300 	subs.w	r3, r8, #0
 801f214:	d026      	beq.n	801f264 <__d2b+0x84>
 801f216:	4668      	mov	r0, sp
 801f218:	9300      	str	r3, [sp, #0]
 801f21a:	f7ff fd0d 	bl	801ec38 <__lo0bits>
 801f21e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f222:	b1e8      	cbz	r0, 801f260 <__d2b+0x80>
 801f224:	f1c0 0320 	rsb	r3, r0, #32
 801f228:	fa02 f303 	lsl.w	r3, r2, r3
 801f22c:	40c2      	lsrs	r2, r0
 801f22e:	430b      	orrs	r3, r1
 801f230:	9201      	str	r2, [sp, #4]
 801f232:	6163      	str	r3, [r4, #20]
 801f234:	9b01      	ldr	r3, [sp, #4]
 801f236:	2b00      	cmp	r3, #0
 801f238:	61a3      	str	r3, [r4, #24]
 801f23a:	bf14      	ite	ne
 801f23c:	2202      	movne	r2, #2
 801f23e:	2201      	moveq	r2, #1
 801f240:	6122      	str	r2, [r4, #16]
 801f242:	b1bd      	cbz	r5, 801f274 <__d2b+0x94>
 801f244:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f248:	4405      	add	r5, r0
 801f24a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f24e:	603d      	str	r5, [r7, #0]
 801f250:	6030      	str	r0, [r6, #0]
 801f252:	4620      	mov	r0, r4
 801f254:	b003      	add	sp, #12
 801f256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f25e:	e7d6      	b.n	801f20e <__d2b+0x2e>
 801f260:	6161      	str	r1, [r4, #20]
 801f262:	e7e7      	b.n	801f234 <__d2b+0x54>
 801f264:	a801      	add	r0, sp, #4
 801f266:	f7ff fce7 	bl	801ec38 <__lo0bits>
 801f26a:	9b01      	ldr	r3, [sp, #4]
 801f26c:	3020      	adds	r0, #32
 801f26e:	2201      	movs	r2, #1
 801f270:	6163      	str	r3, [r4, #20]
 801f272:	e7e5      	b.n	801f240 <__d2b+0x60>
 801f274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f278:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f27c:	6038      	str	r0, [r7, #0]
 801f27e:	6918      	ldr	r0, [r3, #16]
 801f280:	f7ff fcba 	bl	801ebf8 <__hi0bits>
 801f284:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f288:	e7e2      	b.n	801f250 <__d2b+0x70>
 801f28a:	bf00      	nop
 801f28c:	08023a75 	.word	0x08023a75
 801f290:	08023a86 	.word	0x08023a86

0801f294 <__ratio>:
 801f294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f298:	4688      	mov	r8, r1
 801f29a:	4681      	mov	r9, r0
 801f29c:	4669      	mov	r1, sp
 801f29e:	f7ff ff51 	bl	801f144 <__b2d>
 801f2a2:	a901      	add	r1, sp, #4
 801f2a4:	4640      	mov	r0, r8
 801f2a6:	ec55 4b10 	vmov	r4, r5, d0
 801f2aa:	f7ff ff4b 	bl	801f144 <__b2d>
 801f2ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f2b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f2b6:	462f      	mov	r7, r5
 801f2b8:	eba3 0c02 	sub.w	ip, r3, r2
 801f2bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f2c0:	ec51 0b10 	vmov	r0, r1, d0
 801f2c4:	1a9b      	subs	r3, r3, r2
 801f2c6:	468b      	mov	fp, r1
 801f2c8:	4620      	mov	r0, r4
 801f2ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	bfd5      	itete	le
 801f2d2:	460a      	movle	r2, r1
 801f2d4:	462a      	movgt	r2, r5
 801f2d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f2da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f2de:	bfd8      	it	le
 801f2e0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f2e4:	ee10 2a10 	vmov	r2, s0
 801f2e8:	4639      	mov	r1, r7
 801f2ea:	465b      	mov	r3, fp
 801f2ec:	f7e1 fab2 	bl	8000854 <__aeabi_ddiv>
 801f2f0:	ec41 0b10 	vmov	d0, r0, r1
 801f2f4:	b003      	add	sp, #12
 801f2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2fa <__copybits>:
 801f2fa:	3901      	subs	r1, #1
 801f2fc:	f102 0314 	add.w	r3, r2, #20
 801f300:	1149      	asrs	r1, r1, #5
 801f302:	b570      	push	{r4, r5, r6, lr}
 801f304:	3101      	adds	r1, #1
 801f306:	6914      	ldr	r4, [r2, #16]
 801f308:	1f05      	subs	r5, r0, #4
 801f30a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f30e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f312:	42a3      	cmp	r3, r4
 801f314:	d30c      	bcc.n	801f330 <__copybits+0x36>
 801f316:	1aa3      	subs	r3, r4, r2
 801f318:	3211      	adds	r2, #17
 801f31a:	3b11      	subs	r3, #17
 801f31c:	f023 0303 	bic.w	r3, r3, #3
 801f320:	42a2      	cmp	r2, r4
 801f322:	bf88      	it	hi
 801f324:	2300      	movhi	r3, #0
 801f326:	4418      	add	r0, r3
 801f328:	2300      	movs	r3, #0
 801f32a:	4288      	cmp	r0, r1
 801f32c:	d305      	bcc.n	801f33a <__copybits+0x40>
 801f32e:	bd70      	pop	{r4, r5, r6, pc}
 801f330:	f853 6b04 	ldr.w	r6, [r3], #4
 801f334:	f845 6f04 	str.w	r6, [r5, #4]!
 801f338:	e7eb      	b.n	801f312 <__copybits+0x18>
 801f33a:	f840 3b04 	str.w	r3, [r0], #4
 801f33e:	e7f4      	b.n	801f32a <__copybits+0x30>

0801f340 <__any_on>:
 801f340:	f100 0214 	add.w	r2, r0, #20
 801f344:	114b      	asrs	r3, r1, #5
 801f346:	6900      	ldr	r0, [r0, #16]
 801f348:	4298      	cmp	r0, r3
 801f34a:	b510      	push	{r4, lr}
 801f34c:	db11      	blt.n	801f372 <__any_on+0x32>
 801f34e:	dd0a      	ble.n	801f366 <__any_on+0x26>
 801f350:	f011 011f 	ands.w	r1, r1, #31
 801f354:	d007      	beq.n	801f366 <__any_on+0x26>
 801f356:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f35a:	fa24 f001 	lsr.w	r0, r4, r1
 801f35e:	fa00 f101 	lsl.w	r1, r0, r1
 801f362:	428c      	cmp	r4, r1
 801f364:	d10b      	bne.n	801f37e <__any_on+0x3e>
 801f366:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f36a:	4293      	cmp	r3, r2
 801f36c:	d803      	bhi.n	801f376 <__any_on+0x36>
 801f36e:	2000      	movs	r0, #0
 801f370:	bd10      	pop	{r4, pc}
 801f372:	4603      	mov	r3, r0
 801f374:	e7f7      	b.n	801f366 <__any_on+0x26>
 801f376:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f37a:	2900      	cmp	r1, #0
 801f37c:	d0f5      	beq.n	801f36a <__any_on+0x2a>
 801f37e:	2001      	movs	r0, #1
 801f380:	e7f6      	b.n	801f370 <__any_on+0x30>

0801f382 <sulp>:
 801f382:	b570      	push	{r4, r5, r6, lr}
 801f384:	4604      	mov	r4, r0
 801f386:	460d      	mov	r5, r1
 801f388:	4616      	mov	r6, r2
 801f38a:	ec45 4b10 	vmov	d0, r4, r5
 801f38e:	f7ff feb3 	bl	801f0f8 <__ulp>
 801f392:	ec51 0b10 	vmov	r0, r1, d0
 801f396:	b17e      	cbz	r6, 801f3b8 <sulp+0x36>
 801f398:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f39c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	dd09      	ble.n	801f3b8 <sulp+0x36>
 801f3a4:	051b      	lsls	r3, r3, #20
 801f3a6:	2400      	movs	r4, #0
 801f3a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f3ac:	4622      	mov	r2, r4
 801f3ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f3b2:	462b      	mov	r3, r5
 801f3b4:	f7e1 f924 	bl	8000600 <__aeabi_dmul>
 801f3b8:	bd70      	pop	{r4, r5, r6, pc}
 801f3ba:	0000      	movs	r0, r0
 801f3bc:	0000      	movs	r0, r0
	...

0801f3c0 <_strtod_l>:
 801f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3c4:	ed2d 8b02 	vpush	{d8}
 801f3c8:	b09b      	sub	sp, #108	; 0x6c
 801f3ca:	4604      	mov	r4, r0
 801f3cc:	460d      	mov	r5, r1
 801f3ce:	f04f 0800 	mov.w	r8, #0
 801f3d2:	9213      	str	r2, [sp, #76]	; 0x4c
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	f04f 0900 	mov.w	r9, #0
 801f3da:	9216      	str	r2, [sp, #88]	; 0x58
 801f3dc:	460a      	mov	r2, r1
 801f3de:	9215      	str	r2, [sp, #84]	; 0x54
 801f3e0:	7811      	ldrb	r1, [r2, #0]
 801f3e2:	292b      	cmp	r1, #43	; 0x2b
 801f3e4:	d04c      	beq.n	801f480 <_strtod_l+0xc0>
 801f3e6:	d83a      	bhi.n	801f45e <_strtod_l+0x9e>
 801f3e8:	290d      	cmp	r1, #13
 801f3ea:	d834      	bhi.n	801f456 <_strtod_l+0x96>
 801f3ec:	2908      	cmp	r1, #8
 801f3ee:	d834      	bhi.n	801f45a <_strtod_l+0x9a>
 801f3f0:	2900      	cmp	r1, #0
 801f3f2:	d03d      	beq.n	801f470 <_strtod_l+0xb0>
 801f3f4:	2200      	movs	r2, #0
 801f3f6:	920a      	str	r2, [sp, #40]	; 0x28
 801f3f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f3fa:	7832      	ldrb	r2, [r6, #0]
 801f3fc:	2a30      	cmp	r2, #48	; 0x30
 801f3fe:	f040 80b4 	bne.w	801f56a <_strtod_l+0x1aa>
 801f402:	7872      	ldrb	r2, [r6, #1]
 801f404:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801f408:	2a58      	cmp	r2, #88	; 0x58
 801f40a:	d170      	bne.n	801f4ee <_strtod_l+0x12e>
 801f40c:	9302      	str	r3, [sp, #8]
 801f40e:	a915      	add	r1, sp, #84	; 0x54
 801f410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f412:	4620      	mov	r0, r4
 801f414:	4a8e      	ldr	r2, [pc, #568]	; (801f650 <_strtod_l+0x290>)
 801f416:	9301      	str	r3, [sp, #4]
 801f418:	ab16      	add	r3, sp, #88	; 0x58
 801f41a:	9300      	str	r3, [sp, #0]
 801f41c:	ab17      	add	r3, sp, #92	; 0x5c
 801f41e:	f001 fc01 	bl	8020c24 <__gethex>
 801f422:	f010 070f 	ands.w	r7, r0, #15
 801f426:	4605      	mov	r5, r0
 801f428:	d005      	beq.n	801f436 <_strtod_l+0x76>
 801f42a:	2f06      	cmp	r7, #6
 801f42c:	d12a      	bne.n	801f484 <_strtod_l+0xc4>
 801f42e:	3601      	adds	r6, #1
 801f430:	2300      	movs	r3, #0
 801f432:	9615      	str	r6, [sp, #84]	; 0x54
 801f434:	930a      	str	r3, [sp, #40]	; 0x28
 801f436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f438:	2b00      	cmp	r3, #0
 801f43a:	f040 8581 	bne.w	801ff40 <_strtod_l+0xb80>
 801f43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f440:	b1db      	cbz	r3, 801f47a <_strtod_l+0xba>
 801f442:	4642      	mov	r2, r8
 801f444:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801f448:	ec43 2b10 	vmov	d0, r2, r3
 801f44c:	b01b      	add	sp, #108	; 0x6c
 801f44e:	ecbd 8b02 	vpop	{d8}
 801f452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f456:	2920      	cmp	r1, #32
 801f458:	d1cc      	bne.n	801f3f4 <_strtod_l+0x34>
 801f45a:	3201      	adds	r2, #1
 801f45c:	e7bf      	b.n	801f3de <_strtod_l+0x1e>
 801f45e:	292d      	cmp	r1, #45	; 0x2d
 801f460:	d1c8      	bne.n	801f3f4 <_strtod_l+0x34>
 801f462:	2101      	movs	r1, #1
 801f464:	910a      	str	r1, [sp, #40]	; 0x28
 801f466:	1c51      	adds	r1, r2, #1
 801f468:	9115      	str	r1, [sp, #84]	; 0x54
 801f46a:	7852      	ldrb	r2, [r2, #1]
 801f46c:	2a00      	cmp	r2, #0
 801f46e:	d1c3      	bne.n	801f3f8 <_strtod_l+0x38>
 801f470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f472:	9515      	str	r5, [sp, #84]	; 0x54
 801f474:	2b00      	cmp	r3, #0
 801f476:	f040 8561 	bne.w	801ff3c <_strtod_l+0xb7c>
 801f47a:	4642      	mov	r2, r8
 801f47c:	464b      	mov	r3, r9
 801f47e:	e7e3      	b.n	801f448 <_strtod_l+0x88>
 801f480:	2100      	movs	r1, #0
 801f482:	e7ef      	b.n	801f464 <_strtod_l+0xa4>
 801f484:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f486:	b13a      	cbz	r2, 801f498 <_strtod_l+0xd8>
 801f488:	2135      	movs	r1, #53	; 0x35
 801f48a:	a818      	add	r0, sp, #96	; 0x60
 801f48c:	f7ff ff35 	bl	801f2fa <__copybits>
 801f490:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f492:	4620      	mov	r0, r4
 801f494:	f7ff fafc 	bl	801ea90 <_Bfree>
 801f498:	3f01      	subs	r7, #1
 801f49a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f49c:	2f04      	cmp	r7, #4
 801f49e:	d806      	bhi.n	801f4ae <_strtod_l+0xee>
 801f4a0:	e8df f007 	tbb	[pc, r7]
 801f4a4:	201d0314 	.word	0x201d0314
 801f4a8:	14          	.byte	0x14
 801f4a9:	00          	.byte	0x00
 801f4aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801f4ae:	05e9      	lsls	r1, r5, #23
 801f4b0:	bf48      	it	mi
 801f4b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801f4b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f4ba:	0d1b      	lsrs	r3, r3, #20
 801f4bc:	051b      	lsls	r3, r3, #20
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d1b9      	bne.n	801f436 <_strtod_l+0x76>
 801f4c2:	f7fe fad5 	bl	801da70 <__errno>
 801f4c6:	2322      	movs	r3, #34	; 0x22
 801f4c8:	6003      	str	r3, [r0, #0]
 801f4ca:	e7b4      	b.n	801f436 <_strtod_l+0x76>
 801f4cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801f4d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f4d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f4d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801f4dc:	e7e7      	b.n	801f4ae <_strtod_l+0xee>
 801f4de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801f658 <_strtod_l+0x298>
 801f4e2:	e7e4      	b.n	801f4ae <_strtod_l+0xee>
 801f4e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801f4e8:	f04f 38ff 	mov.w	r8, #4294967295
 801f4ec:	e7df      	b.n	801f4ae <_strtod_l+0xee>
 801f4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f4f0:	1c5a      	adds	r2, r3, #1
 801f4f2:	9215      	str	r2, [sp, #84]	; 0x54
 801f4f4:	785b      	ldrb	r3, [r3, #1]
 801f4f6:	2b30      	cmp	r3, #48	; 0x30
 801f4f8:	d0f9      	beq.n	801f4ee <_strtod_l+0x12e>
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d09b      	beq.n	801f436 <_strtod_l+0x76>
 801f4fe:	2301      	movs	r3, #1
 801f500:	f04f 0a00 	mov.w	sl, #0
 801f504:	9304      	str	r3, [sp, #16]
 801f506:	220a      	movs	r2, #10
 801f508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f50a:	46d3      	mov	fp, sl
 801f50c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801f510:	930b      	str	r3, [sp, #44]	; 0x2c
 801f512:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f514:	7806      	ldrb	r6, [r0, #0]
 801f516:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f51a:	b2d9      	uxtb	r1, r3
 801f51c:	2909      	cmp	r1, #9
 801f51e:	d926      	bls.n	801f56e <_strtod_l+0x1ae>
 801f520:	2201      	movs	r2, #1
 801f522:	494c      	ldr	r1, [pc, #304]	; (801f654 <_strtod_l+0x294>)
 801f524:	f7fe fa47 	bl	801d9b6 <strncmp>
 801f528:	2800      	cmp	r0, #0
 801f52a:	d030      	beq.n	801f58e <_strtod_l+0x1ce>
 801f52c:	2000      	movs	r0, #0
 801f52e:	4632      	mov	r2, r6
 801f530:	465e      	mov	r6, fp
 801f532:	4603      	mov	r3, r0
 801f534:	9005      	str	r0, [sp, #20]
 801f536:	2a65      	cmp	r2, #101	; 0x65
 801f538:	d001      	beq.n	801f53e <_strtod_l+0x17e>
 801f53a:	2a45      	cmp	r2, #69	; 0x45
 801f53c:	d113      	bne.n	801f566 <_strtod_l+0x1a6>
 801f53e:	b91e      	cbnz	r6, 801f548 <_strtod_l+0x188>
 801f540:	9a04      	ldr	r2, [sp, #16]
 801f542:	4302      	orrs	r2, r0
 801f544:	d094      	beq.n	801f470 <_strtod_l+0xb0>
 801f546:	2600      	movs	r6, #0
 801f548:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f54a:	1c6a      	adds	r2, r5, #1
 801f54c:	9215      	str	r2, [sp, #84]	; 0x54
 801f54e:	786a      	ldrb	r2, [r5, #1]
 801f550:	2a2b      	cmp	r2, #43	; 0x2b
 801f552:	d073      	beq.n	801f63c <_strtod_l+0x27c>
 801f554:	2a2d      	cmp	r2, #45	; 0x2d
 801f556:	d077      	beq.n	801f648 <_strtod_l+0x288>
 801f558:	f04f 0c00 	mov.w	ip, #0
 801f55c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801f560:	2909      	cmp	r1, #9
 801f562:	d97f      	bls.n	801f664 <_strtod_l+0x2a4>
 801f564:	9515      	str	r5, [sp, #84]	; 0x54
 801f566:	2700      	movs	r7, #0
 801f568:	e09e      	b.n	801f6a8 <_strtod_l+0x2e8>
 801f56a:	2300      	movs	r3, #0
 801f56c:	e7c8      	b.n	801f500 <_strtod_l+0x140>
 801f56e:	f1bb 0f08 	cmp.w	fp, #8
 801f572:	f100 0001 	add.w	r0, r0, #1
 801f576:	f10b 0b01 	add.w	fp, fp, #1
 801f57a:	bfd4      	ite	le
 801f57c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801f57e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801f582:	9015      	str	r0, [sp, #84]	; 0x54
 801f584:	bfdc      	itt	le
 801f586:	fb02 3301 	mlale	r3, r2, r1, r3
 801f58a:	9309      	strle	r3, [sp, #36]	; 0x24
 801f58c:	e7c1      	b.n	801f512 <_strtod_l+0x152>
 801f58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f590:	1c5a      	adds	r2, r3, #1
 801f592:	9215      	str	r2, [sp, #84]	; 0x54
 801f594:	785a      	ldrb	r2, [r3, #1]
 801f596:	f1bb 0f00 	cmp.w	fp, #0
 801f59a:	d036      	beq.n	801f60a <_strtod_l+0x24a>
 801f59c:	465e      	mov	r6, fp
 801f59e:	9005      	str	r0, [sp, #20]
 801f5a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801f5a4:	2b09      	cmp	r3, #9
 801f5a6:	d912      	bls.n	801f5ce <_strtod_l+0x20e>
 801f5a8:	2301      	movs	r3, #1
 801f5aa:	e7c4      	b.n	801f536 <_strtod_l+0x176>
 801f5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5ae:	3001      	adds	r0, #1
 801f5b0:	1c5a      	adds	r2, r3, #1
 801f5b2:	9215      	str	r2, [sp, #84]	; 0x54
 801f5b4:	785a      	ldrb	r2, [r3, #1]
 801f5b6:	2a30      	cmp	r2, #48	; 0x30
 801f5b8:	d0f8      	beq.n	801f5ac <_strtod_l+0x1ec>
 801f5ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801f5be:	2b08      	cmp	r3, #8
 801f5c0:	f200 84c3 	bhi.w	801ff4a <_strtod_l+0xb8a>
 801f5c4:	9005      	str	r0, [sp, #20]
 801f5c6:	2000      	movs	r0, #0
 801f5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5ca:	4606      	mov	r6, r0
 801f5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5ce:	3a30      	subs	r2, #48	; 0x30
 801f5d0:	f100 0301 	add.w	r3, r0, #1
 801f5d4:	d013      	beq.n	801f5fe <_strtod_l+0x23e>
 801f5d6:	9905      	ldr	r1, [sp, #20]
 801f5d8:	eb00 0c06 	add.w	ip, r0, r6
 801f5dc:	4419      	add	r1, r3
 801f5de:	4633      	mov	r3, r6
 801f5e0:	9105      	str	r1, [sp, #20]
 801f5e2:	210a      	movs	r1, #10
 801f5e4:	4563      	cmp	r3, ip
 801f5e6:	d112      	bne.n	801f60e <_strtod_l+0x24e>
 801f5e8:	1833      	adds	r3, r6, r0
 801f5ea:	3601      	adds	r6, #1
 801f5ec:	2b08      	cmp	r3, #8
 801f5ee:	4406      	add	r6, r0
 801f5f0:	dc1a      	bgt.n	801f628 <_strtod_l+0x268>
 801f5f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f5f4:	230a      	movs	r3, #10
 801f5f6:	fb03 2301 	mla	r3, r3, r1, r2
 801f5fa:	9309      	str	r3, [sp, #36]	; 0x24
 801f5fc:	2300      	movs	r3, #0
 801f5fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f600:	4618      	mov	r0, r3
 801f602:	1c51      	adds	r1, r2, #1
 801f604:	9115      	str	r1, [sp, #84]	; 0x54
 801f606:	7852      	ldrb	r2, [r2, #1]
 801f608:	e7ca      	b.n	801f5a0 <_strtod_l+0x1e0>
 801f60a:	4658      	mov	r0, fp
 801f60c:	e7d3      	b.n	801f5b6 <_strtod_l+0x1f6>
 801f60e:	2b08      	cmp	r3, #8
 801f610:	f103 0301 	add.w	r3, r3, #1
 801f614:	dc03      	bgt.n	801f61e <_strtod_l+0x25e>
 801f616:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f618:	434f      	muls	r7, r1
 801f61a:	9709      	str	r7, [sp, #36]	; 0x24
 801f61c:	e7e2      	b.n	801f5e4 <_strtod_l+0x224>
 801f61e:	2b10      	cmp	r3, #16
 801f620:	bfd8      	it	le
 801f622:	fb01 fa0a 	mulle.w	sl, r1, sl
 801f626:	e7dd      	b.n	801f5e4 <_strtod_l+0x224>
 801f628:	2e10      	cmp	r6, #16
 801f62a:	bfdc      	itt	le
 801f62c:	230a      	movle	r3, #10
 801f62e:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801f632:	e7e3      	b.n	801f5fc <_strtod_l+0x23c>
 801f634:	2300      	movs	r3, #0
 801f636:	9305      	str	r3, [sp, #20]
 801f638:	2301      	movs	r3, #1
 801f63a:	e781      	b.n	801f540 <_strtod_l+0x180>
 801f63c:	f04f 0c00 	mov.w	ip, #0
 801f640:	1caa      	adds	r2, r5, #2
 801f642:	9215      	str	r2, [sp, #84]	; 0x54
 801f644:	78aa      	ldrb	r2, [r5, #2]
 801f646:	e789      	b.n	801f55c <_strtod_l+0x19c>
 801f648:	f04f 0c01 	mov.w	ip, #1
 801f64c:	e7f8      	b.n	801f640 <_strtod_l+0x280>
 801f64e:	bf00      	nop
 801f650:	08023be0 	.word	0x08023be0
 801f654:	08023bdc 	.word	0x08023bdc
 801f658:	7ff00000 	.word	0x7ff00000
 801f65c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f65e:	1c51      	adds	r1, r2, #1
 801f660:	9115      	str	r1, [sp, #84]	; 0x54
 801f662:	7852      	ldrb	r2, [r2, #1]
 801f664:	2a30      	cmp	r2, #48	; 0x30
 801f666:	d0f9      	beq.n	801f65c <_strtod_l+0x29c>
 801f668:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801f66c:	2908      	cmp	r1, #8
 801f66e:	f63f af7a 	bhi.w	801f566 <_strtod_l+0x1a6>
 801f672:	3a30      	subs	r2, #48	; 0x30
 801f674:	9208      	str	r2, [sp, #32]
 801f676:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f678:	920c      	str	r2, [sp, #48]	; 0x30
 801f67a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f67c:	1c57      	adds	r7, r2, #1
 801f67e:	9715      	str	r7, [sp, #84]	; 0x54
 801f680:	7852      	ldrb	r2, [r2, #1]
 801f682:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801f686:	f1be 0f09 	cmp.w	lr, #9
 801f68a:	d938      	bls.n	801f6fe <_strtod_l+0x33e>
 801f68c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f68e:	1a7f      	subs	r7, r7, r1
 801f690:	2f08      	cmp	r7, #8
 801f692:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801f696:	dc03      	bgt.n	801f6a0 <_strtod_l+0x2e0>
 801f698:	9908      	ldr	r1, [sp, #32]
 801f69a:	428f      	cmp	r7, r1
 801f69c:	bfa8      	it	ge
 801f69e:	460f      	movge	r7, r1
 801f6a0:	f1bc 0f00 	cmp.w	ip, #0
 801f6a4:	d000      	beq.n	801f6a8 <_strtod_l+0x2e8>
 801f6a6:	427f      	negs	r7, r7
 801f6a8:	2e00      	cmp	r6, #0
 801f6aa:	d14f      	bne.n	801f74c <_strtod_l+0x38c>
 801f6ac:	9904      	ldr	r1, [sp, #16]
 801f6ae:	4301      	orrs	r1, r0
 801f6b0:	f47f aec1 	bne.w	801f436 <_strtod_l+0x76>
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	f47f aedb 	bne.w	801f470 <_strtod_l+0xb0>
 801f6ba:	2a69      	cmp	r2, #105	; 0x69
 801f6bc:	d029      	beq.n	801f712 <_strtod_l+0x352>
 801f6be:	dc26      	bgt.n	801f70e <_strtod_l+0x34e>
 801f6c0:	2a49      	cmp	r2, #73	; 0x49
 801f6c2:	d026      	beq.n	801f712 <_strtod_l+0x352>
 801f6c4:	2a4e      	cmp	r2, #78	; 0x4e
 801f6c6:	f47f aed3 	bne.w	801f470 <_strtod_l+0xb0>
 801f6ca:	499c      	ldr	r1, [pc, #624]	; (801f93c <_strtod_l+0x57c>)
 801f6cc:	a815      	add	r0, sp, #84	; 0x54
 801f6ce:	f001 fce9 	bl	80210a4 <__match>
 801f6d2:	2800      	cmp	r0, #0
 801f6d4:	f43f aecc 	beq.w	801f470 <_strtod_l+0xb0>
 801f6d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6da:	781b      	ldrb	r3, [r3, #0]
 801f6dc:	2b28      	cmp	r3, #40	; 0x28
 801f6de:	d12f      	bne.n	801f740 <_strtod_l+0x380>
 801f6e0:	aa18      	add	r2, sp, #96	; 0x60
 801f6e2:	4997      	ldr	r1, [pc, #604]	; (801f940 <_strtod_l+0x580>)
 801f6e4:	a815      	add	r0, sp, #84	; 0x54
 801f6e6:	f001 fcf1 	bl	80210cc <__hexnan>
 801f6ea:	2805      	cmp	r0, #5
 801f6ec:	d128      	bne.n	801f740 <_strtod_l+0x380>
 801f6ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f6f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f6f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801f6f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801f6fc:	e69b      	b.n	801f436 <_strtod_l+0x76>
 801f6fe:	9f08      	ldr	r7, [sp, #32]
 801f700:	210a      	movs	r1, #10
 801f702:	fb01 2107 	mla	r1, r1, r7, r2
 801f706:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801f70a:	9208      	str	r2, [sp, #32]
 801f70c:	e7b5      	b.n	801f67a <_strtod_l+0x2ba>
 801f70e:	2a6e      	cmp	r2, #110	; 0x6e
 801f710:	e7d9      	b.n	801f6c6 <_strtod_l+0x306>
 801f712:	498c      	ldr	r1, [pc, #560]	; (801f944 <_strtod_l+0x584>)
 801f714:	a815      	add	r0, sp, #84	; 0x54
 801f716:	f001 fcc5 	bl	80210a4 <__match>
 801f71a:	2800      	cmp	r0, #0
 801f71c:	f43f aea8 	beq.w	801f470 <_strtod_l+0xb0>
 801f720:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f722:	a815      	add	r0, sp, #84	; 0x54
 801f724:	4988      	ldr	r1, [pc, #544]	; (801f948 <_strtod_l+0x588>)
 801f726:	3b01      	subs	r3, #1
 801f728:	9315      	str	r3, [sp, #84]	; 0x54
 801f72a:	f001 fcbb 	bl	80210a4 <__match>
 801f72e:	b910      	cbnz	r0, 801f736 <_strtod_l+0x376>
 801f730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f732:	3301      	adds	r3, #1
 801f734:	9315      	str	r3, [sp, #84]	; 0x54
 801f736:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801f958 <_strtod_l+0x598>
 801f73a:	f04f 0800 	mov.w	r8, #0
 801f73e:	e67a      	b.n	801f436 <_strtod_l+0x76>
 801f740:	4882      	ldr	r0, [pc, #520]	; (801f94c <_strtod_l+0x58c>)
 801f742:	f001 f9cd 	bl	8020ae0 <nan>
 801f746:	ec59 8b10 	vmov	r8, r9, d0
 801f74a:	e674      	b.n	801f436 <_strtod_l+0x76>
 801f74c:	9b05      	ldr	r3, [sp, #20]
 801f74e:	f1bb 0f00 	cmp.w	fp, #0
 801f752:	bf08      	it	eq
 801f754:	46b3      	moveq	fp, r6
 801f756:	2e10      	cmp	r6, #16
 801f758:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f75a:	eba7 0303 	sub.w	r3, r7, r3
 801f75e:	4635      	mov	r5, r6
 801f760:	bfa8      	it	ge
 801f762:	2510      	movge	r5, #16
 801f764:	9308      	str	r3, [sp, #32]
 801f766:	f7e0 fed1 	bl	800050c <__aeabi_ui2d>
 801f76a:	2e09      	cmp	r6, #9
 801f76c:	4680      	mov	r8, r0
 801f76e:	4689      	mov	r9, r1
 801f770:	dd13      	ble.n	801f79a <_strtod_l+0x3da>
 801f772:	4b77      	ldr	r3, [pc, #476]	; (801f950 <_strtod_l+0x590>)
 801f774:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f778:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f77c:	f7e0 ff40 	bl	8000600 <__aeabi_dmul>
 801f780:	4680      	mov	r8, r0
 801f782:	4689      	mov	r9, r1
 801f784:	4650      	mov	r0, sl
 801f786:	f7e0 fec1 	bl	800050c <__aeabi_ui2d>
 801f78a:	4602      	mov	r2, r0
 801f78c:	460b      	mov	r3, r1
 801f78e:	4640      	mov	r0, r8
 801f790:	4649      	mov	r1, r9
 801f792:	f7e0 fd7f 	bl	8000294 <__adddf3>
 801f796:	4680      	mov	r8, r0
 801f798:	4689      	mov	r9, r1
 801f79a:	2e0f      	cmp	r6, #15
 801f79c:	dc38      	bgt.n	801f810 <_strtod_l+0x450>
 801f79e:	9b08      	ldr	r3, [sp, #32]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	f43f ae48 	beq.w	801f436 <_strtod_l+0x76>
 801f7a6:	dd24      	ble.n	801f7f2 <_strtod_l+0x432>
 801f7a8:	2b16      	cmp	r3, #22
 801f7aa:	dc0b      	bgt.n	801f7c4 <_strtod_l+0x404>
 801f7ac:	4968      	ldr	r1, [pc, #416]	; (801f950 <_strtod_l+0x590>)
 801f7ae:	4642      	mov	r2, r8
 801f7b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f7b4:	464b      	mov	r3, r9
 801f7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7ba:	f7e0 ff21 	bl	8000600 <__aeabi_dmul>
 801f7be:	4680      	mov	r8, r0
 801f7c0:	4689      	mov	r9, r1
 801f7c2:	e638      	b.n	801f436 <_strtod_l+0x76>
 801f7c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801f7c8:	9a08      	ldr	r2, [sp, #32]
 801f7ca:	4293      	cmp	r3, r2
 801f7cc:	db20      	blt.n	801f810 <_strtod_l+0x450>
 801f7ce:	f1c6 060f 	rsb	r6, r6, #15
 801f7d2:	4c5f      	ldr	r4, [pc, #380]	; (801f950 <_strtod_l+0x590>)
 801f7d4:	4642      	mov	r2, r8
 801f7d6:	464b      	mov	r3, r9
 801f7d8:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801f7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7e0:	f7e0 ff0e 	bl	8000600 <__aeabi_dmul>
 801f7e4:	9b08      	ldr	r3, [sp, #32]
 801f7e6:	1b9e      	subs	r6, r3, r6
 801f7e8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801f7ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f7f0:	e7e3      	b.n	801f7ba <_strtod_l+0x3fa>
 801f7f2:	9b08      	ldr	r3, [sp, #32]
 801f7f4:	3316      	adds	r3, #22
 801f7f6:	db0b      	blt.n	801f810 <_strtod_l+0x450>
 801f7f8:	9b05      	ldr	r3, [sp, #20]
 801f7fa:	4640      	mov	r0, r8
 801f7fc:	4649      	mov	r1, r9
 801f7fe:	1bdf      	subs	r7, r3, r7
 801f800:	4b53      	ldr	r3, [pc, #332]	; (801f950 <_strtod_l+0x590>)
 801f802:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801f806:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f80a:	f7e1 f823 	bl	8000854 <__aeabi_ddiv>
 801f80e:	e7d6      	b.n	801f7be <_strtod_l+0x3fe>
 801f810:	1b75      	subs	r5, r6, r5
 801f812:	9b08      	ldr	r3, [sp, #32]
 801f814:	441d      	add	r5, r3
 801f816:	2d00      	cmp	r5, #0
 801f818:	dd70      	ble.n	801f8fc <_strtod_l+0x53c>
 801f81a:	f015 030f 	ands.w	r3, r5, #15
 801f81e:	d00a      	beq.n	801f836 <_strtod_l+0x476>
 801f820:	494b      	ldr	r1, [pc, #300]	; (801f950 <_strtod_l+0x590>)
 801f822:	4642      	mov	r2, r8
 801f824:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f828:	464b      	mov	r3, r9
 801f82a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f82e:	f7e0 fee7 	bl	8000600 <__aeabi_dmul>
 801f832:	4680      	mov	r8, r0
 801f834:	4689      	mov	r9, r1
 801f836:	f035 050f 	bics.w	r5, r5, #15
 801f83a:	d04d      	beq.n	801f8d8 <_strtod_l+0x518>
 801f83c:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801f840:	dd22      	ble.n	801f888 <_strtod_l+0x4c8>
 801f842:	2500      	movs	r5, #0
 801f844:	46ab      	mov	fp, r5
 801f846:	9509      	str	r5, [sp, #36]	; 0x24
 801f848:	9505      	str	r5, [sp, #20]
 801f84a:	2322      	movs	r3, #34	; 0x22
 801f84c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801f958 <_strtod_l+0x598>
 801f850:	f04f 0800 	mov.w	r8, #0
 801f854:	6023      	str	r3, [r4, #0]
 801f856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f858:	2b00      	cmp	r3, #0
 801f85a:	f43f adec 	beq.w	801f436 <_strtod_l+0x76>
 801f85e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f860:	4620      	mov	r0, r4
 801f862:	f7ff f915 	bl	801ea90 <_Bfree>
 801f866:	9905      	ldr	r1, [sp, #20]
 801f868:	4620      	mov	r0, r4
 801f86a:	f7ff f911 	bl	801ea90 <_Bfree>
 801f86e:	4659      	mov	r1, fp
 801f870:	4620      	mov	r0, r4
 801f872:	f7ff f90d 	bl	801ea90 <_Bfree>
 801f876:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f878:	4620      	mov	r0, r4
 801f87a:	f7ff f909 	bl	801ea90 <_Bfree>
 801f87e:	4629      	mov	r1, r5
 801f880:	4620      	mov	r0, r4
 801f882:	f7ff f905 	bl	801ea90 <_Bfree>
 801f886:	e5d6      	b.n	801f436 <_strtod_l+0x76>
 801f888:	4b32      	ldr	r3, [pc, #200]	; (801f954 <_strtod_l+0x594>)
 801f88a:	112d      	asrs	r5, r5, #4
 801f88c:	4640      	mov	r0, r8
 801f88e:	4649      	mov	r1, r9
 801f890:	9304      	str	r3, [sp, #16]
 801f892:	2300      	movs	r3, #0
 801f894:	469a      	mov	sl, r3
 801f896:	2d01      	cmp	r5, #1
 801f898:	dc21      	bgt.n	801f8de <_strtod_l+0x51e>
 801f89a:	b10b      	cbz	r3, 801f8a0 <_strtod_l+0x4e0>
 801f89c:	4680      	mov	r8, r0
 801f89e:	4689      	mov	r9, r1
 801f8a0:	492c      	ldr	r1, [pc, #176]	; (801f954 <_strtod_l+0x594>)
 801f8a2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801f8a6:	4642      	mov	r2, r8
 801f8a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801f8ac:	464b      	mov	r3, r9
 801f8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f8b2:	f7e0 fea5 	bl	8000600 <__aeabi_dmul>
 801f8b6:	4b28      	ldr	r3, [pc, #160]	; (801f958 <_strtod_l+0x598>)
 801f8b8:	460a      	mov	r2, r1
 801f8ba:	4680      	mov	r8, r0
 801f8bc:	400b      	ands	r3, r1
 801f8be:	4927      	ldr	r1, [pc, #156]	; (801f95c <_strtod_l+0x59c>)
 801f8c0:	428b      	cmp	r3, r1
 801f8c2:	d8be      	bhi.n	801f842 <_strtod_l+0x482>
 801f8c4:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801f8c8:	428b      	cmp	r3, r1
 801f8ca:	bf86      	itte	hi
 801f8cc:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801f960 <_strtod_l+0x5a0>
 801f8d0:	f04f 38ff 	movhi.w	r8, #4294967295
 801f8d4:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801f8d8:	2300      	movs	r3, #0
 801f8da:	9304      	str	r3, [sp, #16]
 801f8dc:	e07c      	b.n	801f9d8 <_strtod_l+0x618>
 801f8de:	07ea      	lsls	r2, r5, #31
 801f8e0:	d505      	bpl.n	801f8ee <_strtod_l+0x52e>
 801f8e2:	9b04      	ldr	r3, [sp, #16]
 801f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8e8:	f7e0 fe8a 	bl	8000600 <__aeabi_dmul>
 801f8ec:	2301      	movs	r3, #1
 801f8ee:	9a04      	ldr	r2, [sp, #16]
 801f8f0:	f10a 0a01 	add.w	sl, sl, #1
 801f8f4:	106d      	asrs	r5, r5, #1
 801f8f6:	3208      	adds	r2, #8
 801f8f8:	9204      	str	r2, [sp, #16]
 801f8fa:	e7cc      	b.n	801f896 <_strtod_l+0x4d6>
 801f8fc:	d0ec      	beq.n	801f8d8 <_strtod_l+0x518>
 801f8fe:	426d      	negs	r5, r5
 801f900:	f015 020f 	ands.w	r2, r5, #15
 801f904:	d00a      	beq.n	801f91c <_strtod_l+0x55c>
 801f906:	4b12      	ldr	r3, [pc, #72]	; (801f950 <_strtod_l+0x590>)
 801f908:	4640      	mov	r0, r8
 801f90a:	4649      	mov	r1, r9
 801f90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f914:	f7e0 ff9e 	bl	8000854 <__aeabi_ddiv>
 801f918:	4680      	mov	r8, r0
 801f91a:	4689      	mov	r9, r1
 801f91c:	112d      	asrs	r5, r5, #4
 801f91e:	d0db      	beq.n	801f8d8 <_strtod_l+0x518>
 801f920:	2d1f      	cmp	r5, #31
 801f922:	dd1f      	ble.n	801f964 <_strtod_l+0x5a4>
 801f924:	2500      	movs	r5, #0
 801f926:	46ab      	mov	fp, r5
 801f928:	9509      	str	r5, [sp, #36]	; 0x24
 801f92a:	9505      	str	r5, [sp, #20]
 801f92c:	2322      	movs	r3, #34	; 0x22
 801f92e:	f04f 0800 	mov.w	r8, #0
 801f932:	f04f 0900 	mov.w	r9, #0
 801f936:	6023      	str	r3, [r4, #0]
 801f938:	e78d      	b.n	801f856 <_strtod_l+0x496>
 801f93a:	bf00      	nop
 801f93c:	080239cf 	.word	0x080239cf
 801f940:	08023bf4 	.word	0x08023bf4
 801f944:	080239c7 	.word	0x080239c7
 801f948:	080239fc 	.word	0x080239fc
 801f94c:	08023da0 	.word	0x08023da0
 801f950:	08023b08 	.word	0x08023b08
 801f954:	08023ae0 	.word	0x08023ae0
 801f958:	7ff00000 	.word	0x7ff00000
 801f95c:	7ca00000 	.word	0x7ca00000
 801f960:	7fefffff 	.word	0x7fefffff
 801f964:	f015 0310 	ands.w	r3, r5, #16
 801f968:	4640      	mov	r0, r8
 801f96a:	4649      	mov	r1, r9
 801f96c:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801fd10 <_strtod_l+0x950>
 801f970:	bf18      	it	ne
 801f972:	236a      	movne	r3, #106	; 0x6a
 801f974:	9304      	str	r3, [sp, #16]
 801f976:	2300      	movs	r3, #0
 801f978:	07ea      	lsls	r2, r5, #31
 801f97a:	d504      	bpl.n	801f986 <_strtod_l+0x5c6>
 801f97c:	e9da 2300 	ldrd	r2, r3, [sl]
 801f980:	f7e0 fe3e 	bl	8000600 <__aeabi_dmul>
 801f984:	2301      	movs	r3, #1
 801f986:	106d      	asrs	r5, r5, #1
 801f988:	f10a 0a08 	add.w	sl, sl, #8
 801f98c:	d1f4      	bne.n	801f978 <_strtod_l+0x5b8>
 801f98e:	b10b      	cbz	r3, 801f994 <_strtod_l+0x5d4>
 801f990:	4680      	mov	r8, r0
 801f992:	4689      	mov	r9, r1
 801f994:	9b04      	ldr	r3, [sp, #16]
 801f996:	b1bb      	cbz	r3, 801f9c8 <_strtod_l+0x608>
 801f998:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801f99c:	4649      	mov	r1, r9
 801f99e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	dd10      	ble.n	801f9c8 <_strtod_l+0x608>
 801f9a6:	2b1f      	cmp	r3, #31
 801f9a8:	f340 811e 	ble.w	801fbe8 <_strtod_l+0x828>
 801f9ac:	2b34      	cmp	r3, #52	; 0x34
 801f9ae:	f04f 0800 	mov.w	r8, #0
 801f9b2:	bfdb      	ittet	le
 801f9b4:	f04f 33ff 	movle.w	r3, #4294967295
 801f9b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801f9bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801f9c0:	4093      	lslle	r3, r2
 801f9c2:	bfd8      	it	le
 801f9c4:	ea03 0901 	andle.w	r9, r3, r1
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	2300      	movs	r3, #0
 801f9cc:	4640      	mov	r0, r8
 801f9ce:	4649      	mov	r1, r9
 801f9d0:	f7e1 f87e 	bl	8000ad0 <__aeabi_dcmpeq>
 801f9d4:	2800      	cmp	r0, #0
 801f9d6:	d1a5      	bne.n	801f924 <_strtod_l+0x564>
 801f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9da:	465a      	mov	r2, fp
 801f9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f9de:	4620      	mov	r0, r4
 801f9e0:	9300      	str	r3, [sp, #0]
 801f9e2:	4633      	mov	r3, r6
 801f9e4:	f7ff f8be 	bl	801eb64 <__s2b>
 801f9e8:	9009      	str	r0, [sp, #36]	; 0x24
 801f9ea:	2800      	cmp	r0, #0
 801f9ec:	f43f af29 	beq.w	801f842 <_strtod_l+0x482>
 801f9f0:	9a08      	ldr	r2, [sp, #32]
 801f9f2:	2500      	movs	r5, #0
 801f9f4:	9b05      	ldr	r3, [sp, #20]
 801f9f6:	2a00      	cmp	r2, #0
 801f9f8:	46ab      	mov	fp, r5
 801f9fa:	eba3 0307 	sub.w	r3, r3, r7
 801f9fe:	bfa8      	it	ge
 801fa00:	2300      	movge	r3, #0
 801fa02:	930c      	str	r3, [sp, #48]	; 0x30
 801fa04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801fa08:	9312      	str	r3, [sp, #72]	; 0x48
 801fa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa0c:	4620      	mov	r0, r4
 801fa0e:	6859      	ldr	r1, [r3, #4]
 801fa10:	f7fe fffe 	bl	801ea10 <_Balloc>
 801fa14:	9005      	str	r0, [sp, #20]
 801fa16:	2800      	cmp	r0, #0
 801fa18:	f43f af17 	beq.w	801f84a <_strtod_l+0x48a>
 801fa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa1e:	300c      	adds	r0, #12
 801fa20:	691a      	ldr	r2, [r3, #16]
 801fa22:	f103 010c 	add.w	r1, r3, #12
 801fa26:	3202      	adds	r2, #2
 801fa28:	0092      	lsls	r2, r2, #2
 801fa2a:	f7fe f85b 	bl	801dae4 <memcpy>
 801fa2e:	aa18      	add	r2, sp, #96	; 0x60
 801fa30:	a917      	add	r1, sp, #92	; 0x5c
 801fa32:	4620      	mov	r0, r4
 801fa34:	ec49 8b10 	vmov	d0, r8, r9
 801fa38:	f7ff fbd2 	bl	801f1e0 <__d2b>
 801fa3c:	9016      	str	r0, [sp, #88]	; 0x58
 801fa3e:	ec49 8b18 	vmov	d8, r8, r9
 801fa42:	2800      	cmp	r0, #0
 801fa44:	f43f af01 	beq.w	801f84a <_strtod_l+0x48a>
 801fa48:	2101      	movs	r1, #1
 801fa4a:	4620      	mov	r0, r4
 801fa4c:	f7ff f922 	bl	801ec94 <__i2b>
 801fa50:	4683      	mov	fp, r0
 801fa52:	2800      	cmp	r0, #0
 801fa54:	f43f aef9 	beq.w	801f84a <_strtod_l+0x48a>
 801fa58:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801fa5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fa5c:	2e00      	cmp	r6, #0
 801fa5e:	bfa9      	itett	ge
 801fa60:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801fa62:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801fa64:	eb06 0a03 	addge.w	sl, r6, r3
 801fa68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801fa6a:	bfb8      	it	lt
 801fa6c:	1b9f      	sublt	r7, r3, r6
 801fa6e:	9b04      	ldr	r3, [sp, #16]
 801fa70:	bfb8      	it	lt
 801fa72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801fa76:	1af6      	subs	r6, r6, r3
 801fa78:	4ba0      	ldr	r3, [pc, #640]	; (801fcfc <_strtod_l+0x93c>)
 801fa7a:	4416      	add	r6, r2
 801fa7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801fa80:	3e01      	subs	r6, #1
 801fa82:	429e      	cmp	r6, r3
 801fa84:	f280 80c3 	bge.w	801fc0e <_strtod_l+0x84e>
 801fa88:	1b9b      	subs	r3, r3, r6
 801fa8a:	2101      	movs	r1, #1
 801fa8c:	2b1f      	cmp	r3, #31
 801fa8e:	eba2 0203 	sub.w	r2, r2, r3
 801fa92:	f300 80b0 	bgt.w	801fbf6 <_strtod_l+0x836>
 801fa96:	fa01 f303 	lsl.w	r3, r1, r3
 801fa9a:	930e      	str	r3, [sp, #56]	; 0x38
 801fa9c:	2300      	movs	r3, #0
 801fa9e:	930d      	str	r3, [sp, #52]	; 0x34
 801faa0:	eb0a 0602 	add.w	r6, sl, r2
 801faa4:	9b04      	ldr	r3, [sp, #16]
 801faa6:	4417      	add	r7, r2
 801faa8:	45b2      	cmp	sl, r6
 801faaa:	441f      	add	r7, r3
 801faac:	4653      	mov	r3, sl
 801faae:	bfa8      	it	ge
 801fab0:	4633      	movge	r3, r6
 801fab2:	42bb      	cmp	r3, r7
 801fab4:	bfa8      	it	ge
 801fab6:	463b      	movge	r3, r7
 801fab8:	2b00      	cmp	r3, #0
 801faba:	bfc2      	ittt	gt
 801fabc:	1af6      	subgt	r6, r6, r3
 801fabe:	1aff      	subgt	r7, r7, r3
 801fac0:	ebaa 0a03 	subgt.w	sl, sl, r3
 801fac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	dd17      	ble.n	801fafa <_strtod_l+0x73a>
 801faca:	4659      	mov	r1, fp
 801facc:	461a      	mov	r2, r3
 801face:	4620      	mov	r0, r4
 801fad0:	f7ff f9a0 	bl	801ee14 <__pow5mult>
 801fad4:	4683      	mov	fp, r0
 801fad6:	2800      	cmp	r0, #0
 801fad8:	f43f aeb7 	beq.w	801f84a <_strtod_l+0x48a>
 801fadc:	4601      	mov	r1, r0
 801fade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fae0:	4620      	mov	r0, r4
 801fae2:	f7ff f8ed 	bl	801ecc0 <__multiply>
 801fae6:	900b      	str	r0, [sp, #44]	; 0x2c
 801fae8:	2800      	cmp	r0, #0
 801faea:	f43f aeae 	beq.w	801f84a <_strtod_l+0x48a>
 801faee:	9916      	ldr	r1, [sp, #88]	; 0x58
 801faf0:	4620      	mov	r0, r4
 801faf2:	f7fe ffcd 	bl	801ea90 <_Bfree>
 801faf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801faf8:	9316      	str	r3, [sp, #88]	; 0x58
 801fafa:	2e00      	cmp	r6, #0
 801fafc:	f300 808c 	bgt.w	801fc18 <_strtod_l+0x858>
 801fb00:	9b08      	ldr	r3, [sp, #32]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	dd08      	ble.n	801fb18 <_strtod_l+0x758>
 801fb06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb08:	4620      	mov	r0, r4
 801fb0a:	9905      	ldr	r1, [sp, #20]
 801fb0c:	f7ff f982 	bl	801ee14 <__pow5mult>
 801fb10:	9005      	str	r0, [sp, #20]
 801fb12:	2800      	cmp	r0, #0
 801fb14:	f43f ae99 	beq.w	801f84a <_strtod_l+0x48a>
 801fb18:	2f00      	cmp	r7, #0
 801fb1a:	dd08      	ble.n	801fb2e <_strtod_l+0x76e>
 801fb1c:	463a      	mov	r2, r7
 801fb1e:	9905      	ldr	r1, [sp, #20]
 801fb20:	4620      	mov	r0, r4
 801fb22:	f7ff f9d1 	bl	801eec8 <__lshift>
 801fb26:	9005      	str	r0, [sp, #20]
 801fb28:	2800      	cmp	r0, #0
 801fb2a:	f43f ae8e 	beq.w	801f84a <_strtod_l+0x48a>
 801fb2e:	f1ba 0f00 	cmp.w	sl, #0
 801fb32:	dd08      	ble.n	801fb46 <_strtod_l+0x786>
 801fb34:	4659      	mov	r1, fp
 801fb36:	4652      	mov	r2, sl
 801fb38:	4620      	mov	r0, r4
 801fb3a:	f7ff f9c5 	bl	801eec8 <__lshift>
 801fb3e:	4683      	mov	fp, r0
 801fb40:	2800      	cmp	r0, #0
 801fb42:	f43f ae82 	beq.w	801f84a <_strtod_l+0x48a>
 801fb46:	9a05      	ldr	r2, [sp, #20]
 801fb48:	4620      	mov	r0, r4
 801fb4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fb4c:	f7ff fa44 	bl	801efd8 <__mdiff>
 801fb50:	4605      	mov	r5, r0
 801fb52:	2800      	cmp	r0, #0
 801fb54:	f43f ae79 	beq.w	801f84a <_strtod_l+0x48a>
 801fb58:	68c3      	ldr	r3, [r0, #12]
 801fb5a:	4659      	mov	r1, fp
 801fb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb5e:	2300      	movs	r3, #0
 801fb60:	60c3      	str	r3, [r0, #12]
 801fb62:	f7ff fa1d 	bl	801efa0 <__mcmp>
 801fb66:	2800      	cmp	r0, #0
 801fb68:	da60      	bge.n	801fc2c <_strtod_l+0x86c>
 801fb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb6c:	ea53 0308 	orrs.w	r3, r3, r8
 801fb70:	f040 8084 	bne.w	801fc7c <_strtod_l+0x8bc>
 801fb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d17f      	bne.n	801fc7c <_strtod_l+0x8bc>
 801fb7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801fb80:	0d1b      	lsrs	r3, r3, #20
 801fb82:	051b      	lsls	r3, r3, #20
 801fb84:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fb88:	d978      	bls.n	801fc7c <_strtod_l+0x8bc>
 801fb8a:	696b      	ldr	r3, [r5, #20]
 801fb8c:	b913      	cbnz	r3, 801fb94 <_strtod_l+0x7d4>
 801fb8e:	692b      	ldr	r3, [r5, #16]
 801fb90:	2b01      	cmp	r3, #1
 801fb92:	dd73      	ble.n	801fc7c <_strtod_l+0x8bc>
 801fb94:	4629      	mov	r1, r5
 801fb96:	2201      	movs	r2, #1
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f7ff f995 	bl	801eec8 <__lshift>
 801fb9e:	4659      	mov	r1, fp
 801fba0:	4605      	mov	r5, r0
 801fba2:	f7ff f9fd 	bl	801efa0 <__mcmp>
 801fba6:	2800      	cmp	r0, #0
 801fba8:	dd68      	ble.n	801fc7c <_strtod_l+0x8bc>
 801fbaa:	9904      	ldr	r1, [sp, #16]
 801fbac:	464b      	mov	r3, r9
 801fbae:	4a54      	ldr	r2, [pc, #336]	; (801fd00 <_strtod_l+0x940>)
 801fbb0:	2900      	cmp	r1, #0
 801fbb2:	f000 8084 	beq.w	801fcbe <_strtod_l+0x8fe>
 801fbb6:	ea02 0109 	and.w	r1, r2, r9
 801fbba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fbbe:	dc7e      	bgt.n	801fcbe <_strtod_l+0x8fe>
 801fbc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fbc4:	f77f aeb2 	ble.w	801f92c <_strtod_l+0x56c>
 801fbc8:	4b4e      	ldr	r3, [pc, #312]	; (801fd04 <_strtod_l+0x944>)
 801fbca:	4640      	mov	r0, r8
 801fbcc:	4649      	mov	r1, r9
 801fbce:	2200      	movs	r2, #0
 801fbd0:	f7e0 fd16 	bl	8000600 <__aeabi_dmul>
 801fbd4:	4b4a      	ldr	r3, [pc, #296]	; (801fd00 <_strtod_l+0x940>)
 801fbd6:	4680      	mov	r8, r0
 801fbd8:	4689      	mov	r9, r1
 801fbda:	400b      	ands	r3, r1
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	f47f ae3e 	bne.w	801f85e <_strtod_l+0x49e>
 801fbe2:	2322      	movs	r3, #34	; 0x22
 801fbe4:	6023      	str	r3, [r4, #0]
 801fbe6:	e63a      	b.n	801f85e <_strtod_l+0x49e>
 801fbe8:	f04f 32ff 	mov.w	r2, #4294967295
 801fbec:	fa02 f303 	lsl.w	r3, r2, r3
 801fbf0:	ea03 0808 	and.w	r8, r3, r8
 801fbf4:	e6e8      	b.n	801f9c8 <_strtod_l+0x608>
 801fbf6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801fbfa:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801fbfe:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801fc02:	36e2      	adds	r6, #226	; 0xe2
 801fc04:	fa01 f306 	lsl.w	r3, r1, r6
 801fc08:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801fc0c:	e748      	b.n	801faa0 <_strtod_l+0x6e0>
 801fc0e:	2100      	movs	r1, #0
 801fc10:	2301      	movs	r3, #1
 801fc12:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801fc16:	e743      	b.n	801faa0 <_strtod_l+0x6e0>
 801fc18:	4632      	mov	r2, r6
 801fc1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	f7ff f953 	bl	801eec8 <__lshift>
 801fc22:	9016      	str	r0, [sp, #88]	; 0x58
 801fc24:	2800      	cmp	r0, #0
 801fc26:	f47f af6b 	bne.w	801fb00 <_strtod_l+0x740>
 801fc2a:	e60e      	b.n	801f84a <_strtod_l+0x48a>
 801fc2c:	46ca      	mov	sl, r9
 801fc2e:	d171      	bne.n	801fd14 <_strtod_l+0x954>
 801fc30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fc32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fc36:	b352      	cbz	r2, 801fc8e <_strtod_l+0x8ce>
 801fc38:	4a33      	ldr	r2, [pc, #204]	; (801fd08 <_strtod_l+0x948>)
 801fc3a:	4293      	cmp	r3, r2
 801fc3c:	d12a      	bne.n	801fc94 <_strtod_l+0x8d4>
 801fc3e:	9b04      	ldr	r3, [sp, #16]
 801fc40:	4641      	mov	r1, r8
 801fc42:	b1fb      	cbz	r3, 801fc84 <_strtod_l+0x8c4>
 801fc44:	4b2e      	ldr	r3, [pc, #184]	; (801fd00 <_strtod_l+0x940>)
 801fc46:	f04f 32ff 	mov.w	r2, #4294967295
 801fc4a:	ea09 0303 	and.w	r3, r9, r3
 801fc4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801fc52:	d81a      	bhi.n	801fc8a <_strtod_l+0x8ca>
 801fc54:	0d1b      	lsrs	r3, r3, #20
 801fc56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fc5a:	fa02 f303 	lsl.w	r3, r2, r3
 801fc5e:	4299      	cmp	r1, r3
 801fc60:	d118      	bne.n	801fc94 <_strtod_l+0x8d4>
 801fc62:	4b2a      	ldr	r3, [pc, #168]	; (801fd0c <_strtod_l+0x94c>)
 801fc64:	459a      	cmp	sl, r3
 801fc66:	d102      	bne.n	801fc6e <_strtod_l+0x8ae>
 801fc68:	3101      	adds	r1, #1
 801fc6a:	f43f adee 	beq.w	801f84a <_strtod_l+0x48a>
 801fc6e:	4b24      	ldr	r3, [pc, #144]	; (801fd00 <_strtod_l+0x940>)
 801fc70:	f04f 0800 	mov.w	r8, #0
 801fc74:	ea0a 0303 	and.w	r3, sl, r3
 801fc78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801fc7c:	9b04      	ldr	r3, [sp, #16]
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d1a2      	bne.n	801fbc8 <_strtod_l+0x808>
 801fc82:	e5ec      	b.n	801f85e <_strtod_l+0x49e>
 801fc84:	f04f 33ff 	mov.w	r3, #4294967295
 801fc88:	e7e9      	b.n	801fc5e <_strtod_l+0x89e>
 801fc8a:	4613      	mov	r3, r2
 801fc8c:	e7e7      	b.n	801fc5e <_strtod_l+0x89e>
 801fc8e:	ea53 0308 	orrs.w	r3, r3, r8
 801fc92:	d08a      	beq.n	801fbaa <_strtod_l+0x7ea>
 801fc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc96:	b1e3      	cbz	r3, 801fcd2 <_strtod_l+0x912>
 801fc98:	ea13 0f0a 	tst.w	r3, sl
 801fc9c:	d0ee      	beq.n	801fc7c <_strtod_l+0x8bc>
 801fc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fca0:	4640      	mov	r0, r8
 801fca2:	9a04      	ldr	r2, [sp, #16]
 801fca4:	4649      	mov	r1, r9
 801fca6:	b1c3      	cbz	r3, 801fcda <_strtod_l+0x91a>
 801fca8:	f7ff fb6b 	bl	801f382 <sulp>
 801fcac:	4602      	mov	r2, r0
 801fcae:	460b      	mov	r3, r1
 801fcb0:	ec51 0b18 	vmov	r0, r1, d8
 801fcb4:	f7e0 faee 	bl	8000294 <__adddf3>
 801fcb8:	4680      	mov	r8, r0
 801fcba:	4689      	mov	r9, r1
 801fcbc:	e7de      	b.n	801fc7c <_strtod_l+0x8bc>
 801fcbe:	4013      	ands	r3, r2
 801fcc0:	f04f 38ff 	mov.w	r8, #4294967295
 801fcc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801fcc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801fccc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801fcd0:	e7d4      	b.n	801fc7c <_strtod_l+0x8bc>
 801fcd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcd4:	ea13 0f08 	tst.w	r3, r8
 801fcd8:	e7e0      	b.n	801fc9c <_strtod_l+0x8dc>
 801fcda:	f7ff fb52 	bl	801f382 <sulp>
 801fcde:	4602      	mov	r2, r0
 801fce0:	460b      	mov	r3, r1
 801fce2:	ec51 0b18 	vmov	r0, r1, d8
 801fce6:	f7e0 fad3 	bl	8000290 <__aeabi_dsub>
 801fcea:	2200      	movs	r2, #0
 801fcec:	2300      	movs	r3, #0
 801fcee:	4680      	mov	r8, r0
 801fcf0:	4689      	mov	r9, r1
 801fcf2:	f7e0 feed 	bl	8000ad0 <__aeabi_dcmpeq>
 801fcf6:	2800      	cmp	r0, #0
 801fcf8:	d0c0      	beq.n	801fc7c <_strtod_l+0x8bc>
 801fcfa:	e617      	b.n	801f92c <_strtod_l+0x56c>
 801fcfc:	fffffc02 	.word	0xfffffc02
 801fd00:	7ff00000 	.word	0x7ff00000
 801fd04:	39500000 	.word	0x39500000
 801fd08:	000fffff 	.word	0x000fffff
 801fd0c:	7fefffff 	.word	0x7fefffff
 801fd10:	08023c08 	.word	0x08023c08
 801fd14:	4659      	mov	r1, fp
 801fd16:	4628      	mov	r0, r5
 801fd18:	f7ff fabc 	bl	801f294 <__ratio>
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fd22:	ee10 0a10 	vmov	r0, s0
 801fd26:	ec57 6b10 	vmov	r6, r7, d0
 801fd2a:	4639      	mov	r1, r7
 801fd2c:	f7e0 fee4 	bl	8000af8 <__aeabi_dcmple>
 801fd30:	2800      	cmp	r0, #0
 801fd32:	d071      	beq.n	801fe18 <_strtod_l+0xa58>
 801fd34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d17c      	bne.n	801fe34 <_strtod_l+0xa74>
 801fd3a:	f1b8 0f00 	cmp.w	r8, #0
 801fd3e:	d15a      	bne.n	801fdf6 <_strtod_l+0xa36>
 801fd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d15d      	bne.n	801fe04 <_strtod_l+0xa44>
 801fd48:	2200      	movs	r2, #0
 801fd4a:	4b91      	ldr	r3, [pc, #580]	; (801ff90 <_strtod_l+0xbd0>)
 801fd4c:	4630      	mov	r0, r6
 801fd4e:	4639      	mov	r1, r7
 801fd50:	f7e0 fec8 	bl	8000ae4 <__aeabi_dcmplt>
 801fd54:	2800      	cmp	r0, #0
 801fd56:	d15c      	bne.n	801fe12 <_strtod_l+0xa52>
 801fd58:	4630      	mov	r0, r6
 801fd5a:	4639      	mov	r1, r7
 801fd5c:	2200      	movs	r2, #0
 801fd5e:	4b8d      	ldr	r3, [pc, #564]	; (801ff94 <_strtod_l+0xbd4>)
 801fd60:	f7e0 fc4e 	bl	8000600 <__aeabi_dmul>
 801fd64:	4606      	mov	r6, r0
 801fd66:	460f      	mov	r7, r1
 801fd68:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801fd6c:	9606      	str	r6, [sp, #24]
 801fd6e:	9307      	str	r3, [sp, #28]
 801fd70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fd74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801fd78:	4b87      	ldr	r3, [pc, #540]	; (801ff98 <_strtod_l+0xbd8>)
 801fd7a:	ea0a 0303 	and.w	r3, sl, r3
 801fd7e:	930d      	str	r3, [sp, #52]	; 0x34
 801fd80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fd82:	4b86      	ldr	r3, [pc, #536]	; (801ff9c <_strtod_l+0xbdc>)
 801fd84:	429a      	cmp	r2, r3
 801fd86:	f040 8090 	bne.w	801feaa <_strtod_l+0xaea>
 801fd8a:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801fd8e:	ec49 8b10 	vmov	d0, r8, r9
 801fd92:	f7ff f9b1 	bl	801f0f8 <__ulp>
 801fd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fd9a:	ec51 0b10 	vmov	r0, r1, d0
 801fd9e:	f7e0 fc2f 	bl	8000600 <__aeabi_dmul>
 801fda2:	4642      	mov	r2, r8
 801fda4:	464b      	mov	r3, r9
 801fda6:	f7e0 fa75 	bl	8000294 <__adddf3>
 801fdaa:	460b      	mov	r3, r1
 801fdac:	497a      	ldr	r1, [pc, #488]	; (801ff98 <_strtod_l+0xbd8>)
 801fdae:	4680      	mov	r8, r0
 801fdb0:	4a7b      	ldr	r2, [pc, #492]	; (801ffa0 <_strtod_l+0xbe0>)
 801fdb2:	4019      	ands	r1, r3
 801fdb4:	4291      	cmp	r1, r2
 801fdb6:	d944      	bls.n	801fe42 <_strtod_l+0xa82>
 801fdb8:	ee18 2a90 	vmov	r2, s17
 801fdbc:	4b79      	ldr	r3, [pc, #484]	; (801ffa4 <_strtod_l+0xbe4>)
 801fdbe:	429a      	cmp	r2, r3
 801fdc0:	d104      	bne.n	801fdcc <_strtod_l+0xa0c>
 801fdc2:	ee18 3a10 	vmov	r3, s16
 801fdc6:	3301      	adds	r3, #1
 801fdc8:	f43f ad3f 	beq.w	801f84a <_strtod_l+0x48a>
 801fdcc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ffa4 <_strtod_l+0xbe4>
 801fdd0:	f04f 38ff 	mov.w	r8, #4294967295
 801fdd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fdd6:	4620      	mov	r0, r4
 801fdd8:	f7fe fe5a 	bl	801ea90 <_Bfree>
 801fddc:	9905      	ldr	r1, [sp, #20]
 801fdde:	4620      	mov	r0, r4
 801fde0:	f7fe fe56 	bl	801ea90 <_Bfree>
 801fde4:	4659      	mov	r1, fp
 801fde6:	4620      	mov	r0, r4
 801fde8:	f7fe fe52 	bl	801ea90 <_Bfree>
 801fdec:	4629      	mov	r1, r5
 801fdee:	4620      	mov	r0, r4
 801fdf0:	f7fe fe4e 	bl	801ea90 <_Bfree>
 801fdf4:	e609      	b.n	801fa0a <_strtod_l+0x64a>
 801fdf6:	f1b8 0f01 	cmp.w	r8, #1
 801fdfa:	d103      	bne.n	801fe04 <_strtod_l+0xa44>
 801fdfc:	f1b9 0f00 	cmp.w	r9, #0
 801fe00:	f43f ad94 	beq.w	801f92c <_strtod_l+0x56c>
 801fe04:	2600      	movs	r6, #0
 801fe06:	4f62      	ldr	r7, [pc, #392]	; (801ff90 <_strtod_l+0xbd0>)
 801fe08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801ff60 <_strtod_l+0xba0>
 801fe0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fe10:	e7ae      	b.n	801fd70 <_strtod_l+0x9b0>
 801fe12:	2600      	movs	r6, #0
 801fe14:	4f5f      	ldr	r7, [pc, #380]	; (801ff94 <_strtod_l+0xbd4>)
 801fe16:	e7a7      	b.n	801fd68 <_strtod_l+0x9a8>
 801fe18:	4b5e      	ldr	r3, [pc, #376]	; (801ff94 <_strtod_l+0xbd4>)
 801fe1a:	4630      	mov	r0, r6
 801fe1c:	4639      	mov	r1, r7
 801fe1e:	2200      	movs	r2, #0
 801fe20:	f7e0 fbee 	bl	8000600 <__aeabi_dmul>
 801fe24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe26:	4606      	mov	r6, r0
 801fe28:	460f      	mov	r7, r1
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d09c      	beq.n	801fd68 <_strtod_l+0x9a8>
 801fe2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801fe32:	e79d      	b.n	801fd70 <_strtod_l+0x9b0>
 801fe34:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801ff68 <_strtod_l+0xba8>
 801fe38:	ec57 6b17 	vmov	r6, r7, d7
 801fe3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fe40:	e796      	b.n	801fd70 <_strtod_l+0x9b0>
 801fe42:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801fe46:	9b04      	ldr	r3, [sp, #16]
 801fe48:	46ca      	mov	sl, r9
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d1c2      	bne.n	801fdd4 <_strtod_l+0xa14>
 801fe4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801fe52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fe54:	0d1b      	lsrs	r3, r3, #20
 801fe56:	051b      	lsls	r3, r3, #20
 801fe58:	429a      	cmp	r2, r3
 801fe5a:	d1bb      	bne.n	801fdd4 <_strtod_l+0xa14>
 801fe5c:	4630      	mov	r0, r6
 801fe5e:	4639      	mov	r1, r7
 801fe60:	f7e0 ff7e 	bl	8000d60 <__aeabi_d2lz>
 801fe64:	f7e0 fb9e 	bl	80005a4 <__aeabi_l2d>
 801fe68:	4602      	mov	r2, r0
 801fe6a:	460b      	mov	r3, r1
 801fe6c:	4630      	mov	r0, r6
 801fe6e:	4639      	mov	r1, r7
 801fe70:	f7e0 fa0e 	bl	8000290 <__aeabi_dsub>
 801fe74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fe78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe7a:	4606      	mov	r6, r0
 801fe7c:	ea43 0308 	orr.w	r3, r3, r8
 801fe80:	460f      	mov	r7, r1
 801fe82:	4313      	orrs	r3, r2
 801fe84:	d054      	beq.n	801ff30 <_strtod_l+0xb70>
 801fe86:	a33a      	add	r3, pc, #232	; (adr r3, 801ff70 <_strtod_l+0xbb0>)
 801fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe8c:	f7e0 fe2a 	bl	8000ae4 <__aeabi_dcmplt>
 801fe90:	2800      	cmp	r0, #0
 801fe92:	f47f ace4 	bne.w	801f85e <_strtod_l+0x49e>
 801fe96:	4630      	mov	r0, r6
 801fe98:	4639      	mov	r1, r7
 801fe9a:	a337      	add	r3, pc, #220	; (adr r3, 801ff78 <_strtod_l+0xbb8>)
 801fe9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea0:	f7e0 fe3e 	bl	8000b20 <__aeabi_dcmpgt>
 801fea4:	2800      	cmp	r0, #0
 801fea6:	d095      	beq.n	801fdd4 <_strtod_l+0xa14>
 801fea8:	e4d9      	b.n	801f85e <_strtod_l+0x49e>
 801feaa:	9b04      	ldr	r3, [sp, #16]
 801feac:	b333      	cbz	r3, 801fefc <_strtod_l+0xb3c>
 801feae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801feb0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801feb4:	d822      	bhi.n	801fefc <_strtod_l+0xb3c>
 801feb6:	4630      	mov	r0, r6
 801feb8:	4639      	mov	r1, r7
 801feba:	a331      	add	r3, pc, #196	; (adr r3, 801ff80 <_strtod_l+0xbc0>)
 801febc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fec0:	f7e0 fe1a 	bl	8000af8 <__aeabi_dcmple>
 801fec4:	b1a0      	cbz	r0, 801fef0 <_strtod_l+0xb30>
 801fec6:	4639      	mov	r1, r7
 801fec8:	4630      	mov	r0, r6
 801feca:	f7e0 fe71 	bl	8000bb0 <__aeabi_d2uiz>
 801fece:	2801      	cmp	r0, #1
 801fed0:	bf38      	it	cc
 801fed2:	2001      	movcc	r0, #1
 801fed4:	f7e0 fb1a 	bl	800050c <__aeabi_ui2d>
 801fed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801feda:	4606      	mov	r6, r0
 801fedc:	460f      	mov	r7, r1
 801fede:	bb23      	cbnz	r3, 801ff2a <_strtod_l+0xb6a>
 801fee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fee4:	9010      	str	r0, [sp, #64]	; 0x40
 801fee6:	9311      	str	r3, [sp, #68]	; 0x44
 801fee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801feec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801fef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fef4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801fef8:	1a9b      	subs	r3, r3, r2
 801fefa:	930f      	str	r3, [sp, #60]	; 0x3c
 801fefc:	eeb0 0a48 	vmov.f32	s0, s16
 801ff00:	eef0 0a68 	vmov.f32	s1, s17
 801ff04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801ff08:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ff0c:	f7ff f8f4 	bl	801f0f8 <__ulp>
 801ff10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801ff14:	ec53 2b10 	vmov	r2, r3, d0
 801ff18:	f7e0 fb72 	bl	8000600 <__aeabi_dmul>
 801ff1c:	ec53 2b18 	vmov	r2, r3, d8
 801ff20:	f7e0 f9b8 	bl	8000294 <__adddf3>
 801ff24:	4680      	mov	r8, r0
 801ff26:	4689      	mov	r9, r1
 801ff28:	e78d      	b.n	801fe46 <_strtod_l+0xa86>
 801ff2a:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801ff2e:	e7db      	b.n	801fee8 <_strtod_l+0xb28>
 801ff30:	a315      	add	r3, pc, #84	; (adr r3, 801ff88 <_strtod_l+0xbc8>)
 801ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff36:	f7e0 fdd5 	bl	8000ae4 <__aeabi_dcmplt>
 801ff3a:	e7b3      	b.n	801fea4 <_strtod_l+0xae4>
 801ff3c:	2300      	movs	r3, #0
 801ff3e:	930a      	str	r3, [sp, #40]	; 0x28
 801ff40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff44:	6013      	str	r3, [r2, #0]
 801ff46:	f7ff ba7a 	b.w	801f43e <_strtod_l+0x7e>
 801ff4a:	2a65      	cmp	r2, #101	; 0x65
 801ff4c:	f43f ab72 	beq.w	801f634 <_strtod_l+0x274>
 801ff50:	2a45      	cmp	r2, #69	; 0x45
 801ff52:	f43f ab6f 	beq.w	801f634 <_strtod_l+0x274>
 801ff56:	2301      	movs	r3, #1
 801ff58:	f7ff bba8 	b.w	801f6ac <_strtod_l+0x2ec>
 801ff5c:	f3af 8000 	nop.w
 801ff60:	00000000 	.word	0x00000000
 801ff64:	bff00000 	.word	0xbff00000
 801ff68:	00000000 	.word	0x00000000
 801ff6c:	3ff00000 	.word	0x3ff00000
 801ff70:	94a03595 	.word	0x94a03595
 801ff74:	3fdfffff 	.word	0x3fdfffff
 801ff78:	35afe535 	.word	0x35afe535
 801ff7c:	3fe00000 	.word	0x3fe00000
 801ff80:	ffc00000 	.word	0xffc00000
 801ff84:	41dfffff 	.word	0x41dfffff
 801ff88:	94a03595 	.word	0x94a03595
 801ff8c:	3fcfffff 	.word	0x3fcfffff
 801ff90:	3ff00000 	.word	0x3ff00000
 801ff94:	3fe00000 	.word	0x3fe00000
 801ff98:	7ff00000 	.word	0x7ff00000
 801ff9c:	7fe00000 	.word	0x7fe00000
 801ffa0:	7c9fffff 	.word	0x7c9fffff
 801ffa4:	7fefffff 	.word	0x7fefffff

0801ffa8 <_strtod_r>:
 801ffa8:	4b01      	ldr	r3, [pc, #4]	; (801ffb0 <_strtod_r+0x8>)
 801ffaa:	f7ff ba09 	b.w	801f3c0 <_strtod_l>
 801ffae:	bf00      	nop
 801ffb0:	200000c8 	.word	0x200000c8

0801ffb4 <_strtol_l.constprop.0>:
 801ffb4:	2b01      	cmp	r3, #1
 801ffb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffba:	d001      	beq.n	801ffc0 <_strtol_l.constprop.0+0xc>
 801ffbc:	2b24      	cmp	r3, #36	; 0x24
 801ffbe:	d906      	bls.n	801ffce <_strtol_l.constprop.0+0x1a>
 801ffc0:	f7fd fd56 	bl	801da70 <__errno>
 801ffc4:	2316      	movs	r3, #22
 801ffc6:	6003      	str	r3, [r0, #0]
 801ffc8:	2000      	movs	r0, #0
 801ffca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffce:	460d      	mov	r5, r1
 801ffd0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80200b4 <_strtol_l.constprop.0+0x100>
 801ffd4:	462e      	mov	r6, r5
 801ffd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ffda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801ffde:	f017 0708 	ands.w	r7, r7, #8
 801ffe2:	d1f7      	bne.n	801ffd4 <_strtol_l.constprop.0+0x20>
 801ffe4:	2c2d      	cmp	r4, #45	; 0x2d
 801ffe6:	d132      	bne.n	802004e <_strtol_l.constprop.0+0x9a>
 801ffe8:	782c      	ldrb	r4, [r5, #0]
 801ffea:	2701      	movs	r7, #1
 801ffec:	1cb5      	adds	r5, r6, #2
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d05b      	beq.n	80200aa <_strtol_l.constprop.0+0xf6>
 801fff2:	2b10      	cmp	r3, #16
 801fff4:	d109      	bne.n	802000a <_strtol_l.constprop.0+0x56>
 801fff6:	2c30      	cmp	r4, #48	; 0x30
 801fff8:	d107      	bne.n	802000a <_strtol_l.constprop.0+0x56>
 801fffa:	782c      	ldrb	r4, [r5, #0]
 801fffc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020000:	2c58      	cmp	r4, #88	; 0x58
 8020002:	d14d      	bne.n	80200a0 <_strtol_l.constprop.0+0xec>
 8020004:	786c      	ldrb	r4, [r5, #1]
 8020006:	2310      	movs	r3, #16
 8020008:	3502      	adds	r5, #2
 802000a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802000e:	f04f 0e00 	mov.w	lr, #0
 8020012:	f108 38ff 	add.w	r8, r8, #4294967295
 8020016:	4676      	mov	r6, lr
 8020018:	fbb8 f9f3 	udiv	r9, r8, r3
 802001c:	fb03 8a19 	mls	sl, r3, r9, r8
 8020020:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020024:	f1bc 0f09 	cmp.w	ip, #9
 8020028:	d816      	bhi.n	8020058 <_strtol_l.constprop.0+0xa4>
 802002a:	4664      	mov	r4, ip
 802002c:	42a3      	cmp	r3, r4
 802002e:	dd24      	ble.n	802007a <_strtol_l.constprop.0+0xc6>
 8020030:	f1be 3fff 	cmp.w	lr, #4294967295
 8020034:	d008      	beq.n	8020048 <_strtol_l.constprop.0+0x94>
 8020036:	45b1      	cmp	r9, r6
 8020038:	d31c      	bcc.n	8020074 <_strtol_l.constprop.0+0xc0>
 802003a:	d101      	bne.n	8020040 <_strtol_l.constprop.0+0x8c>
 802003c:	45a2      	cmp	sl, r4
 802003e:	db19      	blt.n	8020074 <_strtol_l.constprop.0+0xc0>
 8020040:	fb06 4603 	mla	r6, r6, r3, r4
 8020044:	f04f 0e01 	mov.w	lr, #1
 8020048:	f815 4b01 	ldrb.w	r4, [r5], #1
 802004c:	e7e8      	b.n	8020020 <_strtol_l.constprop.0+0x6c>
 802004e:	2c2b      	cmp	r4, #43	; 0x2b
 8020050:	bf04      	itt	eq
 8020052:	782c      	ldrbeq	r4, [r5, #0]
 8020054:	1cb5      	addeq	r5, r6, #2
 8020056:	e7ca      	b.n	801ffee <_strtol_l.constprop.0+0x3a>
 8020058:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802005c:	f1bc 0f19 	cmp.w	ip, #25
 8020060:	d801      	bhi.n	8020066 <_strtol_l.constprop.0+0xb2>
 8020062:	3c37      	subs	r4, #55	; 0x37
 8020064:	e7e2      	b.n	802002c <_strtol_l.constprop.0+0x78>
 8020066:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802006a:	f1bc 0f19 	cmp.w	ip, #25
 802006e:	d804      	bhi.n	802007a <_strtol_l.constprop.0+0xc6>
 8020070:	3c57      	subs	r4, #87	; 0x57
 8020072:	e7db      	b.n	802002c <_strtol_l.constprop.0+0x78>
 8020074:	f04f 3eff 	mov.w	lr, #4294967295
 8020078:	e7e6      	b.n	8020048 <_strtol_l.constprop.0+0x94>
 802007a:	f1be 3fff 	cmp.w	lr, #4294967295
 802007e:	d105      	bne.n	802008c <_strtol_l.constprop.0+0xd8>
 8020080:	2322      	movs	r3, #34	; 0x22
 8020082:	4646      	mov	r6, r8
 8020084:	6003      	str	r3, [r0, #0]
 8020086:	b942      	cbnz	r2, 802009a <_strtol_l.constprop.0+0xe6>
 8020088:	4630      	mov	r0, r6
 802008a:	e79e      	b.n	801ffca <_strtol_l.constprop.0+0x16>
 802008c:	b107      	cbz	r7, 8020090 <_strtol_l.constprop.0+0xdc>
 802008e:	4276      	negs	r6, r6
 8020090:	2a00      	cmp	r2, #0
 8020092:	d0f9      	beq.n	8020088 <_strtol_l.constprop.0+0xd4>
 8020094:	f1be 0f00 	cmp.w	lr, #0
 8020098:	d000      	beq.n	802009c <_strtol_l.constprop.0+0xe8>
 802009a:	1e69      	subs	r1, r5, #1
 802009c:	6011      	str	r1, [r2, #0]
 802009e:	e7f3      	b.n	8020088 <_strtol_l.constprop.0+0xd4>
 80200a0:	2430      	movs	r4, #48	; 0x30
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d1b1      	bne.n	802000a <_strtol_l.constprop.0+0x56>
 80200a6:	2308      	movs	r3, #8
 80200a8:	e7af      	b.n	802000a <_strtol_l.constprop.0+0x56>
 80200aa:	2c30      	cmp	r4, #48	; 0x30
 80200ac:	d0a5      	beq.n	801fffa <_strtol_l.constprop.0+0x46>
 80200ae:	230a      	movs	r3, #10
 80200b0:	e7ab      	b.n	802000a <_strtol_l.constprop.0+0x56>
 80200b2:	bf00      	nop
 80200b4:	08023c31 	.word	0x08023c31

080200b8 <_strtol_r>:
 80200b8:	f7ff bf7c 	b.w	801ffb4 <_strtol_l.constprop.0>

080200bc <__ssputs_r>:
 80200bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200c0:	461f      	mov	r7, r3
 80200c2:	688e      	ldr	r6, [r1, #8]
 80200c4:	4682      	mov	sl, r0
 80200c6:	460c      	mov	r4, r1
 80200c8:	42be      	cmp	r6, r7
 80200ca:	4690      	mov	r8, r2
 80200cc:	680b      	ldr	r3, [r1, #0]
 80200ce:	d82c      	bhi.n	802012a <__ssputs_r+0x6e>
 80200d0:	898a      	ldrh	r2, [r1, #12]
 80200d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80200d6:	d026      	beq.n	8020126 <__ssputs_r+0x6a>
 80200d8:	6965      	ldr	r5, [r4, #20]
 80200da:	6909      	ldr	r1, [r1, #16]
 80200dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80200e0:	eba3 0901 	sub.w	r9, r3, r1
 80200e4:	1c7b      	adds	r3, r7, #1
 80200e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80200ea:	444b      	add	r3, r9
 80200ec:	106d      	asrs	r5, r5, #1
 80200ee:	429d      	cmp	r5, r3
 80200f0:	bf38      	it	cc
 80200f2:	461d      	movcc	r5, r3
 80200f4:	0553      	lsls	r3, r2, #21
 80200f6:	d527      	bpl.n	8020148 <__ssputs_r+0x8c>
 80200f8:	4629      	mov	r1, r5
 80200fa:	f7fe fbfd 	bl	801e8f8 <_malloc_r>
 80200fe:	4606      	mov	r6, r0
 8020100:	b360      	cbz	r0, 802015c <__ssputs_r+0xa0>
 8020102:	464a      	mov	r2, r9
 8020104:	6921      	ldr	r1, [r4, #16]
 8020106:	f7fd fced 	bl	801dae4 <memcpy>
 802010a:	89a3      	ldrh	r3, [r4, #12]
 802010c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020114:	81a3      	strh	r3, [r4, #12]
 8020116:	6126      	str	r6, [r4, #16]
 8020118:	444e      	add	r6, r9
 802011a:	6165      	str	r5, [r4, #20]
 802011c:	eba5 0509 	sub.w	r5, r5, r9
 8020120:	6026      	str	r6, [r4, #0]
 8020122:	463e      	mov	r6, r7
 8020124:	60a5      	str	r5, [r4, #8]
 8020126:	42be      	cmp	r6, r7
 8020128:	d900      	bls.n	802012c <__ssputs_r+0x70>
 802012a:	463e      	mov	r6, r7
 802012c:	4632      	mov	r2, r6
 802012e:	4641      	mov	r1, r8
 8020130:	6820      	ldr	r0, [r4, #0]
 8020132:	f000 fca9 	bl	8020a88 <memmove>
 8020136:	68a3      	ldr	r3, [r4, #8]
 8020138:	2000      	movs	r0, #0
 802013a:	1b9b      	subs	r3, r3, r6
 802013c:	60a3      	str	r3, [r4, #8]
 802013e:	6823      	ldr	r3, [r4, #0]
 8020140:	4433      	add	r3, r6
 8020142:	6023      	str	r3, [r4, #0]
 8020144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020148:	462a      	mov	r2, r5
 802014a:	f001 f86c 	bl	8021226 <_realloc_r>
 802014e:	4606      	mov	r6, r0
 8020150:	2800      	cmp	r0, #0
 8020152:	d1e0      	bne.n	8020116 <__ssputs_r+0x5a>
 8020154:	6921      	ldr	r1, [r4, #16]
 8020156:	4650      	mov	r0, sl
 8020158:	f7fe fb5a 	bl	801e810 <_free_r>
 802015c:	230c      	movs	r3, #12
 802015e:	f04f 30ff 	mov.w	r0, #4294967295
 8020162:	f8ca 3000 	str.w	r3, [sl]
 8020166:	89a3      	ldrh	r3, [r4, #12]
 8020168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802016c:	81a3      	strh	r3, [r4, #12]
 802016e:	e7e9      	b.n	8020144 <__ssputs_r+0x88>

08020170 <_svfiprintf_r>:
 8020170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020174:	4698      	mov	r8, r3
 8020176:	898b      	ldrh	r3, [r1, #12]
 8020178:	b09d      	sub	sp, #116	; 0x74
 802017a:	4607      	mov	r7, r0
 802017c:	061b      	lsls	r3, r3, #24
 802017e:	460d      	mov	r5, r1
 8020180:	4614      	mov	r4, r2
 8020182:	d50e      	bpl.n	80201a2 <_svfiprintf_r+0x32>
 8020184:	690b      	ldr	r3, [r1, #16]
 8020186:	b963      	cbnz	r3, 80201a2 <_svfiprintf_r+0x32>
 8020188:	2140      	movs	r1, #64	; 0x40
 802018a:	f7fe fbb5 	bl	801e8f8 <_malloc_r>
 802018e:	6028      	str	r0, [r5, #0]
 8020190:	6128      	str	r0, [r5, #16]
 8020192:	b920      	cbnz	r0, 802019e <_svfiprintf_r+0x2e>
 8020194:	230c      	movs	r3, #12
 8020196:	603b      	str	r3, [r7, #0]
 8020198:	f04f 30ff 	mov.w	r0, #4294967295
 802019c:	e0d0      	b.n	8020340 <_svfiprintf_r+0x1d0>
 802019e:	2340      	movs	r3, #64	; 0x40
 80201a0:	616b      	str	r3, [r5, #20]
 80201a2:	2300      	movs	r3, #0
 80201a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80201a8:	f04f 0901 	mov.w	r9, #1
 80201ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020358 <_svfiprintf_r+0x1e8>
 80201b0:	9309      	str	r3, [sp, #36]	; 0x24
 80201b2:	2320      	movs	r3, #32
 80201b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80201b8:	2330      	movs	r3, #48	; 0x30
 80201ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80201be:	4623      	mov	r3, r4
 80201c0:	469a      	mov	sl, r3
 80201c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201c6:	b10a      	cbz	r2, 80201cc <_svfiprintf_r+0x5c>
 80201c8:	2a25      	cmp	r2, #37	; 0x25
 80201ca:	d1f9      	bne.n	80201c0 <_svfiprintf_r+0x50>
 80201cc:	ebba 0b04 	subs.w	fp, sl, r4
 80201d0:	d00b      	beq.n	80201ea <_svfiprintf_r+0x7a>
 80201d2:	465b      	mov	r3, fp
 80201d4:	4622      	mov	r2, r4
 80201d6:	4629      	mov	r1, r5
 80201d8:	4638      	mov	r0, r7
 80201da:	f7ff ff6f 	bl	80200bc <__ssputs_r>
 80201de:	3001      	adds	r0, #1
 80201e0:	f000 80a9 	beq.w	8020336 <_svfiprintf_r+0x1c6>
 80201e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80201e6:	445a      	add	r2, fp
 80201e8:	9209      	str	r2, [sp, #36]	; 0x24
 80201ea:	f89a 3000 	ldrb.w	r3, [sl]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	f000 80a1 	beq.w	8020336 <_svfiprintf_r+0x1c6>
 80201f4:	2300      	movs	r3, #0
 80201f6:	f04f 32ff 	mov.w	r2, #4294967295
 80201fa:	f10a 0a01 	add.w	sl, sl, #1
 80201fe:	9304      	str	r3, [sp, #16]
 8020200:	9307      	str	r3, [sp, #28]
 8020202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020206:	931a      	str	r3, [sp, #104]	; 0x68
 8020208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802020c:	4654      	mov	r4, sl
 802020e:	2205      	movs	r2, #5
 8020210:	4851      	ldr	r0, [pc, #324]	; (8020358 <_svfiprintf_r+0x1e8>)
 8020212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020216:	f7fd fc57 	bl	801dac8 <memchr>
 802021a:	9a04      	ldr	r2, [sp, #16]
 802021c:	b9d8      	cbnz	r0, 8020256 <_svfiprintf_r+0xe6>
 802021e:	06d0      	lsls	r0, r2, #27
 8020220:	bf44      	itt	mi
 8020222:	2320      	movmi	r3, #32
 8020224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020228:	0711      	lsls	r1, r2, #28
 802022a:	bf44      	itt	mi
 802022c:	232b      	movmi	r3, #43	; 0x2b
 802022e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020232:	f89a 3000 	ldrb.w	r3, [sl]
 8020236:	2b2a      	cmp	r3, #42	; 0x2a
 8020238:	d015      	beq.n	8020266 <_svfiprintf_r+0xf6>
 802023a:	9a07      	ldr	r2, [sp, #28]
 802023c:	4654      	mov	r4, sl
 802023e:	2000      	movs	r0, #0
 8020240:	f04f 0c0a 	mov.w	ip, #10
 8020244:	4621      	mov	r1, r4
 8020246:	f811 3b01 	ldrb.w	r3, [r1], #1
 802024a:	3b30      	subs	r3, #48	; 0x30
 802024c:	2b09      	cmp	r3, #9
 802024e:	d94d      	bls.n	80202ec <_svfiprintf_r+0x17c>
 8020250:	b1b0      	cbz	r0, 8020280 <_svfiprintf_r+0x110>
 8020252:	9207      	str	r2, [sp, #28]
 8020254:	e014      	b.n	8020280 <_svfiprintf_r+0x110>
 8020256:	eba0 0308 	sub.w	r3, r0, r8
 802025a:	46a2      	mov	sl, r4
 802025c:	fa09 f303 	lsl.w	r3, r9, r3
 8020260:	4313      	orrs	r3, r2
 8020262:	9304      	str	r3, [sp, #16]
 8020264:	e7d2      	b.n	802020c <_svfiprintf_r+0x9c>
 8020266:	9b03      	ldr	r3, [sp, #12]
 8020268:	1d19      	adds	r1, r3, #4
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	2b00      	cmp	r3, #0
 802026e:	9103      	str	r1, [sp, #12]
 8020270:	bfbb      	ittet	lt
 8020272:	425b      	neglt	r3, r3
 8020274:	f042 0202 	orrlt.w	r2, r2, #2
 8020278:	9307      	strge	r3, [sp, #28]
 802027a:	9307      	strlt	r3, [sp, #28]
 802027c:	bfb8      	it	lt
 802027e:	9204      	strlt	r2, [sp, #16]
 8020280:	7823      	ldrb	r3, [r4, #0]
 8020282:	2b2e      	cmp	r3, #46	; 0x2e
 8020284:	d10c      	bne.n	80202a0 <_svfiprintf_r+0x130>
 8020286:	7863      	ldrb	r3, [r4, #1]
 8020288:	2b2a      	cmp	r3, #42	; 0x2a
 802028a:	d134      	bne.n	80202f6 <_svfiprintf_r+0x186>
 802028c:	9b03      	ldr	r3, [sp, #12]
 802028e:	3402      	adds	r4, #2
 8020290:	1d1a      	adds	r2, r3, #4
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	2b00      	cmp	r3, #0
 8020296:	9203      	str	r2, [sp, #12]
 8020298:	bfb8      	it	lt
 802029a:	f04f 33ff 	movlt.w	r3, #4294967295
 802029e:	9305      	str	r3, [sp, #20]
 80202a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8020368 <_svfiprintf_r+0x1f8>
 80202a4:	2203      	movs	r2, #3
 80202a6:	7821      	ldrb	r1, [r4, #0]
 80202a8:	4650      	mov	r0, sl
 80202aa:	f7fd fc0d 	bl	801dac8 <memchr>
 80202ae:	b138      	cbz	r0, 80202c0 <_svfiprintf_r+0x150>
 80202b0:	eba0 000a 	sub.w	r0, r0, sl
 80202b4:	2240      	movs	r2, #64	; 0x40
 80202b6:	9b04      	ldr	r3, [sp, #16]
 80202b8:	3401      	adds	r4, #1
 80202ba:	4082      	lsls	r2, r0
 80202bc:	4313      	orrs	r3, r2
 80202be:	9304      	str	r3, [sp, #16]
 80202c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80202c4:	2206      	movs	r2, #6
 80202c6:	4825      	ldr	r0, [pc, #148]	; (802035c <_svfiprintf_r+0x1ec>)
 80202c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80202cc:	f7fd fbfc 	bl	801dac8 <memchr>
 80202d0:	2800      	cmp	r0, #0
 80202d2:	d038      	beq.n	8020346 <_svfiprintf_r+0x1d6>
 80202d4:	4b22      	ldr	r3, [pc, #136]	; (8020360 <_svfiprintf_r+0x1f0>)
 80202d6:	bb1b      	cbnz	r3, 8020320 <_svfiprintf_r+0x1b0>
 80202d8:	9b03      	ldr	r3, [sp, #12]
 80202da:	3307      	adds	r3, #7
 80202dc:	f023 0307 	bic.w	r3, r3, #7
 80202e0:	3308      	adds	r3, #8
 80202e2:	9303      	str	r3, [sp, #12]
 80202e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202e6:	4433      	add	r3, r6
 80202e8:	9309      	str	r3, [sp, #36]	; 0x24
 80202ea:	e768      	b.n	80201be <_svfiprintf_r+0x4e>
 80202ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80202f0:	460c      	mov	r4, r1
 80202f2:	2001      	movs	r0, #1
 80202f4:	e7a6      	b.n	8020244 <_svfiprintf_r+0xd4>
 80202f6:	2300      	movs	r3, #0
 80202f8:	3401      	adds	r4, #1
 80202fa:	f04f 0c0a 	mov.w	ip, #10
 80202fe:	4619      	mov	r1, r3
 8020300:	9305      	str	r3, [sp, #20]
 8020302:	4620      	mov	r0, r4
 8020304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020308:	3a30      	subs	r2, #48	; 0x30
 802030a:	2a09      	cmp	r2, #9
 802030c:	d903      	bls.n	8020316 <_svfiprintf_r+0x1a6>
 802030e:	2b00      	cmp	r3, #0
 8020310:	d0c6      	beq.n	80202a0 <_svfiprintf_r+0x130>
 8020312:	9105      	str	r1, [sp, #20]
 8020314:	e7c4      	b.n	80202a0 <_svfiprintf_r+0x130>
 8020316:	fb0c 2101 	mla	r1, ip, r1, r2
 802031a:	4604      	mov	r4, r0
 802031c:	2301      	movs	r3, #1
 802031e:	e7f0      	b.n	8020302 <_svfiprintf_r+0x192>
 8020320:	ab03      	add	r3, sp, #12
 8020322:	462a      	mov	r2, r5
 8020324:	a904      	add	r1, sp, #16
 8020326:	4638      	mov	r0, r7
 8020328:	9300      	str	r3, [sp, #0]
 802032a:	4b0e      	ldr	r3, [pc, #56]	; (8020364 <_svfiprintf_r+0x1f4>)
 802032c:	f7fc fb62 	bl	801c9f4 <_printf_float>
 8020330:	1c42      	adds	r2, r0, #1
 8020332:	4606      	mov	r6, r0
 8020334:	d1d6      	bne.n	80202e4 <_svfiprintf_r+0x174>
 8020336:	89ab      	ldrh	r3, [r5, #12]
 8020338:	065b      	lsls	r3, r3, #25
 802033a:	f53f af2d 	bmi.w	8020198 <_svfiprintf_r+0x28>
 802033e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020340:	b01d      	add	sp, #116	; 0x74
 8020342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020346:	ab03      	add	r3, sp, #12
 8020348:	462a      	mov	r2, r5
 802034a:	a904      	add	r1, sp, #16
 802034c:	4638      	mov	r0, r7
 802034e:	9300      	str	r3, [sp, #0]
 8020350:	4b04      	ldr	r3, [pc, #16]	; (8020364 <_svfiprintf_r+0x1f4>)
 8020352:	f7fc fdf7 	bl	801cf44 <_printf_i>
 8020356:	e7eb      	b.n	8020330 <_svfiprintf_r+0x1c0>
 8020358:	08023d31 	.word	0x08023d31
 802035c:	08023d3b 	.word	0x08023d3b
 8020360:	0801c9f5 	.word	0x0801c9f5
 8020364:	080200bd 	.word	0x080200bd
 8020368:	08023d37 	.word	0x08023d37

0802036c <_sungetc_r>:
 802036c:	b538      	push	{r3, r4, r5, lr}
 802036e:	1c4b      	adds	r3, r1, #1
 8020370:	4614      	mov	r4, r2
 8020372:	d103      	bne.n	802037c <_sungetc_r+0x10>
 8020374:	f04f 35ff 	mov.w	r5, #4294967295
 8020378:	4628      	mov	r0, r5
 802037a:	bd38      	pop	{r3, r4, r5, pc}
 802037c:	8993      	ldrh	r3, [r2, #12]
 802037e:	b2cd      	uxtb	r5, r1
 8020380:	f023 0320 	bic.w	r3, r3, #32
 8020384:	8193      	strh	r3, [r2, #12]
 8020386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020388:	6852      	ldr	r2, [r2, #4]
 802038a:	b18b      	cbz	r3, 80203b0 <_sungetc_r+0x44>
 802038c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802038e:	4293      	cmp	r3, r2
 8020390:	dd08      	ble.n	80203a4 <_sungetc_r+0x38>
 8020392:	6823      	ldr	r3, [r4, #0]
 8020394:	1e5a      	subs	r2, r3, #1
 8020396:	6022      	str	r2, [r4, #0]
 8020398:	f803 5c01 	strb.w	r5, [r3, #-1]
 802039c:	6863      	ldr	r3, [r4, #4]
 802039e:	3301      	adds	r3, #1
 80203a0:	6063      	str	r3, [r4, #4]
 80203a2:	e7e9      	b.n	8020378 <_sungetc_r+0xc>
 80203a4:	4621      	mov	r1, r4
 80203a6:	f000 fb38 	bl	8020a1a <__submore>
 80203aa:	2800      	cmp	r0, #0
 80203ac:	d0f1      	beq.n	8020392 <_sungetc_r+0x26>
 80203ae:	e7e1      	b.n	8020374 <_sungetc_r+0x8>
 80203b0:	6921      	ldr	r1, [r4, #16]
 80203b2:	6823      	ldr	r3, [r4, #0]
 80203b4:	b151      	cbz	r1, 80203cc <_sungetc_r+0x60>
 80203b6:	4299      	cmp	r1, r3
 80203b8:	d208      	bcs.n	80203cc <_sungetc_r+0x60>
 80203ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80203be:	42a9      	cmp	r1, r5
 80203c0:	d104      	bne.n	80203cc <_sungetc_r+0x60>
 80203c2:	3b01      	subs	r3, #1
 80203c4:	3201      	adds	r2, #1
 80203c6:	6023      	str	r3, [r4, #0]
 80203c8:	6062      	str	r2, [r4, #4]
 80203ca:	e7d5      	b.n	8020378 <_sungetc_r+0xc>
 80203cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80203d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203d4:	6363      	str	r3, [r4, #52]	; 0x34
 80203d6:	2303      	movs	r3, #3
 80203d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80203da:	4623      	mov	r3, r4
 80203dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80203e0:	6023      	str	r3, [r4, #0]
 80203e2:	2301      	movs	r3, #1
 80203e4:	e7dc      	b.n	80203a0 <_sungetc_r+0x34>

080203e6 <__ssrefill_r>:
 80203e6:	b510      	push	{r4, lr}
 80203e8:	460c      	mov	r4, r1
 80203ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80203ec:	b169      	cbz	r1, 802040a <__ssrefill_r+0x24>
 80203ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203f2:	4299      	cmp	r1, r3
 80203f4:	d001      	beq.n	80203fa <__ssrefill_r+0x14>
 80203f6:	f7fe fa0b 	bl	801e810 <_free_r>
 80203fa:	2000      	movs	r0, #0
 80203fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80203fe:	6360      	str	r0, [r4, #52]	; 0x34
 8020400:	6063      	str	r3, [r4, #4]
 8020402:	b113      	cbz	r3, 802040a <__ssrefill_r+0x24>
 8020404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020406:	6023      	str	r3, [r4, #0]
 8020408:	bd10      	pop	{r4, pc}
 802040a:	6923      	ldr	r3, [r4, #16]
 802040c:	f04f 30ff 	mov.w	r0, #4294967295
 8020410:	6023      	str	r3, [r4, #0]
 8020412:	2300      	movs	r3, #0
 8020414:	6063      	str	r3, [r4, #4]
 8020416:	89a3      	ldrh	r3, [r4, #12]
 8020418:	f043 0320 	orr.w	r3, r3, #32
 802041c:	81a3      	strh	r3, [r4, #12]
 802041e:	e7f3      	b.n	8020408 <__ssrefill_r+0x22>

08020420 <__ssvfiscanf_r>:
 8020420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020424:	460c      	mov	r4, r1
 8020426:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802042a:	2100      	movs	r1, #0
 802042c:	4606      	mov	r6, r0
 802042e:	f10d 0804 	add.w	r8, sp, #4
 8020432:	4fa6      	ldr	r7, [pc, #664]	; (80206cc <__ssvfiscanf_r+0x2ac>)
 8020434:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 80206d8 <__ssvfiscanf_r+0x2b8>
 8020438:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802043c:	9300      	str	r3, [sp, #0]
 802043e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020442:	49a3      	ldr	r1, [pc, #652]	; (80206d0 <__ssvfiscanf_r+0x2b0>)
 8020444:	91a0      	str	r1, [sp, #640]	; 0x280
 8020446:	49a3      	ldr	r1, [pc, #652]	; (80206d4 <__ssvfiscanf_r+0x2b4>)
 8020448:	91a1      	str	r1, [sp, #644]	; 0x284
 802044a:	7813      	ldrb	r3, [r2, #0]
 802044c:	2b00      	cmp	r3, #0
 802044e:	f000 815a 	beq.w	8020706 <__ssvfiscanf_r+0x2e6>
 8020452:	5cf9      	ldrb	r1, [r7, r3]
 8020454:	1c55      	adds	r5, r2, #1
 8020456:	f011 0108 	ands.w	r1, r1, #8
 802045a:	d019      	beq.n	8020490 <__ssvfiscanf_r+0x70>
 802045c:	6863      	ldr	r3, [r4, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	dd0f      	ble.n	8020482 <__ssvfiscanf_r+0x62>
 8020462:	6823      	ldr	r3, [r4, #0]
 8020464:	781a      	ldrb	r2, [r3, #0]
 8020466:	5cba      	ldrb	r2, [r7, r2]
 8020468:	0712      	lsls	r2, r2, #28
 802046a:	d401      	bmi.n	8020470 <__ssvfiscanf_r+0x50>
 802046c:	462a      	mov	r2, r5
 802046e:	e7ec      	b.n	802044a <__ssvfiscanf_r+0x2a>
 8020470:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020472:	3301      	adds	r3, #1
 8020474:	3201      	adds	r2, #1
 8020476:	6023      	str	r3, [r4, #0]
 8020478:	9245      	str	r2, [sp, #276]	; 0x114
 802047a:	6862      	ldr	r2, [r4, #4]
 802047c:	3a01      	subs	r2, #1
 802047e:	6062      	str	r2, [r4, #4]
 8020480:	e7ec      	b.n	802045c <__ssvfiscanf_r+0x3c>
 8020482:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020484:	4621      	mov	r1, r4
 8020486:	4630      	mov	r0, r6
 8020488:	4798      	blx	r3
 802048a:	2800      	cmp	r0, #0
 802048c:	d0e9      	beq.n	8020462 <__ssvfiscanf_r+0x42>
 802048e:	e7ed      	b.n	802046c <__ssvfiscanf_r+0x4c>
 8020490:	2b25      	cmp	r3, #37	; 0x25
 8020492:	d012      	beq.n	80204ba <__ssvfiscanf_r+0x9a>
 8020494:	469a      	mov	sl, r3
 8020496:	6863      	ldr	r3, [r4, #4]
 8020498:	2b00      	cmp	r3, #0
 802049a:	f340 8092 	ble.w	80205c2 <__ssvfiscanf_r+0x1a2>
 802049e:	6822      	ldr	r2, [r4, #0]
 80204a0:	7813      	ldrb	r3, [r2, #0]
 80204a2:	4553      	cmp	r3, sl
 80204a4:	f040 812f 	bne.w	8020706 <__ssvfiscanf_r+0x2e6>
 80204a8:	6863      	ldr	r3, [r4, #4]
 80204aa:	3201      	adds	r2, #1
 80204ac:	3b01      	subs	r3, #1
 80204ae:	6022      	str	r2, [r4, #0]
 80204b0:	6063      	str	r3, [r4, #4]
 80204b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80204b4:	3301      	adds	r3, #1
 80204b6:	9345      	str	r3, [sp, #276]	; 0x114
 80204b8:	e7d8      	b.n	802046c <__ssvfiscanf_r+0x4c>
 80204ba:	9141      	str	r1, [sp, #260]	; 0x104
 80204bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80204be:	7853      	ldrb	r3, [r2, #1]
 80204c0:	2b2a      	cmp	r3, #42	; 0x2a
 80204c2:	bf04      	itt	eq
 80204c4:	2310      	moveq	r3, #16
 80204c6:	1c95      	addeq	r5, r2, #2
 80204c8:	f04f 020a 	mov.w	r2, #10
 80204cc:	bf08      	it	eq
 80204ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80204d0:	46aa      	mov	sl, r5
 80204d2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80204d6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80204da:	2b09      	cmp	r3, #9
 80204dc:	d91c      	bls.n	8020518 <__ssvfiscanf_r+0xf8>
 80204de:	2203      	movs	r2, #3
 80204e0:	487d      	ldr	r0, [pc, #500]	; (80206d8 <__ssvfiscanf_r+0x2b8>)
 80204e2:	f7fd faf1 	bl	801dac8 <memchr>
 80204e6:	b138      	cbz	r0, 80204f8 <__ssvfiscanf_r+0xd8>
 80204e8:	eba0 0009 	sub.w	r0, r0, r9
 80204ec:	2301      	movs	r3, #1
 80204ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80204f0:	4655      	mov	r5, sl
 80204f2:	4083      	lsls	r3, r0
 80204f4:	4313      	orrs	r3, r2
 80204f6:	9341      	str	r3, [sp, #260]	; 0x104
 80204f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80204fc:	2b78      	cmp	r3, #120	; 0x78
 80204fe:	d806      	bhi.n	802050e <__ssvfiscanf_r+0xee>
 8020500:	2b57      	cmp	r3, #87	; 0x57
 8020502:	d810      	bhi.n	8020526 <__ssvfiscanf_r+0x106>
 8020504:	2b25      	cmp	r3, #37	; 0x25
 8020506:	d0c5      	beq.n	8020494 <__ssvfiscanf_r+0x74>
 8020508:	d856      	bhi.n	80205b8 <__ssvfiscanf_r+0x198>
 802050a:	2b00      	cmp	r3, #0
 802050c:	d064      	beq.n	80205d8 <__ssvfiscanf_r+0x1b8>
 802050e:	2303      	movs	r3, #3
 8020510:	9347      	str	r3, [sp, #284]	; 0x11c
 8020512:	230a      	movs	r3, #10
 8020514:	9342      	str	r3, [sp, #264]	; 0x108
 8020516:	e075      	b.n	8020604 <__ssvfiscanf_r+0x1e4>
 8020518:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802051a:	4655      	mov	r5, sl
 802051c:	fb02 1103 	mla	r1, r2, r3, r1
 8020520:	3930      	subs	r1, #48	; 0x30
 8020522:	9143      	str	r1, [sp, #268]	; 0x10c
 8020524:	e7d4      	b.n	80204d0 <__ssvfiscanf_r+0xb0>
 8020526:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802052a:	2a20      	cmp	r2, #32
 802052c:	d8ef      	bhi.n	802050e <__ssvfiscanf_r+0xee>
 802052e:	a101      	add	r1, pc, #4	; (adr r1, 8020534 <__ssvfiscanf_r+0x114>)
 8020530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020534:	080205e7 	.word	0x080205e7
 8020538:	0802050f 	.word	0x0802050f
 802053c:	0802050f 	.word	0x0802050f
 8020540:	08020645 	.word	0x08020645
 8020544:	0802050f 	.word	0x0802050f
 8020548:	0802050f 	.word	0x0802050f
 802054c:	0802050f 	.word	0x0802050f
 8020550:	0802050f 	.word	0x0802050f
 8020554:	0802050f 	.word	0x0802050f
 8020558:	0802050f 	.word	0x0802050f
 802055c:	0802050f 	.word	0x0802050f
 8020560:	0802065b 	.word	0x0802065b
 8020564:	08020641 	.word	0x08020641
 8020568:	080205bf 	.word	0x080205bf
 802056c:	080205bf 	.word	0x080205bf
 8020570:	080205bf 	.word	0x080205bf
 8020574:	0802050f 	.word	0x0802050f
 8020578:	080205fd 	.word	0x080205fd
 802057c:	0802050f 	.word	0x0802050f
 8020580:	0802050f 	.word	0x0802050f
 8020584:	0802050f 	.word	0x0802050f
 8020588:	0802050f 	.word	0x0802050f
 802058c:	0802066b 	.word	0x0802066b
 8020590:	08020639 	.word	0x08020639
 8020594:	080205df 	.word	0x080205df
 8020598:	0802050f 	.word	0x0802050f
 802059c:	0802050f 	.word	0x0802050f
 80205a0:	08020667 	.word	0x08020667
 80205a4:	0802050f 	.word	0x0802050f
 80205a8:	08020641 	.word	0x08020641
 80205ac:	0802050f 	.word	0x0802050f
 80205b0:	0802050f 	.word	0x0802050f
 80205b4:	080205e7 	.word	0x080205e7
 80205b8:	3b45      	subs	r3, #69	; 0x45
 80205ba:	2b02      	cmp	r3, #2
 80205bc:	d8a7      	bhi.n	802050e <__ssvfiscanf_r+0xee>
 80205be:	2305      	movs	r3, #5
 80205c0:	e01f      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 80205c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80205c4:	4621      	mov	r1, r4
 80205c6:	4630      	mov	r0, r6
 80205c8:	4798      	blx	r3
 80205ca:	2800      	cmp	r0, #0
 80205cc:	f43f af67 	beq.w	802049e <__ssvfiscanf_r+0x7e>
 80205d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80205d2:	2800      	cmp	r0, #0
 80205d4:	f040 808d 	bne.w	80206f2 <__ssvfiscanf_r+0x2d2>
 80205d8:	f04f 30ff 	mov.w	r0, #4294967295
 80205dc:	e08f      	b.n	80206fe <__ssvfiscanf_r+0x2de>
 80205de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80205e0:	f042 0220 	orr.w	r2, r2, #32
 80205e4:	9241      	str	r2, [sp, #260]	; 0x104
 80205e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80205e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80205ec:	9241      	str	r2, [sp, #260]	; 0x104
 80205ee:	2210      	movs	r2, #16
 80205f0:	2b6f      	cmp	r3, #111	; 0x6f
 80205f2:	9242      	str	r2, [sp, #264]	; 0x108
 80205f4:	bf34      	ite	cc
 80205f6:	2303      	movcc	r3, #3
 80205f8:	2304      	movcs	r3, #4
 80205fa:	e002      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 80205fc:	2300      	movs	r3, #0
 80205fe:	9342      	str	r3, [sp, #264]	; 0x108
 8020600:	2303      	movs	r3, #3
 8020602:	9347      	str	r3, [sp, #284]	; 0x11c
 8020604:	6863      	ldr	r3, [r4, #4]
 8020606:	2b00      	cmp	r3, #0
 8020608:	dd3e      	ble.n	8020688 <__ssvfiscanf_r+0x268>
 802060a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802060c:	0659      	lsls	r1, r3, #25
 802060e:	d404      	bmi.n	802061a <__ssvfiscanf_r+0x1fa>
 8020610:	6823      	ldr	r3, [r4, #0]
 8020612:	781a      	ldrb	r2, [r3, #0]
 8020614:	5cba      	ldrb	r2, [r7, r2]
 8020616:	0712      	lsls	r2, r2, #28
 8020618:	d43d      	bmi.n	8020696 <__ssvfiscanf_r+0x276>
 802061a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802061c:	2b02      	cmp	r3, #2
 802061e:	dc4c      	bgt.n	80206ba <__ssvfiscanf_r+0x29a>
 8020620:	466b      	mov	r3, sp
 8020622:	4622      	mov	r2, r4
 8020624:	a941      	add	r1, sp, #260	; 0x104
 8020626:	4630      	mov	r0, r6
 8020628:	f000 f872 	bl	8020710 <_scanf_chars>
 802062c:	2801      	cmp	r0, #1
 802062e:	d06a      	beq.n	8020706 <__ssvfiscanf_r+0x2e6>
 8020630:	2802      	cmp	r0, #2
 8020632:	f47f af1b 	bne.w	802046c <__ssvfiscanf_r+0x4c>
 8020636:	e7cb      	b.n	80205d0 <__ssvfiscanf_r+0x1b0>
 8020638:	2308      	movs	r3, #8
 802063a:	9342      	str	r3, [sp, #264]	; 0x108
 802063c:	2304      	movs	r3, #4
 802063e:	e7e0      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 8020640:	220a      	movs	r2, #10
 8020642:	e7d5      	b.n	80205f0 <__ssvfiscanf_r+0x1d0>
 8020644:	4629      	mov	r1, r5
 8020646:	4640      	mov	r0, r8
 8020648:	f000 f9ae 	bl	80209a8 <__sccl>
 802064c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802064e:	4605      	mov	r5, r0
 8020650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020654:	9341      	str	r3, [sp, #260]	; 0x104
 8020656:	2301      	movs	r3, #1
 8020658:	e7d3      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 802065a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020660:	9341      	str	r3, [sp, #260]	; 0x104
 8020662:	2300      	movs	r3, #0
 8020664:	e7cd      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 8020666:	2302      	movs	r3, #2
 8020668:	e7cb      	b.n	8020602 <__ssvfiscanf_r+0x1e2>
 802066a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802066c:	06c3      	lsls	r3, r0, #27
 802066e:	f53f aefd 	bmi.w	802046c <__ssvfiscanf_r+0x4c>
 8020672:	9b00      	ldr	r3, [sp, #0]
 8020674:	07c0      	lsls	r0, r0, #31
 8020676:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020678:	f103 0104 	add.w	r1, r3, #4
 802067c:	9100      	str	r1, [sp, #0]
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	bf4c      	ite	mi
 8020682:	801a      	strhmi	r2, [r3, #0]
 8020684:	601a      	strpl	r2, [r3, #0]
 8020686:	e6f1      	b.n	802046c <__ssvfiscanf_r+0x4c>
 8020688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802068a:	4621      	mov	r1, r4
 802068c:	4630      	mov	r0, r6
 802068e:	4798      	blx	r3
 8020690:	2800      	cmp	r0, #0
 8020692:	d0ba      	beq.n	802060a <__ssvfiscanf_r+0x1ea>
 8020694:	e79c      	b.n	80205d0 <__ssvfiscanf_r+0x1b0>
 8020696:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020698:	3201      	adds	r2, #1
 802069a:	9245      	str	r2, [sp, #276]	; 0x114
 802069c:	6862      	ldr	r2, [r4, #4]
 802069e:	3a01      	subs	r2, #1
 80206a0:	2a00      	cmp	r2, #0
 80206a2:	6062      	str	r2, [r4, #4]
 80206a4:	dd02      	ble.n	80206ac <__ssvfiscanf_r+0x28c>
 80206a6:	3301      	adds	r3, #1
 80206a8:	6023      	str	r3, [r4, #0]
 80206aa:	e7b1      	b.n	8020610 <__ssvfiscanf_r+0x1f0>
 80206ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80206ae:	4621      	mov	r1, r4
 80206b0:	4630      	mov	r0, r6
 80206b2:	4798      	blx	r3
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d0ab      	beq.n	8020610 <__ssvfiscanf_r+0x1f0>
 80206b8:	e78a      	b.n	80205d0 <__ssvfiscanf_r+0x1b0>
 80206ba:	2b04      	cmp	r3, #4
 80206bc:	dc0e      	bgt.n	80206dc <__ssvfiscanf_r+0x2bc>
 80206be:	466b      	mov	r3, sp
 80206c0:	4622      	mov	r2, r4
 80206c2:	a941      	add	r1, sp, #260	; 0x104
 80206c4:	4630      	mov	r0, r6
 80206c6:	f000 f87d 	bl	80207c4 <_scanf_i>
 80206ca:	e7af      	b.n	802062c <__ssvfiscanf_r+0x20c>
 80206cc:	08023c31 	.word	0x08023c31
 80206d0:	0802036d 	.word	0x0802036d
 80206d4:	080203e7 	.word	0x080203e7
 80206d8:	08023d37 	.word	0x08023d37
 80206dc:	4b0b      	ldr	r3, [pc, #44]	; (802070c <__ssvfiscanf_r+0x2ec>)
 80206de:	2b00      	cmp	r3, #0
 80206e0:	f43f aec4 	beq.w	802046c <__ssvfiscanf_r+0x4c>
 80206e4:	466b      	mov	r3, sp
 80206e6:	4622      	mov	r2, r4
 80206e8:	a941      	add	r1, sp, #260	; 0x104
 80206ea:	4630      	mov	r0, r6
 80206ec:	f7fc fd4a 	bl	801d184 <_scanf_float>
 80206f0:	e79c      	b.n	802062c <__ssvfiscanf_r+0x20c>
 80206f2:	89a3      	ldrh	r3, [r4, #12]
 80206f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80206f8:	bf18      	it	ne
 80206fa:	f04f 30ff 	movne.w	r0, #4294967295
 80206fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8020702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020706:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020708:	e7f9      	b.n	80206fe <__ssvfiscanf_r+0x2de>
 802070a:	bf00      	nop
 802070c:	0801d185 	.word	0x0801d185

08020710 <_scanf_chars>:
 8020710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020714:	4615      	mov	r5, r2
 8020716:	688a      	ldr	r2, [r1, #8]
 8020718:	4680      	mov	r8, r0
 802071a:	460c      	mov	r4, r1
 802071c:	b932      	cbnz	r2, 802072c <_scanf_chars+0x1c>
 802071e:	698a      	ldr	r2, [r1, #24]
 8020720:	2a00      	cmp	r2, #0
 8020722:	bf0c      	ite	eq
 8020724:	2201      	moveq	r2, #1
 8020726:	f04f 32ff 	movne.w	r2, #4294967295
 802072a:	608a      	str	r2, [r1, #8]
 802072c:	6822      	ldr	r2, [r4, #0]
 802072e:	2700      	movs	r7, #0
 8020730:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80207c0 <_scanf_chars+0xb0>
 8020734:	06d1      	lsls	r1, r2, #27
 8020736:	bf5f      	itttt	pl
 8020738:	681a      	ldrpl	r2, [r3, #0]
 802073a:	1d11      	addpl	r1, r2, #4
 802073c:	6019      	strpl	r1, [r3, #0]
 802073e:	6816      	ldrpl	r6, [r2, #0]
 8020740:	69a0      	ldr	r0, [r4, #24]
 8020742:	b188      	cbz	r0, 8020768 <_scanf_chars+0x58>
 8020744:	2801      	cmp	r0, #1
 8020746:	d107      	bne.n	8020758 <_scanf_chars+0x48>
 8020748:	682a      	ldr	r2, [r5, #0]
 802074a:	7811      	ldrb	r1, [r2, #0]
 802074c:	6962      	ldr	r2, [r4, #20]
 802074e:	5c52      	ldrb	r2, [r2, r1]
 8020750:	b952      	cbnz	r2, 8020768 <_scanf_chars+0x58>
 8020752:	2f00      	cmp	r7, #0
 8020754:	d031      	beq.n	80207ba <_scanf_chars+0xaa>
 8020756:	e022      	b.n	802079e <_scanf_chars+0x8e>
 8020758:	2802      	cmp	r0, #2
 802075a:	d120      	bne.n	802079e <_scanf_chars+0x8e>
 802075c:	682b      	ldr	r3, [r5, #0]
 802075e:	781b      	ldrb	r3, [r3, #0]
 8020760:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020764:	071b      	lsls	r3, r3, #28
 8020766:	d41a      	bmi.n	802079e <_scanf_chars+0x8e>
 8020768:	6823      	ldr	r3, [r4, #0]
 802076a:	3701      	adds	r7, #1
 802076c:	06da      	lsls	r2, r3, #27
 802076e:	bf5e      	ittt	pl
 8020770:	682b      	ldrpl	r3, [r5, #0]
 8020772:	781b      	ldrbpl	r3, [r3, #0]
 8020774:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020778:	682a      	ldr	r2, [r5, #0]
 802077a:	686b      	ldr	r3, [r5, #4]
 802077c:	3201      	adds	r2, #1
 802077e:	3b01      	subs	r3, #1
 8020780:	602a      	str	r2, [r5, #0]
 8020782:	68a2      	ldr	r2, [r4, #8]
 8020784:	606b      	str	r3, [r5, #4]
 8020786:	3a01      	subs	r2, #1
 8020788:	60a2      	str	r2, [r4, #8]
 802078a:	b142      	cbz	r2, 802079e <_scanf_chars+0x8e>
 802078c:	2b00      	cmp	r3, #0
 802078e:	dcd7      	bgt.n	8020740 <_scanf_chars+0x30>
 8020790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020794:	4629      	mov	r1, r5
 8020796:	4640      	mov	r0, r8
 8020798:	4798      	blx	r3
 802079a:	2800      	cmp	r0, #0
 802079c:	d0d0      	beq.n	8020740 <_scanf_chars+0x30>
 802079e:	6823      	ldr	r3, [r4, #0]
 80207a0:	f013 0310 	ands.w	r3, r3, #16
 80207a4:	d105      	bne.n	80207b2 <_scanf_chars+0xa2>
 80207a6:	68e2      	ldr	r2, [r4, #12]
 80207a8:	3201      	adds	r2, #1
 80207aa:	60e2      	str	r2, [r4, #12]
 80207ac:	69a2      	ldr	r2, [r4, #24]
 80207ae:	b102      	cbz	r2, 80207b2 <_scanf_chars+0xa2>
 80207b0:	7033      	strb	r3, [r6, #0]
 80207b2:	6923      	ldr	r3, [r4, #16]
 80207b4:	2000      	movs	r0, #0
 80207b6:	443b      	add	r3, r7
 80207b8:	6123      	str	r3, [r4, #16]
 80207ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207be:	bf00      	nop
 80207c0:	08023c31 	.word	0x08023c31

080207c4 <_scanf_i>:
 80207c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207c8:	4698      	mov	r8, r3
 80207ca:	b087      	sub	sp, #28
 80207cc:	4b72      	ldr	r3, [pc, #456]	; (8020998 <_scanf_i+0x1d4>)
 80207ce:	460c      	mov	r4, r1
 80207d0:	4682      	mov	sl, r0
 80207d2:	4616      	mov	r6, r2
 80207d4:	4627      	mov	r7, r4
 80207d6:	f04f 0b00 	mov.w	fp, #0
 80207da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80207de:	ab03      	add	r3, sp, #12
 80207e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80207e4:	4b6d      	ldr	r3, [pc, #436]	; (802099c <_scanf_i+0x1d8>)
 80207e6:	69a1      	ldr	r1, [r4, #24]
 80207e8:	4a6d      	ldr	r2, [pc, #436]	; (80209a0 <_scanf_i+0x1dc>)
 80207ea:	2903      	cmp	r1, #3
 80207ec:	bf18      	it	ne
 80207ee:	461a      	movne	r2, r3
 80207f0:	68a3      	ldr	r3, [r4, #8]
 80207f2:	9201      	str	r2, [sp, #4]
 80207f4:	1e5a      	subs	r2, r3, #1
 80207f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80207fa:	bf89      	itett	hi
 80207fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020800:	f04f 0900 	movls.w	r9, #0
 8020804:	eb03 0905 	addhi.w	r9, r3, r5
 8020808:	f240 135d 	movwhi	r3, #349	; 0x15d
 802080c:	bf88      	it	hi
 802080e:	60a3      	strhi	r3, [r4, #8]
 8020810:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020814:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020818:	463d      	mov	r5, r7
 802081a:	6023      	str	r3, [r4, #0]
 802081c:	6831      	ldr	r1, [r6, #0]
 802081e:	ab03      	add	r3, sp, #12
 8020820:	2202      	movs	r2, #2
 8020822:	7809      	ldrb	r1, [r1, #0]
 8020824:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020828:	f7fd f94e 	bl	801dac8 <memchr>
 802082c:	b328      	cbz	r0, 802087a <_scanf_i+0xb6>
 802082e:	f1bb 0f01 	cmp.w	fp, #1
 8020832:	d159      	bne.n	80208e8 <_scanf_i+0x124>
 8020834:	6862      	ldr	r2, [r4, #4]
 8020836:	b92a      	cbnz	r2, 8020844 <_scanf_i+0x80>
 8020838:	6822      	ldr	r2, [r4, #0]
 802083a:	2308      	movs	r3, #8
 802083c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020840:	6063      	str	r3, [r4, #4]
 8020842:	6022      	str	r2, [r4, #0]
 8020844:	6822      	ldr	r2, [r4, #0]
 8020846:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802084a:	6022      	str	r2, [r4, #0]
 802084c:	68a2      	ldr	r2, [r4, #8]
 802084e:	1e51      	subs	r1, r2, #1
 8020850:	60a1      	str	r1, [r4, #8]
 8020852:	b192      	cbz	r2, 802087a <_scanf_i+0xb6>
 8020854:	6832      	ldr	r2, [r6, #0]
 8020856:	1c51      	adds	r1, r2, #1
 8020858:	6031      	str	r1, [r6, #0]
 802085a:	7812      	ldrb	r2, [r2, #0]
 802085c:	f805 2b01 	strb.w	r2, [r5], #1
 8020860:	6872      	ldr	r2, [r6, #4]
 8020862:	3a01      	subs	r2, #1
 8020864:	2a00      	cmp	r2, #0
 8020866:	6072      	str	r2, [r6, #4]
 8020868:	dc07      	bgt.n	802087a <_scanf_i+0xb6>
 802086a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802086e:	4631      	mov	r1, r6
 8020870:	4650      	mov	r0, sl
 8020872:	4790      	blx	r2
 8020874:	2800      	cmp	r0, #0
 8020876:	f040 8085 	bne.w	8020984 <_scanf_i+0x1c0>
 802087a:	f10b 0b01 	add.w	fp, fp, #1
 802087e:	f1bb 0f03 	cmp.w	fp, #3
 8020882:	d1cb      	bne.n	802081c <_scanf_i+0x58>
 8020884:	6863      	ldr	r3, [r4, #4]
 8020886:	b90b      	cbnz	r3, 802088c <_scanf_i+0xc8>
 8020888:	230a      	movs	r3, #10
 802088a:	6063      	str	r3, [r4, #4]
 802088c:	6863      	ldr	r3, [r4, #4]
 802088e:	f04f 0b00 	mov.w	fp, #0
 8020892:	4944      	ldr	r1, [pc, #272]	; (80209a4 <_scanf_i+0x1e0>)
 8020894:	6960      	ldr	r0, [r4, #20]
 8020896:	1ac9      	subs	r1, r1, r3
 8020898:	f000 f886 	bl	80209a8 <__sccl>
 802089c:	68a3      	ldr	r3, [r4, #8]
 802089e:	6822      	ldr	r2, [r4, #0]
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d03d      	beq.n	8020920 <_scanf_i+0x15c>
 80208a4:	6831      	ldr	r1, [r6, #0]
 80208a6:	6960      	ldr	r0, [r4, #20]
 80208a8:	f891 c000 	ldrb.w	ip, [r1]
 80208ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 80208b0:	2800      	cmp	r0, #0
 80208b2:	d035      	beq.n	8020920 <_scanf_i+0x15c>
 80208b4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80208b8:	d124      	bne.n	8020904 <_scanf_i+0x140>
 80208ba:	0510      	lsls	r0, r2, #20
 80208bc:	d522      	bpl.n	8020904 <_scanf_i+0x140>
 80208be:	f10b 0b01 	add.w	fp, fp, #1
 80208c2:	f1b9 0f00 	cmp.w	r9, #0
 80208c6:	d003      	beq.n	80208d0 <_scanf_i+0x10c>
 80208c8:	3301      	adds	r3, #1
 80208ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80208ce:	60a3      	str	r3, [r4, #8]
 80208d0:	6873      	ldr	r3, [r6, #4]
 80208d2:	3b01      	subs	r3, #1
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	6073      	str	r3, [r6, #4]
 80208d8:	dd1b      	ble.n	8020912 <_scanf_i+0x14e>
 80208da:	6833      	ldr	r3, [r6, #0]
 80208dc:	3301      	adds	r3, #1
 80208de:	6033      	str	r3, [r6, #0]
 80208e0:	68a3      	ldr	r3, [r4, #8]
 80208e2:	3b01      	subs	r3, #1
 80208e4:	60a3      	str	r3, [r4, #8]
 80208e6:	e7d9      	b.n	802089c <_scanf_i+0xd8>
 80208e8:	f1bb 0f02 	cmp.w	fp, #2
 80208ec:	d1ae      	bne.n	802084c <_scanf_i+0x88>
 80208ee:	6822      	ldr	r2, [r4, #0]
 80208f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80208f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80208f8:	d1bf      	bne.n	802087a <_scanf_i+0xb6>
 80208fa:	2310      	movs	r3, #16
 80208fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020900:	6063      	str	r3, [r4, #4]
 8020902:	e7a2      	b.n	802084a <_scanf_i+0x86>
 8020904:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020908:	6022      	str	r2, [r4, #0]
 802090a:	780b      	ldrb	r3, [r1, #0]
 802090c:	f805 3b01 	strb.w	r3, [r5], #1
 8020910:	e7de      	b.n	80208d0 <_scanf_i+0x10c>
 8020912:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020916:	4631      	mov	r1, r6
 8020918:	4650      	mov	r0, sl
 802091a:	4798      	blx	r3
 802091c:	2800      	cmp	r0, #0
 802091e:	d0df      	beq.n	80208e0 <_scanf_i+0x11c>
 8020920:	6823      	ldr	r3, [r4, #0]
 8020922:	05d9      	lsls	r1, r3, #23
 8020924:	d50d      	bpl.n	8020942 <_scanf_i+0x17e>
 8020926:	42bd      	cmp	r5, r7
 8020928:	d909      	bls.n	802093e <_scanf_i+0x17a>
 802092a:	f105 39ff 	add.w	r9, r5, #4294967295
 802092e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020936:	4632      	mov	r2, r6
 8020938:	464d      	mov	r5, r9
 802093a:	4650      	mov	r0, sl
 802093c:	4798      	blx	r3
 802093e:	42bd      	cmp	r5, r7
 8020940:	d028      	beq.n	8020994 <_scanf_i+0x1d0>
 8020942:	6822      	ldr	r2, [r4, #0]
 8020944:	f012 0210 	ands.w	r2, r2, #16
 8020948:	d113      	bne.n	8020972 <_scanf_i+0x1ae>
 802094a:	702a      	strb	r2, [r5, #0]
 802094c:	4639      	mov	r1, r7
 802094e:	6863      	ldr	r3, [r4, #4]
 8020950:	4650      	mov	r0, sl
 8020952:	9e01      	ldr	r6, [sp, #4]
 8020954:	47b0      	blx	r6
 8020956:	f8d8 3000 	ldr.w	r3, [r8]
 802095a:	6821      	ldr	r1, [r4, #0]
 802095c:	1d1a      	adds	r2, r3, #4
 802095e:	f011 0f20 	tst.w	r1, #32
 8020962:	f8c8 2000 	str.w	r2, [r8]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	d00f      	beq.n	802098a <_scanf_i+0x1c6>
 802096a:	6018      	str	r0, [r3, #0]
 802096c:	68e3      	ldr	r3, [r4, #12]
 802096e:	3301      	adds	r3, #1
 8020970:	60e3      	str	r3, [r4, #12]
 8020972:	1bed      	subs	r5, r5, r7
 8020974:	6923      	ldr	r3, [r4, #16]
 8020976:	2000      	movs	r0, #0
 8020978:	445d      	add	r5, fp
 802097a:	442b      	add	r3, r5
 802097c:	6123      	str	r3, [r4, #16]
 802097e:	b007      	add	sp, #28
 8020980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020984:	f04f 0b00 	mov.w	fp, #0
 8020988:	e7ca      	b.n	8020920 <_scanf_i+0x15c>
 802098a:	07ca      	lsls	r2, r1, #31
 802098c:	bf4c      	ite	mi
 802098e:	8018      	strhmi	r0, [r3, #0]
 8020990:	6018      	strpl	r0, [r3, #0]
 8020992:	e7eb      	b.n	802096c <_scanf_i+0x1a8>
 8020994:	2001      	movs	r0, #1
 8020996:	e7f2      	b.n	802097e <_scanf_i+0x1ba>
 8020998:	080229c0 	.word	0x080229c0
 802099c:	08021369 	.word	0x08021369
 80209a0:	080200b9 	.word	0x080200b9
 80209a4:	08023d52 	.word	0x08023d52

080209a8 <__sccl>:
 80209a8:	b570      	push	{r4, r5, r6, lr}
 80209aa:	780b      	ldrb	r3, [r1, #0]
 80209ac:	4604      	mov	r4, r0
 80209ae:	3801      	subs	r0, #1
 80209b0:	2b5e      	cmp	r3, #94	; 0x5e
 80209b2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80209b6:	bf13      	iteet	ne
 80209b8:	1c4a      	addne	r2, r1, #1
 80209ba:	1c8a      	addeq	r2, r1, #2
 80209bc:	784b      	ldrbeq	r3, [r1, #1]
 80209be:	2100      	movne	r1, #0
 80209c0:	bf08      	it	eq
 80209c2:	2101      	moveq	r1, #1
 80209c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80209c8:	42a8      	cmp	r0, r5
 80209ca:	d1fb      	bne.n	80209c4 <__sccl+0x1c>
 80209cc:	b90b      	cbnz	r3, 80209d2 <__sccl+0x2a>
 80209ce:	1e50      	subs	r0, r2, #1
 80209d0:	bd70      	pop	{r4, r5, r6, pc}
 80209d2:	f081 0101 	eor.w	r1, r1, #1
 80209d6:	4610      	mov	r0, r2
 80209d8:	54e1      	strb	r1, [r4, r3]
 80209da:	4602      	mov	r2, r0
 80209dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80209e0:	2d2d      	cmp	r5, #45	; 0x2d
 80209e2:	d005      	beq.n	80209f0 <__sccl+0x48>
 80209e4:	2d5d      	cmp	r5, #93	; 0x5d
 80209e6:	d016      	beq.n	8020a16 <__sccl+0x6e>
 80209e8:	2d00      	cmp	r5, #0
 80209ea:	d0f1      	beq.n	80209d0 <__sccl+0x28>
 80209ec:	462b      	mov	r3, r5
 80209ee:	e7f2      	b.n	80209d6 <__sccl+0x2e>
 80209f0:	7846      	ldrb	r6, [r0, #1]
 80209f2:	2e5d      	cmp	r6, #93	; 0x5d
 80209f4:	d0fa      	beq.n	80209ec <__sccl+0x44>
 80209f6:	42b3      	cmp	r3, r6
 80209f8:	dcf8      	bgt.n	80209ec <__sccl+0x44>
 80209fa:	3002      	adds	r0, #2
 80209fc:	461a      	mov	r2, r3
 80209fe:	3201      	adds	r2, #1
 8020a00:	4296      	cmp	r6, r2
 8020a02:	54a1      	strb	r1, [r4, r2]
 8020a04:	dcfb      	bgt.n	80209fe <__sccl+0x56>
 8020a06:	1af2      	subs	r2, r6, r3
 8020a08:	1c5d      	adds	r5, r3, #1
 8020a0a:	3a01      	subs	r2, #1
 8020a0c:	42b3      	cmp	r3, r6
 8020a0e:	bfa8      	it	ge
 8020a10:	2200      	movge	r2, #0
 8020a12:	18ab      	adds	r3, r5, r2
 8020a14:	e7e1      	b.n	80209da <__sccl+0x32>
 8020a16:	4610      	mov	r0, r2
 8020a18:	e7da      	b.n	80209d0 <__sccl+0x28>

08020a1a <__submore>:
 8020a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a1e:	460c      	mov	r4, r1
 8020a20:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a26:	4299      	cmp	r1, r3
 8020a28:	d11a      	bne.n	8020a60 <__submore+0x46>
 8020a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020a2e:	f7fd ff63 	bl	801e8f8 <_malloc_r>
 8020a32:	b918      	cbnz	r0, 8020a3c <__submore+0x22>
 8020a34:	f04f 30ff 	mov.w	r0, #4294967295
 8020a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020a40:	6360      	str	r0, [r4, #52]	; 0x34
 8020a42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020a46:	63a3      	str	r3, [r4, #56]	; 0x38
 8020a48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020a4c:	7083      	strb	r3, [r0, #2]
 8020a4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020a52:	7043      	strb	r3, [r0, #1]
 8020a54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8020a58:	7003      	strb	r3, [r0, #0]
 8020a5a:	6020      	str	r0, [r4, #0]
 8020a5c:	2000      	movs	r0, #0
 8020a5e:	e7eb      	b.n	8020a38 <__submore+0x1e>
 8020a60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8020a62:	0077      	lsls	r7, r6, #1
 8020a64:	463a      	mov	r2, r7
 8020a66:	f000 fbde 	bl	8021226 <_realloc_r>
 8020a6a:	4605      	mov	r5, r0
 8020a6c:	2800      	cmp	r0, #0
 8020a6e:	d0e1      	beq.n	8020a34 <__submore+0x1a>
 8020a70:	eb00 0806 	add.w	r8, r0, r6
 8020a74:	4601      	mov	r1, r0
 8020a76:	4632      	mov	r2, r6
 8020a78:	4640      	mov	r0, r8
 8020a7a:	f7fd f833 	bl	801dae4 <memcpy>
 8020a7e:	f8c4 8000 	str.w	r8, [r4]
 8020a82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8020a86:	e7e9      	b.n	8020a5c <__submore+0x42>

08020a88 <memmove>:
 8020a88:	4288      	cmp	r0, r1
 8020a8a:	b510      	push	{r4, lr}
 8020a8c:	eb01 0402 	add.w	r4, r1, r2
 8020a90:	d902      	bls.n	8020a98 <memmove+0x10>
 8020a92:	4284      	cmp	r4, r0
 8020a94:	4623      	mov	r3, r4
 8020a96:	d807      	bhi.n	8020aa8 <memmove+0x20>
 8020a98:	1e43      	subs	r3, r0, #1
 8020a9a:	42a1      	cmp	r1, r4
 8020a9c:	d008      	beq.n	8020ab0 <memmove+0x28>
 8020a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020aa6:	e7f8      	b.n	8020a9a <memmove+0x12>
 8020aa8:	4402      	add	r2, r0
 8020aaa:	4601      	mov	r1, r0
 8020aac:	428a      	cmp	r2, r1
 8020aae:	d100      	bne.n	8020ab2 <memmove+0x2a>
 8020ab0:	bd10      	pop	{r4, pc}
 8020ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020aba:	e7f7      	b.n	8020aac <memmove+0x24>

08020abc <_sbrk_r>:
 8020abc:	b538      	push	{r3, r4, r5, lr}
 8020abe:	2300      	movs	r3, #0
 8020ac0:	4d05      	ldr	r5, [pc, #20]	; (8020ad8 <_sbrk_r+0x1c>)
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	4608      	mov	r0, r1
 8020ac6:	602b      	str	r3, [r5, #0]
 8020ac8:	f7e4 fff2 	bl	8005ab0 <_sbrk>
 8020acc:	1c43      	adds	r3, r0, #1
 8020ace:	d102      	bne.n	8020ad6 <_sbrk_r+0x1a>
 8020ad0:	682b      	ldr	r3, [r5, #0]
 8020ad2:	b103      	cbz	r3, 8020ad6 <_sbrk_r+0x1a>
 8020ad4:	6023      	str	r3, [r4, #0]
 8020ad6:	bd38      	pop	{r3, r4, r5, pc}
 8020ad8:	2000d380 	.word	0x2000d380
 8020adc:	00000000 	.word	0x00000000

08020ae0 <nan>:
 8020ae0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020ae8 <nan+0x8>
 8020ae4:	4770      	bx	lr
 8020ae6:	bf00      	nop
 8020ae8:	00000000 	.word	0x00000000
 8020aec:	7ff80000 	.word	0x7ff80000

08020af0 <__assert_func>:
 8020af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020af2:	4614      	mov	r4, r2
 8020af4:	461a      	mov	r2, r3
 8020af6:	4b09      	ldr	r3, [pc, #36]	; (8020b1c <__assert_func+0x2c>)
 8020af8:	4605      	mov	r5, r0
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	68d8      	ldr	r0, [r3, #12]
 8020afe:	b14c      	cbz	r4, 8020b14 <__assert_func+0x24>
 8020b00:	4b07      	ldr	r3, [pc, #28]	; (8020b20 <__assert_func+0x30>)
 8020b02:	9100      	str	r1, [sp, #0]
 8020b04:	4907      	ldr	r1, [pc, #28]	; (8020b24 <__assert_func+0x34>)
 8020b06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020b0a:	462b      	mov	r3, r5
 8020b0c:	f000 fc3c 	bl	8021388 <fiprintf>
 8020b10:	f000 fc4c 	bl	80213ac <abort>
 8020b14:	4b04      	ldr	r3, [pc, #16]	; (8020b28 <__assert_func+0x38>)
 8020b16:	461c      	mov	r4, r3
 8020b18:	e7f3      	b.n	8020b02 <__assert_func+0x12>
 8020b1a:	bf00      	nop
 8020b1c:	200000c4 	.word	0x200000c4
 8020b20:	08023d65 	.word	0x08023d65
 8020b24:	08023d72 	.word	0x08023d72
 8020b28:	08023da0 	.word	0x08023da0

08020b2c <_calloc_r>:
 8020b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b2e:	fba1 2402 	umull	r2, r4, r1, r2
 8020b32:	b94c      	cbnz	r4, 8020b48 <_calloc_r+0x1c>
 8020b34:	4611      	mov	r1, r2
 8020b36:	9201      	str	r2, [sp, #4]
 8020b38:	f7fd fede 	bl	801e8f8 <_malloc_r>
 8020b3c:	9a01      	ldr	r2, [sp, #4]
 8020b3e:	4605      	mov	r5, r0
 8020b40:	b930      	cbnz	r0, 8020b50 <_calloc_r+0x24>
 8020b42:	4628      	mov	r0, r5
 8020b44:	b003      	add	sp, #12
 8020b46:	bd30      	pop	{r4, r5, pc}
 8020b48:	220c      	movs	r2, #12
 8020b4a:	2500      	movs	r5, #0
 8020b4c:	6002      	str	r2, [r0, #0]
 8020b4e:	e7f8      	b.n	8020b42 <_calloc_r+0x16>
 8020b50:	4621      	mov	r1, r4
 8020b52:	f7fc ff28 	bl	801d9a6 <memset>
 8020b56:	e7f4      	b.n	8020b42 <_calloc_r+0x16>

08020b58 <rshift>:
 8020b58:	6903      	ldr	r3, [r0, #16]
 8020b5a:	114a      	asrs	r2, r1, #5
 8020b5c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b64:	f100 0414 	add.w	r4, r0, #20
 8020b68:	dd45      	ble.n	8020bf6 <rshift+0x9e>
 8020b6a:	f011 011f 	ands.w	r1, r1, #31
 8020b6e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020b72:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020b76:	d10c      	bne.n	8020b92 <rshift+0x3a>
 8020b78:	f100 0710 	add.w	r7, r0, #16
 8020b7c:	4629      	mov	r1, r5
 8020b7e:	42b1      	cmp	r1, r6
 8020b80:	d334      	bcc.n	8020bec <rshift+0x94>
 8020b82:	1a9b      	subs	r3, r3, r2
 8020b84:	1eea      	subs	r2, r5, #3
 8020b86:	009b      	lsls	r3, r3, #2
 8020b88:	4296      	cmp	r6, r2
 8020b8a:	bf38      	it	cc
 8020b8c:	2300      	movcc	r3, #0
 8020b8e:	4423      	add	r3, r4
 8020b90:	e015      	b.n	8020bbe <rshift+0x66>
 8020b92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020b96:	f1c1 0820 	rsb	r8, r1, #32
 8020b9a:	f105 0e04 	add.w	lr, r5, #4
 8020b9e:	46a1      	mov	r9, r4
 8020ba0:	40cf      	lsrs	r7, r1
 8020ba2:	4576      	cmp	r6, lr
 8020ba4:	46f4      	mov	ip, lr
 8020ba6:	d815      	bhi.n	8020bd4 <rshift+0x7c>
 8020ba8:	1a9a      	subs	r2, r3, r2
 8020baa:	3501      	adds	r5, #1
 8020bac:	0092      	lsls	r2, r2, #2
 8020bae:	3a04      	subs	r2, #4
 8020bb0:	42ae      	cmp	r6, r5
 8020bb2:	bf38      	it	cc
 8020bb4:	2200      	movcc	r2, #0
 8020bb6:	18a3      	adds	r3, r4, r2
 8020bb8:	50a7      	str	r7, [r4, r2]
 8020bba:	b107      	cbz	r7, 8020bbe <rshift+0x66>
 8020bbc:	3304      	adds	r3, #4
 8020bbe:	1b1a      	subs	r2, r3, r4
 8020bc0:	42a3      	cmp	r3, r4
 8020bc2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020bc6:	bf08      	it	eq
 8020bc8:	2300      	moveq	r3, #0
 8020bca:	6102      	str	r2, [r0, #16]
 8020bcc:	bf08      	it	eq
 8020bce:	6143      	streq	r3, [r0, #20]
 8020bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bd4:	f8dc c000 	ldr.w	ip, [ip]
 8020bd8:	fa0c fc08 	lsl.w	ip, ip, r8
 8020bdc:	ea4c 0707 	orr.w	r7, ip, r7
 8020be0:	f849 7b04 	str.w	r7, [r9], #4
 8020be4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020be8:	40cf      	lsrs	r7, r1
 8020bea:	e7da      	b.n	8020ba2 <rshift+0x4a>
 8020bec:	f851 cb04 	ldr.w	ip, [r1], #4
 8020bf0:	f847 cf04 	str.w	ip, [r7, #4]!
 8020bf4:	e7c3      	b.n	8020b7e <rshift+0x26>
 8020bf6:	4623      	mov	r3, r4
 8020bf8:	e7e1      	b.n	8020bbe <rshift+0x66>

08020bfa <__hexdig_fun>:
 8020bfa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020bfe:	2b09      	cmp	r3, #9
 8020c00:	d802      	bhi.n	8020c08 <__hexdig_fun+0xe>
 8020c02:	3820      	subs	r0, #32
 8020c04:	b2c0      	uxtb	r0, r0
 8020c06:	4770      	bx	lr
 8020c08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020c0c:	2b05      	cmp	r3, #5
 8020c0e:	d801      	bhi.n	8020c14 <__hexdig_fun+0x1a>
 8020c10:	3847      	subs	r0, #71	; 0x47
 8020c12:	e7f7      	b.n	8020c04 <__hexdig_fun+0xa>
 8020c14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020c18:	2b05      	cmp	r3, #5
 8020c1a:	d801      	bhi.n	8020c20 <__hexdig_fun+0x26>
 8020c1c:	3827      	subs	r0, #39	; 0x27
 8020c1e:	e7f1      	b.n	8020c04 <__hexdig_fun+0xa>
 8020c20:	2000      	movs	r0, #0
 8020c22:	4770      	bx	lr

08020c24 <__gethex>:
 8020c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c28:	4617      	mov	r7, r2
 8020c2a:	680a      	ldr	r2, [r1, #0]
 8020c2c:	b085      	sub	sp, #20
 8020c2e:	4681      	mov	r9, r0
 8020c30:	f102 0b02 	add.w	fp, r2, #2
 8020c34:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020c38:	468a      	mov	sl, r1
 8020c3a:	9302      	str	r3, [sp, #8]
 8020c3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8020c40:	32fe      	adds	r2, #254	; 0xfe
 8020c42:	eb02 030b 	add.w	r3, r2, fp
 8020c46:	46d8      	mov	r8, fp
 8020c48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8020c4c:	9301      	str	r3, [sp, #4]
 8020c4e:	2830      	cmp	r0, #48	; 0x30
 8020c50:	d0f7      	beq.n	8020c42 <__gethex+0x1e>
 8020c52:	f7ff ffd2 	bl	8020bfa <__hexdig_fun>
 8020c56:	4604      	mov	r4, r0
 8020c58:	2800      	cmp	r0, #0
 8020c5a:	d137      	bne.n	8020ccc <__gethex+0xa8>
 8020c5c:	2201      	movs	r2, #1
 8020c5e:	49a7      	ldr	r1, [pc, #668]	; (8020efc <__gethex+0x2d8>)
 8020c60:	4640      	mov	r0, r8
 8020c62:	f7fc fea8 	bl	801d9b6 <strncmp>
 8020c66:	4606      	mov	r6, r0
 8020c68:	2800      	cmp	r0, #0
 8020c6a:	d168      	bne.n	8020d3e <__gethex+0x11a>
 8020c6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020c70:	465d      	mov	r5, fp
 8020c72:	f7ff ffc2 	bl	8020bfa <__hexdig_fun>
 8020c76:	2800      	cmp	r0, #0
 8020c78:	d063      	beq.n	8020d42 <__gethex+0x11e>
 8020c7a:	465a      	mov	r2, fp
 8020c7c:	7810      	ldrb	r0, [r2, #0]
 8020c7e:	4690      	mov	r8, r2
 8020c80:	3201      	adds	r2, #1
 8020c82:	2830      	cmp	r0, #48	; 0x30
 8020c84:	d0fa      	beq.n	8020c7c <__gethex+0x58>
 8020c86:	f7ff ffb8 	bl	8020bfa <__hexdig_fun>
 8020c8a:	fab0 f480 	clz	r4, r0
 8020c8e:	2301      	movs	r3, #1
 8020c90:	465e      	mov	r6, fp
 8020c92:	0964      	lsrs	r4, r4, #5
 8020c94:	9301      	str	r3, [sp, #4]
 8020c96:	4642      	mov	r2, r8
 8020c98:	4615      	mov	r5, r2
 8020c9a:	3201      	adds	r2, #1
 8020c9c:	7828      	ldrb	r0, [r5, #0]
 8020c9e:	f7ff ffac 	bl	8020bfa <__hexdig_fun>
 8020ca2:	2800      	cmp	r0, #0
 8020ca4:	d1f8      	bne.n	8020c98 <__gethex+0x74>
 8020ca6:	2201      	movs	r2, #1
 8020ca8:	4994      	ldr	r1, [pc, #592]	; (8020efc <__gethex+0x2d8>)
 8020caa:	4628      	mov	r0, r5
 8020cac:	f7fc fe83 	bl	801d9b6 <strncmp>
 8020cb0:	b978      	cbnz	r0, 8020cd2 <__gethex+0xae>
 8020cb2:	b946      	cbnz	r6, 8020cc6 <__gethex+0xa2>
 8020cb4:	1c6e      	adds	r6, r5, #1
 8020cb6:	4632      	mov	r2, r6
 8020cb8:	4615      	mov	r5, r2
 8020cba:	3201      	adds	r2, #1
 8020cbc:	7828      	ldrb	r0, [r5, #0]
 8020cbe:	f7ff ff9c 	bl	8020bfa <__hexdig_fun>
 8020cc2:	2800      	cmp	r0, #0
 8020cc4:	d1f8      	bne.n	8020cb8 <__gethex+0x94>
 8020cc6:	1b73      	subs	r3, r6, r5
 8020cc8:	009e      	lsls	r6, r3, #2
 8020cca:	e004      	b.n	8020cd6 <__gethex+0xb2>
 8020ccc:	2400      	movs	r4, #0
 8020cce:	4626      	mov	r6, r4
 8020cd0:	e7e1      	b.n	8020c96 <__gethex+0x72>
 8020cd2:	2e00      	cmp	r6, #0
 8020cd4:	d1f7      	bne.n	8020cc6 <__gethex+0xa2>
 8020cd6:	782b      	ldrb	r3, [r5, #0]
 8020cd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020cdc:	2b50      	cmp	r3, #80	; 0x50
 8020cde:	d13d      	bne.n	8020d5c <__gethex+0x138>
 8020ce0:	786b      	ldrb	r3, [r5, #1]
 8020ce2:	2b2b      	cmp	r3, #43	; 0x2b
 8020ce4:	d02f      	beq.n	8020d46 <__gethex+0x122>
 8020ce6:	2b2d      	cmp	r3, #45	; 0x2d
 8020ce8:	d031      	beq.n	8020d4e <__gethex+0x12a>
 8020cea:	1c69      	adds	r1, r5, #1
 8020cec:	f04f 0b00 	mov.w	fp, #0
 8020cf0:	7808      	ldrb	r0, [r1, #0]
 8020cf2:	f7ff ff82 	bl	8020bfa <__hexdig_fun>
 8020cf6:	1e42      	subs	r2, r0, #1
 8020cf8:	b2d2      	uxtb	r2, r2
 8020cfa:	2a18      	cmp	r2, #24
 8020cfc:	d82e      	bhi.n	8020d5c <__gethex+0x138>
 8020cfe:	f1a0 0210 	sub.w	r2, r0, #16
 8020d02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020d06:	f7ff ff78 	bl	8020bfa <__hexdig_fun>
 8020d0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8020d0e:	fa5f fc8c 	uxtb.w	ip, ip
 8020d12:	f1bc 0f18 	cmp.w	ip, #24
 8020d16:	d91d      	bls.n	8020d54 <__gethex+0x130>
 8020d18:	f1bb 0f00 	cmp.w	fp, #0
 8020d1c:	d000      	beq.n	8020d20 <__gethex+0xfc>
 8020d1e:	4252      	negs	r2, r2
 8020d20:	4416      	add	r6, r2
 8020d22:	f8ca 1000 	str.w	r1, [sl]
 8020d26:	b1dc      	cbz	r4, 8020d60 <__gethex+0x13c>
 8020d28:	9b01      	ldr	r3, [sp, #4]
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	bf14      	ite	ne
 8020d2e:	f04f 0800 	movne.w	r8, #0
 8020d32:	f04f 0806 	moveq.w	r8, #6
 8020d36:	4640      	mov	r0, r8
 8020d38:	b005      	add	sp, #20
 8020d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d3e:	4645      	mov	r5, r8
 8020d40:	4626      	mov	r6, r4
 8020d42:	2401      	movs	r4, #1
 8020d44:	e7c7      	b.n	8020cd6 <__gethex+0xb2>
 8020d46:	f04f 0b00 	mov.w	fp, #0
 8020d4a:	1ca9      	adds	r1, r5, #2
 8020d4c:	e7d0      	b.n	8020cf0 <__gethex+0xcc>
 8020d4e:	f04f 0b01 	mov.w	fp, #1
 8020d52:	e7fa      	b.n	8020d4a <__gethex+0x126>
 8020d54:	230a      	movs	r3, #10
 8020d56:	fb03 0002 	mla	r0, r3, r2, r0
 8020d5a:	e7d0      	b.n	8020cfe <__gethex+0xda>
 8020d5c:	4629      	mov	r1, r5
 8020d5e:	e7e0      	b.n	8020d22 <__gethex+0xfe>
 8020d60:	eba5 0308 	sub.w	r3, r5, r8
 8020d64:	4621      	mov	r1, r4
 8020d66:	3b01      	subs	r3, #1
 8020d68:	2b07      	cmp	r3, #7
 8020d6a:	dc0a      	bgt.n	8020d82 <__gethex+0x15e>
 8020d6c:	4648      	mov	r0, r9
 8020d6e:	f7fd fe4f 	bl	801ea10 <_Balloc>
 8020d72:	4604      	mov	r4, r0
 8020d74:	b940      	cbnz	r0, 8020d88 <__gethex+0x164>
 8020d76:	4b62      	ldr	r3, [pc, #392]	; (8020f00 <__gethex+0x2dc>)
 8020d78:	4602      	mov	r2, r0
 8020d7a:	21e4      	movs	r1, #228	; 0xe4
 8020d7c:	4861      	ldr	r0, [pc, #388]	; (8020f04 <__gethex+0x2e0>)
 8020d7e:	f7ff feb7 	bl	8020af0 <__assert_func>
 8020d82:	3101      	adds	r1, #1
 8020d84:	105b      	asrs	r3, r3, #1
 8020d86:	e7ef      	b.n	8020d68 <__gethex+0x144>
 8020d88:	2300      	movs	r3, #0
 8020d8a:	f100 0a14 	add.w	sl, r0, #20
 8020d8e:	495b      	ldr	r1, [pc, #364]	; (8020efc <__gethex+0x2d8>)
 8020d90:	469b      	mov	fp, r3
 8020d92:	f8cd a004 	str.w	sl, [sp, #4]
 8020d96:	45a8      	cmp	r8, r5
 8020d98:	d342      	bcc.n	8020e20 <__gethex+0x1fc>
 8020d9a:	9801      	ldr	r0, [sp, #4]
 8020d9c:	f840 bb04 	str.w	fp, [r0], #4
 8020da0:	eba0 000a 	sub.w	r0, r0, sl
 8020da4:	1080      	asrs	r0, r0, #2
 8020da6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8020daa:	6120      	str	r0, [r4, #16]
 8020dac:	4658      	mov	r0, fp
 8020dae:	f7fd ff23 	bl	801ebf8 <__hi0bits>
 8020db2:	683d      	ldr	r5, [r7, #0]
 8020db4:	eba8 0000 	sub.w	r0, r8, r0
 8020db8:	42a8      	cmp	r0, r5
 8020dba:	dd59      	ble.n	8020e70 <__gethex+0x24c>
 8020dbc:	eba0 0805 	sub.w	r8, r0, r5
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	4641      	mov	r1, r8
 8020dc4:	f7fe fabc 	bl	801f340 <__any_on>
 8020dc8:	4683      	mov	fp, r0
 8020dca:	b1b8      	cbz	r0, 8020dfc <__gethex+0x1d8>
 8020dcc:	f108 33ff 	add.w	r3, r8, #4294967295
 8020dd0:	f04f 0b01 	mov.w	fp, #1
 8020dd4:	1159      	asrs	r1, r3, #5
 8020dd6:	f003 021f 	and.w	r2, r3, #31
 8020dda:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020dde:	fa0b f202 	lsl.w	r2, fp, r2
 8020de2:	420a      	tst	r2, r1
 8020de4:	d00a      	beq.n	8020dfc <__gethex+0x1d8>
 8020de6:	455b      	cmp	r3, fp
 8020de8:	dd06      	ble.n	8020df8 <__gethex+0x1d4>
 8020dea:	f1a8 0102 	sub.w	r1, r8, #2
 8020dee:	4620      	mov	r0, r4
 8020df0:	f7fe faa6 	bl	801f340 <__any_on>
 8020df4:	2800      	cmp	r0, #0
 8020df6:	d138      	bne.n	8020e6a <__gethex+0x246>
 8020df8:	f04f 0b02 	mov.w	fp, #2
 8020dfc:	4446      	add	r6, r8
 8020dfe:	4641      	mov	r1, r8
 8020e00:	4620      	mov	r0, r4
 8020e02:	f7ff fea9 	bl	8020b58 <rshift>
 8020e06:	68bb      	ldr	r3, [r7, #8]
 8020e08:	42b3      	cmp	r3, r6
 8020e0a:	da41      	bge.n	8020e90 <__gethex+0x26c>
 8020e0c:	4621      	mov	r1, r4
 8020e0e:	4648      	mov	r0, r9
 8020e10:	f7fd fe3e 	bl	801ea90 <_Bfree>
 8020e14:	2300      	movs	r3, #0
 8020e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8020e1c:	6013      	str	r3, [r2, #0]
 8020e1e:	e78a      	b.n	8020d36 <__gethex+0x112>
 8020e20:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8020e24:	2a2e      	cmp	r2, #46	; 0x2e
 8020e26:	d014      	beq.n	8020e52 <__gethex+0x22e>
 8020e28:	2b20      	cmp	r3, #32
 8020e2a:	d106      	bne.n	8020e3a <__gethex+0x216>
 8020e2c:	9b01      	ldr	r3, [sp, #4]
 8020e2e:	f843 bb04 	str.w	fp, [r3], #4
 8020e32:	f04f 0b00 	mov.w	fp, #0
 8020e36:	9301      	str	r3, [sp, #4]
 8020e38:	465b      	mov	r3, fp
 8020e3a:	7828      	ldrb	r0, [r5, #0]
 8020e3c:	9303      	str	r3, [sp, #12]
 8020e3e:	f7ff fedc 	bl	8020bfa <__hexdig_fun>
 8020e42:	9b03      	ldr	r3, [sp, #12]
 8020e44:	f000 000f 	and.w	r0, r0, #15
 8020e48:	4098      	lsls	r0, r3
 8020e4a:	3304      	adds	r3, #4
 8020e4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8020e50:	e7a1      	b.n	8020d96 <__gethex+0x172>
 8020e52:	45a8      	cmp	r8, r5
 8020e54:	d8e8      	bhi.n	8020e28 <__gethex+0x204>
 8020e56:	2201      	movs	r2, #1
 8020e58:	4628      	mov	r0, r5
 8020e5a:	9303      	str	r3, [sp, #12]
 8020e5c:	f7fc fdab 	bl	801d9b6 <strncmp>
 8020e60:	4926      	ldr	r1, [pc, #152]	; (8020efc <__gethex+0x2d8>)
 8020e62:	9b03      	ldr	r3, [sp, #12]
 8020e64:	2800      	cmp	r0, #0
 8020e66:	d1df      	bne.n	8020e28 <__gethex+0x204>
 8020e68:	e795      	b.n	8020d96 <__gethex+0x172>
 8020e6a:	f04f 0b03 	mov.w	fp, #3
 8020e6e:	e7c5      	b.n	8020dfc <__gethex+0x1d8>
 8020e70:	da0b      	bge.n	8020e8a <__gethex+0x266>
 8020e72:	eba5 0800 	sub.w	r8, r5, r0
 8020e76:	4621      	mov	r1, r4
 8020e78:	4648      	mov	r0, r9
 8020e7a:	4642      	mov	r2, r8
 8020e7c:	eba6 0608 	sub.w	r6, r6, r8
 8020e80:	f7fe f822 	bl	801eec8 <__lshift>
 8020e84:	4604      	mov	r4, r0
 8020e86:	f100 0a14 	add.w	sl, r0, #20
 8020e8a:	f04f 0b00 	mov.w	fp, #0
 8020e8e:	e7ba      	b.n	8020e06 <__gethex+0x1e2>
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	42b3      	cmp	r3, r6
 8020e94:	dd74      	ble.n	8020f80 <__gethex+0x35c>
 8020e96:	1b9e      	subs	r6, r3, r6
 8020e98:	42b5      	cmp	r5, r6
 8020e9a:	dc35      	bgt.n	8020f08 <__gethex+0x2e4>
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	2b02      	cmp	r3, #2
 8020ea0:	d023      	beq.n	8020eea <__gethex+0x2c6>
 8020ea2:	2b03      	cmp	r3, #3
 8020ea4:	d025      	beq.n	8020ef2 <__gethex+0x2ce>
 8020ea6:	2b01      	cmp	r3, #1
 8020ea8:	d115      	bne.n	8020ed6 <__gethex+0x2b2>
 8020eaa:	42b5      	cmp	r5, r6
 8020eac:	d113      	bne.n	8020ed6 <__gethex+0x2b2>
 8020eae:	2d01      	cmp	r5, #1
 8020eb0:	d10b      	bne.n	8020eca <__gethex+0x2a6>
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8020eb8:	9a02      	ldr	r2, [sp, #8]
 8020eba:	6013      	str	r3, [r2, #0]
 8020ebc:	2301      	movs	r3, #1
 8020ebe:	6123      	str	r3, [r4, #16]
 8020ec0:	f8ca 3000 	str.w	r3, [sl]
 8020ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ec6:	601c      	str	r4, [r3, #0]
 8020ec8:	e735      	b.n	8020d36 <__gethex+0x112>
 8020eca:	1e69      	subs	r1, r5, #1
 8020ecc:	4620      	mov	r0, r4
 8020ece:	f7fe fa37 	bl	801f340 <__any_on>
 8020ed2:	2800      	cmp	r0, #0
 8020ed4:	d1ed      	bne.n	8020eb2 <__gethex+0x28e>
 8020ed6:	4621      	mov	r1, r4
 8020ed8:	4648      	mov	r0, r9
 8020eda:	f7fd fdd9 	bl	801ea90 <_Bfree>
 8020ede:	2300      	movs	r3, #0
 8020ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ee2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8020ee6:	6013      	str	r3, [r2, #0]
 8020ee8:	e725      	b.n	8020d36 <__gethex+0x112>
 8020eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d1f2      	bne.n	8020ed6 <__gethex+0x2b2>
 8020ef0:	e7df      	b.n	8020eb2 <__gethex+0x28e>
 8020ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d1dc      	bne.n	8020eb2 <__gethex+0x28e>
 8020ef8:	e7ed      	b.n	8020ed6 <__gethex+0x2b2>
 8020efa:	bf00      	nop
 8020efc:	08023bdc 	.word	0x08023bdc
 8020f00:	08023a75 	.word	0x08023a75
 8020f04:	08023da1 	.word	0x08023da1
 8020f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8020f0c:	f1bb 0f00 	cmp.w	fp, #0
 8020f10:	d133      	bne.n	8020f7a <__gethex+0x356>
 8020f12:	f1b8 0f00 	cmp.w	r8, #0
 8020f16:	d004      	beq.n	8020f22 <__gethex+0x2fe>
 8020f18:	4641      	mov	r1, r8
 8020f1a:	4620      	mov	r0, r4
 8020f1c:	f7fe fa10 	bl	801f340 <__any_on>
 8020f20:	4683      	mov	fp, r0
 8020f22:	ea4f 1268 	mov.w	r2, r8, asr #5
 8020f26:	2301      	movs	r3, #1
 8020f28:	f008 081f 	and.w	r8, r8, #31
 8020f2c:	4631      	mov	r1, r6
 8020f2e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8020f32:	4620      	mov	r0, r4
 8020f34:	fa03 f308 	lsl.w	r3, r3, r8
 8020f38:	1bad      	subs	r5, r5, r6
 8020f3a:	f04f 0802 	mov.w	r8, #2
 8020f3e:	4213      	tst	r3, r2
 8020f40:	bf18      	it	ne
 8020f42:	f04b 0b02 	orrne.w	fp, fp, #2
 8020f46:	f7ff fe07 	bl	8020b58 <rshift>
 8020f4a:	687e      	ldr	r6, [r7, #4]
 8020f4c:	f1bb 0f00 	cmp.w	fp, #0
 8020f50:	d04a      	beq.n	8020fe8 <__gethex+0x3c4>
 8020f52:	68fb      	ldr	r3, [r7, #12]
 8020f54:	2b02      	cmp	r3, #2
 8020f56:	d016      	beq.n	8020f86 <__gethex+0x362>
 8020f58:	2b03      	cmp	r3, #3
 8020f5a:	d018      	beq.n	8020f8e <__gethex+0x36a>
 8020f5c:	2b01      	cmp	r3, #1
 8020f5e:	d109      	bne.n	8020f74 <__gethex+0x350>
 8020f60:	f01b 0f02 	tst.w	fp, #2
 8020f64:	d006      	beq.n	8020f74 <__gethex+0x350>
 8020f66:	f8da 3000 	ldr.w	r3, [sl]
 8020f6a:	ea4b 0b03 	orr.w	fp, fp, r3
 8020f6e:	f01b 0f01 	tst.w	fp, #1
 8020f72:	d10f      	bne.n	8020f94 <__gethex+0x370>
 8020f74:	f048 0810 	orr.w	r8, r8, #16
 8020f78:	e036      	b.n	8020fe8 <__gethex+0x3c4>
 8020f7a:	f04f 0b01 	mov.w	fp, #1
 8020f7e:	e7d0      	b.n	8020f22 <__gethex+0x2fe>
 8020f80:	f04f 0801 	mov.w	r8, #1
 8020f84:	e7e2      	b.n	8020f4c <__gethex+0x328>
 8020f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f88:	f1c3 0301 	rsb	r3, r3, #1
 8020f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d0ef      	beq.n	8020f74 <__gethex+0x350>
 8020f94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020f98:	f104 0214 	add.w	r2, r4, #20
 8020f9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020fa0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8020fa4:	9301      	str	r3, [sp, #4]
 8020fa6:	2300      	movs	r3, #0
 8020fa8:	4694      	mov	ip, r2
 8020faa:	f852 1b04 	ldr.w	r1, [r2], #4
 8020fae:	f1b1 3fff 	cmp.w	r1, #4294967295
 8020fb2:	d01e      	beq.n	8020ff2 <__gethex+0x3ce>
 8020fb4:	3101      	adds	r1, #1
 8020fb6:	f8cc 1000 	str.w	r1, [ip]
 8020fba:	f1b8 0f02 	cmp.w	r8, #2
 8020fbe:	f104 0214 	add.w	r2, r4, #20
 8020fc2:	d13d      	bne.n	8021040 <__gethex+0x41c>
 8020fc4:	683b      	ldr	r3, [r7, #0]
 8020fc6:	3b01      	subs	r3, #1
 8020fc8:	42ab      	cmp	r3, r5
 8020fca:	d10b      	bne.n	8020fe4 <__gethex+0x3c0>
 8020fcc:	1169      	asrs	r1, r5, #5
 8020fce:	2301      	movs	r3, #1
 8020fd0:	f005 051f 	and.w	r5, r5, #31
 8020fd4:	fa03 f505 	lsl.w	r5, r3, r5
 8020fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020fdc:	421d      	tst	r5, r3
 8020fde:	bf18      	it	ne
 8020fe0:	f04f 0801 	movne.w	r8, #1
 8020fe4:	f048 0820 	orr.w	r8, r8, #32
 8020fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020fea:	601c      	str	r4, [r3, #0]
 8020fec:	9b02      	ldr	r3, [sp, #8]
 8020fee:	601e      	str	r6, [r3, #0]
 8020ff0:	e6a1      	b.n	8020d36 <__gethex+0x112>
 8020ff2:	4290      	cmp	r0, r2
 8020ff4:	f842 3c04 	str.w	r3, [r2, #-4]
 8020ff8:	d8d6      	bhi.n	8020fa8 <__gethex+0x384>
 8020ffa:	68a2      	ldr	r2, [r4, #8]
 8020ffc:	4593      	cmp	fp, r2
 8020ffe:	db17      	blt.n	8021030 <__gethex+0x40c>
 8021000:	6861      	ldr	r1, [r4, #4]
 8021002:	4648      	mov	r0, r9
 8021004:	3101      	adds	r1, #1
 8021006:	f7fd fd03 	bl	801ea10 <_Balloc>
 802100a:	4682      	mov	sl, r0
 802100c:	b918      	cbnz	r0, 8021016 <__gethex+0x3f2>
 802100e:	4b1b      	ldr	r3, [pc, #108]	; (802107c <__gethex+0x458>)
 8021010:	4602      	mov	r2, r0
 8021012:	2184      	movs	r1, #132	; 0x84
 8021014:	e6b2      	b.n	8020d7c <__gethex+0x158>
 8021016:	6922      	ldr	r2, [r4, #16]
 8021018:	f104 010c 	add.w	r1, r4, #12
 802101c:	300c      	adds	r0, #12
 802101e:	3202      	adds	r2, #2
 8021020:	0092      	lsls	r2, r2, #2
 8021022:	f7fc fd5f 	bl	801dae4 <memcpy>
 8021026:	4621      	mov	r1, r4
 8021028:	4654      	mov	r4, sl
 802102a:	4648      	mov	r0, r9
 802102c:	f7fd fd30 	bl	801ea90 <_Bfree>
 8021030:	6922      	ldr	r2, [r4, #16]
 8021032:	1c51      	adds	r1, r2, #1
 8021034:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021038:	6121      	str	r1, [r4, #16]
 802103a:	2101      	movs	r1, #1
 802103c:	6151      	str	r1, [r2, #20]
 802103e:	e7bc      	b.n	8020fba <__gethex+0x396>
 8021040:	6921      	ldr	r1, [r4, #16]
 8021042:	4559      	cmp	r1, fp
 8021044:	dd0b      	ble.n	802105e <__gethex+0x43a>
 8021046:	2101      	movs	r1, #1
 8021048:	4620      	mov	r0, r4
 802104a:	f7ff fd85 	bl	8020b58 <rshift>
 802104e:	3601      	adds	r6, #1
 8021050:	68bb      	ldr	r3, [r7, #8]
 8021052:	42b3      	cmp	r3, r6
 8021054:	f6ff aeda 	blt.w	8020e0c <__gethex+0x1e8>
 8021058:	f04f 0801 	mov.w	r8, #1
 802105c:	e7c2      	b.n	8020fe4 <__gethex+0x3c0>
 802105e:	f015 051f 	ands.w	r5, r5, #31
 8021062:	d0f9      	beq.n	8021058 <__gethex+0x434>
 8021064:	9b01      	ldr	r3, [sp, #4]
 8021066:	f1c5 0520 	rsb	r5, r5, #32
 802106a:	441a      	add	r2, r3
 802106c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8021070:	f7fd fdc2 	bl	801ebf8 <__hi0bits>
 8021074:	42a8      	cmp	r0, r5
 8021076:	dbe6      	blt.n	8021046 <__gethex+0x422>
 8021078:	e7ee      	b.n	8021058 <__gethex+0x434>
 802107a:	bf00      	nop
 802107c:	08023a75 	.word	0x08023a75

08021080 <L_shift>:
 8021080:	f1c2 0208 	rsb	r2, r2, #8
 8021084:	0092      	lsls	r2, r2, #2
 8021086:	b570      	push	{r4, r5, r6, lr}
 8021088:	f1c2 0620 	rsb	r6, r2, #32
 802108c:	6843      	ldr	r3, [r0, #4]
 802108e:	6804      	ldr	r4, [r0, #0]
 8021090:	fa03 f506 	lsl.w	r5, r3, r6
 8021094:	40d3      	lsrs	r3, r2
 8021096:	432c      	orrs	r4, r5
 8021098:	6004      	str	r4, [r0, #0]
 802109a:	f840 3f04 	str.w	r3, [r0, #4]!
 802109e:	4288      	cmp	r0, r1
 80210a0:	d3f4      	bcc.n	802108c <L_shift+0xc>
 80210a2:	bd70      	pop	{r4, r5, r6, pc}

080210a4 <__match>:
 80210a4:	6803      	ldr	r3, [r0, #0]
 80210a6:	3301      	adds	r3, #1
 80210a8:	b530      	push	{r4, r5, lr}
 80210aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80210ae:	b914      	cbnz	r4, 80210b6 <__match+0x12>
 80210b0:	6003      	str	r3, [r0, #0]
 80210b2:	2001      	movs	r0, #1
 80210b4:	bd30      	pop	{r4, r5, pc}
 80210b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80210be:	2d19      	cmp	r5, #25
 80210c0:	bf98      	it	ls
 80210c2:	3220      	addls	r2, #32
 80210c4:	42a2      	cmp	r2, r4
 80210c6:	d0f0      	beq.n	80210aa <__match+0x6>
 80210c8:	2000      	movs	r0, #0
 80210ca:	e7f3      	b.n	80210b4 <__match+0x10>

080210cc <__hexnan>:
 80210cc:	680b      	ldr	r3, [r1, #0]
 80210ce:	6801      	ldr	r1, [r0, #0]
 80210d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d4:	115e      	asrs	r6, r3, #5
 80210d6:	f013 031f 	ands.w	r3, r3, #31
 80210da:	f04f 0500 	mov.w	r5, #0
 80210de:	b087      	sub	sp, #28
 80210e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80210e4:	4682      	mov	sl, r0
 80210e6:	4690      	mov	r8, r2
 80210e8:	46ab      	mov	fp, r5
 80210ea:	bf18      	it	ne
 80210ec:	3604      	addne	r6, #4
 80210ee:	9301      	str	r3, [sp, #4]
 80210f0:	9502      	str	r5, [sp, #8]
 80210f2:	1f37      	subs	r7, r6, #4
 80210f4:	f846 5c04 	str.w	r5, [r6, #-4]
 80210f8:	46b9      	mov	r9, r7
 80210fa:	463c      	mov	r4, r7
 80210fc:	1c4b      	adds	r3, r1, #1
 80210fe:	784a      	ldrb	r2, [r1, #1]
 8021100:	9303      	str	r3, [sp, #12]
 8021102:	b342      	cbz	r2, 8021156 <__hexnan+0x8a>
 8021104:	4610      	mov	r0, r2
 8021106:	9105      	str	r1, [sp, #20]
 8021108:	9204      	str	r2, [sp, #16]
 802110a:	f7ff fd76 	bl	8020bfa <__hexdig_fun>
 802110e:	2800      	cmp	r0, #0
 8021110:	d14f      	bne.n	80211b2 <__hexnan+0xe6>
 8021112:	9a04      	ldr	r2, [sp, #16]
 8021114:	9905      	ldr	r1, [sp, #20]
 8021116:	2a20      	cmp	r2, #32
 8021118:	d818      	bhi.n	802114c <__hexnan+0x80>
 802111a:	9b02      	ldr	r3, [sp, #8]
 802111c:	459b      	cmp	fp, r3
 802111e:	dd13      	ble.n	8021148 <__hexnan+0x7c>
 8021120:	454c      	cmp	r4, r9
 8021122:	d206      	bcs.n	8021132 <__hexnan+0x66>
 8021124:	2d07      	cmp	r5, #7
 8021126:	dc04      	bgt.n	8021132 <__hexnan+0x66>
 8021128:	462a      	mov	r2, r5
 802112a:	4649      	mov	r1, r9
 802112c:	4620      	mov	r0, r4
 802112e:	f7ff ffa7 	bl	8021080 <L_shift>
 8021132:	4544      	cmp	r4, r8
 8021134:	d94f      	bls.n	80211d6 <__hexnan+0x10a>
 8021136:	2300      	movs	r3, #0
 8021138:	f1a4 0904 	sub.w	r9, r4, #4
 802113c:	f8cd b008 	str.w	fp, [sp, #8]
 8021140:	f844 3c04 	str.w	r3, [r4, #-4]
 8021144:	461d      	mov	r5, r3
 8021146:	464c      	mov	r4, r9
 8021148:	9903      	ldr	r1, [sp, #12]
 802114a:	e7d7      	b.n	80210fc <__hexnan+0x30>
 802114c:	2a29      	cmp	r2, #41	; 0x29
 802114e:	d154      	bne.n	80211fa <__hexnan+0x12e>
 8021150:	3102      	adds	r1, #2
 8021152:	f8ca 1000 	str.w	r1, [sl]
 8021156:	f1bb 0f00 	cmp.w	fp, #0
 802115a:	d04e      	beq.n	80211fa <__hexnan+0x12e>
 802115c:	454c      	cmp	r4, r9
 802115e:	d206      	bcs.n	802116e <__hexnan+0xa2>
 8021160:	2d07      	cmp	r5, #7
 8021162:	dc04      	bgt.n	802116e <__hexnan+0xa2>
 8021164:	462a      	mov	r2, r5
 8021166:	4649      	mov	r1, r9
 8021168:	4620      	mov	r0, r4
 802116a:	f7ff ff89 	bl	8021080 <L_shift>
 802116e:	4544      	cmp	r4, r8
 8021170:	d933      	bls.n	80211da <__hexnan+0x10e>
 8021172:	f1a8 0204 	sub.w	r2, r8, #4
 8021176:	4623      	mov	r3, r4
 8021178:	f853 1b04 	ldr.w	r1, [r3], #4
 802117c:	429f      	cmp	r7, r3
 802117e:	f842 1f04 	str.w	r1, [r2, #4]!
 8021182:	d2f9      	bcs.n	8021178 <__hexnan+0xac>
 8021184:	1b3b      	subs	r3, r7, r4
 8021186:	3e03      	subs	r6, #3
 8021188:	3401      	adds	r4, #1
 802118a:	2200      	movs	r2, #0
 802118c:	f023 0303 	bic.w	r3, r3, #3
 8021190:	3304      	adds	r3, #4
 8021192:	42a6      	cmp	r6, r4
 8021194:	bf38      	it	cc
 8021196:	2304      	movcc	r3, #4
 8021198:	4443      	add	r3, r8
 802119a:	f843 2b04 	str.w	r2, [r3], #4
 802119e:	429f      	cmp	r7, r3
 80211a0:	d2fb      	bcs.n	802119a <__hexnan+0xce>
 80211a2:	683b      	ldr	r3, [r7, #0]
 80211a4:	b91b      	cbnz	r3, 80211ae <__hexnan+0xe2>
 80211a6:	4547      	cmp	r7, r8
 80211a8:	d125      	bne.n	80211f6 <__hexnan+0x12a>
 80211aa:	2301      	movs	r3, #1
 80211ac:	603b      	str	r3, [r7, #0]
 80211ae:	2005      	movs	r0, #5
 80211b0:	e024      	b.n	80211fc <__hexnan+0x130>
 80211b2:	3501      	adds	r5, #1
 80211b4:	f10b 0b01 	add.w	fp, fp, #1
 80211b8:	2d08      	cmp	r5, #8
 80211ba:	dd05      	ble.n	80211c8 <__hexnan+0xfc>
 80211bc:	4544      	cmp	r4, r8
 80211be:	d9c3      	bls.n	8021148 <__hexnan+0x7c>
 80211c0:	2300      	movs	r3, #0
 80211c2:	3c04      	subs	r4, #4
 80211c4:	2501      	movs	r5, #1
 80211c6:	6023      	str	r3, [r4, #0]
 80211c8:	6822      	ldr	r2, [r4, #0]
 80211ca:	f000 000f 	and.w	r0, r0, #15
 80211ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80211d2:	6020      	str	r0, [r4, #0]
 80211d4:	e7b8      	b.n	8021148 <__hexnan+0x7c>
 80211d6:	2508      	movs	r5, #8
 80211d8:	e7b6      	b.n	8021148 <__hexnan+0x7c>
 80211da:	9b01      	ldr	r3, [sp, #4]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d0e0      	beq.n	80211a2 <__hexnan+0xd6>
 80211e0:	f1c3 0320 	rsb	r3, r3, #32
 80211e4:	f04f 32ff 	mov.w	r2, #4294967295
 80211e8:	40da      	lsrs	r2, r3
 80211ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80211ee:	4013      	ands	r3, r2
 80211f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80211f4:	e7d5      	b.n	80211a2 <__hexnan+0xd6>
 80211f6:	3f04      	subs	r7, #4
 80211f8:	e7d3      	b.n	80211a2 <__hexnan+0xd6>
 80211fa:	2004      	movs	r0, #4
 80211fc:	b007      	add	sp, #28
 80211fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021202 <__ascii_mbtowc>:
 8021202:	b082      	sub	sp, #8
 8021204:	b901      	cbnz	r1, 8021208 <__ascii_mbtowc+0x6>
 8021206:	a901      	add	r1, sp, #4
 8021208:	b142      	cbz	r2, 802121c <__ascii_mbtowc+0x1a>
 802120a:	b14b      	cbz	r3, 8021220 <__ascii_mbtowc+0x1e>
 802120c:	7813      	ldrb	r3, [r2, #0]
 802120e:	600b      	str	r3, [r1, #0]
 8021210:	7812      	ldrb	r2, [r2, #0]
 8021212:	1e10      	subs	r0, r2, #0
 8021214:	bf18      	it	ne
 8021216:	2001      	movne	r0, #1
 8021218:	b002      	add	sp, #8
 802121a:	4770      	bx	lr
 802121c:	4610      	mov	r0, r2
 802121e:	e7fb      	b.n	8021218 <__ascii_mbtowc+0x16>
 8021220:	f06f 0001 	mvn.w	r0, #1
 8021224:	e7f8      	b.n	8021218 <__ascii_mbtowc+0x16>

08021226 <_realloc_r>:
 8021226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802122a:	4680      	mov	r8, r0
 802122c:	4614      	mov	r4, r2
 802122e:	460e      	mov	r6, r1
 8021230:	b921      	cbnz	r1, 802123c <_realloc_r+0x16>
 8021232:	4611      	mov	r1, r2
 8021234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021238:	f7fd bb5e 	b.w	801e8f8 <_malloc_r>
 802123c:	b92a      	cbnz	r2, 802124a <_realloc_r+0x24>
 802123e:	4625      	mov	r5, r4
 8021240:	f7fd fae6 	bl	801e810 <_free_r>
 8021244:	4628      	mov	r0, r5
 8021246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802124a:	f000 f8b6 	bl	80213ba <_malloc_usable_size_r>
 802124e:	4284      	cmp	r4, r0
 8021250:	4607      	mov	r7, r0
 8021252:	d802      	bhi.n	802125a <_realloc_r+0x34>
 8021254:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021258:	d812      	bhi.n	8021280 <_realloc_r+0x5a>
 802125a:	4621      	mov	r1, r4
 802125c:	4640      	mov	r0, r8
 802125e:	f7fd fb4b 	bl	801e8f8 <_malloc_r>
 8021262:	4605      	mov	r5, r0
 8021264:	2800      	cmp	r0, #0
 8021266:	d0ed      	beq.n	8021244 <_realloc_r+0x1e>
 8021268:	42bc      	cmp	r4, r7
 802126a:	4622      	mov	r2, r4
 802126c:	4631      	mov	r1, r6
 802126e:	bf28      	it	cs
 8021270:	463a      	movcs	r2, r7
 8021272:	f7fc fc37 	bl	801dae4 <memcpy>
 8021276:	4631      	mov	r1, r6
 8021278:	4640      	mov	r0, r8
 802127a:	f7fd fac9 	bl	801e810 <_free_r>
 802127e:	e7e1      	b.n	8021244 <_realloc_r+0x1e>
 8021280:	4635      	mov	r5, r6
 8021282:	e7df      	b.n	8021244 <_realloc_r+0x1e>

08021284 <_strtoul_l.constprop.0>:
 8021284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021288:	4686      	mov	lr, r0
 802128a:	460d      	mov	r5, r1
 802128c:	4f35      	ldr	r7, [pc, #212]	; (8021364 <_strtoul_l.constprop.0+0xe0>)
 802128e:	4628      	mov	r0, r5
 8021290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021294:	5d3e      	ldrb	r6, [r7, r4]
 8021296:	f016 0608 	ands.w	r6, r6, #8
 802129a:	d1f8      	bne.n	802128e <_strtoul_l.constprop.0+0xa>
 802129c:	2c2d      	cmp	r4, #45	; 0x2d
 802129e:	d130      	bne.n	8021302 <_strtoul_l.constprop.0+0x7e>
 80212a0:	782c      	ldrb	r4, [r5, #0]
 80212a2:	2601      	movs	r6, #1
 80212a4:	1c85      	adds	r5, r0, #2
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d057      	beq.n	802135a <_strtoul_l.constprop.0+0xd6>
 80212aa:	2b10      	cmp	r3, #16
 80212ac:	d109      	bne.n	80212c2 <_strtoul_l.constprop.0+0x3e>
 80212ae:	2c30      	cmp	r4, #48	; 0x30
 80212b0:	d107      	bne.n	80212c2 <_strtoul_l.constprop.0+0x3e>
 80212b2:	7828      	ldrb	r0, [r5, #0]
 80212b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80212b8:	2858      	cmp	r0, #88	; 0x58
 80212ba:	d149      	bne.n	8021350 <_strtoul_l.constprop.0+0xcc>
 80212bc:	786c      	ldrb	r4, [r5, #1]
 80212be:	2310      	movs	r3, #16
 80212c0:	3502      	adds	r5, #2
 80212c2:	f04f 38ff 	mov.w	r8, #4294967295
 80212c6:	2700      	movs	r7, #0
 80212c8:	fbb8 f8f3 	udiv	r8, r8, r3
 80212cc:	fb03 f908 	mul.w	r9, r3, r8
 80212d0:	4638      	mov	r0, r7
 80212d2:	ea6f 0909 	mvn.w	r9, r9
 80212d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80212da:	f1bc 0f09 	cmp.w	ip, #9
 80212de:	d815      	bhi.n	802130c <_strtoul_l.constprop.0+0x88>
 80212e0:	4664      	mov	r4, ip
 80212e2:	42a3      	cmp	r3, r4
 80212e4:	dd23      	ble.n	802132e <_strtoul_l.constprop.0+0xaa>
 80212e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80212ea:	d007      	beq.n	80212fc <_strtoul_l.constprop.0+0x78>
 80212ec:	4580      	cmp	r8, r0
 80212ee:	d31b      	bcc.n	8021328 <_strtoul_l.constprop.0+0xa4>
 80212f0:	d101      	bne.n	80212f6 <_strtoul_l.constprop.0+0x72>
 80212f2:	45a1      	cmp	r9, r4
 80212f4:	db18      	blt.n	8021328 <_strtoul_l.constprop.0+0xa4>
 80212f6:	fb00 4003 	mla	r0, r0, r3, r4
 80212fa:	2701      	movs	r7, #1
 80212fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021300:	e7e9      	b.n	80212d6 <_strtoul_l.constprop.0+0x52>
 8021302:	2c2b      	cmp	r4, #43	; 0x2b
 8021304:	bf04      	itt	eq
 8021306:	782c      	ldrbeq	r4, [r5, #0]
 8021308:	1c85      	addeq	r5, r0, #2
 802130a:	e7cc      	b.n	80212a6 <_strtoul_l.constprop.0+0x22>
 802130c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8021310:	f1bc 0f19 	cmp.w	ip, #25
 8021314:	d801      	bhi.n	802131a <_strtoul_l.constprop.0+0x96>
 8021316:	3c37      	subs	r4, #55	; 0x37
 8021318:	e7e3      	b.n	80212e2 <_strtoul_l.constprop.0+0x5e>
 802131a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802131e:	f1bc 0f19 	cmp.w	ip, #25
 8021322:	d804      	bhi.n	802132e <_strtoul_l.constprop.0+0xaa>
 8021324:	3c57      	subs	r4, #87	; 0x57
 8021326:	e7dc      	b.n	80212e2 <_strtoul_l.constprop.0+0x5e>
 8021328:	f04f 37ff 	mov.w	r7, #4294967295
 802132c:	e7e6      	b.n	80212fc <_strtoul_l.constprop.0+0x78>
 802132e:	1c7b      	adds	r3, r7, #1
 8021330:	d106      	bne.n	8021340 <_strtoul_l.constprop.0+0xbc>
 8021332:	2322      	movs	r3, #34	; 0x22
 8021334:	4638      	mov	r0, r7
 8021336:	f8ce 3000 	str.w	r3, [lr]
 802133a:	b932      	cbnz	r2, 802134a <_strtoul_l.constprop.0+0xc6>
 802133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021340:	b106      	cbz	r6, 8021344 <_strtoul_l.constprop.0+0xc0>
 8021342:	4240      	negs	r0, r0
 8021344:	2a00      	cmp	r2, #0
 8021346:	d0f9      	beq.n	802133c <_strtoul_l.constprop.0+0xb8>
 8021348:	b107      	cbz	r7, 802134c <_strtoul_l.constprop.0+0xc8>
 802134a:	1e69      	subs	r1, r5, #1
 802134c:	6011      	str	r1, [r2, #0]
 802134e:	e7f5      	b.n	802133c <_strtoul_l.constprop.0+0xb8>
 8021350:	2430      	movs	r4, #48	; 0x30
 8021352:	2b00      	cmp	r3, #0
 8021354:	d1b5      	bne.n	80212c2 <_strtoul_l.constprop.0+0x3e>
 8021356:	2308      	movs	r3, #8
 8021358:	e7b3      	b.n	80212c2 <_strtoul_l.constprop.0+0x3e>
 802135a:	2c30      	cmp	r4, #48	; 0x30
 802135c:	d0a9      	beq.n	80212b2 <_strtoul_l.constprop.0+0x2e>
 802135e:	230a      	movs	r3, #10
 8021360:	e7af      	b.n	80212c2 <_strtoul_l.constprop.0+0x3e>
 8021362:	bf00      	nop
 8021364:	08023c31 	.word	0x08023c31

08021368 <_strtoul_r>:
 8021368:	f7ff bf8c 	b.w	8021284 <_strtoul_l.constprop.0>

0802136c <__ascii_wctomb>:
 802136c:	b149      	cbz	r1, 8021382 <__ascii_wctomb+0x16>
 802136e:	2aff      	cmp	r2, #255	; 0xff
 8021370:	bf8d      	iteet	hi
 8021372:	238a      	movhi	r3, #138	; 0x8a
 8021374:	2001      	movls	r0, #1
 8021376:	700a      	strbls	r2, [r1, #0]
 8021378:	6003      	strhi	r3, [r0, #0]
 802137a:	bf88      	it	hi
 802137c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021380:	4770      	bx	lr
 8021382:	4608      	mov	r0, r1
 8021384:	4770      	bx	lr
	...

08021388 <fiprintf>:
 8021388:	b40e      	push	{r1, r2, r3}
 802138a:	b503      	push	{r0, r1, lr}
 802138c:	ab03      	add	r3, sp, #12
 802138e:	4601      	mov	r1, r0
 8021390:	4805      	ldr	r0, [pc, #20]	; (80213a8 <fiprintf+0x20>)
 8021392:	f853 2b04 	ldr.w	r2, [r3], #4
 8021396:	6800      	ldr	r0, [r0, #0]
 8021398:	9301      	str	r3, [sp, #4]
 802139a:	f000 f83f 	bl	802141c <_vfiprintf_r>
 802139e:	b002      	add	sp, #8
 80213a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80213a4:	b003      	add	sp, #12
 80213a6:	4770      	bx	lr
 80213a8:	200000c4 	.word	0x200000c4

080213ac <abort>:
 80213ac:	2006      	movs	r0, #6
 80213ae:	b508      	push	{r3, lr}
 80213b0:	f000 fa0c 	bl	80217cc <raise>
 80213b4:	2001      	movs	r0, #1
 80213b6:	f7e4 fb03 	bl	80059c0 <_exit>

080213ba <_malloc_usable_size_r>:
 80213ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80213be:	1f18      	subs	r0, r3, #4
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	bfbc      	itt	lt
 80213c4:	580b      	ldrlt	r3, [r1, r0]
 80213c6:	18c0      	addlt	r0, r0, r3
 80213c8:	4770      	bx	lr

080213ca <__sfputc_r>:
 80213ca:	6893      	ldr	r3, [r2, #8]
 80213cc:	3b01      	subs	r3, #1
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	6093      	str	r3, [r2, #8]
 80213d2:	b410      	push	{r4}
 80213d4:	da08      	bge.n	80213e8 <__sfputc_r+0x1e>
 80213d6:	6994      	ldr	r4, [r2, #24]
 80213d8:	42a3      	cmp	r3, r4
 80213da:	db01      	blt.n	80213e0 <__sfputc_r+0x16>
 80213dc:	290a      	cmp	r1, #10
 80213de:	d103      	bne.n	80213e8 <__sfputc_r+0x1e>
 80213e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80213e4:	f000 b934 	b.w	8021650 <__swbuf_r>
 80213e8:	6813      	ldr	r3, [r2, #0]
 80213ea:	1c58      	adds	r0, r3, #1
 80213ec:	6010      	str	r0, [r2, #0]
 80213ee:	4608      	mov	r0, r1
 80213f0:	7019      	strb	r1, [r3, #0]
 80213f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80213f6:	4770      	bx	lr

080213f8 <__sfputs_r>:
 80213f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213fa:	4606      	mov	r6, r0
 80213fc:	460f      	mov	r7, r1
 80213fe:	4614      	mov	r4, r2
 8021400:	18d5      	adds	r5, r2, r3
 8021402:	42ac      	cmp	r4, r5
 8021404:	d101      	bne.n	802140a <__sfputs_r+0x12>
 8021406:	2000      	movs	r0, #0
 8021408:	e007      	b.n	802141a <__sfputs_r+0x22>
 802140a:	463a      	mov	r2, r7
 802140c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021410:	4630      	mov	r0, r6
 8021412:	f7ff ffda 	bl	80213ca <__sfputc_r>
 8021416:	1c43      	adds	r3, r0, #1
 8021418:	d1f3      	bne.n	8021402 <__sfputs_r+0xa>
 802141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802141c <_vfiprintf_r>:
 802141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021420:	460d      	mov	r5, r1
 8021422:	b09d      	sub	sp, #116	; 0x74
 8021424:	4614      	mov	r4, r2
 8021426:	4698      	mov	r8, r3
 8021428:	4606      	mov	r6, r0
 802142a:	b118      	cbz	r0, 8021434 <_vfiprintf_r+0x18>
 802142c:	6a03      	ldr	r3, [r0, #32]
 802142e:	b90b      	cbnz	r3, 8021434 <_vfiprintf_r+0x18>
 8021430:	f7fc f9f2 	bl	801d818 <__sinit>
 8021434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021436:	07d9      	lsls	r1, r3, #31
 8021438:	d405      	bmi.n	8021446 <_vfiprintf_r+0x2a>
 802143a:	89ab      	ldrh	r3, [r5, #12]
 802143c:	059a      	lsls	r2, r3, #22
 802143e:	d402      	bmi.n	8021446 <_vfiprintf_r+0x2a>
 8021440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021442:	f7fc fb3f 	bl	801dac4 <__retarget_lock_acquire_recursive>
 8021446:	89ab      	ldrh	r3, [r5, #12]
 8021448:	071b      	lsls	r3, r3, #28
 802144a:	d501      	bpl.n	8021450 <_vfiprintf_r+0x34>
 802144c:	692b      	ldr	r3, [r5, #16]
 802144e:	b99b      	cbnz	r3, 8021478 <_vfiprintf_r+0x5c>
 8021450:	4629      	mov	r1, r5
 8021452:	4630      	mov	r0, r6
 8021454:	f000 f93a 	bl	80216cc <__swsetup_r>
 8021458:	b170      	cbz	r0, 8021478 <_vfiprintf_r+0x5c>
 802145a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802145c:	07dc      	lsls	r4, r3, #31
 802145e:	d504      	bpl.n	802146a <_vfiprintf_r+0x4e>
 8021460:	f04f 30ff 	mov.w	r0, #4294967295
 8021464:	b01d      	add	sp, #116	; 0x74
 8021466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802146a:	89ab      	ldrh	r3, [r5, #12]
 802146c:	0598      	lsls	r0, r3, #22
 802146e:	d4f7      	bmi.n	8021460 <_vfiprintf_r+0x44>
 8021470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021472:	f7fc fb28 	bl	801dac6 <__retarget_lock_release_recursive>
 8021476:	e7f3      	b.n	8021460 <_vfiprintf_r+0x44>
 8021478:	2300      	movs	r3, #0
 802147a:	f8cd 800c 	str.w	r8, [sp, #12]
 802147e:	f04f 0901 	mov.w	r9, #1
 8021482:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 802163c <_vfiprintf_r+0x220>
 8021486:	9309      	str	r3, [sp, #36]	; 0x24
 8021488:	2320      	movs	r3, #32
 802148a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802148e:	2330      	movs	r3, #48	; 0x30
 8021490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021494:	4623      	mov	r3, r4
 8021496:	469a      	mov	sl, r3
 8021498:	f813 2b01 	ldrb.w	r2, [r3], #1
 802149c:	b10a      	cbz	r2, 80214a2 <_vfiprintf_r+0x86>
 802149e:	2a25      	cmp	r2, #37	; 0x25
 80214a0:	d1f9      	bne.n	8021496 <_vfiprintf_r+0x7a>
 80214a2:	ebba 0b04 	subs.w	fp, sl, r4
 80214a6:	d00b      	beq.n	80214c0 <_vfiprintf_r+0xa4>
 80214a8:	465b      	mov	r3, fp
 80214aa:	4622      	mov	r2, r4
 80214ac:	4629      	mov	r1, r5
 80214ae:	4630      	mov	r0, r6
 80214b0:	f7ff ffa2 	bl	80213f8 <__sfputs_r>
 80214b4:	3001      	adds	r0, #1
 80214b6:	f000 80a9 	beq.w	802160c <_vfiprintf_r+0x1f0>
 80214ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214bc:	445a      	add	r2, fp
 80214be:	9209      	str	r2, [sp, #36]	; 0x24
 80214c0:	f89a 3000 	ldrb.w	r3, [sl]
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	f000 80a1 	beq.w	802160c <_vfiprintf_r+0x1f0>
 80214ca:	2300      	movs	r3, #0
 80214cc:	f04f 32ff 	mov.w	r2, #4294967295
 80214d0:	f10a 0a01 	add.w	sl, sl, #1
 80214d4:	9304      	str	r3, [sp, #16]
 80214d6:	9307      	str	r3, [sp, #28]
 80214d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80214dc:	931a      	str	r3, [sp, #104]	; 0x68
 80214de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80214e2:	4654      	mov	r4, sl
 80214e4:	2205      	movs	r2, #5
 80214e6:	4855      	ldr	r0, [pc, #340]	; (802163c <_vfiprintf_r+0x220>)
 80214e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214ec:	f7fc faec 	bl	801dac8 <memchr>
 80214f0:	9a04      	ldr	r2, [sp, #16]
 80214f2:	b9d8      	cbnz	r0, 802152c <_vfiprintf_r+0x110>
 80214f4:	06d1      	lsls	r1, r2, #27
 80214f6:	bf44      	itt	mi
 80214f8:	2320      	movmi	r3, #32
 80214fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80214fe:	0713      	lsls	r3, r2, #28
 8021500:	bf44      	itt	mi
 8021502:	232b      	movmi	r3, #43	; 0x2b
 8021504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021508:	f89a 3000 	ldrb.w	r3, [sl]
 802150c:	2b2a      	cmp	r3, #42	; 0x2a
 802150e:	d015      	beq.n	802153c <_vfiprintf_r+0x120>
 8021510:	9a07      	ldr	r2, [sp, #28]
 8021512:	4654      	mov	r4, sl
 8021514:	2000      	movs	r0, #0
 8021516:	f04f 0c0a 	mov.w	ip, #10
 802151a:	4621      	mov	r1, r4
 802151c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021520:	3b30      	subs	r3, #48	; 0x30
 8021522:	2b09      	cmp	r3, #9
 8021524:	d94d      	bls.n	80215c2 <_vfiprintf_r+0x1a6>
 8021526:	b1b0      	cbz	r0, 8021556 <_vfiprintf_r+0x13a>
 8021528:	9207      	str	r2, [sp, #28]
 802152a:	e014      	b.n	8021556 <_vfiprintf_r+0x13a>
 802152c:	eba0 0308 	sub.w	r3, r0, r8
 8021530:	46a2      	mov	sl, r4
 8021532:	fa09 f303 	lsl.w	r3, r9, r3
 8021536:	4313      	orrs	r3, r2
 8021538:	9304      	str	r3, [sp, #16]
 802153a:	e7d2      	b.n	80214e2 <_vfiprintf_r+0xc6>
 802153c:	9b03      	ldr	r3, [sp, #12]
 802153e:	1d19      	adds	r1, r3, #4
 8021540:	681b      	ldr	r3, [r3, #0]
 8021542:	2b00      	cmp	r3, #0
 8021544:	9103      	str	r1, [sp, #12]
 8021546:	bfbb      	ittet	lt
 8021548:	425b      	neglt	r3, r3
 802154a:	f042 0202 	orrlt.w	r2, r2, #2
 802154e:	9307      	strge	r3, [sp, #28]
 8021550:	9307      	strlt	r3, [sp, #28]
 8021552:	bfb8      	it	lt
 8021554:	9204      	strlt	r2, [sp, #16]
 8021556:	7823      	ldrb	r3, [r4, #0]
 8021558:	2b2e      	cmp	r3, #46	; 0x2e
 802155a:	d10c      	bne.n	8021576 <_vfiprintf_r+0x15a>
 802155c:	7863      	ldrb	r3, [r4, #1]
 802155e:	2b2a      	cmp	r3, #42	; 0x2a
 8021560:	d134      	bne.n	80215cc <_vfiprintf_r+0x1b0>
 8021562:	9b03      	ldr	r3, [sp, #12]
 8021564:	3402      	adds	r4, #2
 8021566:	1d1a      	adds	r2, r3, #4
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	2b00      	cmp	r3, #0
 802156c:	9203      	str	r2, [sp, #12]
 802156e:	bfb8      	it	lt
 8021570:	f04f 33ff 	movlt.w	r3, #4294967295
 8021574:	9305      	str	r3, [sp, #20]
 8021576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802164c <_vfiprintf_r+0x230>
 802157a:	2203      	movs	r2, #3
 802157c:	7821      	ldrb	r1, [r4, #0]
 802157e:	4650      	mov	r0, sl
 8021580:	f7fc faa2 	bl	801dac8 <memchr>
 8021584:	b138      	cbz	r0, 8021596 <_vfiprintf_r+0x17a>
 8021586:	eba0 000a 	sub.w	r0, r0, sl
 802158a:	2240      	movs	r2, #64	; 0x40
 802158c:	9b04      	ldr	r3, [sp, #16]
 802158e:	3401      	adds	r4, #1
 8021590:	4082      	lsls	r2, r0
 8021592:	4313      	orrs	r3, r2
 8021594:	9304      	str	r3, [sp, #16]
 8021596:	f814 1b01 	ldrb.w	r1, [r4], #1
 802159a:	2206      	movs	r2, #6
 802159c:	4828      	ldr	r0, [pc, #160]	; (8021640 <_vfiprintf_r+0x224>)
 802159e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80215a2:	f7fc fa91 	bl	801dac8 <memchr>
 80215a6:	2800      	cmp	r0, #0
 80215a8:	d03f      	beq.n	802162a <_vfiprintf_r+0x20e>
 80215aa:	4b26      	ldr	r3, [pc, #152]	; (8021644 <_vfiprintf_r+0x228>)
 80215ac:	bb1b      	cbnz	r3, 80215f6 <_vfiprintf_r+0x1da>
 80215ae:	9b03      	ldr	r3, [sp, #12]
 80215b0:	3307      	adds	r3, #7
 80215b2:	f023 0307 	bic.w	r3, r3, #7
 80215b6:	3308      	adds	r3, #8
 80215b8:	9303      	str	r3, [sp, #12]
 80215ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215bc:	443b      	add	r3, r7
 80215be:	9309      	str	r3, [sp, #36]	; 0x24
 80215c0:	e768      	b.n	8021494 <_vfiprintf_r+0x78>
 80215c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80215c6:	460c      	mov	r4, r1
 80215c8:	2001      	movs	r0, #1
 80215ca:	e7a6      	b.n	802151a <_vfiprintf_r+0xfe>
 80215cc:	2300      	movs	r3, #0
 80215ce:	3401      	adds	r4, #1
 80215d0:	f04f 0c0a 	mov.w	ip, #10
 80215d4:	4619      	mov	r1, r3
 80215d6:	9305      	str	r3, [sp, #20]
 80215d8:	4620      	mov	r0, r4
 80215da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80215de:	3a30      	subs	r2, #48	; 0x30
 80215e0:	2a09      	cmp	r2, #9
 80215e2:	d903      	bls.n	80215ec <_vfiprintf_r+0x1d0>
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d0c6      	beq.n	8021576 <_vfiprintf_r+0x15a>
 80215e8:	9105      	str	r1, [sp, #20]
 80215ea:	e7c4      	b.n	8021576 <_vfiprintf_r+0x15a>
 80215ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80215f0:	4604      	mov	r4, r0
 80215f2:	2301      	movs	r3, #1
 80215f4:	e7f0      	b.n	80215d8 <_vfiprintf_r+0x1bc>
 80215f6:	ab03      	add	r3, sp, #12
 80215f8:	462a      	mov	r2, r5
 80215fa:	a904      	add	r1, sp, #16
 80215fc:	4630      	mov	r0, r6
 80215fe:	9300      	str	r3, [sp, #0]
 8021600:	4b11      	ldr	r3, [pc, #68]	; (8021648 <_vfiprintf_r+0x22c>)
 8021602:	f7fb f9f7 	bl	801c9f4 <_printf_float>
 8021606:	4607      	mov	r7, r0
 8021608:	1c78      	adds	r0, r7, #1
 802160a:	d1d6      	bne.n	80215ba <_vfiprintf_r+0x19e>
 802160c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802160e:	07d9      	lsls	r1, r3, #31
 8021610:	d405      	bmi.n	802161e <_vfiprintf_r+0x202>
 8021612:	89ab      	ldrh	r3, [r5, #12]
 8021614:	059a      	lsls	r2, r3, #22
 8021616:	d402      	bmi.n	802161e <_vfiprintf_r+0x202>
 8021618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802161a:	f7fc fa54 	bl	801dac6 <__retarget_lock_release_recursive>
 802161e:	89ab      	ldrh	r3, [r5, #12]
 8021620:	065b      	lsls	r3, r3, #25
 8021622:	f53f af1d 	bmi.w	8021460 <_vfiprintf_r+0x44>
 8021626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021628:	e71c      	b.n	8021464 <_vfiprintf_r+0x48>
 802162a:	ab03      	add	r3, sp, #12
 802162c:	462a      	mov	r2, r5
 802162e:	a904      	add	r1, sp, #16
 8021630:	4630      	mov	r0, r6
 8021632:	9300      	str	r3, [sp, #0]
 8021634:	4b04      	ldr	r3, [pc, #16]	; (8021648 <_vfiprintf_r+0x22c>)
 8021636:	f7fb fc85 	bl	801cf44 <_printf_i>
 802163a:	e7e4      	b.n	8021606 <_vfiprintf_r+0x1ea>
 802163c:	08023d31 	.word	0x08023d31
 8021640:	08023d3b 	.word	0x08023d3b
 8021644:	0801c9f5 	.word	0x0801c9f5
 8021648:	080213f9 	.word	0x080213f9
 802164c:	08023d37 	.word	0x08023d37

08021650 <__swbuf_r>:
 8021650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021652:	460e      	mov	r6, r1
 8021654:	4614      	mov	r4, r2
 8021656:	4605      	mov	r5, r0
 8021658:	b118      	cbz	r0, 8021662 <__swbuf_r+0x12>
 802165a:	6a03      	ldr	r3, [r0, #32]
 802165c:	b90b      	cbnz	r3, 8021662 <__swbuf_r+0x12>
 802165e:	f7fc f8db 	bl	801d818 <__sinit>
 8021662:	69a3      	ldr	r3, [r4, #24]
 8021664:	60a3      	str	r3, [r4, #8]
 8021666:	89a3      	ldrh	r3, [r4, #12]
 8021668:	071a      	lsls	r2, r3, #28
 802166a:	d525      	bpl.n	80216b8 <__swbuf_r+0x68>
 802166c:	6923      	ldr	r3, [r4, #16]
 802166e:	b31b      	cbz	r3, 80216b8 <__swbuf_r+0x68>
 8021670:	6823      	ldr	r3, [r4, #0]
 8021672:	b2f6      	uxtb	r6, r6
 8021674:	6922      	ldr	r2, [r4, #16]
 8021676:	4637      	mov	r7, r6
 8021678:	1a98      	subs	r0, r3, r2
 802167a:	6963      	ldr	r3, [r4, #20]
 802167c:	4283      	cmp	r3, r0
 802167e:	dc04      	bgt.n	802168a <__swbuf_r+0x3a>
 8021680:	4621      	mov	r1, r4
 8021682:	4628      	mov	r0, r5
 8021684:	f7fc f812 	bl	801d6ac <_fflush_r>
 8021688:	b9e0      	cbnz	r0, 80216c4 <__swbuf_r+0x74>
 802168a:	68a3      	ldr	r3, [r4, #8]
 802168c:	3b01      	subs	r3, #1
 802168e:	60a3      	str	r3, [r4, #8]
 8021690:	6823      	ldr	r3, [r4, #0]
 8021692:	1c5a      	adds	r2, r3, #1
 8021694:	6022      	str	r2, [r4, #0]
 8021696:	701e      	strb	r6, [r3, #0]
 8021698:	1c43      	adds	r3, r0, #1
 802169a:	6962      	ldr	r2, [r4, #20]
 802169c:	429a      	cmp	r2, r3
 802169e:	d004      	beq.n	80216aa <__swbuf_r+0x5a>
 80216a0:	89a3      	ldrh	r3, [r4, #12]
 80216a2:	07db      	lsls	r3, r3, #31
 80216a4:	d506      	bpl.n	80216b4 <__swbuf_r+0x64>
 80216a6:	2e0a      	cmp	r6, #10
 80216a8:	d104      	bne.n	80216b4 <__swbuf_r+0x64>
 80216aa:	4621      	mov	r1, r4
 80216ac:	4628      	mov	r0, r5
 80216ae:	f7fb fffd 	bl	801d6ac <_fflush_r>
 80216b2:	b938      	cbnz	r0, 80216c4 <__swbuf_r+0x74>
 80216b4:	4638      	mov	r0, r7
 80216b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80216b8:	4621      	mov	r1, r4
 80216ba:	4628      	mov	r0, r5
 80216bc:	f000 f806 	bl	80216cc <__swsetup_r>
 80216c0:	2800      	cmp	r0, #0
 80216c2:	d0d5      	beq.n	8021670 <__swbuf_r+0x20>
 80216c4:	f04f 37ff 	mov.w	r7, #4294967295
 80216c8:	e7f4      	b.n	80216b4 <__swbuf_r+0x64>
	...

080216cc <__swsetup_r>:
 80216cc:	b538      	push	{r3, r4, r5, lr}
 80216ce:	4b2a      	ldr	r3, [pc, #168]	; (8021778 <__swsetup_r+0xac>)
 80216d0:	4605      	mov	r5, r0
 80216d2:	460c      	mov	r4, r1
 80216d4:	6818      	ldr	r0, [r3, #0]
 80216d6:	b118      	cbz	r0, 80216e0 <__swsetup_r+0x14>
 80216d8:	6a03      	ldr	r3, [r0, #32]
 80216da:	b90b      	cbnz	r3, 80216e0 <__swsetup_r+0x14>
 80216dc:	f7fc f89c 	bl	801d818 <__sinit>
 80216e0:	89a3      	ldrh	r3, [r4, #12]
 80216e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80216e6:	0718      	lsls	r0, r3, #28
 80216e8:	d422      	bmi.n	8021730 <__swsetup_r+0x64>
 80216ea:	06d9      	lsls	r1, r3, #27
 80216ec:	d407      	bmi.n	80216fe <__swsetup_r+0x32>
 80216ee:	2309      	movs	r3, #9
 80216f0:	602b      	str	r3, [r5, #0]
 80216f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80216f6:	f04f 30ff 	mov.w	r0, #4294967295
 80216fa:	81a3      	strh	r3, [r4, #12]
 80216fc:	e034      	b.n	8021768 <__swsetup_r+0x9c>
 80216fe:	0758      	lsls	r0, r3, #29
 8021700:	d512      	bpl.n	8021728 <__swsetup_r+0x5c>
 8021702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021704:	b141      	cbz	r1, 8021718 <__swsetup_r+0x4c>
 8021706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802170a:	4299      	cmp	r1, r3
 802170c:	d002      	beq.n	8021714 <__swsetup_r+0x48>
 802170e:	4628      	mov	r0, r5
 8021710:	f7fd f87e 	bl	801e810 <_free_r>
 8021714:	2300      	movs	r3, #0
 8021716:	6363      	str	r3, [r4, #52]	; 0x34
 8021718:	89a3      	ldrh	r3, [r4, #12]
 802171a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802171e:	81a3      	strh	r3, [r4, #12]
 8021720:	2300      	movs	r3, #0
 8021722:	6063      	str	r3, [r4, #4]
 8021724:	6923      	ldr	r3, [r4, #16]
 8021726:	6023      	str	r3, [r4, #0]
 8021728:	89a3      	ldrh	r3, [r4, #12]
 802172a:	f043 0308 	orr.w	r3, r3, #8
 802172e:	81a3      	strh	r3, [r4, #12]
 8021730:	6923      	ldr	r3, [r4, #16]
 8021732:	b94b      	cbnz	r3, 8021748 <__swsetup_r+0x7c>
 8021734:	89a3      	ldrh	r3, [r4, #12]
 8021736:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802173a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802173e:	d003      	beq.n	8021748 <__swsetup_r+0x7c>
 8021740:	4621      	mov	r1, r4
 8021742:	4628      	mov	r0, r5
 8021744:	f000 f883 	bl	802184e <__smakebuf_r>
 8021748:	89a0      	ldrh	r0, [r4, #12]
 802174a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802174e:	f010 0301 	ands.w	r3, r0, #1
 8021752:	d00a      	beq.n	802176a <__swsetup_r+0x9e>
 8021754:	2300      	movs	r3, #0
 8021756:	60a3      	str	r3, [r4, #8]
 8021758:	6963      	ldr	r3, [r4, #20]
 802175a:	425b      	negs	r3, r3
 802175c:	61a3      	str	r3, [r4, #24]
 802175e:	6923      	ldr	r3, [r4, #16]
 8021760:	b943      	cbnz	r3, 8021774 <__swsetup_r+0xa8>
 8021762:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021766:	d1c4      	bne.n	80216f2 <__swsetup_r+0x26>
 8021768:	bd38      	pop	{r3, r4, r5, pc}
 802176a:	0781      	lsls	r1, r0, #30
 802176c:	bf58      	it	pl
 802176e:	6963      	ldrpl	r3, [r4, #20]
 8021770:	60a3      	str	r3, [r4, #8]
 8021772:	e7f4      	b.n	802175e <__swsetup_r+0x92>
 8021774:	2000      	movs	r0, #0
 8021776:	e7f7      	b.n	8021768 <__swsetup_r+0x9c>
 8021778:	200000c4 	.word	0x200000c4

0802177c <_raise_r>:
 802177c:	291f      	cmp	r1, #31
 802177e:	b538      	push	{r3, r4, r5, lr}
 8021780:	4604      	mov	r4, r0
 8021782:	460d      	mov	r5, r1
 8021784:	d904      	bls.n	8021790 <_raise_r+0x14>
 8021786:	2316      	movs	r3, #22
 8021788:	6003      	str	r3, [r0, #0]
 802178a:	f04f 30ff 	mov.w	r0, #4294967295
 802178e:	bd38      	pop	{r3, r4, r5, pc}
 8021790:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8021792:	b112      	cbz	r2, 802179a <_raise_r+0x1e>
 8021794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021798:	b94b      	cbnz	r3, 80217ae <_raise_r+0x32>
 802179a:	4620      	mov	r0, r4
 802179c:	f000 f830 	bl	8021800 <_getpid_r>
 80217a0:	462a      	mov	r2, r5
 80217a2:	4601      	mov	r1, r0
 80217a4:	4620      	mov	r0, r4
 80217a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80217aa:	f000 b817 	b.w	80217dc <_kill_r>
 80217ae:	2b01      	cmp	r3, #1
 80217b0:	d00a      	beq.n	80217c8 <_raise_r+0x4c>
 80217b2:	1c59      	adds	r1, r3, #1
 80217b4:	d103      	bne.n	80217be <_raise_r+0x42>
 80217b6:	2316      	movs	r3, #22
 80217b8:	6003      	str	r3, [r0, #0]
 80217ba:	2001      	movs	r0, #1
 80217bc:	e7e7      	b.n	802178e <_raise_r+0x12>
 80217be:	2400      	movs	r4, #0
 80217c0:	4628      	mov	r0, r5
 80217c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80217c6:	4798      	blx	r3
 80217c8:	2000      	movs	r0, #0
 80217ca:	e7e0      	b.n	802178e <_raise_r+0x12>

080217cc <raise>:
 80217cc:	4b02      	ldr	r3, [pc, #8]	; (80217d8 <raise+0xc>)
 80217ce:	4601      	mov	r1, r0
 80217d0:	6818      	ldr	r0, [r3, #0]
 80217d2:	f7ff bfd3 	b.w	802177c <_raise_r>
 80217d6:	bf00      	nop
 80217d8:	200000c4 	.word	0x200000c4

080217dc <_kill_r>:
 80217dc:	b538      	push	{r3, r4, r5, lr}
 80217de:	2300      	movs	r3, #0
 80217e0:	4d06      	ldr	r5, [pc, #24]	; (80217fc <_kill_r+0x20>)
 80217e2:	4604      	mov	r4, r0
 80217e4:	4608      	mov	r0, r1
 80217e6:	4611      	mov	r1, r2
 80217e8:	602b      	str	r3, [r5, #0]
 80217ea:	f7e4 f8d9 	bl	80059a0 <_kill>
 80217ee:	1c43      	adds	r3, r0, #1
 80217f0:	d102      	bne.n	80217f8 <_kill_r+0x1c>
 80217f2:	682b      	ldr	r3, [r5, #0]
 80217f4:	b103      	cbz	r3, 80217f8 <_kill_r+0x1c>
 80217f6:	6023      	str	r3, [r4, #0]
 80217f8:	bd38      	pop	{r3, r4, r5, pc}
 80217fa:	bf00      	nop
 80217fc:	2000d380 	.word	0x2000d380

08021800 <_getpid_r>:
 8021800:	f7e4 b8c6 	b.w	8005990 <_getpid>

08021804 <__swhatbuf_r>:
 8021804:	b570      	push	{r4, r5, r6, lr}
 8021806:	460c      	mov	r4, r1
 8021808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802180c:	b096      	sub	sp, #88	; 0x58
 802180e:	4615      	mov	r5, r2
 8021810:	2900      	cmp	r1, #0
 8021812:	461e      	mov	r6, r3
 8021814:	da0c      	bge.n	8021830 <__swhatbuf_r+0x2c>
 8021816:	89a3      	ldrh	r3, [r4, #12]
 8021818:	2100      	movs	r1, #0
 802181a:	f013 0f80 	tst.w	r3, #128	; 0x80
 802181e:	bf0c      	ite	eq
 8021820:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021824:	2340      	movne	r3, #64	; 0x40
 8021826:	2000      	movs	r0, #0
 8021828:	6031      	str	r1, [r6, #0]
 802182a:	602b      	str	r3, [r5, #0]
 802182c:	b016      	add	sp, #88	; 0x58
 802182e:	bd70      	pop	{r4, r5, r6, pc}
 8021830:	466a      	mov	r2, sp
 8021832:	f000 f849 	bl	80218c8 <_fstat_r>
 8021836:	2800      	cmp	r0, #0
 8021838:	dbed      	blt.n	8021816 <__swhatbuf_r+0x12>
 802183a:	9901      	ldr	r1, [sp, #4]
 802183c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021840:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021844:	4259      	negs	r1, r3
 8021846:	4159      	adcs	r1, r3
 8021848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802184c:	e7eb      	b.n	8021826 <__swhatbuf_r+0x22>

0802184e <__smakebuf_r>:
 802184e:	898b      	ldrh	r3, [r1, #12]
 8021850:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021852:	079d      	lsls	r5, r3, #30
 8021854:	4606      	mov	r6, r0
 8021856:	460c      	mov	r4, r1
 8021858:	d507      	bpl.n	802186a <__smakebuf_r+0x1c>
 802185a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802185e:	6023      	str	r3, [r4, #0]
 8021860:	6123      	str	r3, [r4, #16]
 8021862:	2301      	movs	r3, #1
 8021864:	6163      	str	r3, [r4, #20]
 8021866:	b002      	add	sp, #8
 8021868:	bd70      	pop	{r4, r5, r6, pc}
 802186a:	ab01      	add	r3, sp, #4
 802186c:	466a      	mov	r2, sp
 802186e:	f7ff ffc9 	bl	8021804 <__swhatbuf_r>
 8021872:	9900      	ldr	r1, [sp, #0]
 8021874:	4605      	mov	r5, r0
 8021876:	4630      	mov	r0, r6
 8021878:	f7fd f83e 	bl	801e8f8 <_malloc_r>
 802187c:	b948      	cbnz	r0, 8021892 <__smakebuf_r+0x44>
 802187e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021882:	059a      	lsls	r2, r3, #22
 8021884:	d4ef      	bmi.n	8021866 <__smakebuf_r+0x18>
 8021886:	f023 0303 	bic.w	r3, r3, #3
 802188a:	f043 0302 	orr.w	r3, r3, #2
 802188e:	81a3      	strh	r3, [r4, #12]
 8021890:	e7e3      	b.n	802185a <__smakebuf_r+0xc>
 8021892:	89a3      	ldrh	r3, [r4, #12]
 8021894:	6020      	str	r0, [r4, #0]
 8021896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802189a:	6120      	str	r0, [r4, #16]
 802189c:	81a3      	strh	r3, [r4, #12]
 802189e:	9b00      	ldr	r3, [sp, #0]
 80218a0:	6163      	str	r3, [r4, #20]
 80218a2:	9b01      	ldr	r3, [sp, #4]
 80218a4:	b15b      	cbz	r3, 80218be <__smakebuf_r+0x70>
 80218a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218aa:	4630      	mov	r0, r6
 80218ac:	f000 f81e 	bl	80218ec <_isatty_r>
 80218b0:	b128      	cbz	r0, 80218be <__smakebuf_r+0x70>
 80218b2:	89a3      	ldrh	r3, [r4, #12]
 80218b4:	f023 0303 	bic.w	r3, r3, #3
 80218b8:	f043 0301 	orr.w	r3, r3, #1
 80218bc:	81a3      	strh	r3, [r4, #12]
 80218be:	89a3      	ldrh	r3, [r4, #12]
 80218c0:	431d      	orrs	r5, r3
 80218c2:	81a5      	strh	r5, [r4, #12]
 80218c4:	e7cf      	b.n	8021866 <__smakebuf_r+0x18>
	...

080218c8 <_fstat_r>:
 80218c8:	b538      	push	{r3, r4, r5, lr}
 80218ca:	2300      	movs	r3, #0
 80218cc:	4d06      	ldr	r5, [pc, #24]	; (80218e8 <_fstat_r+0x20>)
 80218ce:	4604      	mov	r4, r0
 80218d0:	4608      	mov	r0, r1
 80218d2:	4611      	mov	r1, r2
 80218d4:	602b      	str	r3, [r5, #0]
 80218d6:	f7e4 f8c2 	bl	8005a5e <_fstat>
 80218da:	1c43      	adds	r3, r0, #1
 80218dc:	d102      	bne.n	80218e4 <_fstat_r+0x1c>
 80218de:	682b      	ldr	r3, [r5, #0]
 80218e0:	b103      	cbz	r3, 80218e4 <_fstat_r+0x1c>
 80218e2:	6023      	str	r3, [r4, #0]
 80218e4:	bd38      	pop	{r3, r4, r5, pc}
 80218e6:	bf00      	nop
 80218e8:	2000d380 	.word	0x2000d380

080218ec <_isatty_r>:
 80218ec:	b538      	push	{r3, r4, r5, lr}
 80218ee:	2300      	movs	r3, #0
 80218f0:	4d05      	ldr	r5, [pc, #20]	; (8021908 <_isatty_r+0x1c>)
 80218f2:	4604      	mov	r4, r0
 80218f4:	4608      	mov	r0, r1
 80218f6:	602b      	str	r3, [r5, #0]
 80218f8:	f7e4 f8c1 	bl	8005a7e <_isatty>
 80218fc:	1c43      	adds	r3, r0, #1
 80218fe:	d102      	bne.n	8021906 <_isatty_r+0x1a>
 8021900:	682b      	ldr	r3, [r5, #0]
 8021902:	b103      	cbz	r3, 8021906 <_isatty_r+0x1a>
 8021904:	6023      	str	r3, [r4, #0]
 8021906:	bd38      	pop	{r3, r4, r5, pc}
 8021908:	2000d380 	.word	0x2000d380

0802190c <pow>:
 802190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802190e:	ec55 4b11 	vmov	r4, r5, d1
 8021912:	ed2d 8b02 	vpush	{d8}
 8021916:	eeb0 8a40 	vmov.f32	s16, s0
 802191a:	eef0 8a60 	vmov.f32	s17, s1
 802191e:	f000 f873 	bl	8021a08 <__ieee754_pow>
 8021922:	4622      	mov	r2, r4
 8021924:	462b      	mov	r3, r5
 8021926:	4620      	mov	r0, r4
 8021928:	4629      	mov	r1, r5
 802192a:	ec57 6b10 	vmov	r6, r7, d0
 802192e:	f7df f901 	bl	8000b34 <__aeabi_dcmpun>
 8021932:	2800      	cmp	r0, #0
 8021934:	d13b      	bne.n	80219ae <pow+0xa2>
 8021936:	2200      	movs	r2, #0
 8021938:	2300      	movs	r3, #0
 802193a:	ec51 0b18 	vmov	r0, r1, d8
 802193e:	f7df f8c7 	bl	8000ad0 <__aeabi_dcmpeq>
 8021942:	b1b8      	cbz	r0, 8021974 <pow+0x68>
 8021944:	2200      	movs	r2, #0
 8021946:	2300      	movs	r3, #0
 8021948:	4620      	mov	r0, r4
 802194a:	4629      	mov	r1, r5
 802194c:	f7df f8c0 	bl	8000ad0 <__aeabi_dcmpeq>
 8021950:	2800      	cmp	r0, #0
 8021952:	d146      	bne.n	80219e2 <pow+0xd6>
 8021954:	ec45 4b10 	vmov	d0, r4, r5
 8021958:	f000 f848 	bl	80219ec <finite>
 802195c:	b338      	cbz	r0, 80219ae <pow+0xa2>
 802195e:	2200      	movs	r2, #0
 8021960:	2300      	movs	r3, #0
 8021962:	4620      	mov	r0, r4
 8021964:	4629      	mov	r1, r5
 8021966:	f7df f8bd 	bl	8000ae4 <__aeabi_dcmplt>
 802196a:	b300      	cbz	r0, 80219ae <pow+0xa2>
 802196c:	f7fc f880 	bl	801da70 <__errno>
 8021970:	2322      	movs	r3, #34	; 0x22
 8021972:	e01b      	b.n	80219ac <pow+0xa0>
 8021974:	ec47 6b10 	vmov	d0, r6, r7
 8021978:	f000 f838 	bl	80219ec <finite>
 802197c:	b9e0      	cbnz	r0, 80219b8 <pow+0xac>
 802197e:	eeb0 0a48 	vmov.f32	s0, s16
 8021982:	eef0 0a68 	vmov.f32	s1, s17
 8021986:	f000 f831 	bl	80219ec <finite>
 802198a:	b1a8      	cbz	r0, 80219b8 <pow+0xac>
 802198c:	ec45 4b10 	vmov	d0, r4, r5
 8021990:	f000 f82c 	bl	80219ec <finite>
 8021994:	b180      	cbz	r0, 80219b8 <pow+0xac>
 8021996:	4632      	mov	r2, r6
 8021998:	463b      	mov	r3, r7
 802199a:	4630      	mov	r0, r6
 802199c:	4639      	mov	r1, r7
 802199e:	f7df f8c9 	bl	8000b34 <__aeabi_dcmpun>
 80219a2:	2800      	cmp	r0, #0
 80219a4:	d0e2      	beq.n	802196c <pow+0x60>
 80219a6:	f7fc f863 	bl	801da70 <__errno>
 80219aa:	2321      	movs	r3, #33	; 0x21
 80219ac:	6003      	str	r3, [r0, #0]
 80219ae:	ecbd 8b02 	vpop	{d8}
 80219b2:	ec47 6b10 	vmov	d0, r6, r7
 80219b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80219b8:	2200      	movs	r2, #0
 80219ba:	2300      	movs	r3, #0
 80219bc:	4630      	mov	r0, r6
 80219be:	4639      	mov	r1, r7
 80219c0:	f7df f886 	bl	8000ad0 <__aeabi_dcmpeq>
 80219c4:	2800      	cmp	r0, #0
 80219c6:	d0f2      	beq.n	80219ae <pow+0xa2>
 80219c8:	eeb0 0a48 	vmov.f32	s0, s16
 80219cc:	eef0 0a68 	vmov.f32	s1, s17
 80219d0:	f000 f80c 	bl	80219ec <finite>
 80219d4:	2800      	cmp	r0, #0
 80219d6:	d0ea      	beq.n	80219ae <pow+0xa2>
 80219d8:	ec45 4b10 	vmov	d0, r4, r5
 80219dc:	f000 f806 	bl	80219ec <finite>
 80219e0:	e7c3      	b.n	802196a <pow+0x5e>
 80219e2:	2600      	movs	r6, #0
 80219e4:	4f00      	ldr	r7, [pc, #0]	; (80219e8 <pow+0xdc>)
 80219e6:	e7e2      	b.n	80219ae <pow+0xa2>
 80219e8:	3ff00000 	.word	0x3ff00000

080219ec <finite>:
 80219ec:	b082      	sub	sp, #8
 80219ee:	ed8d 0b00 	vstr	d0, [sp]
 80219f2:	9801      	ldr	r0, [sp, #4]
 80219f4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80219f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80219fc:	0fc0      	lsrs	r0, r0, #31
 80219fe:	b002      	add	sp, #8
 8021a00:	4770      	bx	lr
 8021a02:	0000      	movs	r0, r0
 8021a04:	0000      	movs	r0, r0
	...

08021a08 <__ieee754_pow>:
 8021a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a0c:	ed2d 8b06 	vpush	{d8-d10}
 8021a10:	b089      	sub	sp, #36	; 0x24
 8021a12:	ed8d 1b00 	vstr	d1, [sp]
 8021a16:	e9dd 2900 	ldrd	r2, r9, [sp]
 8021a1a:	ec57 6b10 	vmov	r6, r7, d0
 8021a1e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8021a22:	ea58 0102 	orrs.w	r1, r8, r2
 8021a26:	d115      	bne.n	8021a54 <__ieee754_pow+0x4c>
 8021a28:	19b3      	adds	r3, r6, r6
 8021a2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8021a2e:	4152      	adcs	r2, r2
 8021a30:	4299      	cmp	r1, r3
 8021a32:	4b89      	ldr	r3, [pc, #548]	; (8021c58 <__ieee754_pow+0x250>)
 8021a34:	4193      	sbcs	r3, r2
 8021a36:	f080 84d2 	bcs.w	80223de <__ieee754_pow+0x9d6>
 8021a3a:	4630      	mov	r0, r6
 8021a3c:	4639      	mov	r1, r7
 8021a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021a42:	f7de fc27 	bl	8000294 <__adddf3>
 8021a46:	ec41 0b10 	vmov	d0, r0, r1
 8021a4a:	b009      	add	sp, #36	; 0x24
 8021a4c:	ecbd 8b06 	vpop	{d8-d10}
 8021a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a54:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8021a58:	4b80      	ldr	r3, [pc, #512]	; (8021c5c <__ieee754_pow+0x254>)
 8021a5a:	463d      	mov	r5, r7
 8021a5c:	ee10 aa10 	vmov	sl, s0
 8021a60:	429c      	cmp	r4, r3
 8021a62:	dc06      	bgt.n	8021a72 <__ieee754_pow+0x6a>
 8021a64:	d101      	bne.n	8021a6a <__ieee754_pow+0x62>
 8021a66:	2e00      	cmp	r6, #0
 8021a68:	d1e7      	bne.n	8021a3a <__ieee754_pow+0x32>
 8021a6a:	4598      	cmp	r8, r3
 8021a6c:	dc01      	bgt.n	8021a72 <__ieee754_pow+0x6a>
 8021a6e:	d10f      	bne.n	8021a90 <__ieee754_pow+0x88>
 8021a70:	b172      	cbz	r2, 8021a90 <__ieee754_pow+0x88>
 8021a72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8021a76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8021a7a:	ea55 050a 	orrs.w	r5, r5, sl
 8021a7e:	d1dc      	bne.n	8021a3a <__ieee754_pow+0x32>
 8021a80:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021a84:	18db      	adds	r3, r3, r3
 8021a86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8021a8a:	4152      	adcs	r2, r2
 8021a8c:	429d      	cmp	r5, r3
 8021a8e:	e7d0      	b.n	8021a32 <__ieee754_pow+0x2a>
 8021a90:	2d00      	cmp	r5, #0
 8021a92:	da3b      	bge.n	8021b0c <__ieee754_pow+0x104>
 8021a94:	4b72      	ldr	r3, [pc, #456]	; (8021c60 <__ieee754_pow+0x258>)
 8021a96:	4598      	cmp	r8, r3
 8021a98:	dc51      	bgt.n	8021b3e <__ieee754_pow+0x136>
 8021a9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8021a9e:	4598      	cmp	r8, r3
 8021aa0:	f340 84ac 	ble.w	80223fc <__ieee754_pow+0x9f4>
 8021aa4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021aa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021aac:	2b14      	cmp	r3, #20
 8021aae:	dd0f      	ble.n	8021ad0 <__ieee754_pow+0xc8>
 8021ab0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8021ab4:	fa22 f103 	lsr.w	r1, r2, r3
 8021ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8021abc:	4293      	cmp	r3, r2
 8021abe:	f040 849d 	bne.w	80223fc <__ieee754_pow+0x9f4>
 8021ac2:	f001 0101 	and.w	r1, r1, #1
 8021ac6:	f1c1 0302 	rsb	r3, r1, #2
 8021aca:	9304      	str	r3, [sp, #16]
 8021acc:	b182      	cbz	r2, 8021af0 <__ieee754_pow+0xe8>
 8021ace:	e05f      	b.n	8021b90 <__ieee754_pow+0x188>
 8021ad0:	2a00      	cmp	r2, #0
 8021ad2:	d15b      	bne.n	8021b8c <__ieee754_pow+0x184>
 8021ad4:	f1c3 0314 	rsb	r3, r3, #20
 8021ad8:	fa48 f103 	asr.w	r1, r8, r3
 8021adc:	fa01 f303 	lsl.w	r3, r1, r3
 8021ae0:	4543      	cmp	r3, r8
 8021ae2:	f040 8488 	bne.w	80223f6 <__ieee754_pow+0x9ee>
 8021ae6:	f001 0101 	and.w	r1, r1, #1
 8021aea:	f1c1 0302 	rsb	r3, r1, #2
 8021aee:	9304      	str	r3, [sp, #16]
 8021af0:	4b5c      	ldr	r3, [pc, #368]	; (8021c64 <__ieee754_pow+0x25c>)
 8021af2:	4598      	cmp	r8, r3
 8021af4:	d132      	bne.n	8021b5c <__ieee754_pow+0x154>
 8021af6:	f1b9 0f00 	cmp.w	r9, #0
 8021afa:	f280 8478 	bge.w	80223ee <__ieee754_pow+0x9e6>
 8021afe:	4632      	mov	r2, r6
 8021b00:	463b      	mov	r3, r7
 8021b02:	2000      	movs	r0, #0
 8021b04:	4957      	ldr	r1, [pc, #348]	; (8021c64 <__ieee754_pow+0x25c>)
 8021b06:	f7de fea5 	bl	8000854 <__aeabi_ddiv>
 8021b0a:	e79c      	b.n	8021a46 <__ieee754_pow+0x3e>
 8021b0c:	2300      	movs	r3, #0
 8021b0e:	9304      	str	r3, [sp, #16]
 8021b10:	2a00      	cmp	r2, #0
 8021b12:	d13d      	bne.n	8021b90 <__ieee754_pow+0x188>
 8021b14:	4b51      	ldr	r3, [pc, #324]	; (8021c5c <__ieee754_pow+0x254>)
 8021b16:	4598      	cmp	r8, r3
 8021b18:	d1ea      	bne.n	8021af0 <__ieee754_pow+0xe8>
 8021b1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8021b1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021b22:	ea53 030a 	orrs.w	r3, r3, sl
 8021b26:	f000 845a 	beq.w	80223de <__ieee754_pow+0x9d6>
 8021b2a:	4b4f      	ldr	r3, [pc, #316]	; (8021c68 <__ieee754_pow+0x260>)
 8021b2c:	429c      	cmp	r4, r3
 8021b2e:	dd08      	ble.n	8021b42 <__ieee754_pow+0x13a>
 8021b30:	f1b9 0f00 	cmp.w	r9, #0
 8021b34:	f2c0 8457 	blt.w	80223e6 <__ieee754_pow+0x9de>
 8021b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021b3c:	e783      	b.n	8021a46 <__ieee754_pow+0x3e>
 8021b3e:	2302      	movs	r3, #2
 8021b40:	e7e5      	b.n	8021b0e <__ieee754_pow+0x106>
 8021b42:	f1b9 0f00 	cmp.w	r9, #0
 8021b46:	f04f 0000 	mov.w	r0, #0
 8021b4a:	f04f 0100 	mov.w	r1, #0
 8021b4e:	f6bf af7a 	bge.w	8021a46 <__ieee754_pow+0x3e>
 8021b52:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021b56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8021b5a:	e774      	b.n	8021a46 <__ieee754_pow+0x3e>
 8021b5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8021b60:	d106      	bne.n	8021b70 <__ieee754_pow+0x168>
 8021b62:	4632      	mov	r2, r6
 8021b64:	463b      	mov	r3, r7
 8021b66:	4630      	mov	r0, r6
 8021b68:	4639      	mov	r1, r7
 8021b6a:	f7de fd49 	bl	8000600 <__aeabi_dmul>
 8021b6e:	e76a      	b.n	8021a46 <__ieee754_pow+0x3e>
 8021b70:	4b3e      	ldr	r3, [pc, #248]	; (8021c6c <__ieee754_pow+0x264>)
 8021b72:	4599      	cmp	r9, r3
 8021b74:	d10c      	bne.n	8021b90 <__ieee754_pow+0x188>
 8021b76:	2d00      	cmp	r5, #0
 8021b78:	db0a      	blt.n	8021b90 <__ieee754_pow+0x188>
 8021b7a:	ec47 6b10 	vmov	d0, r6, r7
 8021b7e:	b009      	add	sp, #36	; 0x24
 8021b80:	ecbd 8b06 	vpop	{d8-d10}
 8021b84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b88:	f000 bd24 	b.w	80225d4 <__ieee754_sqrt>
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	9304      	str	r3, [sp, #16]
 8021b90:	ec47 6b10 	vmov	d0, r6, r7
 8021b94:	f000 fc66 	bl	8022464 <fabs>
 8021b98:	ec51 0b10 	vmov	r0, r1, d0
 8021b9c:	f1ba 0f00 	cmp.w	sl, #0
 8021ba0:	d129      	bne.n	8021bf6 <__ieee754_pow+0x1ee>
 8021ba2:	b124      	cbz	r4, 8021bae <__ieee754_pow+0x1a6>
 8021ba4:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8021ba8:	4b2e      	ldr	r3, [pc, #184]	; (8021c64 <__ieee754_pow+0x25c>)
 8021baa:	429a      	cmp	r2, r3
 8021bac:	d123      	bne.n	8021bf6 <__ieee754_pow+0x1ee>
 8021bae:	f1b9 0f00 	cmp.w	r9, #0
 8021bb2:	da05      	bge.n	8021bc0 <__ieee754_pow+0x1b8>
 8021bb4:	4602      	mov	r2, r0
 8021bb6:	460b      	mov	r3, r1
 8021bb8:	2000      	movs	r0, #0
 8021bba:	492a      	ldr	r1, [pc, #168]	; (8021c64 <__ieee754_pow+0x25c>)
 8021bbc:	f7de fe4a 	bl	8000854 <__aeabi_ddiv>
 8021bc0:	2d00      	cmp	r5, #0
 8021bc2:	f6bf af40 	bge.w	8021a46 <__ieee754_pow+0x3e>
 8021bc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8021bca:	9b04      	ldr	r3, [sp, #16]
 8021bcc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021bd0:	431c      	orrs	r4, r3
 8021bd2:	d108      	bne.n	8021be6 <__ieee754_pow+0x1de>
 8021bd4:	4602      	mov	r2, r0
 8021bd6:	460b      	mov	r3, r1
 8021bd8:	4610      	mov	r0, r2
 8021bda:	4619      	mov	r1, r3
 8021bdc:	f7de fb58 	bl	8000290 <__aeabi_dsub>
 8021be0:	4602      	mov	r2, r0
 8021be2:	460b      	mov	r3, r1
 8021be4:	e78f      	b.n	8021b06 <__ieee754_pow+0xfe>
 8021be6:	9b04      	ldr	r3, [sp, #16]
 8021be8:	2b01      	cmp	r3, #1
 8021bea:	f47f af2c 	bne.w	8021a46 <__ieee754_pow+0x3e>
 8021bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021bf2:	4619      	mov	r1, r3
 8021bf4:	e727      	b.n	8021a46 <__ieee754_pow+0x3e>
 8021bf6:	0feb      	lsrs	r3, r5, #31
 8021bf8:	3b01      	subs	r3, #1
 8021bfa:	9306      	str	r3, [sp, #24]
 8021bfc:	9a06      	ldr	r2, [sp, #24]
 8021bfe:	9b04      	ldr	r3, [sp, #16]
 8021c00:	4313      	orrs	r3, r2
 8021c02:	d102      	bne.n	8021c0a <__ieee754_pow+0x202>
 8021c04:	4632      	mov	r2, r6
 8021c06:	463b      	mov	r3, r7
 8021c08:	e7e6      	b.n	8021bd8 <__ieee754_pow+0x1d0>
 8021c0a:	4b19      	ldr	r3, [pc, #100]	; (8021c70 <__ieee754_pow+0x268>)
 8021c0c:	4598      	cmp	r8, r3
 8021c0e:	f340 80fb 	ble.w	8021e08 <__ieee754_pow+0x400>
 8021c12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021c16:	4598      	cmp	r8, r3
 8021c18:	4b13      	ldr	r3, [pc, #76]	; (8021c68 <__ieee754_pow+0x260>)
 8021c1a:	dd0c      	ble.n	8021c36 <__ieee754_pow+0x22e>
 8021c1c:	429c      	cmp	r4, r3
 8021c1e:	dc0f      	bgt.n	8021c40 <__ieee754_pow+0x238>
 8021c20:	f1b9 0f00 	cmp.w	r9, #0
 8021c24:	da0f      	bge.n	8021c46 <__ieee754_pow+0x23e>
 8021c26:	2000      	movs	r0, #0
 8021c28:	b009      	add	sp, #36	; 0x24
 8021c2a:	ecbd 8b06 	vpop	{d8-d10}
 8021c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c32:	f000 bcc6 	b.w	80225c2 <__math_oflow>
 8021c36:	429c      	cmp	r4, r3
 8021c38:	dbf2      	blt.n	8021c20 <__ieee754_pow+0x218>
 8021c3a:	4b0a      	ldr	r3, [pc, #40]	; (8021c64 <__ieee754_pow+0x25c>)
 8021c3c:	429c      	cmp	r4, r3
 8021c3e:	dd19      	ble.n	8021c74 <__ieee754_pow+0x26c>
 8021c40:	f1b9 0f00 	cmp.w	r9, #0
 8021c44:	dcef      	bgt.n	8021c26 <__ieee754_pow+0x21e>
 8021c46:	2000      	movs	r0, #0
 8021c48:	b009      	add	sp, #36	; 0x24
 8021c4a:	ecbd 8b06 	vpop	{d8-d10}
 8021c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c52:	f000 bcad 	b.w	80225b0 <__math_uflow>
 8021c56:	bf00      	nop
 8021c58:	fff00000 	.word	0xfff00000
 8021c5c:	7ff00000 	.word	0x7ff00000
 8021c60:	433fffff 	.word	0x433fffff
 8021c64:	3ff00000 	.word	0x3ff00000
 8021c68:	3fefffff 	.word	0x3fefffff
 8021c6c:	3fe00000 	.word	0x3fe00000
 8021c70:	41e00000 	.word	0x41e00000
 8021c74:	2200      	movs	r2, #0
 8021c76:	4b60      	ldr	r3, [pc, #384]	; (8021df8 <__ieee754_pow+0x3f0>)
 8021c78:	f7de fb0a 	bl	8000290 <__aeabi_dsub>
 8021c7c:	4604      	mov	r4, r0
 8021c7e:	460d      	mov	r5, r1
 8021c80:	a353      	add	r3, pc, #332	; (adr r3, 8021dd0 <__ieee754_pow+0x3c8>)
 8021c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c86:	f7de fcbb 	bl	8000600 <__aeabi_dmul>
 8021c8a:	4606      	mov	r6, r0
 8021c8c:	460f      	mov	r7, r1
 8021c8e:	4620      	mov	r0, r4
 8021c90:	4629      	mov	r1, r5
 8021c92:	a351      	add	r3, pc, #324	; (adr r3, 8021dd8 <__ieee754_pow+0x3d0>)
 8021c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c98:	f7de fcb2 	bl	8000600 <__aeabi_dmul>
 8021c9c:	2200      	movs	r2, #0
 8021c9e:	4682      	mov	sl, r0
 8021ca0:	468b      	mov	fp, r1
 8021ca2:	4b56      	ldr	r3, [pc, #344]	; (8021dfc <__ieee754_pow+0x3f4>)
 8021ca4:	4620      	mov	r0, r4
 8021ca6:	4629      	mov	r1, r5
 8021ca8:	f7de fcaa 	bl	8000600 <__aeabi_dmul>
 8021cac:	4602      	mov	r2, r0
 8021cae:	460b      	mov	r3, r1
 8021cb0:	a14b      	add	r1, pc, #300	; (adr r1, 8021de0 <__ieee754_pow+0x3d8>)
 8021cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021cb6:	f7de faeb 	bl	8000290 <__aeabi_dsub>
 8021cba:	4622      	mov	r2, r4
 8021cbc:	462b      	mov	r3, r5
 8021cbe:	f7de fc9f 	bl	8000600 <__aeabi_dmul>
 8021cc2:	4602      	mov	r2, r0
 8021cc4:	460b      	mov	r3, r1
 8021cc6:	2000      	movs	r0, #0
 8021cc8:	494d      	ldr	r1, [pc, #308]	; (8021e00 <__ieee754_pow+0x3f8>)
 8021cca:	f7de fae1 	bl	8000290 <__aeabi_dsub>
 8021cce:	4680      	mov	r8, r0
 8021cd0:	4689      	mov	r9, r1
 8021cd2:	4622      	mov	r2, r4
 8021cd4:	462b      	mov	r3, r5
 8021cd6:	4620      	mov	r0, r4
 8021cd8:	4629      	mov	r1, r5
 8021cda:	f7de fc91 	bl	8000600 <__aeabi_dmul>
 8021cde:	4602      	mov	r2, r0
 8021ce0:	460b      	mov	r3, r1
 8021ce2:	4640      	mov	r0, r8
 8021ce4:	4649      	mov	r1, r9
 8021ce6:	f7de fc8b 	bl	8000600 <__aeabi_dmul>
 8021cea:	a33f      	add	r3, pc, #252	; (adr r3, 8021de8 <__ieee754_pow+0x3e0>)
 8021cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cf0:	f7de fc86 	bl	8000600 <__aeabi_dmul>
 8021cf4:	4602      	mov	r2, r0
 8021cf6:	460b      	mov	r3, r1
 8021cf8:	4650      	mov	r0, sl
 8021cfa:	4659      	mov	r1, fp
 8021cfc:	f7de fac8 	bl	8000290 <__aeabi_dsub>
 8021d00:	4602      	mov	r2, r0
 8021d02:	460b      	mov	r3, r1
 8021d04:	4680      	mov	r8, r0
 8021d06:	4689      	mov	r9, r1
 8021d08:	4630      	mov	r0, r6
 8021d0a:	4639      	mov	r1, r7
 8021d0c:	f7de fac2 	bl	8000294 <__adddf3>
 8021d10:	2000      	movs	r0, #0
 8021d12:	4632      	mov	r2, r6
 8021d14:	463b      	mov	r3, r7
 8021d16:	4604      	mov	r4, r0
 8021d18:	460d      	mov	r5, r1
 8021d1a:	f7de fab9 	bl	8000290 <__aeabi_dsub>
 8021d1e:	4602      	mov	r2, r0
 8021d20:	460b      	mov	r3, r1
 8021d22:	4640      	mov	r0, r8
 8021d24:	4649      	mov	r1, r9
 8021d26:	f7de fab3 	bl	8000290 <__aeabi_dsub>
 8021d2a:	9b04      	ldr	r3, [sp, #16]
 8021d2c:	9a06      	ldr	r2, [sp, #24]
 8021d2e:	4682      	mov	sl, r0
 8021d30:	3b01      	subs	r3, #1
 8021d32:	468b      	mov	fp, r1
 8021d34:	4313      	orrs	r3, r2
 8021d36:	f040 81e7 	bne.w	8022108 <__ieee754_pow+0x700>
 8021d3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021df0 <__ieee754_pow+0x3e8>
 8021d3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021d42:	2600      	movs	r6, #0
 8021d44:	eeb0 8a47 	vmov.f32	s16, s14
 8021d48:	eef0 8a67 	vmov.f32	s17, s15
 8021d4c:	463b      	mov	r3, r7
 8021d4e:	4632      	mov	r2, r6
 8021d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021d54:	f7de fa9c 	bl	8000290 <__aeabi_dsub>
 8021d58:	4622      	mov	r2, r4
 8021d5a:	462b      	mov	r3, r5
 8021d5c:	f7de fc50 	bl	8000600 <__aeabi_dmul>
 8021d60:	4680      	mov	r8, r0
 8021d62:	4689      	mov	r9, r1
 8021d64:	4650      	mov	r0, sl
 8021d66:	4659      	mov	r1, fp
 8021d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021d6c:	f7de fc48 	bl	8000600 <__aeabi_dmul>
 8021d70:	4602      	mov	r2, r0
 8021d72:	460b      	mov	r3, r1
 8021d74:	4640      	mov	r0, r8
 8021d76:	4649      	mov	r1, r9
 8021d78:	f7de fa8c 	bl	8000294 <__adddf3>
 8021d7c:	4680      	mov	r8, r0
 8021d7e:	4689      	mov	r9, r1
 8021d80:	4632      	mov	r2, r6
 8021d82:	463b      	mov	r3, r7
 8021d84:	4620      	mov	r0, r4
 8021d86:	4629      	mov	r1, r5
 8021d88:	f7de fc3a 	bl	8000600 <__aeabi_dmul>
 8021d8c:	460b      	mov	r3, r1
 8021d8e:	4604      	mov	r4, r0
 8021d90:	460d      	mov	r5, r1
 8021d92:	4602      	mov	r2, r0
 8021d94:	4649      	mov	r1, r9
 8021d96:	4640      	mov	r0, r8
 8021d98:	f7de fa7c 	bl	8000294 <__adddf3>
 8021d9c:	4b19      	ldr	r3, [pc, #100]	; (8021e04 <__ieee754_pow+0x3fc>)
 8021d9e:	4606      	mov	r6, r0
 8021da0:	460f      	mov	r7, r1
 8021da2:	4299      	cmp	r1, r3
 8021da4:	468b      	mov	fp, r1
 8021da6:	ec45 4b19 	vmov	d9, r4, r5
 8021daa:	f340 82f1 	ble.w	8022390 <__ieee754_pow+0x988>
 8021dae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8021db2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8021db6:	4303      	orrs	r3, r0
 8021db8:	f000 81e4 	beq.w	8022184 <__ieee754_pow+0x77c>
 8021dbc:	2200      	movs	r2, #0
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	ec51 0b18 	vmov	r0, r1, d8
 8021dc4:	f7de fe8e 	bl	8000ae4 <__aeabi_dcmplt>
 8021dc8:	3800      	subs	r0, #0
 8021dca:	bf18      	it	ne
 8021dcc:	2001      	movne	r0, #1
 8021dce:	e72b      	b.n	8021c28 <__ieee754_pow+0x220>
 8021dd0:	60000000 	.word	0x60000000
 8021dd4:	3ff71547 	.word	0x3ff71547
 8021dd8:	f85ddf44 	.word	0xf85ddf44
 8021ddc:	3e54ae0b 	.word	0x3e54ae0b
 8021de0:	55555555 	.word	0x55555555
 8021de4:	3fd55555 	.word	0x3fd55555
 8021de8:	652b82fe 	.word	0x652b82fe
 8021dec:	3ff71547 	.word	0x3ff71547
 8021df0:	00000000 	.word	0x00000000
 8021df4:	bff00000 	.word	0xbff00000
 8021df8:	3ff00000 	.word	0x3ff00000
 8021dfc:	3fd00000 	.word	0x3fd00000
 8021e00:	3fe00000 	.word	0x3fe00000
 8021e04:	408fffff 	.word	0x408fffff
 8021e08:	4bd5      	ldr	r3, [pc, #852]	; (8022160 <__ieee754_pow+0x758>)
 8021e0a:	2200      	movs	r2, #0
 8021e0c:	402b      	ands	r3, r5
 8021e0e:	b92b      	cbnz	r3, 8021e1c <__ieee754_pow+0x414>
 8021e10:	4bd4      	ldr	r3, [pc, #848]	; (8022164 <__ieee754_pow+0x75c>)
 8021e12:	f7de fbf5 	bl	8000600 <__aeabi_dmul>
 8021e16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8021e1a:	460c      	mov	r4, r1
 8021e1c:	1523      	asrs	r3, r4, #20
 8021e1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021e22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021e26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8021e2a:	4413      	add	r3, r2
 8021e2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8021e30:	9305      	str	r3, [sp, #20]
 8021e32:	4bcd      	ldr	r3, [pc, #820]	; (8022168 <__ieee754_pow+0x760>)
 8021e34:	429c      	cmp	r4, r3
 8021e36:	dd08      	ble.n	8021e4a <__ieee754_pow+0x442>
 8021e38:	4bcc      	ldr	r3, [pc, #816]	; (802216c <__ieee754_pow+0x764>)
 8021e3a:	429c      	cmp	r4, r3
 8021e3c:	f340 8162 	ble.w	8022104 <__ieee754_pow+0x6fc>
 8021e40:	9b05      	ldr	r3, [sp, #20]
 8021e42:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8021e46:	3301      	adds	r3, #1
 8021e48:	9305      	str	r3, [sp, #20]
 8021e4a:	2400      	movs	r4, #0
 8021e4c:	00e3      	lsls	r3, r4, #3
 8021e4e:	4682      	mov	sl, r0
 8021e50:	4629      	mov	r1, r5
 8021e52:	46ab      	mov	fp, r5
 8021e54:	9307      	str	r3, [sp, #28]
 8021e56:	4bc6      	ldr	r3, [pc, #792]	; (8022170 <__ieee754_pow+0x768>)
 8021e58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021e5c:	ed93 7b00 	vldr	d7, [r3]
 8021e60:	eeb0 9a47 	vmov.f32	s18, s14
 8021e64:	eef0 9a67 	vmov.f32	s19, s15
 8021e68:	ec53 2b17 	vmov	r2, r3, d7
 8021e6c:	f7de fa10 	bl	8000290 <__aeabi_dsub>
 8021e70:	4652      	mov	r2, sl
 8021e72:	4606      	mov	r6, r0
 8021e74:	460f      	mov	r7, r1
 8021e76:	462b      	mov	r3, r5
 8021e78:	106d      	asrs	r5, r5, #1
 8021e7a:	ec51 0b19 	vmov	r0, r1, d9
 8021e7e:	f7de fa09 	bl	8000294 <__adddf3>
 8021e82:	4602      	mov	r2, r0
 8021e84:	460b      	mov	r3, r1
 8021e86:	2000      	movs	r0, #0
 8021e88:	49ba      	ldr	r1, [pc, #744]	; (8022174 <__ieee754_pow+0x76c>)
 8021e8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8021e8e:	f7de fce1 	bl	8000854 <__aeabi_ddiv>
 8021e92:	4602      	mov	r2, r0
 8021e94:	460b      	mov	r3, r1
 8021e96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021e9a:	ec41 0b1a 	vmov	d10, r0, r1
 8021e9e:	4630      	mov	r0, r6
 8021ea0:	4639      	mov	r1, r7
 8021ea2:	f7de fbad 	bl	8000600 <__aeabi_dmul>
 8021ea6:	2300      	movs	r3, #0
 8021ea8:	2200      	movs	r2, #0
 8021eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021eae:	9302      	str	r3, [sp, #8]
 8021eb0:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8021eb4:	4614      	mov	r4, r2
 8021eb6:	461d      	mov	r5, r3
 8021eb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8021ebc:	ec41 0b18 	vmov	d8, r0, r1
 8021ec0:	4640      	mov	r0, r8
 8021ec2:	4649      	mov	r1, r9
 8021ec4:	f7de fb9c 	bl	8000600 <__aeabi_dmul>
 8021ec8:	4602      	mov	r2, r0
 8021eca:	460b      	mov	r3, r1
 8021ecc:	4630      	mov	r0, r6
 8021ece:	4639      	mov	r1, r7
 8021ed0:	f7de f9de 	bl	8000290 <__aeabi_dsub>
 8021ed4:	4606      	mov	r6, r0
 8021ed6:	460f      	mov	r7, r1
 8021ed8:	4620      	mov	r0, r4
 8021eda:	4629      	mov	r1, r5
 8021edc:	ec53 2b19 	vmov	r2, r3, d9
 8021ee0:	f7de f9d6 	bl	8000290 <__aeabi_dsub>
 8021ee4:	4602      	mov	r2, r0
 8021ee6:	460b      	mov	r3, r1
 8021ee8:	4650      	mov	r0, sl
 8021eea:	4659      	mov	r1, fp
 8021eec:	f7de f9d0 	bl	8000290 <__aeabi_dsub>
 8021ef0:	4642      	mov	r2, r8
 8021ef2:	464b      	mov	r3, r9
 8021ef4:	f7de fb84 	bl	8000600 <__aeabi_dmul>
 8021ef8:	4602      	mov	r2, r0
 8021efa:	460b      	mov	r3, r1
 8021efc:	4630      	mov	r0, r6
 8021efe:	4639      	mov	r1, r7
 8021f00:	f7de f9c6 	bl	8000290 <__aeabi_dsub>
 8021f04:	ec53 2b1a 	vmov	r2, r3, d10
 8021f08:	f7de fb7a 	bl	8000600 <__aeabi_dmul>
 8021f0c:	ec53 2b18 	vmov	r2, r3, d8
 8021f10:	ec41 0b19 	vmov	d9, r0, r1
 8021f14:	ec51 0b18 	vmov	r0, r1, d8
 8021f18:	f7de fb72 	bl	8000600 <__aeabi_dmul>
 8021f1c:	4604      	mov	r4, r0
 8021f1e:	460d      	mov	r5, r1
 8021f20:	a37b      	add	r3, pc, #492	; (adr r3, 8022110 <__ieee754_pow+0x708>)
 8021f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f26:	f7de fb6b 	bl	8000600 <__aeabi_dmul>
 8021f2a:	a37b      	add	r3, pc, #492	; (adr r3, 8022118 <__ieee754_pow+0x710>)
 8021f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f30:	f7de f9b0 	bl	8000294 <__adddf3>
 8021f34:	4622      	mov	r2, r4
 8021f36:	462b      	mov	r3, r5
 8021f38:	f7de fb62 	bl	8000600 <__aeabi_dmul>
 8021f3c:	a378      	add	r3, pc, #480	; (adr r3, 8022120 <__ieee754_pow+0x718>)
 8021f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f42:	f7de f9a7 	bl	8000294 <__adddf3>
 8021f46:	4622      	mov	r2, r4
 8021f48:	462b      	mov	r3, r5
 8021f4a:	f7de fb59 	bl	8000600 <__aeabi_dmul>
 8021f4e:	a376      	add	r3, pc, #472	; (adr r3, 8022128 <__ieee754_pow+0x720>)
 8021f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f54:	f7de f99e 	bl	8000294 <__adddf3>
 8021f58:	4622      	mov	r2, r4
 8021f5a:	462b      	mov	r3, r5
 8021f5c:	f7de fb50 	bl	8000600 <__aeabi_dmul>
 8021f60:	a373      	add	r3, pc, #460	; (adr r3, 8022130 <__ieee754_pow+0x728>)
 8021f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f66:	f7de f995 	bl	8000294 <__adddf3>
 8021f6a:	4622      	mov	r2, r4
 8021f6c:	462b      	mov	r3, r5
 8021f6e:	f7de fb47 	bl	8000600 <__aeabi_dmul>
 8021f72:	a371      	add	r3, pc, #452	; (adr r3, 8022138 <__ieee754_pow+0x730>)
 8021f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f78:	f7de f98c 	bl	8000294 <__adddf3>
 8021f7c:	4606      	mov	r6, r0
 8021f7e:	460f      	mov	r7, r1
 8021f80:	4622      	mov	r2, r4
 8021f82:	462b      	mov	r3, r5
 8021f84:	4620      	mov	r0, r4
 8021f86:	4629      	mov	r1, r5
 8021f88:	f7de fb3a 	bl	8000600 <__aeabi_dmul>
 8021f8c:	4602      	mov	r2, r0
 8021f8e:	460b      	mov	r3, r1
 8021f90:	4630      	mov	r0, r6
 8021f92:	4639      	mov	r1, r7
 8021f94:	f7de fb34 	bl	8000600 <__aeabi_dmul>
 8021f98:	4642      	mov	r2, r8
 8021f9a:	4604      	mov	r4, r0
 8021f9c:	460d      	mov	r5, r1
 8021f9e:	464b      	mov	r3, r9
 8021fa0:	ec51 0b18 	vmov	r0, r1, d8
 8021fa4:	f7de f976 	bl	8000294 <__adddf3>
 8021fa8:	ec53 2b19 	vmov	r2, r3, d9
 8021fac:	f7de fb28 	bl	8000600 <__aeabi_dmul>
 8021fb0:	4622      	mov	r2, r4
 8021fb2:	462b      	mov	r3, r5
 8021fb4:	f7de f96e 	bl	8000294 <__adddf3>
 8021fb8:	4642      	mov	r2, r8
 8021fba:	4682      	mov	sl, r0
 8021fbc:	468b      	mov	fp, r1
 8021fbe:	464b      	mov	r3, r9
 8021fc0:	4640      	mov	r0, r8
 8021fc2:	4649      	mov	r1, r9
 8021fc4:	f7de fb1c 	bl	8000600 <__aeabi_dmul>
 8021fc8:	2200      	movs	r2, #0
 8021fca:	4b6b      	ldr	r3, [pc, #428]	; (8022178 <__ieee754_pow+0x770>)
 8021fcc:	4606      	mov	r6, r0
 8021fce:	460f      	mov	r7, r1
 8021fd0:	f7de f960 	bl	8000294 <__adddf3>
 8021fd4:	4652      	mov	r2, sl
 8021fd6:	465b      	mov	r3, fp
 8021fd8:	f7de f95c 	bl	8000294 <__adddf3>
 8021fdc:	2000      	movs	r0, #0
 8021fde:	460d      	mov	r5, r1
 8021fe0:	460b      	mov	r3, r1
 8021fe2:	4604      	mov	r4, r0
 8021fe4:	4602      	mov	r2, r0
 8021fe6:	4649      	mov	r1, r9
 8021fe8:	4640      	mov	r0, r8
 8021fea:	f7de fb09 	bl	8000600 <__aeabi_dmul>
 8021fee:	2200      	movs	r2, #0
 8021ff0:	4680      	mov	r8, r0
 8021ff2:	4689      	mov	r9, r1
 8021ff4:	4b60      	ldr	r3, [pc, #384]	; (8022178 <__ieee754_pow+0x770>)
 8021ff6:	4620      	mov	r0, r4
 8021ff8:	4629      	mov	r1, r5
 8021ffa:	f7de f949 	bl	8000290 <__aeabi_dsub>
 8021ffe:	4632      	mov	r2, r6
 8022000:	463b      	mov	r3, r7
 8022002:	f7de f945 	bl	8000290 <__aeabi_dsub>
 8022006:	4602      	mov	r2, r0
 8022008:	460b      	mov	r3, r1
 802200a:	4650      	mov	r0, sl
 802200c:	4659      	mov	r1, fp
 802200e:	f7de f93f 	bl	8000290 <__aeabi_dsub>
 8022012:	ec53 2b18 	vmov	r2, r3, d8
 8022016:	f7de faf3 	bl	8000600 <__aeabi_dmul>
 802201a:	4606      	mov	r6, r0
 802201c:	460f      	mov	r7, r1
 802201e:	4622      	mov	r2, r4
 8022020:	462b      	mov	r3, r5
 8022022:	ec51 0b19 	vmov	r0, r1, d9
 8022026:	f7de faeb 	bl	8000600 <__aeabi_dmul>
 802202a:	4602      	mov	r2, r0
 802202c:	460b      	mov	r3, r1
 802202e:	4630      	mov	r0, r6
 8022030:	4639      	mov	r1, r7
 8022032:	f7de f92f 	bl	8000294 <__adddf3>
 8022036:	4606      	mov	r6, r0
 8022038:	460f      	mov	r7, r1
 802203a:	4602      	mov	r2, r0
 802203c:	460b      	mov	r3, r1
 802203e:	4640      	mov	r0, r8
 8022040:	4649      	mov	r1, r9
 8022042:	f7de f927 	bl	8000294 <__adddf3>
 8022046:	2000      	movs	r0, #0
 8022048:	460d      	mov	r5, r1
 802204a:	4604      	mov	r4, r0
 802204c:	a33c      	add	r3, pc, #240	; (adr r3, 8022140 <__ieee754_pow+0x738>)
 802204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022052:	f7de fad5 	bl	8000600 <__aeabi_dmul>
 8022056:	4642      	mov	r2, r8
 8022058:	464b      	mov	r3, r9
 802205a:	ec41 0b18 	vmov	d8, r0, r1
 802205e:	4620      	mov	r0, r4
 8022060:	4629      	mov	r1, r5
 8022062:	f7de f915 	bl	8000290 <__aeabi_dsub>
 8022066:	4602      	mov	r2, r0
 8022068:	460b      	mov	r3, r1
 802206a:	4630      	mov	r0, r6
 802206c:	4639      	mov	r1, r7
 802206e:	f7de f90f 	bl	8000290 <__aeabi_dsub>
 8022072:	a335      	add	r3, pc, #212	; (adr r3, 8022148 <__ieee754_pow+0x740>)
 8022074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022078:	f7de fac2 	bl	8000600 <__aeabi_dmul>
 802207c:	4606      	mov	r6, r0
 802207e:	460f      	mov	r7, r1
 8022080:	4620      	mov	r0, r4
 8022082:	4629      	mov	r1, r5
 8022084:	a332      	add	r3, pc, #200	; (adr r3, 8022150 <__ieee754_pow+0x748>)
 8022086:	e9d3 2300 	ldrd	r2, r3, [r3]
 802208a:	f7de fab9 	bl	8000600 <__aeabi_dmul>
 802208e:	4602      	mov	r2, r0
 8022090:	460b      	mov	r3, r1
 8022092:	4630      	mov	r0, r6
 8022094:	4639      	mov	r1, r7
 8022096:	f7de f8fd 	bl	8000294 <__adddf3>
 802209a:	9a07      	ldr	r2, [sp, #28]
 802209c:	4b37      	ldr	r3, [pc, #220]	; (802217c <__ieee754_pow+0x774>)
 802209e:	4413      	add	r3, r2
 80220a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a4:	f7de f8f6 	bl	8000294 <__adddf3>
 80220a8:	4682      	mov	sl, r0
 80220aa:	9805      	ldr	r0, [sp, #20]
 80220ac:	468b      	mov	fp, r1
 80220ae:	f7de fa3d 	bl	800052c <__aeabi_i2d>
 80220b2:	9a07      	ldr	r2, [sp, #28]
 80220b4:	4b32      	ldr	r3, [pc, #200]	; (8022180 <__ieee754_pow+0x778>)
 80220b6:	4606      	mov	r6, r0
 80220b8:	460f      	mov	r7, r1
 80220ba:	4413      	add	r3, r2
 80220bc:	4652      	mov	r2, sl
 80220be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80220c2:	ec51 0b18 	vmov	r0, r1, d8
 80220c6:	465b      	mov	r3, fp
 80220c8:	f7de f8e4 	bl	8000294 <__adddf3>
 80220cc:	4642      	mov	r2, r8
 80220ce:	464b      	mov	r3, r9
 80220d0:	f7de f8e0 	bl	8000294 <__adddf3>
 80220d4:	4632      	mov	r2, r6
 80220d6:	463b      	mov	r3, r7
 80220d8:	f7de f8dc 	bl	8000294 <__adddf3>
 80220dc:	2000      	movs	r0, #0
 80220de:	4632      	mov	r2, r6
 80220e0:	463b      	mov	r3, r7
 80220e2:	4604      	mov	r4, r0
 80220e4:	460d      	mov	r5, r1
 80220e6:	f7de f8d3 	bl	8000290 <__aeabi_dsub>
 80220ea:	4642      	mov	r2, r8
 80220ec:	464b      	mov	r3, r9
 80220ee:	f7de f8cf 	bl	8000290 <__aeabi_dsub>
 80220f2:	ec53 2b18 	vmov	r2, r3, d8
 80220f6:	f7de f8cb 	bl	8000290 <__aeabi_dsub>
 80220fa:	4602      	mov	r2, r0
 80220fc:	460b      	mov	r3, r1
 80220fe:	4650      	mov	r0, sl
 8022100:	4659      	mov	r1, fp
 8022102:	e610      	b.n	8021d26 <__ieee754_pow+0x31e>
 8022104:	2401      	movs	r4, #1
 8022106:	e6a1      	b.n	8021e4c <__ieee754_pow+0x444>
 8022108:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8022158 <__ieee754_pow+0x750>
 802210c:	e617      	b.n	8021d3e <__ieee754_pow+0x336>
 802210e:	bf00      	nop
 8022110:	4a454eef 	.word	0x4a454eef
 8022114:	3fca7e28 	.word	0x3fca7e28
 8022118:	93c9db65 	.word	0x93c9db65
 802211c:	3fcd864a 	.word	0x3fcd864a
 8022120:	a91d4101 	.word	0xa91d4101
 8022124:	3fd17460 	.word	0x3fd17460
 8022128:	518f264d 	.word	0x518f264d
 802212c:	3fd55555 	.word	0x3fd55555
 8022130:	db6fabff 	.word	0xdb6fabff
 8022134:	3fdb6db6 	.word	0x3fdb6db6
 8022138:	33333303 	.word	0x33333303
 802213c:	3fe33333 	.word	0x3fe33333
 8022140:	e0000000 	.word	0xe0000000
 8022144:	3feec709 	.word	0x3feec709
 8022148:	dc3a03fd 	.word	0xdc3a03fd
 802214c:	3feec709 	.word	0x3feec709
 8022150:	145b01f5 	.word	0x145b01f5
 8022154:	be3e2fe0 	.word	0xbe3e2fe0
 8022158:	00000000 	.word	0x00000000
 802215c:	3ff00000 	.word	0x3ff00000
 8022160:	7ff00000 	.word	0x7ff00000
 8022164:	43400000 	.word	0x43400000
 8022168:	0003988e 	.word	0x0003988e
 802216c:	000bb679 	.word	0x000bb679
 8022170:	08023e08 	.word	0x08023e08
 8022174:	3ff00000 	.word	0x3ff00000
 8022178:	40080000 	.word	0x40080000
 802217c:	08023e28 	.word	0x08023e28
 8022180:	08023e18 	.word	0x08023e18
 8022184:	a3b5      	add	r3, pc, #724	; (adr r3, 802245c <__ieee754_pow+0xa54>)
 8022186:	e9d3 2300 	ldrd	r2, r3, [r3]
 802218a:	4640      	mov	r0, r8
 802218c:	4649      	mov	r1, r9
 802218e:	f7de f881 	bl	8000294 <__adddf3>
 8022192:	4622      	mov	r2, r4
 8022194:	462b      	mov	r3, r5
 8022196:	ec41 0b1a 	vmov	d10, r0, r1
 802219a:	4630      	mov	r0, r6
 802219c:	4639      	mov	r1, r7
 802219e:	f7de f877 	bl	8000290 <__aeabi_dsub>
 80221a2:	4602      	mov	r2, r0
 80221a4:	460b      	mov	r3, r1
 80221a6:	ec51 0b1a 	vmov	r0, r1, d10
 80221aa:	f7de fcb9 	bl	8000b20 <__aeabi_dcmpgt>
 80221ae:	2800      	cmp	r0, #0
 80221b0:	f47f ae04 	bne.w	8021dbc <__ieee754_pow+0x3b4>
 80221b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80221b8:	4aa3      	ldr	r2, [pc, #652]	; (8022448 <__ieee754_pow+0xa40>)
 80221ba:	4293      	cmp	r3, r2
 80221bc:	f340 8108 	ble.w	80223d0 <__ieee754_pow+0x9c8>
 80221c0:	151b      	asrs	r3, r3, #20
 80221c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80221c6:	48a1      	ldr	r0, [pc, #644]	; (802244c <__ieee754_pow+0xa44>)
 80221c8:	f1bb 0f00 	cmp.w	fp, #0
 80221cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80221d0:	f04f 0200 	mov.w	r2, #0
 80221d4:	fa4a fa03 	asr.w	sl, sl, r3
 80221d8:	44da      	add	sl, fp
 80221da:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80221de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80221e2:	fa40 f001 	asr.w	r0, r0, r1
 80221e6:	f1c1 0114 	rsb	r1, r1, #20
 80221ea:	ea00 030a 	and.w	r3, r0, sl
 80221ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80221f2:	4620      	mov	r0, r4
 80221f4:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80221f8:	fa4a fa01 	asr.w	sl, sl, r1
 80221fc:	4629      	mov	r1, r5
 80221fe:	bfb8      	it	lt
 8022200:	f1ca 0a00 	rsblt	sl, sl, #0
 8022204:	f7de f844 	bl	8000290 <__aeabi_dsub>
 8022208:	ec41 0b19 	vmov	d9, r0, r1
 802220c:	4642      	mov	r2, r8
 802220e:	464b      	mov	r3, r9
 8022210:	ec51 0b19 	vmov	r0, r1, d9
 8022214:	f7de f83e 	bl	8000294 <__adddf3>
 8022218:	2000      	movs	r0, #0
 802221a:	460d      	mov	r5, r1
 802221c:	4604      	mov	r4, r0
 802221e:	a37a      	add	r3, pc, #488	; (adr r3, 8022408 <__ieee754_pow+0xa00>)
 8022220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022224:	f7de f9ec 	bl	8000600 <__aeabi_dmul>
 8022228:	4606      	mov	r6, r0
 802222a:	460f      	mov	r7, r1
 802222c:	4620      	mov	r0, r4
 802222e:	4629      	mov	r1, r5
 8022230:	ec53 2b19 	vmov	r2, r3, d9
 8022234:	f7de f82c 	bl	8000290 <__aeabi_dsub>
 8022238:	4602      	mov	r2, r0
 802223a:	460b      	mov	r3, r1
 802223c:	4640      	mov	r0, r8
 802223e:	4649      	mov	r1, r9
 8022240:	f7de f826 	bl	8000290 <__aeabi_dsub>
 8022244:	a372      	add	r3, pc, #456	; (adr r3, 8022410 <__ieee754_pow+0xa08>)
 8022246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802224a:	f7de f9d9 	bl	8000600 <__aeabi_dmul>
 802224e:	4680      	mov	r8, r0
 8022250:	4689      	mov	r9, r1
 8022252:	4620      	mov	r0, r4
 8022254:	4629      	mov	r1, r5
 8022256:	a370      	add	r3, pc, #448	; (adr r3, 8022418 <__ieee754_pow+0xa10>)
 8022258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802225c:	f7de f9d0 	bl	8000600 <__aeabi_dmul>
 8022260:	4602      	mov	r2, r0
 8022262:	460b      	mov	r3, r1
 8022264:	4640      	mov	r0, r8
 8022266:	4649      	mov	r1, r9
 8022268:	f7de f814 	bl	8000294 <__adddf3>
 802226c:	4604      	mov	r4, r0
 802226e:	460d      	mov	r5, r1
 8022270:	4602      	mov	r2, r0
 8022272:	460b      	mov	r3, r1
 8022274:	4630      	mov	r0, r6
 8022276:	4639      	mov	r1, r7
 8022278:	f7de f80c 	bl	8000294 <__adddf3>
 802227c:	4632      	mov	r2, r6
 802227e:	4680      	mov	r8, r0
 8022280:	4689      	mov	r9, r1
 8022282:	463b      	mov	r3, r7
 8022284:	f7de f804 	bl	8000290 <__aeabi_dsub>
 8022288:	4602      	mov	r2, r0
 802228a:	460b      	mov	r3, r1
 802228c:	4620      	mov	r0, r4
 802228e:	4629      	mov	r1, r5
 8022290:	f7dd fffe 	bl	8000290 <__aeabi_dsub>
 8022294:	4642      	mov	r2, r8
 8022296:	4606      	mov	r6, r0
 8022298:	460f      	mov	r7, r1
 802229a:	464b      	mov	r3, r9
 802229c:	4640      	mov	r0, r8
 802229e:	4649      	mov	r1, r9
 80222a0:	f7de f9ae 	bl	8000600 <__aeabi_dmul>
 80222a4:	4604      	mov	r4, r0
 80222a6:	460d      	mov	r5, r1
 80222a8:	a35d      	add	r3, pc, #372	; (adr r3, 8022420 <__ieee754_pow+0xa18>)
 80222aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222ae:	f7de f9a7 	bl	8000600 <__aeabi_dmul>
 80222b2:	a35d      	add	r3, pc, #372	; (adr r3, 8022428 <__ieee754_pow+0xa20>)
 80222b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222b8:	f7dd ffea 	bl	8000290 <__aeabi_dsub>
 80222bc:	4622      	mov	r2, r4
 80222be:	462b      	mov	r3, r5
 80222c0:	f7de f99e 	bl	8000600 <__aeabi_dmul>
 80222c4:	a35a      	add	r3, pc, #360	; (adr r3, 8022430 <__ieee754_pow+0xa28>)
 80222c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222ca:	f7dd ffe3 	bl	8000294 <__adddf3>
 80222ce:	4622      	mov	r2, r4
 80222d0:	462b      	mov	r3, r5
 80222d2:	f7de f995 	bl	8000600 <__aeabi_dmul>
 80222d6:	a358      	add	r3, pc, #352	; (adr r3, 8022438 <__ieee754_pow+0xa30>)
 80222d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222dc:	f7dd ffd8 	bl	8000290 <__aeabi_dsub>
 80222e0:	4622      	mov	r2, r4
 80222e2:	462b      	mov	r3, r5
 80222e4:	f7de f98c 	bl	8000600 <__aeabi_dmul>
 80222e8:	a355      	add	r3, pc, #340	; (adr r3, 8022440 <__ieee754_pow+0xa38>)
 80222ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222ee:	f7dd ffd1 	bl	8000294 <__adddf3>
 80222f2:	4622      	mov	r2, r4
 80222f4:	462b      	mov	r3, r5
 80222f6:	f7de f983 	bl	8000600 <__aeabi_dmul>
 80222fa:	4602      	mov	r2, r0
 80222fc:	460b      	mov	r3, r1
 80222fe:	4640      	mov	r0, r8
 8022300:	4649      	mov	r1, r9
 8022302:	f7dd ffc5 	bl	8000290 <__aeabi_dsub>
 8022306:	4604      	mov	r4, r0
 8022308:	460d      	mov	r5, r1
 802230a:	4602      	mov	r2, r0
 802230c:	460b      	mov	r3, r1
 802230e:	4640      	mov	r0, r8
 8022310:	4649      	mov	r1, r9
 8022312:	f7de f975 	bl	8000600 <__aeabi_dmul>
 8022316:	2200      	movs	r2, #0
 8022318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802231c:	ec41 0b19 	vmov	d9, r0, r1
 8022320:	4620      	mov	r0, r4
 8022322:	4629      	mov	r1, r5
 8022324:	f7dd ffb4 	bl	8000290 <__aeabi_dsub>
 8022328:	4602      	mov	r2, r0
 802232a:	460b      	mov	r3, r1
 802232c:	ec51 0b19 	vmov	r0, r1, d9
 8022330:	f7de fa90 	bl	8000854 <__aeabi_ddiv>
 8022334:	4632      	mov	r2, r6
 8022336:	4604      	mov	r4, r0
 8022338:	460d      	mov	r5, r1
 802233a:	463b      	mov	r3, r7
 802233c:	4640      	mov	r0, r8
 802233e:	4649      	mov	r1, r9
 8022340:	f7de f95e 	bl	8000600 <__aeabi_dmul>
 8022344:	4632      	mov	r2, r6
 8022346:	463b      	mov	r3, r7
 8022348:	f7dd ffa4 	bl	8000294 <__adddf3>
 802234c:	4602      	mov	r2, r0
 802234e:	460b      	mov	r3, r1
 8022350:	4620      	mov	r0, r4
 8022352:	4629      	mov	r1, r5
 8022354:	f7dd ff9c 	bl	8000290 <__aeabi_dsub>
 8022358:	4642      	mov	r2, r8
 802235a:	464b      	mov	r3, r9
 802235c:	f7dd ff98 	bl	8000290 <__aeabi_dsub>
 8022360:	460b      	mov	r3, r1
 8022362:	4602      	mov	r2, r0
 8022364:	493a      	ldr	r1, [pc, #232]	; (8022450 <__ieee754_pow+0xa48>)
 8022366:	2000      	movs	r0, #0
 8022368:	f7dd ff92 	bl	8000290 <__aeabi_dsub>
 802236c:	ec41 0b10 	vmov	d0, r0, r1
 8022370:	ee10 3a90 	vmov	r3, s1
 8022374:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8022378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802237c:	da2b      	bge.n	80223d6 <__ieee754_pow+0x9ce>
 802237e:	4650      	mov	r0, sl
 8022380:	f000 f87a 	bl	8022478 <scalbn>
 8022384:	ec51 0b10 	vmov	r0, r1, d0
 8022388:	ec53 2b18 	vmov	r2, r3, d8
 802238c:	f7ff bbed 	b.w	8021b6a <__ieee754_pow+0x162>
 8022390:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8022394:	4b2f      	ldr	r3, [pc, #188]	; (8022454 <__ieee754_pow+0xa4c>)
 8022396:	429e      	cmp	r6, r3
 8022398:	f77f af0c 	ble.w	80221b4 <__ieee754_pow+0x7ac>
 802239c:	4b2e      	ldr	r3, [pc, #184]	; (8022458 <__ieee754_pow+0xa50>)
 802239e:	440b      	add	r3, r1
 80223a0:	4303      	orrs	r3, r0
 80223a2:	d009      	beq.n	80223b8 <__ieee754_pow+0x9b0>
 80223a4:	2200      	movs	r2, #0
 80223a6:	2300      	movs	r3, #0
 80223a8:	ec51 0b18 	vmov	r0, r1, d8
 80223ac:	f7de fb9a 	bl	8000ae4 <__aeabi_dcmplt>
 80223b0:	3800      	subs	r0, #0
 80223b2:	bf18      	it	ne
 80223b4:	2001      	movne	r0, #1
 80223b6:	e447      	b.n	8021c48 <__ieee754_pow+0x240>
 80223b8:	4622      	mov	r2, r4
 80223ba:	462b      	mov	r3, r5
 80223bc:	f7dd ff68 	bl	8000290 <__aeabi_dsub>
 80223c0:	4642      	mov	r2, r8
 80223c2:	464b      	mov	r3, r9
 80223c4:	f7de fba2 	bl	8000b0c <__aeabi_dcmpge>
 80223c8:	2800      	cmp	r0, #0
 80223ca:	f43f aef3 	beq.w	80221b4 <__ieee754_pow+0x7ac>
 80223ce:	e7e9      	b.n	80223a4 <__ieee754_pow+0x99c>
 80223d0:	f04f 0a00 	mov.w	sl, #0
 80223d4:	e71a      	b.n	802220c <__ieee754_pow+0x804>
 80223d6:	ec51 0b10 	vmov	r0, r1, d0
 80223da:	4619      	mov	r1, r3
 80223dc:	e7d4      	b.n	8022388 <__ieee754_pow+0x980>
 80223de:	2000      	movs	r0, #0
 80223e0:	491b      	ldr	r1, [pc, #108]	; (8022450 <__ieee754_pow+0xa48>)
 80223e2:	f7ff bb30 	b.w	8021a46 <__ieee754_pow+0x3e>
 80223e6:	2000      	movs	r0, #0
 80223e8:	2100      	movs	r1, #0
 80223ea:	f7ff bb2c 	b.w	8021a46 <__ieee754_pow+0x3e>
 80223ee:	4630      	mov	r0, r6
 80223f0:	4639      	mov	r1, r7
 80223f2:	f7ff bb28 	b.w	8021a46 <__ieee754_pow+0x3e>
 80223f6:	9204      	str	r2, [sp, #16]
 80223f8:	f7ff bb7a 	b.w	8021af0 <__ieee754_pow+0xe8>
 80223fc:	2300      	movs	r3, #0
 80223fe:	f7ff bb64 	b.w	8021aca <__ieee754_pow+0xc2>
 8022402:	bf00      	nop
 8022404:	f3af 8000 	nop.w
 8022408:	00000000 	.word	0x00000000
 802240c:	3fe62e43 	.word	0x3fe62e43
 8022410:	fefa39ef 	.word	0xfefa39ef
 8022414:	3fe62e42 	.word	0x3fe62e42
 8022418:	0ca86c39 	.word	0x0ca86c39
 802241c:	be205c61 	.word	0xbe205c61
 8022420:	72bea4d0 	.word	0x72bea4d0
 8022424:	3e663769 	.word	0x3e663769
 8022428:	c5d26bf1 	.word	0xc5d26bf1
 802242c:	3ebbbd41 	.word	0x3ebbbd41
 8022430:	af25de2c 	.word	0xaf25de2c
 8022434:	3f11566a 	.word	0x3f11566a
 8022438:	16bebd93 	.word	0x16bebd93
 802243c:	3f66c16c 	.word	0x3f66c16c
 8022440:	5555553e 	.word	0x5555553e
 8022444:	3fc55555 	.word	0x3fc55555
 8022448:	3fe00000 	.word	0x3fe00000
 802244c:	fff00000 	.word	0xfff00000
 8022450:	3ff00000 	.word	0x3ff00000
 8022454:	4090cbff 	.word	0x4090cbff
 8022458:	3f6f3400 	.word	0x3f6f3400
 802245c:	652b82fe 	.word	0x652b82fe
 8022460:	3c971547 	.word	0x3c971547

08022464 <fabs>:
 8022464:	ec51 0b10 	vmov	r0, r1, d0
 8022468:	ee10 2a10 	vmov	r2, s0
 802246c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022470:	ec43 2b10 	vmov	d0, r2, r3
 8022474:	4770      	bx	lr
	...

08022478 <scalbn>:
 8022478:	b570      	push	{r4, r5, r6, lr}
 802247a:	ec55 4b10 	vmov	r4, r5, d0
 802247e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8022482:	4606      	mov	r6, r0
 8022484:	462b      	mov	r3, r5
 8022486:	b999      	cbnz	r1, 80224b0 <scalbn+0x38>
 8022488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802248c:	4323      	orrs	r3, r4
 802248e:	d03f      	beq.n	8022510 <scalbn+0x98>
 8022490:	4b35      	ldr	r3, [pc, #212]	; (8022568 <scalbn+0xf0>)
 8022492:	4629      	mov	r1, r5
 8022494:	2200      	movs	r2, #0
 8022496:	ee10 0a10 	vmov	r0, s0
 802249a:	f7de f8b1 	bl	8000600 <__aeabi_dmul>
 802249e:	4b33      	ldr	r3, [pc, #204]	; (802256c <scalbn+0xf4>)
 80224a0:	4604      	mov	r4, r0
 80224a2:	460d      	mov	r5, r1
 80224a4:	429e      	cmp	r6, r3
 80224a6:	da10      	bge.n	80224ca <scalbn+0x52>
 80224a8:	a327      	add	r3, pc, #156	; (adr r3, 8022548 <scalbn+0xd0>)
 80224aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ae:	e01f      	b.n	80224f0 <scalbn+0x78>
 80224b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80224b4:	4291      	cmp	r1, r2
 80224b6:	d10c      	bne.n	80224d2 <scalbn+0x5a>
 80224b8:	ee10 2a10 	vmov	r2, s0
 80224bc:	4620      	mov	r0, r4
 80224be:	4629      	mov	r1, r5
 80224c0:	f7dd fee8 	bl	8000294 <__adddf3>
 80224c4:	4604      	mov	r4, r0
 80224c6:	460d      	mov	r5, r1
 80224c8:	e022      	b.n	8022510 <scalbn+0x98>
 80224ca:	460b      	mov	r3, r1
 80224cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80224d0:	3936      	subs	r1, #54	; 0x36
 80224d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80224d6:	4296      	cmp	r6, r2
 80224d8:	dd0d      	ble.n	80224f6 <scalbn+0x7e>
 80224da:	2d00      	cmp	r5, #0
 80224dc:	a11c      	add	r1, pc, #112	; (adr r1, 8022550 <scalbn+0xd8>)
 80224de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80224e2:	da02      	bge.n	80224ea <scalbn+0x72>
 80224e4:	a11c      	add	r1, pc, #112	; (adr r1, 8022558 <scalbn+0xe0>)
 80224e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80224ea:	a319      	add	r3, pc, #100	; (adr r3, 8022550 <scalbn+0xd8>)
 80224ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224f0:	f7de f886 	bl	8000600 <__aeabi_dmul>
 80224f4:	e7e6      	b.n	80224c4 <scalbn+0x4c>
 80224f6:	1872      	adds	r2, r6, r1
 80224f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80224fc:	428a      	cmp	r2, r1
 80224fe:	dcec      	bgt.n	80224da <scalbn+0x62>
 8022500:	2a00      	cmp	r2, #0
 8022502:	dd08      	ble.n	8022516 <scalbn+0x9e>
 8022504:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802250c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022510:	ec45 4b10 	vmov	d0, r4, r5
 8022514:	bd70      	pop	{r4, r5, r6, pc}
 8022516:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802251a:	da08      	bge.n	802252e <scalbn+0xb6>
 802251c:	2d00      	cmp	r5, #0
 802251e:	a10a      	add	r1, pc, #40	; (adr r1, 8022548 <scalbn+0xd0>)
 8022520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022524:	dac0      	bge.n	80224a8 <scalbn+0x30>
 8022526:	a10e      	add	r1, pc, #56	; (adr r1, 8022560 <scalbn+0xe8>)
 8022528:	e9d1 0100 	ldrd	r0, r1, [r1]
 802252c:	e7bc      	b.n	80224a8 <scalbn+0x30>
 802252e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022532:	3236      	adds	r2, #54	; 0x36
 8022534:	4620      	mov	r0, r4
 8022536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802253a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802253e:	2200      	movs	r2, #0
 8022540:	4b0b      	ldr	r3, [pc, #44]	; (8022570 <scalbn+0xf8>)
 8022542:	e7d5      	b.n	80224f0 <scalbn+0x78>
 8022544:	f3af 8000 	nop.w
 8022548:	c2f8f359 	.word	0xc2f8f359
 802254c:	01a56e1f 	.word	0x01a56e1f
 8022550:	8800759c 	.word	0x8800759c
 8022554:	7e37e43c 	.word	0x7e37e43c
 8022558:	8800759c 	.word	0x8800759c
 802255c:	fe37e43c 	.word	0xfe37e43c
 8022560:	c2f8f359 	.word	0xc2f8f359
 8022564:	81a56e1f 	.word	0x81a56e1f
 8022568:	43500000 	.word	0x43500000
 802256c:	ffff3cb0 	.word	0xffff3cb0
 8022570:	3c900000 	.word	0x3c900000

08022574 <with_errno>:
 8022574:	b570      	push	{r4, r5, r6, lr}
 8022576:	4604      	mov	r4, r0
 8022578:	460d      	mov	r5, r1
 802257a:	4616      	mov	r6, r2
 802257c:	f7fb fa78 	bl	801da70 <__errno>
 8022580:	4629      	mov	r1, r5
 8022582:	6006      	str	r6, [r0, #0]
 8022584:	4620      	mov	r0, r4
 8022586:	bd70      	pop	{r4, r5, r6, pc}

08022588 <xflow>:
 8022588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802258a:	4614      	mov	r4, r2
 802258c:	461d      	mov	r5, r3
 802258e:	b108      	cbz	r0, 8022594 <xflow+0xc>
 8022590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022594:	4620      	mov	r0, r4
 8022596:	4629      	mov	r1, r5
 8022598:	e9cd 2300 	strd	r2, r3, [sp]
 802259c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80225a0:	f7de f82e 	bl	8000600 <__aeabi_dmul>
 80225a4:	2222      	movs	r2, #34	; 0x22
 80225a6:	b003      	add	sp, #12
 80225a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80225ac:	f7ff bfe2 	b.w	8022574 <with_errno>

080225b0 <__math_uflow>:
 80225b0:	b508      	push	{r3, lr}
 80225b2:	2200      	movs	r2, #0
 80225b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80225b8:	f7ff ffe6 	bl	8022588 <xflow>
 80225bc:	ec41 0b10 	vmov	d0, r0, r1
 80225c0:	bd08      	pop	{r3, pc}

080225c2 <__math_oflow>:
 80225c2:	b508      	push	{r3, lr}
 80225c4:	2200      	movs	r2, #0
 80225c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80225ca:	f7ff ffdd 	bl	8022588 <xflow>
 80225ce:	ec41 0b10 	vmov	d0, r0, r1
 80225d2:	bd08      	pop	{r3, pc}

080225d4 <__ieee754_sqrt>:
 80225d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d8:	4e6b      	ldr	r6, [pc, #428]	; (8022788 <__ieee754_sqrt+0x1b4>)
 80225da:	ee10 0a10 	vmov	r0, s0
 80225de:	ee10 2a10 	vmov	r2, s0
 80225e2:	ec55 4b10 	vmov	r4, r5, d0
 80225e6:	43ae      	bics	r6, r5
 80225e8:	4629      	mov	r1, r5
 80225ea:	462b      	mov	r3, r5
 80225ec:	d10d      	bne.n	802260a <__ieee754_sqrt+0x36>
 80225ee:	f7de f807 	bl	8000600 <__aeabi_dmul>
 80225f2:	4602      	mov	r2, r0
 80225f4:	460b      	mov	r3, r1
 80225f6:	4620      	mov	r0, r4
 80225f8:	4629      	mov	r1, r5
 80225fa:	f7dd fe4b 	bl	8000294 <__adddf3>
 80225fe:	4604      	mov	r4, r0
 8022600:	460d      	mov	r5, r1
 8022602:	ec45 4b10 	vmov	d0, r4, r5
 8022606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802260a:	2d00      	cmp	r5, #0
 802260c:	dc0b      	bgt.n	8022626 <__ieee754_sqrt+0x52>
 802260e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022612:	4326      	orrs	r6, r4
 8022614:	d0f5      	beq.n	8022602 <__ieee754_sqrt+0x2e>
 8022616:	b135      	cbz	r5, 8022626 <__ieee754_sqrt+0x52>
 8022618:	f7dd fe3a 	bl	8000290 <__aeabi_dsub>
 802261c:	4602      	mov	r2, r0
 802261e:	460b      	mov	r3, r1
 8022620:	f7de f918 	bl	8000854 <__aeabi_ddiv>
 8022624:	e7eb      	b.n	80225fe <__ieee754_sqrt+0x2a>
 8022626:	1509      	asrs	r1, r1, #20
 8022628:	f000 8091 	beq.w	802274e <__ieee754_sqrt+0x17a>
 802262c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022630:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8022634:	07c9      	lsls	r1, r1, #31
 8022636:	f04f 0500 	mov.w	r5, #0
 802263a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802263e:	ea4f 0666 	mov.w	r6, r6, asr #1
 8022642:	f04f 0e16 	mov.w	lr, #22
 8022646:	46ac      	mov	ip, r5
 8022648:	bf58      	it	pl
 802264a:	005b      	lslpl	r3, r3, #1
 802264c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8022650:	bf5c      	itt	pl
 8022652:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8022656:	0052      	lslpl	r2, r2, #1
 8022658:	005b      	lsls	r3, r3, #1
 802265a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802265e:	0052      	lsls	r2, r2, #1
 8022660:	eb0c 0001 	add.w	r0, ip, r1
 8022664:	4298      	cmp	r0, r3
 8022666:	bfde      	ittt	le
 8022668:	1a1b      	suble	r3, r3, r0
 802266a:	eb00 0c01 	addle.w	ip, r0, r1
 802266e:	186d      	addle	r5, r5, r1
 8022670:	f1be 0e01 	subs.w	lr, lr, #1
 8022674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022678:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802267c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8022680:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022684:	d1ec      	bne.n	8022660 <__ieee754_sqrt+0x8c>
 8022686:	4674      	mov	r4, lr
 8022688:	2720      	movs	r7, #32
 802268a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802268e:	4563      	cmp	r3, ip
 8022690:	eb01 000e 	add.w	r0, r1, lr
 8022694:	dc02      	bgt.n	802269c <__ieee754_sqrt+0xc8>
 8022696:	d114      	bne.n	80226c2 <__ieee754_sqrt+0xee>
 8022698:	4290      	cmp	r0, r2
 802269a:	d812      	bhi.n	80226c2 <__ieee754_sqrt+0xee>
 802269c:	2800      	cmp	r0, #0
 802269e:	eb00 0e01 	add.w	lr, r0, r1
 80226a2:	da59      	bge.n	8022758 <__ieee754_sqrt+0x184>
 80226a4:	f1be 0f00 	cmp.w	lr, #0
 80226a8:	db56      	blt.n	8022758 <__ieee754_sqrt+0x184>
 80226aa:	f10c 0801 	add.w	r8, ip, #1
 80226ae:	eba3 030c 	sub.w	r3, r3, ip
 80226b2:	4290      	cmp	r0, r2
 80226b4:	440c      	add	r4, r1
 80226b6:	eba2 0200 	sub.w	r2, r2, r0
 80226ba:	bf88      	it	hi
 80226bc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80226c0:	46c4      	mov	ip, r8
 80226c2:	005b      	lsls	r3, r3, #1
 80226c4:	3f01      	subs	r7, #1
 80226c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80226ca:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80226ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80226d2:	d1dc      	bne.n	802268e <__ieee754_sqrt+0xba>
 80226d4:	4313      	orrs	r3, r2
 80226d6:	d01b      	beq.n	8022710 <__ieee754_sqrt+0x13c>
 80226d8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 802278c <__ieee754_sqrt+0x1b8>
 80226dc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8022790 <__ieee754_sqrt+0x1bc>
 80226e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80226e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80226e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80226ec:	f7dd fdd0 	bl	8000290 <__aeabi_dsub>
 80226f0:	4602      	mov	r2, r0
 80226f2:	460b      	mov	r3, r1
 80226f4:	4640      	mov	r0, r8
 80226f6:	4649      	mov	r1, r9
 80226f8:	f7de f9fe 	bl	8000af8 <__aeabi_dcmple>
 80226fc:	b140      	cbz	r0, 8022710 <__ieee754_sqrt+0x13c>
 80226fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8022702:	e9da 0100 	ldrd	r0, r1, [sl]
 8022706:	e9db 2300 	ldrd	r2, r3, [fp]
 802270a:	d127      	bne.n	802275c <__ieee754_sqrt+0x188>
 802270c:	3501      	adds	r5, #1
 802270e:	463c      	mov	r4, r7
 8022710:	106a      	asrs	r2, r5, #1
 8022712:	07e9      	lsls	r1, r5, #31
 8022714:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8022718:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802271c:	bf48      	it	mi
 802271e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8022722:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8022726:	461c      	mov	r4, r3
 8022728:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 802272c:	e769      	b.n	8022602 <__ieee754_sqrt+0x2e>
 802272e:	0ad3      	lsrs	r3, r2, #11
 8022730:	3815      	subs	r0, #21
 8022732:	0552      	lsls	r2, r2, #21
 8022734:	2b00      	cmp	r3, #0
 8022736:	d0fa      	beq.n	802272e <__ieee754_sqrt+0x15a>
 8022738:	02dc      	lsls	r4, r3, #11
 802273a:	d50a      	bpl.n	8022752 <__ieee754_sqrt+0x17e>
 802273c:	f1c1 0420 	rsb	r4, r1, #32
 8022740:	1e4d      	subs	r5, r1, #1
 8022742:	fa22 f404 	lsr.w	r4, r2, r4
 8022746:	408a      	lsls	r2, r1
 8022748:	1b41      	subs	r1, r0, r5
 802274a:	4323      	orrs	r3, r4
 802274c:	e76e      	b.n	802262c <__ieee754_sqrt+0x58>
 802274e:	4608      	mov	r0, r1
 8022750:	e7f0      	b.n	8022734 <__ieee754_sqrt+0x160>
 8022752:	005b      	lsls	r3, r3, #1
 8022754:	3101      	adds	r1, #1
 8022756:	e7ef      	b.n	8022738 <__ieee754_sqrt+0x164>
 8022758:	46e0      	mov	r8, ip
 802275a:	e7a8      	b.n	80226ae <__ieee754_sqrt+0xda>
 802275c:	e9da 8900 	ldrd	r8, r9, [sl]
 8022760:	f7dd fd98 	bl	8000294 <__adddf3>
 8022764:	4602      	mov	r2, r0
 8022766:	460b      	mov	r3, r1
 8022768:	4640      	mov	r0, r8
 802276a:	4649      	mov	r1, r9
 802276c:	f7de f9ba 	bl	8000ae4 <__aeabi_dcmplt>
 8022770:	b128      	cbz	r0, 802277e <__ieee754_sqrt+0x1aa>
 8022772:	1ca0      	adds	r0, r4, #2
 8022774:	f104 0402 	add.w	r4, r4, #2
 8022778:	bf08      	it	eq
 802277a:	3501      	addeq	r5, #1
 802277c:	e7c8      	b.n	8022710 <__ieee754_sqrt+0x13c>
 802277e:	3401      	adds	r4, #1
 8022780:	f024 0401 	bic.w	r4, r4, #1
 8022784:	e7c4      	b.n	8022710 <__ieee754_sqrt+0x13c>
 8022786:	bf00      	nop
 8022788:	7ff00000 	.word	0x7ff00000
 802278c:	20000238 	.word	0x20000238
 8022790:	20000240 	.word	0x20000240

08022794 <_init>:
 8022794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022796:	bf00      	nop
 8022798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802279a:	bc08      	pop	{r3}
 802279c:	469e      	mov	lr, r3
 802279e:	4770      	bx	lr

080227a0 <_fini>:
 80227a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227a2:	bf00      	nop
 80227a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80227a6:	bc08      	pop	{r3}
 80227a8:	469e      	mov	lr, r3
 80227aa:	4770      	bx	lr
